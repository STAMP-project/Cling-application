import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(15706);
        boolean boolean9 = dateTimeFormatter2.isParser();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZone(dateTimeZone11);
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = locale13.getDisplayScript(locale17);
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.lang.String str22 = locale13.getDisplayName(locale20);
        java.lang.String str23 = locale20.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withLocale(locale20);
        java.lang.Integer int25 = dateTimeFormatter24.getPivotYear();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 3);
        org.joda.time.DateTime dateTime39 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime41 = dateTime30.minus((long) '#');
        org.joda.time.DateTime.Property property42 = dateTime30.weekyear();
        org.joda.time.Instant instant43 = dateTime30.toInstant();
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        boolean boolean45 = instant43.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime46 = instant43.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime47 = instant43.toMutableDateTimeISO();
        org.joda.time.Instant instant50 = instant43.withDurationAdded((long) (-1645432682), 888);
        org.joda.time.MutableDateTime mutableDateTime51 = instant43.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = dateTimeFormatter24.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime51, "Tue Feb 01 14:47:49 UTC 2022", 53550);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "tedesco (Germania)" + "'", str22, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian (Italy)" + "'", str23, "Italian (Italy)");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int12 = dateTimeZone10.getOffset((long) (byte) 1);
        long long14 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 3);
        long long17 = dateTimeZone8.convertLocalToUTC((long) 9, false);
        java.lang.String str18 = dateTimeZone8.toString();
        org.joda.time.DateTime dateTime19 = dateTime6.toDateTime(dateTimeZone8);
        int int20 = dateTime19.getDayOfWeek();
        org.joda.time.Instant instant21 = dateTime19.toInstant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3L + "'", long14 == 3L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        int int10 = dateTimeField8.getMaximumValue(3L);
        java.lang.String str12 = dateTimeField8.getAsShortText((long) 2922789);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime15.plus(readablePeriod18);
        int int20 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime15);
        long long23 = dateTimeField8.getDifferenceAsLong((-770547548000L), 1645454890052L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime29.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime29.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime29.plus(readablePeriod43);
        org.joda.time.DateTime.Property property45 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property45.getFieldType();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getVariant();
        java.util.Locale locale50 = java.util.Locale.US;
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.lang.String str55 = locale50.getDisplayCountry(locale54);
        java.lang.String str56 = locale50.getISO3Language();
        java.lang.String str57 = locale50.getScript();
        java.lang.String str58 = locale48.getDisplayCountry(locale50);
        java.lang.String str59 = locale48.getISO3Country();
        int int60 = property45.getMaximumTextLength(locale48);
        java.lang.String str61 = dateTimeField8.getAsText(7020010, locale48);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-671111L) + "'", long23 == (-671111L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "United States" + "'", str55, "United States");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "China" + "'", str58, "China");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CHN" + "'", str59, "CHN");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7020010" + "'", str61, "7020010");
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(4, 53, (int) (byte) 100);
        calendar0.setTimeInMillis(1645455034032L);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455034032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=34,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(32, 233, 23, 390);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.LocalTime localTime15 = property13.withMinimumValue();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 2922789, locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(0);
        org.joda.time.Chronology chronology14 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        long long18 = dateTimeField15.addWrapField((long) 366, 0);
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getCountry();
        java.lang.String str22 = dateTimeField15.getAsShortText(11, locale20);
        java.lang.String str23 = locale4.getDisplayName(locale20);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale4);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.010" + "'", str3, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 366L + "'", long18 == 366L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CN" + "'", str21, "CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11" + "'", str22, "11");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645455217153,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=37,MILLISECOND=153,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        long long49 = dateTime48.getMillis();
        boolean boolean50 = interval20.equals((java.lang.Object) long49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        boolean boolean60 = dateTimeFieldType51.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.centuryOfEra();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(chronology58);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.Interval interval65 = interval20.withChronology(chronology58);
        boolean boolean66 = interval8.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTime dateTime67 = interval8.getEnd();
        int int68 = dateTime67.getYearOfCentury();
        org.joda.time.DateTime.Property property69 = dateTime67.millisOfDay();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        org.joda.time.LocalTime localTime75 = dateTime74.toLocalTime();
        int int76 = dateTime74.getMonthOfYear();
        int int77 = dateTime74.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int83 = dateTimeZone81.getOffset((long) (byte) 1);
        long long85 = dateTimeZone79.getMillisKeepLocal(dateTimeZone81, (long) 3);
        org.joda.time.DateTime dateTime86 = dateTime74.toDateTime(dateTimeZone79);
        org.joda.time.DateTime.Property property87 = dateTime86.millisOfDay();
        java.lang.String str88 = property87.getAsText();
        org.joda.time.DateTime dateTime89 = property87.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime90 = dateTime89.withEarlierOffsetAtOverlap();
        long long91 = property69.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime89);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645402199990L + "'", long49 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 3L + "'", long85 == 3L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "600000" + "'", str88, "600000");
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 60000L + "'", long91 == 60000L);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        java.util.Locale locale6 = java.util.Locale.US;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayCountry(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.util.Date date13 = calendar12.getTime();
        boolean boolean14 = date1.before(date13);
        date1.setTime(1645454951382L);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromDateFields(date1);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Feb 21 14:49:11 UTC 2022");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United States" + "'", str11, "United States");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455217458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=37,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 21 14:53:37 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) 'u');
        org.joda.time.LocalTime localTime15 = localTime11.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime15.toDateTimeToday(dateTimeZone17);
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale30);
        java.util.Locale locale37 = java.util.Locale.ITALY;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale30.getDisplayCountry(locale37);
        java.lang.String str40 = dateTimeZone17.getShortName((long) 2022, locale30);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(7L, dateTimeZone17);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfMonth();
        boolean boolean44 = dateTime41.isBefore(63808218000000L);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getISO3Language();
        java.lang.String str49 = locale45.getDisplayName(locale46);
        java.util.Locale locale50 = locale45.stripExtensions();
        java.lang.String str51 = locale45.getLanguage();
        java.util.Calendar calendar52 = dateTime41.toCalendar(locale45);
        calendar52.setTimeInMillis((-62162812260010L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "United States" + "'", str35, "United States");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455217475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=37,MILLISECOND=475,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Stati Uniti" + "'", str39, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "English" + "'", str49, "English");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "en" + "'", str51, "en");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62162812260010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        long long22 = durationField19.getMillis(0);
        long long25 = durationField19.getMillis(53486, 1645454935799L);
        long long28 = durationField19.subtract(63113903986L, 53401530);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 192549600000L + "'", long25 == 192549600000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-192182394096014L) + "'", long28 == (-192182394096014L));
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Period period11 = interval9.toPeriod();
        java.lang.String str12 = interval9.toString();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.get();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        long long23 = interval21.toDurationMillis();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval21.toPeriod(periodType24);
        org.joda.time.Interval interval26 = interval9.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = interval26.toPeriod(periodType27);
        org.joda.time.ReadableInterval readableInterval29 = null;
        boolean boolean30 = interval26.contains(readableInterval29);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        int int37 = dateTime35.getMonthOfYear();
        int int38 = dateTime35.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int44 = dateTimeZone42.getOffset((long) (byte) 1);
        long long46 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 3);
        org.joda.time.DateTime dateTime47 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.Interval interval48 = interval26.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Chronology chronology49 = interval26.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.weekyears();
        org.joda.time.DurationField durationField51 = chronology49.centuries();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromMillisOfDay(13952616475924L, chronology49);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str12, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.util.Calendar calendar35 = dateTime25.toCalendar(locale31);
        java.util.Date date36 = calendar35.getTime();
        int int37 = calendar35.getFirstDayOfWeek();
        java.util.Date date38 = calendar35.getTime();
        java.lang.String str39 = date38.toLocaleString();
        int int40 = date38.getTimezoneOffset();
        date38.setMonth(86399);
        date38.setSeconds(2186);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455217593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=37,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Dec 21 00:45:26 UTC 9221");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Feb 21, 2022 12:09:59 AM" + "'", str39, "Feb 21, 2022 12:09:59 AM");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone18);
        long long21 = dateTimeZone18.previousTransition(1645454984563L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645454984563L + "'", long21 == 1645454984563L);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("English", strMap14);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap21);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.parse("de");
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strMap28);
        java.util.Collection<java.util.Locale> localeCollection30 = null;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, localeCollection30);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList31, filteringMode32);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList33, filteringMode34);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet17, filteringMode34);
        java.lang.String str37 = java.util.Locale.lookupTag(languageRangeList12, (java.util.Collection<java.lang.String>) strList36);
        java.lang.String str38 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strList36);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("15 May 1905 15:00:00 GMT");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        int int8 = dateTime6.getMonthOfYear();
        int int9 = dateTime6.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        org.joda.time.DateTime dateTime18 = dateTime6.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        boolean boolean50 = dateTimeZone37.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime51 = dateTime18.toDateTime(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) "15 May 1905 15:00:00 GMT", dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"15 May 1905 15:00:00 GMT\" is malformed at \" May 1905 15:00:00 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2605186408940L);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localTime17, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.dayOfYear();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        int[] intArray33 = chronology8.get((org.joda.time.ReadablePeriod) period31, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField34 = chronology8.weekOfWeekyear();
        boolean boolean35 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType1.getField(chronology41);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay(1645455093057L, chronology41);
        org.joda.time.LocalTime localTime47 = localTime45.withMillisOfSecond(26);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        int int18 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayCountry(locale26);
        java.lang.String str28 = locale22.getISO3Language();
        java.lang.String str29 = locale22.getScript();
        java.lang.String str30 = locale20.getDisplayCountry(locale22);
        int int31 = property19.getMaximumTextLength(locale20);
        java.lang.String str33 = locale20.getUnicodeLocaleType("CN");
        java.util.Locale.Builder builder34 = builder9.setLocale(locale20);
        java.util.Locale.Builder builder36 = builder34.removeUnicodeLocaleAttribute("53474795");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder34.removeUnicodeLocaleAttribute("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[minuteOfHour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "United States" + "'", str27, "United States");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime.Property property26 = localTime22.millisOfSecond();
        org.joda.time.LocalTime.Property property27 = localTime22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.lang.String str30 = dateTimeField28.getAsShortText(34712722139903L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "59" + "'", str30, "59");
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        java.util.Date date1 = new java.util.Date(1645402140000L);
        date1.setHours(5);
        date1.setYear(23);
        long long6 = date1.getTime();
        int int7 = date1.getYear();
        java.time.Instant instant8 = date1.toInstant();
        org.junit.Assert.assertEquals(date1.toString(), "Wed Feb 21 05:09:00 UTC 1923");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1478803860000L) + "'", long6 == (-1478803860000L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        long long30 = dateTimeZone16.convertLocalToUTC((long) 27424249, false);
        java.lang.String str31 = dateTimeZone16.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 27424239L + "'", long30 == 27424239L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 1);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone13);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime21 = localTime1.minusMinutes(419);
        int int22 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property23 = localTime1.secondOfMinute();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.LocalTime localTime25 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(intArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = null;
        java.lang.String str3 = dateTime1.toString(dateTimeFormatter2);
        int int4 = dateTime1.getEra();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, readableDuration5);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime1, chronology12);
        int int16 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime1.withCenturyOfEra(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withDayOfMonth(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str3, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        int int15 = dateTime14.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        int int18 = gregorianCalendar16.getActualMaximum(16);
        gregorianCalendar16.setFirstDayOfWeek(6);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar16);
        java.util.Date date23 = new java.util.Date((long) (byte) 100);
        date23.setMinutes(11);
        long long26 = date23.getTime();
        date23.setDate(9);
        gregorianCalendar16.setTime(date23);
        int int30 = date23.getHours();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7200000 + "'", int18 == 7200000);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Jan 09 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 660100L + "'", long26 == 660100L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 370, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.millisOfSecond();
        int int23 = dateTimeField21.get(3201788880000L);
        boolean boolean25 = dateTimeField21.isLeap(53546072L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale locale8 = builder0.build();
        java.util.Locale.Builder builder10 = builder0.removeUnicodeLocaleAttribute("53335372");
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setExtension(' ', "53430715");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.minuteOfHour();
        long long16 = dateTimeField14.roundHalfEven((long) 39);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime42 = dateTime8.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime42.withDate(5, 31, 9722);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.util.Locale locale10 = new java.util.Locale("hours");
        java.lang.String str11 = locale10.getDisplayCountry();
        java.util.Locale locale12 = locale10.stripExtensions();
        java.lang.String str13 = dateTimeField7.getAsText(419, locale10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        int int22 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime.Property property23 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime25 = property23.addCopy(6);
        int int26 = localTime25.getSecondOfMinute();
        int int27 = localTime25.size();
        int int28 = localTime25.getMillisOfDay();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weekyears();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        int[] intArray46 = chronology35.get((org.joda.time.ReadablePartial) localTime44, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField47 = chronology35.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = localTime52.getChronology();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 1, chronology55);
        boolean boolean57 = dateTimeFieldType48.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.centuryOfEra();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        int int67 = dateTimeField58.getMaximumValue((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) 1);
        int[] intArray70 = localTime69.getValues();
        int int71 = dateTimeField47.getMaximumValue((org.joda.time.ReadablePartial) localTime66, intArray70);
        org.joda.time.LocalTime.Property property72 = localTime66.millisOfSecond();
        org.joda.time.LocalTime localTime73 = property72.getLocalTime();
        java.lang.String str74 = localTime73.toString();
        int[] intArray75 = localTime73.getValues();
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder77.clearExtensions();
        java.util.Locale.Builder builder80 = builder78.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale81 = builder78.build();
        java.util.Locale locale83 = new java.util.Locale("hours");
        java.lang.String str85 = locale83.getExtension('u');
        java.lang.String str86 = locale81.getDisplayCountry(locale83);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField7.set((org.joda.time.ReadablePartial) localTime25, (-1645455016), intArray75, "01-Feb-2022 14:47:49", locale83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"01-Feb-2022 14:47:49\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals(locale10.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "419" + "'", str13, "419");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22200000 + "'", int28 == 22200000);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2922789 + "'", int67 == 2922789);
        org.junit.Assert.assertNotNull(intArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 366 + "'", int71 == 366);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "00:00:00.001" + "'", str74, "00:00:00.001");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals(locale83.toString(), "hours");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("USA");
        java.util.Locale locale6 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("minuteOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: minuteOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.Interval interval35 = interval8.toInterval();
        long long36 = interval35.getStartMillis();
        org.joda.time.Interval interval37 = interval35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Interval interval39 = interval37.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval41 = interval39.withEndMillis(1645396259990L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645402199990L + "'", long36 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale5 = new java.util.Locale("", "hi!", "");
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        java.lang.String str14 = locale8.getISO3Language();
        java.util.Locale locale16 = new java.util.Locale("hours");
        java.lang.String str18 = locale16.getExtension('u');
        java.lang.String str19 = locale8.getDisplayVariant(locale16);
        java.lang.String str20 = locale8.toLanguageTag();
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.lang.String str29 = locale28.getVariant();
        java.lang.String str30 = locale24.getDisplayScript(locale28);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.getMinimumValue();
        org.joda.time.DateTime dateTime39 = property37.roundHalfEvenCopy();
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.lang.String str45 = locale40.getDisplayCountry(locale44);
        java.lang.String str46 = property37.getAsText(locale44);
        java.lang.String str47 = locale28.getDisplayVariant(locale44);
        java.lang.String str48 = locale22.getDisplayVariant(locale28);
        java.util.Locale.setDefault(category0, locale28);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United States" + "'", str6, "United States");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United States" + "'", str13, "United States");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertEquals(locale16.toString(), "hours");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "en-US" + "'", str20, "en-US");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "United States" + "'", str45, "United States");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "10" + "'", str46, "10");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property6.withMinimumValue();
        org.joda.time.Interval interval10 = property6.toInterval();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        int int17 = dateTime15.getMonthOfYear();
        int int18 = dateTime15.getHourOfDay();
        boolean boolean19 = interval10.contains((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.LocalTime localTime32 = localTime30.plusHours((int) 'u');
        org.joda.time.LocalTime localTime34 = localTime30.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int40 = dateTimeZone38.getOffset((long) (byte) 1);
        long long42 = dateTimeZone36.getMillisKeepLocal(dateTimeZone38, (long) 3);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 9, false);
        java.lang.String str46 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime47 = localTime34.toDateTimeToday(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readableDuration48);
        org.joda.time.DateTime dateTime51 = dateTime47.minusHours((int) 'a');
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        int int59 = property58.get();
        org.joda.time.Interval interval60 = property58.toInterval();
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.Period period62 = interval60.toPeriod();
        org.joda.time.DateTime dateTime63 = dateTime51.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.PeriodType periodType64 = period62.getPeriodType();
        int int65 = period62.size();
        org.joda.time.Interval interval66 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(interval66);
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime27.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property34 = dateTime27.centuryOfEra();
        org.joda.time.DateTime.Property property35 = dateTime27.centuryOfEra();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale.Builder builder39 = builder37.clear();
        java.util.Locale.Builder builder41 = builder37.setVariant("53275870");
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder43 = builder41.clearExtensions();
        java.util.Locale locale44 = builder43.build();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = property35.setCopy("Stati Uniti", locale44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Stati Uniti\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) '4');
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((int) 'u');
        int int12 = dateTimeFormatter8.getDefaultYear();
        int int13 = dateTimeFormatter8.getDefaultYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        int int8 = dateTimeZone2.getOffsetFromLocal(31536000000L);
        int int10 = dateTimeZone2.getOffset((long) 302);
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale11);
        java.lang.String str14 = calendar13.getCalendarType();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromCalendarFields(calendar13);
        calendar13.clear();
        calendar13.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromCalendarFields(calendar13);
        org.joda.time.LocalTime localTime23 = localTime21.withSecondOfMinute(4);
        boolean boolean24 = dateTimeZone2.equals((java.lang.Object) localTime21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        int[] intArray32 = chronology7.get((org.joda.time.ReadablePeriod) period30, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField33 = chronology7.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType0.getField(chronology40);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.year();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.LocalTime localTime56 = localTime53.withMillisOfDay(47);
        org.joda.time.LocalTime localTime58 = localTime56.minusMinutes(13);
        java.util.Locale locale59 = java.util.Locale.US;
        java.util.Locale locale60 = locale59.stripExtensions();
        boolean boolean61 = locale60.hasExtensions();
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str65 = locale64.getVariant();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = locale62.getCountry();
        java.lang.String str68 = locale60.getDisplayScript(locale62);
        java.lang.String str69 = locale60.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localTime58, locale60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English (United States)" + "'", str63, "English (United States)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str66, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "US" + "'", str67, "US");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "English" + "'", str69, "English");
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(28, 62, 9560441);
        java.util.Date date16 = new java.util.Date(1645402140000L);
        date16.setMinutes((int) (byte) 10);
        long long19 = date16.getTime();
        int int20 = date16.getTimezoneOffset();
        int int21 = date16.getSeconds();
        int int22 = date16.getMinutes();
        java.lang.String str23 = date16.toGMTString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder24 = builder0.setInstant(date16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 00:10:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645402200000L + "'", long19 == 1645402200000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "21 Feb 2022 00:10:00 GMT" + "'", str23, "21 Feb 2022 00:10:00 GMT");
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        long long15 = calendar13.getTimeInMillis();
        java.util.TimeZone timeZone16 = calendar13.getTimeZone();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("hours");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        java.lang.String str20 = dateTimeField10.getAsText(1645454878702L, locale18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        org.joda.time.DateTime dateTime34 = dateTime25.withZone(dateTimeZone27);
        org.joda.time.DateTime dateTime36 = dateTime25.minus((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime25.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime25.plus(readablePeriod39);
        org.joda.time.DateTime.Property property41 = dateTime25.millisOfDay();
        org.joda.time.DateTime dateTime42 = property41.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property41.getFieldType();
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale44.getVariant();
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.lang.String str51 = locale46.getDisplayCountry(locale50);
        java.lang.String str52 = locale46.getISO3Language();
        java.lang.String str53 = locale46.getScript();
        java.lang.String str54 = locale44.getDisplayCountry(locale46);
        java.lang.String str55 = locale44.getISO3Country();
        int int56 = property41.getMaximumTextLength(locale44);
        java.lang.String str57 = locale44.getDisplayVariant();
        int int58 = dateTimeField10.getMaximumShortTextLength(locale44);
        java.lang.String str59 = locale44.getLanguage();
        java.lang.String str60 = locale44.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455219196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=39,MILLISECOND=196,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645455219196L + "'", long15 == 1645455219196L);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "hours");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645455219196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=39,MILLISECOND=196,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2" + "'", str20, "2");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "United States" + "'", str51, "United States");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "China" + "'", str54, "China");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CHN" + "'", str55, "CHN");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval8.toPeriod(periodType11);
        java.lang.String str13 = period12.toString();
        int int14 = period12.size();
        int int15 = period12.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(893);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        int int7 = dateTimeFormatter3.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant8 = org.joda.time.Instant.parse("hourofday", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.lang.String str9 = dateTimeZone2.getShortName(17L, locale7);
        java.lang.String str10 = locale7.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English" + "'", str8, "English");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        int int14 = dateTime12.getMonthOfYear();
        int int15 = dateTime12.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(1970);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime36.plus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = dateTime33.withFields((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        long long54 = dateTimeZone45.convertLocalToUTC((long) 9, false);
        java.lang.String str55 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime56 = localTime40.toDateTimeToday(dateTimeZone45);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone45.getShortName((long) 100, locale58);
        boolean boolean61 = dateTimeZone45.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime62 = dateTime28.withZoneRetainFields(dateTimeZone45);
        int int64 = dateTimeZone45.getStandardOffset(2863424L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter6.withZone(dateTimeZone45);
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.lang.String str68 = dateTimeZone45.getShortName(53311058L, locale67);
        java.lang.String str69 = locale67.getDisplayScript();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.010" + "'", str68, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder7 = builder3.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setRegion("2022-02-21T00:09:59.990Z/2022-02-21T00:10:59.990Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-21T00:09:59.990Z/2022-02-21T00:10:59.990Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = interval8.toDuration();
        org.joda.time.DateTime dateTime21 = interval8.getEnd();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((-1663837435000L));
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Interval interval25 = interval8.withStart((org.joda.time.ReadableInstant) instant23);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        calendar0.set(16, 600, (int) (byte) -1, 31, (int) (byte) 10);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localTime23, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.weekyear();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 5, chronology14);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Period period37 = interval36.toPeriod();
        org.joda.time.DateTime dateTime38 = dateTime27.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear(3);
        boolean boolean42 = dateTime38.isEqual(175367340000L);
        java.util.Date date43 = dateTime38.toDate();
        calendar0.setTime(date43);
        date43.setSeconds(54);
        int int47 = date43.getSeconds();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=60005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=5,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Thu Jan 01 00:01:54 UTC 1970");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 54 + "'", int47 == 54);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((-1645401599));
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeFormatter10.parseMillis("53510244");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(0L, dateTimeZone15);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(dateTimeZone15);
        org.joda.time.Chronology chronology20 = chronology7.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField21 = chronology7.secondOfDay();
        int int24 = dateTimeField21.getDifference(32779L, 59453L);
        long long26 = dateTimeField21.roundCeiling(1645455055884L);
        long long28 = dateTimeField21.remainder(1645455009493L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-26) + "'", int24 == (-26));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645455056000L + "'", long26 == 1645455056000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 493L + "'", long28 == 493L);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-885), 35, 999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -885 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology8.getZone();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        boolean boolean21 = interval19.isAfterNow();
        org.joda.time.DateTime dateTime22 = interval19.getEnd();
        int int23 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(16);
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone5 = calendar2.getTimeZone();
        java.lang.String str6 = calendar2.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar2.roll((-95), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455219713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=39,MILLISECOND=713,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField31 = chronology5.dayOfYear();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (byte) 1, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfMonth();
        org.joda.time.Chronology chronology43 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfHalfday();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        int int54 = localTime48.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.LocalTime.Property property55 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime57 = property55.addCopy(6);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.get();
        org.joda.time.Interval interval66 = property64.toInterval();
        org.joda.time.Interval interval67 = interval66.toInterval();
        long long68 = interval66.toDurationMillis();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = interval66.toPeriod(periodType69);
        org.joda.time.LocalTime localTime72 = localTime57.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 8);
        org.joda.time.Period period73 = period70.toPeriod();
        java.lang.String str74 = period70.toString();
        long long77 = chronology43.add((org.joda.time.ReadablePeriod) period70, 10346400000L, 590);
        long long80 = chronology5.add((org.joda.time.ReadablePeriod) period70, (-1663844635000L), (-27423369));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType82 = period70.getFieldType(600059);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 60000L + "'", long68 == 60000L);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT1M" + "'", str74, "PT1M");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 10381800000L + "'", long77 == 10381800000L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-3309246775000L) + "'", long80 == (-3309246775000L));
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        java.lang.String str4 = date1.toLocaleString();
        java.lang.String str5 = date1.toGMTString();
        java.time.Instant instant6 = date1.toInstant();
        date1.setMinutes(34);
        int int9 = date1.getYear();
        java.util.Date date15 = new java.util.Date(0, (int) ' ', 0, 9, 43);
        date15.setYear((int) (byte) 0);
        boolean boolean18 = date1.after(date15);
        int int19 = date1.getTimezoneOffset();
        int int20 = date1.getMinutes();
        date1.setTime((long) 53509260);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 14:51:49 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str4, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 Jan 1970 00:11:00 GMT" + "'", str5, "1 Jan 1970 00:11:00 GMT");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Aug 31 09:43:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 34 + "'", int20 == 34);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        calendar0.set((-100800), 600, 8);
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        long long8 = calendar0.getTimeInMillis();
        java.util.Date date9 = calendar0.getTime();
        date9.setYear((int) (byte) -1);
        java.util.Date date17 = new java.util.Date(2000, (-14), 419, 19353600, (int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            int int18 = date9.compareTo(date17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: sun.util.calendar.JulianCalendar$Date cannot be cast to sun.util.calendar.Gregorian$Date");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-3241594890380202,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=100751,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=39,MILLISECOND=798,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455219798L + "'", long2 == 1645455219798L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3241594890380202L) + "'", long8 == (-3241594890380202L));
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sun Jan 08 14:53:39 UTC 1899");
        org.junit.Assert.assertEquals(date17.toString(), "Sun Oct 30 02:00:00 UTC 6107");
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(10L);
        org.joda.time.DateTimeZone dateTimeZone2 = dateTime1.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.Interval interval53 = interval8.withChronology(chronology46);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.LocalTime localTime69 = dateTime68.toLocalTime();
        org.joda.time.DateTime.Property property70 = dateTime68.minuteOfHour();
        int int71 = property70.getMinimumValue();
        org.joda.time.DateTime dateTime72 = property70.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime75 = null;
        boolean boolean76 = dateTimeZone74.isLocalDateTimeGap(localDateTime75);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(dateTimeZone74);
        org.joda.time.DateTime dateTime78 = dateTime72.withZoneRetainFields(dateTimeZone74);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((java.lang.Object) dateTime78);
        org.joda.time.Interval interval80 = interval63.withEnd((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval80.toPeriod(periodType81);
        long long85 = chronology46.add((org.joda.time.ReadablePeriod) period82, 660100L, (int) ' ');
        org.joda.time.DurationField durationField86 = chronology46.hours();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 660100L + "'", long85 == 660100L);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(dateTimeZone16);
        org.joda.time.LocalTime.Property property29 = localTime28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        boolean boolean31 = dateTimeField30.isSupported();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale36.getDisplayLanguage();
        java.lang.String str39 = dateTimeField30.getAsText(0L, locale36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property17 = dateTime4.dayOfYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTime dateTime26 = localTime25.toDateTimeToday();
        org.joda.time.DateTime dateTime28 = dateTime26.minus(0L);
        int int29 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.Interval interval39 = interval38.toInterval();
        long long40 = interval38.toDurationMillis();
        org.joda.time.Interval interval42 = interval38.withStartMillis(10L);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (byte) 1, chronology56);
        int[] intArray59 = chronology48.get((org.joda.time.ReadablePartial) localTime57, (long) (short) -1);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfHour();
        int int67 = property66.getMinimumValue();
        org.joda.time.DateTime dateTime68 = property66.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime71 = null;
        boolean boolean72 = dateTimeZone70.isLocalDateTimeGap(localDateTime71);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(dateTimeZone70);
        org.joda.time.DateTime dateTime74 = dateTime68.withZoneRetainFields(dateTimeZone70);
        org.joda.time.DateTime dateTime75 = localTime57.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        boolean boolean76 = interval38.equals((java.lang.Object) localTime57);
        org.joda.time.LocalTime localTime78 = localTime57.minusSeconds((int) (short) 10);
        boolean boolean79 = dateTime4.equals((java.lang.Object) localTime57);
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localTime82.toDateTime(readableInstant83);
        org.joda.time.LocalTime localTime85 = dateTime84.toLocalTime();
        int int86 = dateTime84.getMonthOfYear();
        int int87 = dateTime84.getHourOfDay();
        org.joda.time.DateTime.Property property88 = dateTime84.dayOfMonth();
        org.joda.time.DateTime dateTime89 = dateTime84.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime91 = dateTime84.minusSeconds(590);
        org.joda.time.DateTime dateTime93 = dateTime91.minus((-1663844635000L));
        org.joda.time.DateTime.Property property94 = dateTime91.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField95 = property94.getField();
        boolean boolean96 = localTime57.equals((java.lang.Object) property94);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean10 = dateTimeZone1.isStandardOffset(92233081435722221L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime13 = null;
        boolean boolean14 = dateTimeZone12.isLocalDateTimeGap(localDateTime13);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone12);
        boolean boolean17 = dateTimeZone12.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter6.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter6.withPivotYear((-1645432682));
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1, chronology28);
        boolean boolean30 = dateTimeFieldType21.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.centuryOfEra();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter20.withChronology(chronology28);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int42 = dateTimeZone40.getOffset((long) (byte) 1);
        long long44 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 3);
        long long47 = dateTimeZone38.convertLocalToUTC((long) 9, false);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(8362592323200099L, dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter35.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant50 = org.joda.time.Instant.parse("Feb 1, 2022 2:47:49 PM", dateTimeFormatter35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(2000);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) chronology5, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((long) '#');
        org.joda.time.DateTime.Property property28 = dateTime16.weekyear();
        org.joda.time.DateTime dateTime30 = dateTime16.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime16.minusHours(600);
        org.joda.time.DateTime dateTime34 = dateTime16.minusMillis(19);
        org.joda.time.Interval interval35 = interval8.withStart((org.joda.time.ReadableInstant) dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime16.withDayOfYear(22383);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22383 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField41 = chronology15.weekOfWeekyear();
        boolean boolean42 = dateTimeFieldType8.isSupported(chronology15);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType8.getField(chronology48);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.fromMillisOfDay(1645455093057L, chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(7020010, 53401530, 0, 53545, 53535925, 51, 43419768, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53545 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMinutes(5);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.dayOfYear();
        org.joda.time.DurationField durationField31 = durationFieldType12.getField(chronology18);
        org.joda.time.DurationField durationField32 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology18.millisOfSecond();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime11, chronology18);
        org.joda.time.DateTime dateTime35 = dateTime11.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime11.withDayOfWeek(53554);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53554 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        java.util.Calendar.Builder builder21 = builder15.set(4, 2922789);
        java.util.Calendar.Builder builder24 = builder21.set((int) (byte) 10, 83400000);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime31 = localTime27.withMillisOfDay(9);
        int int32 = localTime27.getHourOfDay();
        int[] intArray33 = localTime27.getValues();
        java.util.Calendar.Builder builder34 = builder21.setFields(intArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder37 = builder34.set(425, 58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("7 Feb 3870 01:09:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 7 Feb 3870 01:09:00 GMT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePartial) localTime23, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField26 = chronology14.dayOfYear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Period period37 = interval35.toPeriod();
        int[] intArray39 = chronology14.get((org.joda.time.ReadablePeriod) period37, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localTime55, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField58 = chronology46.dayOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType40.getField(chronology46);
        int int60 = period37.get(durationFieldType40);
        int[] intArray63 = chronology7.get((org.joda.time.ReadablePeriod) period37, 1645454861756L, (long) 9);
        org.joda.time.DurationField durationField64 = chronology7.hours();
        long long68 = chronology7.add(0L, (long) (-457055), (int) (short) 100);
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.fromMillisOfDay(3180000L, chronology7);
        org.joda.time.DateTimeField dateTimeField70 = chronology7.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-45705500L) + "'", long68 == (-45705500L));
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 9, false);
        java.lang.String str45 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime46 = localTime30.toDateTimeToday(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime49 = dateTime16.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds(52);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMillis(53321001);
        org.joda.time.DateTime dateTime55 = dateTime51.plusMinutes(623000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime12, 53418634L);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay(227209396026062000L, chronology6);
        int int19 = localTime18.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime22 = localTime18.withPeriodAdded(readablePeriod20, 4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[14, 50, 18, 634]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getDurationField();
        long long14 = durationField11.add((long) 48, 0);
        long long17 = durationField11.add((long) 53, (-882L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 48L + "'", long14 == 48L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3175199947L) + "'", long17 == (-3175199947L));
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.weekyear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 5, chronology7);
        org.joda.time.DurationField durationField21 = chronology7.weekyears();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) 32770, chronology7);
        org.joda.time.DateTimeField dateTimeField23 = chronology7.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology12.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTimeFormatter27.print((long) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int11 = dateTimeZone9.getOffset((long) (byte) 1);
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 3);
        org.joda.time.DateTime dateTime14 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = dateTime5.minus((long) '#');
        org.joda.time.DateTime.Property property17 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime19 = dateTime5.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime5.getZone();
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 12);
        boolean boolean24 = dateTimeZone20.isStandardOffset((long) '4');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property27 = dateTime26.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime26.withYear(53);
        int int30 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int42 = dateTimeZone40.getOffset((long) (byte) 1);
        long long44 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 3);
        org.joda.time.DateTime dateTime45 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime36.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.DateTime dateTime51 = dateTime36.plus(readablePeriod50);
        org.joda.time.DateTime.Property property52 = dateTime36.millisOfDay();
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = property52.getAsShortText(locale53);
        java.lang.String str56 = locale53.getExtension('u');
        java.lang.String str57 = dateTimeZone20.getShortName(5382789L, locale53);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(1L, dateTimeZone20);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "600000" + "'", str54, "600000");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.withYearOfCentury(0);
        org.joda.time.DateTime.Property property31 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime34 = property31.setCopy("21");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645402199990L + "'", long28 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(7);
        org.joda.time.DateTime dateTime49 = dateTime45.plusWeeks((int) (short) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime54.plusWeeks(0);
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime45.toDateTime(chronology59);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property63 = dateTime45.year();
        int int64 = dateTime45.getEra();
        org.joda.time.DateTime dateTime65 = dateTime45.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime67 = dateTime65.withWeekyear(125);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        java.util.Date date8 = calendar6.getTime();
        date8.setTime(35L);
        date8.setTime(13392000000000L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455220797,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=40,MILLISECOND=797,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 14:53:40 UTC 2022");
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Wed May 18 00:00:00 UTC 2394");
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMinutes(27424235);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("English");
        java.lang.String str22 = locale21.getLanguage();
        java.util.Calendar calendar23 = dateTime19.toCalendar(locale21);
        int int25 = calendar23.getActualMinimum(8);
        // The following exception was thrown during execution in test generation
        try {
            calendar23.setWeekDate(2922789, 891, 599994);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 599994");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "english");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "english" + "'", str22, "english");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=3290856182990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=43,SECOND=3,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfDay();
        long long14 = dateTimeField11.getDifferenceAsLong(53314993L, 151200000L);
        org.joda.time.DurationField durationField15 = dateTimeField11.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1631L) + "'", long14 == (-1631L));
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("days", strMap1);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("US", 0.0d);
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("US", 0.0d);
        double double11 = languageRange10.getWeight();
        double double12 = languageRange10.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] { languageRange7, languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList22, strMap23);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.US;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.String str34 = locale33.getScript();
        java.util.Locale locale35 = java.util.Locale.US;
        java.lang.String str36 = locale35.getDisplayLanguage();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale35);
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.lang.String str43 = locale42.toLanguageTag();
        java.util.Locale locale44 = java.util.Locale.US;
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.lang.String str49 = locale44.getDisplayCountry(locale48);
        java.util.Locale locale50 = java.util.Locale.US;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale60);
        java.util.Locale locale62 = java.util.Locale.US;
        java.lang.String str63 = locale62.getDisplayName();
        java.util.Locale locale64 = java.util.Locale.UK;
        java.util.Locale locale66 = new java.util.Locale("hours");
        java.util.Locale locale67 = java.util.Locale.US;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale67);
        java.util.Locale locale73 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale73);
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale28, locale31, locale33, locale35, locale38, locale42, locale48, locale50, locale53, locale54, locale56, locale60, locale62, locale64, locale66, locale67, locale73 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList80);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "English" + "'", str36, "English");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455220856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=40,MILLISECOND=856,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "und" + "'", str43, "und");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "United States" + "'", str49, "United States");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "English (United States)" + "'", str63, "English (United States)");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale66.toString(), "hours");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English" + "'", str68, "English");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645455220856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=40,MILLISECOND=856,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale73.toString(), "_HI!");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(localeList82);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder0.clear();
        java.util.Locale locale8 = builder0.build();
        java.util.Locale.Builder builder10 = builder0.removeUnicodeLocaleAttribute("53335372");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder0.setExtension('a', "anglais (Etats-Unis)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: anglais (Etats [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.dayOfYear();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("English");
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = dateTimeField9.getAsShortText((long) 70, locale12);
        java.lang.String str15 = locale12.getVariant();
        java.lang.String str16 = locale12.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "english");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "english" + "'", str13, "english");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set(1645402140000L, 53509260);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53509260 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("53");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.LocalTime localTime29 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        long long40 = dateTimeZone31.convertLocalToUTC((long) 9, false);
        java.lang.String str41 = dateTimeZone31.toString();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(dateTimeZone31);
        org.joda.time.LocalTime localTime44 = localTime42.withMillisOfDay((int) 'u');
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = localTime48.getChronology();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfMonth();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.LocalTime localTime57 = localTime55.plusHours((int) 'u');
        org.joda.time.LocalTime localTime59 = localTime55.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int65 = dateTimeZone63.getOffset((long) (byte) 1);
        long long67 = dateTimeZone61.getMillisKeepLocal(dateTimeZone63, (long) 3);
        long long70 = dateTimeZone61.convertLocalToUTC((long) 9, false);
        java.lang.String str71 = dateTimeZone61.toString();
        org.joda.time.DateTime dateTime72 = localTime59.toDateTimeToday(dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.DateTime dateTime74 = dateTime72.minus(readableDuration73);
        org.joda.time.DateTime dateTime76 = dateTime72.minusHours((int) 'a');
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localTime79.toDateTime(readableInstant80);
        org.joda.time.LocalTime localTime82 = dateTime81.toLocalTime();
        org.joda.time.DateTime.Property property83 = dateTime81.minuteOfHour();
        java.util.Locale locale84 = java.util.Locale.US;
        java.lang.String str85 = locale84.getDisplayName();
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.lang.String str87 = locale84.getDisplayName(locale86);
        java.lang.String str88 = property83.getAsText(locale84);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = property83.getFieldType();
        int int90 = dateTime76.get(dateTimeFieldType89);
        org.joda.time.LocalTime.Property property91 = localTime44.property(dateTimeFieldType89);
        java.lang.String str92 = dateTimeFieldType89.toString();
        boolean boolean93 = localTime29.isSupported(dateTimeFieldType89);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray94 = localTime29.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 3L + "'", long67 == 3L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.010" + "'", str71, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "English (United States)" + "'", str85, "English (United States)");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "de");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str87, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "10" + "'", str88, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 53 + "'", int90 == 53);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "minuteOfHour" + "'", str92, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray94);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 9, false);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay((int) 'u');
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfMonth();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.LocalTime localTime27 = localTime25.plusHours((int) 'u');
        org.joda.time.LocalTime localTime29 = localTime25.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        long long40 = dateTimeZone31.convertLocalToUTC((long) 9, false);
        java.lang.String str41 = dateTimeZone31.toString();
        org.joda.time.DateTime dateTime42 = localTime29.toDateTimeToday(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.DateTime dateTime46 = dateTime42.minusHours((int) 'a');
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.DateTime.Property property53 = dateTime51.minuteOfHour();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale54.getDisplayName();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale54.getDisplayName(locale56);
        java.lang.String str58 = property53.getAsText(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property53.getFieldType();
        int int60 = dateTime46.get(dateTimeFieldType59);
        org.joda.time.LocalTime.Property property61 = localTime14.property(dateTimeFieldType59);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.weekyears();
        org.joda.time.DurationField durationField69 = chronology67.halfdays();
        org.joda.time.DateTimeField dateTimeField70 = chronology67.millisOfDay();
        org.joda.time.DateTimeField dateTimeField71 = chronology67.minuteOfHour();
        boolean boolean72 = dateTimeFieldType59.isSupported(chronology67);
        org.joda.time.DurationField durationField73 = chronology67.years();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "English (United States)" + "'", str55, "English (United States)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str57, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 53 + "'", int60 == 53);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withSecondOfMinute(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) 53554);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        java.util.Date date5 = new java.util.Date(0, 20, 4, 623000, (int) (short) 1);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Sep 29 08:01:00 UTC 1972");
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) localTime2);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localTime2.getValue((-457055));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -457055");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.weekyear();
        int int26 = dateTimeField24.get((long) 7);
        java.util.Locale locale28 = java.util.Locale.US;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getVariant();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale28);
        java.lang.String str32 = locale28.getScript();
        java.lang.String str33 = dateTimeField24.getAsShortText(59, locale28);
        java.lang.String str35 = locale28.getExtension('u');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter6.withLocale(locale28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTimeFormatter36.parseDateTime("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645455221223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=41,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "59" + "'", str33, "59");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.getName();
        long long13 = dateTimeField9.add((long) 1970, (long) (short) 0);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.parse("14");
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime15);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField9.set((long) 53, "109");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 109 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1970L + "'", long13 == 1970L);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setTimeInMillis(1645454972384L);
        int int8 = calendar0.getLeastMaximum(11);
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455221360L + "'", long2 == 1645455221360L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.DateTime.Property property35 = dateTime34.weekOfWeekyear();
        java.util.GregorianCalendar gregorianCalendar36 = dateTime34.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean28 = interval26.equals((java.lang.Object) 'u');
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Period period39 = interval37.toPeriod();
        org.joda.time.Interval interval40 = interval37.toInterval();
        boolean boolean42 = interval37.isAfter((-1L));
        boolean boolean43 = interval26.isBefore((org.joda.time.ReadableInterval) interval37);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfMonth();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.LocalTime localTime56 = localTime54.plusHours((int) 'u');
        org.joda.time.LocalTime localTime58 = localTime54.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int64 = dateTimeZone62.getOffset((long) (byte) 1);
        long long66 = dateTimeZone60.getMillisKeepLocal(dateTimeZone62, (long) 3);
        long long69 = dateTimeZone60.convertLocalToUTC((long) 9, false);
        java.lang.String str70 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime71 = localTime58.toDateTimeToday(dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.minus(readableDuration72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = dateTime71.toDateTime(dateTimeZone75);
        org.joda.time.DateTime.Property property78 = dateTime71.centuryOfEra();
        org.joda.time.DateTime dateTime80 = dateTime71.plusYears(86399999);
        boolean boolean81 = interval26.contains((org.joda.time.ReadableInstant) dateTime71);
        long long82 = interval26.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3L + "'", long66 == 3L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645402199990L + "'", long82 == 1645402199990L);
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter8.withChronology(chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((-14));
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter25.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTime dateTime39 = localTime38.toDateTimeToday();
        org.joda.time.LocalTime localTime41 = localTime38.minusMinutes(1);
        org.joda.time.LocalTime.Property property42 = localTime38.millisOfDay();
        int int43 = localTime38.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean45 = localTime38.isSupported(dateTimeFieldType44);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        int int52 = dateTime50.getMonthOfYear();
        int int53 = dateTime50.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int59 = dateTimeZone57.getOffset((long) (byte) 1);
        long long61 = dateTimeZone55.getMillisKeepLocal(dateTimeZone57, (long) 3);
        org.joda.time.DateTime dateTime62 = dateTime50.toDateTime(dateTimeZone55);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime65 = dateTime50.withFieldAdded(durationFieldType63, 2022);
        org.joda.time.LocalTime localTime67 = localTime38.withFieldAdded(durationFieldType63, 1439);
        org.joda.time.DateTime dateTime69 = dateTime30.withFieldAdded(durationFieldType63, 12);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int73 = dateTimeZone71.getOffset((long) (byte) 1);
        java.lang.String str74 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime75 = dateTime69.toDateTime(dateTimeZone71);
        org.joda.time.DateTime.Property property76 = dateTime75.minuteOfDay();
        org.joda.time.DateTime dateTime77 = property76.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int82 = dateTimeZone80.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(0L, dateTimeZone80);
        org.joda.time.LocalTime localTime84 = org.joda.time.LocalTime.now(dateTimeZone80);
        org.joda.time.DateTime dateTime85 = dateTime77.toDateTime(dateTimeZone80);
        java.util.Locale locale87 = java.util.Locale.JAPAN;
        java.lang.String str88 = dateTimeZone80.getShortName(7092000000L, locale87);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime90 = new org.joda.time.LocalTime((java.lang.Object) dateTimeFormatter25, dateTimeZone80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00:00.010" + "'", str88, "+00:00:00.010");
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.minusMillis(6);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField34 = durationFieldType15.getField(chronology21);
        org.joda.time.DurationField durationField35 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology21.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime14.toMutableDateTime(chronology21);
        org.joda.time.DateTime.Property property38 = dateTime14.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime14.withDayOfMonth(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField13 = chronology7.days();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1, chronology28);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localTime29, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.weekyear();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 5, chronology20);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.DateTime dateTime44 = dateTime33.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutablePeriod mutablePeriod45 = period43.toMutablePeriod();
        int[] intArray47 = chronology7.get((org.joda.time.ReadablePeriod) period43, 7687676336460000L);
        org.joda.time.DateTimeField dateTimeField48 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField50 = chronology7.weekOfWeekyear();
        long long54 = chronology7.add((long) 934, 1645455003838L, 892);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 12711105, 0, 9, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1467745863424430L + "'", long54 == 1467745863424430L);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        long long12 = dateTimeField10.remainder((long) 53464);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 474L + "'", long12 == 474L);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 1, chronology40);
        int[] intArray43 = chronology32.get((org.joda.time.ReadablePartial) localTime41, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField45 = durationFieldType26.getField(chronology32);
        org.joda.time.DurationFieldType durationFieldType46 = durationField45.getType();
        org.joda.time.LocalTime localTime48 = localTime22.withFieldAdded(durationFieldType46, 4);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        int int57 = localTime51.compareTo((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.LocalTime.Property property58 = localTime51.hourOfDay();
        org.joda.time.LocalTime localTime60 = property58.addCopy(6);
        int int61 = localTime60.getSecondOfMinute();
        org.joda.time.LocalTime.Property property62 = localTime60.secondOfMinute();
        org.joda.time.LocalTime localTime63 = property62.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime64 = localTime48.withFields((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = null;
        boolean boolean66 = localTime48.isSupported(dateTimeFieldType65);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int71 = dateTimeZone69.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(0L, dateTimeZone69);
        java.util.TimeZone timeZone73 = dateTimeZone69.toTimeZone();
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str76 = locale75.getCountry();
        java.lang.String str77 = dateTimeZone69.getShortName(0L, locale75);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime(dateTimeZone69);
        boolean boolean79 = localTime48.equals((java.lang.Object) dateTimeZone69);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime.Property property81 = dateTime80.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CN" + "'", str76, "CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.010" + "'", str77, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        java.lang.String str44 = localTime43.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = localTime43.toString("clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: c");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "00:00:00.001" + "'", str44, "00:00:00.001");
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("53528311");
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        long long13 = dateTimeField10.addWrapField((long) 366, 0);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.017Z/1970-01-01T00:00:00.017Z");
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField10.getAsShortText(0L, locale16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 366L + "'", long13 == 366L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        java.util.Date date5 = new java.util.Date(1970, 0, 9, 7, 32769);
        date5.setSeconds((-143999));
        date5.setHours(746);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder15 = builder10.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.lang.String str21 = locale16.getDisplayCountry(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale16);
        java.util.TimeZone timeZone23 = calendar22.getTimeZone();
        java.util.Calendar.Builder builder24 = builder15.setTimeZone(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        java.util.Date date31 = new java.util.Date(1970, 0, 9, 7, 32769);
        java.lang.String str32 = date31.toGMTString();
        calendar25.setTime(date31);
        boolean boolean34 = date5.after(date31);
        java.lang.String str35 = date5.toGMTString();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Mar 02 10:09:01 UTC 3870");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United States" + "'", str21, "United States");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455222038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=42,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=59960912940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3870,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 01 01:09:00 UTC 3870");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1 Feb 3870 01:09:00 GMT" + "'", str32, "1 Feb 3870 01:09:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2 Mar 3870 10:09:01 GMT" + "'", str35, "2 Mar 3870 10:09:01 GMT");
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        int int8 = property7.getMinimumValue();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localTime25, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = chronology16.dayOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Period period39 = interval37.toPeriod();
        int[] intArray41 = chronology16.get((org.joda.time.ReadablePeriod) period39, (long) (byte) 100);
        org.joda.time.DateTime dateTime42 = dateTime9.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        org.joda.time.DateTime dateTime57 = dateTime48.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime59 = dateTime48.minus((long) '#');
        org.joda.time.DateTime.Property property60 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime62 = dateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime63 = dateTime48.toDateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime66 = dateTime48.plusSeconds(5);
        int int67 = dateTime66.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) '4');
        int int9 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((int) 'u');
        java.util.Locale locale12 = dateTimeFormatter8.getLocale();
        java.io.Writer writer13 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfMonth();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.LocalTime localTime26 = localTime24.plusHours((int) 'u');
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int34 = dateTimeZone32.getOffset((long) (byte) 1);
        long long36 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, (long) 3);
        long long39 = dateTimeZone30.convertLocalToUTC((long) 9, false);
        java.lang.String str40 = dateTimeZone30.toString();
        org.joda.time.DateTime dateTime41 = localTime28.toDateTimeToday(dateTimeZone30);
        org.joda.time.LocalTime localTime43 = localTime28.minusMillis(21);
        int int44 = localTime43.size();
        org.joda.time.Chronology chronology45 = localTime43.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer13, (org.joda.time.ReadablePartial) localTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(chronology45);
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(23);
        int int4 = dateTimeZone2.getOffset((long) 44);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((-3786627599883L), dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime4.monthOfYear();
        java.util.Locale locale12 = new java.util.Locale("English");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        int int14 = property10.getMaximumTextLength(locale12);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        java.lang.String str16 = dateTimeField15.toString();
        boolean boolean17 = dateTimeField15.isSupported();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale12.toString(), "english");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[monthOfYear]" + "'", str16, "DateTimeField[monthOfYear]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        java.util.Date date1 = new java.util.Date(1645455208626L);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Feb 21 14:53:28 UTC 2022");
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("419");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale.Builder builder6 = builder2.setVariant("53275870");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.setRegion("");
        java.util.Locale locale10 = builder9.build();
        boolean boolean11 = locale1.equals((java.lang.Object) locale10);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalTime localTime24 = localTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime localTime26 = localTime14.minusMillis((-95));
        org.joda.time.LocalTime.Property property27 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property27.addNoWrapToCopy(2);
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale30);
        calendar32.setMinimalDaysInFirstWeek(5);
        java.lang.Object obj35 = calendar32.clone();
        boolean boolean36 = localTime29.equals(obj35);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.LocalTime localTime49 = localTime47.plusHours((int) 'u');
        org.joda.time.LocalTime localTime51 = localTime47.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int57 = dateTimeZone55.getOffset((long) (byte) 1);
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone55, (long) 3);
        long long62 = dateTimeZone53.convertLocalToUTC((long) 9, false);
        java.lang.String str63 = dateTimeZone53.toString();
        org.joda.time.DateTime dateTime64 = localTime51.toDateTimeToday(dateTimeZone53);
        org.joda.time.LocalTime localTime66 = localTime51.minusSeconds(35);
        boolean boolean67 = localTime29.isEqual((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.LocalTime localTime69 = localTime66.plusHours(1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455222225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=42,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "java.util.GregorianCalendar[time=1645455222225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=42,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "java.util.GregorianCalendar[time=1645455222225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=42,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "java.util.GregorianCalendar[time=1645455222225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=42,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 3L + "'", long59 == 3L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.010" + "'", str63, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localTime69);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.joda.time.LocalTime localTime14 = localTime11.minusMinutes(1);
        org.joda.time.LocalTime.Property property15 = localTime11.millisOfDay();
        int int16 = localTime11.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean18 = localTime11.isSupported(dateTimeFieldType17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        int int26 = dateTime23.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime38 = dateTime23.withFieldAdded(durationFieldType36, 2022);
        org.joda.time.LocalTime localTime40 = localTime11.withFieldAdded(durationFieldType36, 1439);
        org.joda.time.DateTime dateTime42 = dateTime3.withFieldAdded(durationFieldType36, 12);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int46 = dateTimeZone44.getOffset((long) (byte) 1);
        java.lang.String str47 = dateTimeZone44.toString();
        org.joda.time.DateTime dateTime48 = dateTime42.toDateTime(dateTimeZone44);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-98727291751800010L), 60120L, dateTimeZone44);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Interval interval59 = interval58.toInterval();
        long long60 = interval58.toDurationMillis();
        org.joda.time.Interval interval61 = interval58.toInterval();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int72 = dateTimeZone70.getOffset((long) (byte) 1);
        long long74 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 3);
        org.joda.time.DateTime dateTime75 = dateTime66.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime77 = dateTime75.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar78 = dateTime75.toGregorianCalendar();
        org.joda.time.DateTime.Property property79 = dateTime75.weekyear();
        org.joda.time.DateTime dateTime80 = property79.roundHalfCeilingCopy();
        boolean boolean81 = interval61.isBefore((org.joda.time.ReadableInstant) dateTime80);
        boolean boolean82 = interval49.overlaps((org.joda.time.ReadableInterval) interval61);
        long long83 = interval61.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3L + "'", long74 == 3L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(gregorianCalendar78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 60000L + "'", long83 == 60000L);
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withWeekyear(15);
        org.joda.time.DateTime dateTime23 = dateTime4.plusWeeks(600);
        org.joda.time.DateTime.Property property24 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime4.minusMillis(42);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds(600000);
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = locale29.getDisplayCountry();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int37 = dateTimeZone35.getOffset((long) (byte) 1);
        long long39 = dateTimeZone33.getMillisKeepLocal(dateTimeZone35, (long) 3);
        long long42 = dateTimeZone33.convertLocalToUTC((long) 9, false);
        java.lang.String str43 = dateTimeZone33.toString();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(dateTimeZone33);
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getVariant();
        java.lang.String str49 = dateTimeZone33.getShortName(100L, locale46);
        java.lang.String str50 = locale29.getDisplayScript(locale46);
        java.util.Calendar calendar51 = dateTime26.toCalendar(locale29);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645402199948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=9,SECOND=59,MILLISECOND=958,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(14);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(3);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        gregorianCalendar16.setTimeInMillis((long) 34);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap22);
        java.util.Collection<java.util.Locale> localeCollection24 = null;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, localeCollection24);
        boolean boolean26 = gregorianCalendar16.after((java.lang.Object) languageRangeList20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap27);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53622456" + "'", str11, "53622456");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(languageRangeList28);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) '#');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(2);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime.Property property10 = dateTime8.dayOfMonth();
        java.util.Locale locale11 = null;
        int int12 = property10.getMaximumTextLength(locale11);
        java.lang.String str13 = property10.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime4.minusMinutes(100);
        org.joda.time.DateTime dateTime19 = dateTime4.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis(86400009L);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime26.plusHours(1970);
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalTime localTime54 = localTime50.plus(readablePeriod53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean56 = localTime54.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = dateTime47.withFields((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int63 = dateTimeZone61.getOffset((long) (byte) 1);
        long long65 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 3);
        long long68 = dateTimeZone59.convertLocalToUTC((long) 9, false);
        java.lang.String str69 = dateTimeZone59.toString();
        org.joda.time.DateTime dateTime70 = localTime54.toDateTimeToday(dateTimeZone59);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone59.getShortName((long) 100, locale72);
        boolean boolean75 = dateTimeZone59.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime76 = dateTime42.withZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTime dateTime77 = dateTime21.toDateTime(dateTimeZone59);
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfWeek();
        org.joda.time.DateTime.Property property79 = dateTime77.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property79.getFieldType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((-259200000L), dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded((long) 53283606, 87);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone10);
        org.joda.time.LocalTime localTime15 = localTime13.minusMinutes(3);
        int int16 = localTime15.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime20 = null;
        boolean boolean21 = dateTimeZone19.isLocalDateTimeGap(localDateTime20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone19);
        org.joda.time.LocalTime localTime23 = localTime15.withFields((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.Chronology chronology24 = localTime22.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.getMinimumValue();
        org.joda.time.DateTime dateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone35.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime41 = dateTime39.withYearOfEra(6);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfMonth();
        org.joda.time.DateTime dateTime43 = property42.withMaximumValue();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.get();
        org.joda.time.Interval interval52 = property50.toInterval();
        org.joda.time.Interval interval53 = interval52.toInterval();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.getMinimumValue();
        org.joda.time.DateTime dateTime62 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone64.isLocalDateTimeGap(localDateTime65);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = dateTime62.withZoneRetainFields(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) dateTime68);
        org.joda.time.Interval interval70 = interval53.withEnd((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period71 = interval70.toPeriod();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationAfterStart(readableDuration72);
        org.joda.time.Duration duration74 = interval73.toDuration();
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.DateTime dateTime76 = dateTime43.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.LocalTime localTime77 = localTime22.minus((org.joda.time.ReadablePeriod) period75);
        java.lang.String str78 = period75.toString();
        org.joda.time.DateTime dateTime80 = dateTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period75, 259);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0S" + "'", str78, "PT0S");
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.monthOfYear();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale23);
        java.lang.String str26 = locale23.getUnicodeLocaleType("IT");
        java.lang.String str27 = locale23.getDisplayCountry();
        java.lang.String str28 = dateTimeField21.getAsText(9794374140024L, locale23);
        java.lang.String str29 = locale23.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "France" + "'", str27, "France");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "mai" + "'", str28, "mai");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr_FR" + "'", str29, "fr_FR");
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime45 = property42.addCopy((long) 86399999);
        org.joda.time.LocalTime localTime46 = property42.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField47 = property42.getLeapDurationField();
        org.joda.time.Interval interval48 = property42.toInterval();
        org.joda.time.LocalTime localTime49 = property42.withMaximumValue();
        org.joda.time.LocalTime.Property property50 = localTime49.secondOfMinute();
        java.util.Date date52 = new java.util.Date((long) (byte) 100);
        date52.setMinutes(11);
        long long55 = date52.getTime();
        int int56 = date52.getMonth();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromDateFields(date52);
        org.joda.time.DateTime dateTime58 = localTime57.toDateTimeToday();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalTime localTime70 = localTime66.plus(readablePeriod69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean72 = localTime70.isSupported(dateTimeFieldType71);
        org.joda.time.DateTime dateTime73 = dateTime63.withFields((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localTime79.toDateTime(readableInstant80);
        int int82 = localTime76.compareTo((org.joda.time.ReadablePartial) localTime79);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean84 = localTime76.isSupported(dateTimeFieldType83);
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.DateTime dateTime90 = localTime88.toDateTime(readableInstant89);
        org.joda.time.Chronology chronology91 = localTime88.getChronology();
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime((long) (byte) 1, chronology91);
        org.joda.time.DateTimeField dateTimeField93 = chronology91.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField94 = chronology91.dayOfMonth();
        org.joda.time.LocalTime localTime95 = org.joda.time.LocalTime.now(chronology91);
        org.joda.time.DateTimeField dateTimeField96 = dateTimeFieldType83.getField(chronology91);
        boolean boolean97 = localTime70.isSupported(dateTimeFieldType83);
        boolean boolean98 = localTime57.isAfter((org.joda.time.ReadablePartial) localTime70);
        boolean boolean99 = localTime49.isEqual((org.joda.time.ReadablePartial) localTime57);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 660100L + "'", long55 == 660100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(localTime95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((long) 888);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfMonth();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours((int) 'u');
        org.joda.time.LocalTime localTime17 = localTime13.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime22.getMonthOfYear();
        int int25 = dateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        org.joda.time.DateTime dateTime34 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime35 = localTime17.toDateTimeToday(dateTimeZone27);
        boolean boolean36 = instant2.isAfter((org.joda.time.ReadableInstant) dateTime35);
        long long37 = instant2.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645455223763L + "'", long37 == 1645455223763L);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        long long19 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 3);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readableDuration23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval24.toPeriod(periodType26);
        org.joda.time.Period period28 = period27.toPeriod();
        int[] intArray31 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) 419, 175367340000L);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period28.get(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[5, 6, 3, 1, 17, 8, 59, 581]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        int int15 = dateTime14.getYearOfCentury();
        java.util.Date date16 = dateTime14.toDate();
        int int17 = date16.getMinutes();
        int int18 = date16.getDay();
        java.lang.Object obj19 = date16.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "Mon Feb 21 00:09:59 UTC 2022");
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval9.toPeriod(periodType10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType13 = period11.getFieldType(233);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfHour();
        int int13 = property12.get();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.Interval interval15 = interval14.toInterval();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.getMinimumValue();
        org.joda.time.DateTime dateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime27 = null;
        boolean boolean28 = dateTimeZone26.isLocalDateTimeGap(localDateTime27);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime24.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((java.lang.Object) dateTime30);
        org.joda.time.Interval interval32 = interval15.withEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = interval32.toPeriod();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationAfterStart(readableDuration34);
        org.joda.time.Duration duration36 = interval35.toDuration();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int47 = dateTimeZone45.getOffset((long) (byte) 1);
        long long49 = dateTimeZone43.getMillisKeepLocal(dateTimeZone45, (long) 3);
        org.joda.time.DateTime dateTime50 = dateTime41.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime52 = dateTime41.minus((long) '#');
        org.joda.time.DateTime.Property property53 = dateTime41.weekyear();
        org.joda.time.DateTime dateTime55 = dateTime41.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.get();
        org.joda.time.Interval interval64 = property62.toInterval();
        org.joda.time.Interval interval65 = interval64.toInterval();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        int int73 = property72.getMinimumValue();
        org.joda.time.DateTime dateTime74 = property72.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime77 = null;
        boolean boolean78 = dateTimeZone76.isLocalDateTimeGap(localDateTime77);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(dateTimeZone76);
        org.joda.time.DateTime dateTime80 = dateTime74.withZoneRetainFields(dateTimeZone76);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) dateTime80);
        org.joda.time.Interval interval82 = interval65.withEnd((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration83 = interval65.toDuration();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration83);
        boolean boolean85 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Period period86 = duration83.toPeriod();
        org.joda.time.Instant instant88 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration83, 40);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3L + "'", long49 == 3L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(instant88);
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isBefore((long) 21);
        org.joda.time.Interval interval25 = interval22.toInterval();
        org.joda.time.Chronology chronology26 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.months();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        int int37 = localTime31.compareTo((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.LocalTime.Property property38 = localTime31.hourOfDay();
        org.joda.time.LocalTime localTime40 = property38.addCopy(6);
        int int41 = localTime40.getSecondOfMinute();
        org.joda.time.LocalTime.Property property42 = localTime40.secondOfMinute();
        org.joda.time.LocalTime localTime43 = property42.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime45 = property42.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime46 = property42.getLocalTime();
        org.joda.time.LocalTime localTime48 = localTime46.minusMillis(0);
        long long50 = chronology26.set((org.joda.time.ReadablePartial) localTime46, 1645444188849L);
        org.joda.time.LocalTime.Property property51 = localTime46.secondOfMinute();
        org.joda.time.LocalTime.Property property52 = localTime46.millisOfSecond();
        org.joda.time.LocalTime localTime53 = property52.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645423799990L + "'", long50 == 1645423799990L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(6);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, readableDuration19);
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        boolean boolean23 = interval20.isAfter(1645455127724L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        int int32 = dateTime30.getMonthOfYear();
        int int33 = dateTime30.getHourOfDay();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int44 = dateTimeZone42.getOffset((long) (byte) 1);
        long long46 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 3);
        org.joda.time.DateTime dateTime47 = dateTime38.withZone(dateTimeZone40);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isBefore((long) 21);
        boolean boolean51 = interval25.isBefore((org.joda.time.ReadableInterval) interval48);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        int int59 = property58.getMinimumValue();
        org.joda.time.DateTime dateTime60 = property58.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone62.isLocalDateTimeGap(localDateTime63);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = dateTime60.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = dateTime66.withYearOfEra(6);
        org.joda.time.DateTime dateTime70 = dateTime66.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, readableDuration71);
        org.joda.time.DateTime dateTime73 = interval72.getEnd();
        boolean boolean74 = interval25.overlaps((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Duration duration75 = interval25.toDuration();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone17);
        int int31 = dateTimeZone17.getOffsetFromLocal((long) 21);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 31, dateTimeZone17);
        java.lang.String str34 = dateTimeZone17.getNameKey(1645402200000L);
        java.util.TimeZone timeZone35 = dateTimeZone17.toTimeZone();
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale37.getISO3Language();
        java.lang.String str40 = locale36.getDisplayName(locale37);
        java.util.Locale locale41 = locale36.stripExtensions();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone35, locale41);
        // The following exception was thrown during execution in test generation
        try {
            calendar42.roll(24, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645455223224,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=43,MILLISECOND=234,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 9, false);
        java.lang.String str45 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime46 = localTime30.toDateTimeToday(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime49 = dateTime16.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds(52);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        int int53 = dateTime49.getHourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime49.withWeekOfWeekyear(37);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        int[] intArray32 = chronology7.get((org.joda.time.ReadablePeriod) period30, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField33 = chronology7.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType0.getField(chronology40);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = chronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology40.minuteOfDay();
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval25.contains(readableInterval28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getMonthOfYear();
        int int37 = dateTime34.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.Interval interval47 = interval25.withEnd((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (byte) 1, chronology62);
        int[] intArray65 = chronology54.get((org.joda.time.ReadablePartial) localTime63, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField66 = chronology54.clockhourOfDay();
        org.joda.time.DurationField durationField67 = chronology54.weeks();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.LocalTime.Property property69 = localTime68.minuteOfHour();
        java.lang.String str70 = property69.getName();
        org.joda.time.Interval interval71 = property69.toInterval();
        org.joda.time.Period period72 = interval71.toPeriod();
        boolean boolean73 = interval48.overlaps((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Interval interval75 = interval71.withEndMillis(121321085L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "minuteOfHour" + "'", str70, "minuteOfHour");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayName();
        org.joda.time.LocalTime localTime16 = property9.setCopy("0", locale14);
        org.joda.time.LocalTime localTime18 = property9.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime19 = property9.roundHalfCeilingCopy();
        org.joda.time.Interval interval20 = property9.toInterval();
        boolean boolean22 = interval20.isBefore((long) (byte) 1);
        long long23 = interval20.getStartMillis();
        long long24 = interval20.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "anglais (Etats-Unis)" + "'", str15, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField7 = chronology5.dayOfYear();
        org.joda.time.DurationField durationField8 = chronology5.halfdays();
        long long11 = durationField8.getValueAsLong(31L, 1645455129192L);
        long long14 = durationField8.getMillis((-292275054), 36000780000L);
        long long17 = durationField8.getDifferenceAsLong(53562150L, (long) 540);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-12626282332800000L) + "'", long14 == (-12626282332800000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.centuries();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.year();
        long long11 = dateTimeField8.addWrapField((-8208000000L), 53321001);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        int int20 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime.Property property21 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime23 = property21.addCopy(6);
        org.joda.time.LocalTime localTime24 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime25 = property21.roundCeilingCopy();
        org.joda.time.LocalTime localTime27 = property21.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime28 = property21.roundFloorCopy();
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        int int30 = localTime28.getSecondOfMinute();
        int int31 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime34 = localTime28.withField(dateTimeFieldType32, 5);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localTime34.getFields();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1682648260963200000L + "'", long11 == 1682648260963200000L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder14 = builder10.setDate(31, 53, 52);
        java.util.Calendar.Builder builder16 = builder10.setLenient(false);
        java.util.Calendar.Builder builder20 = builder10.setDate(7, 9, 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder10.setCalendarType("english");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: english");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        int int22 = dateTime20.getMonthOfYear();
        int int23 = dateTime20.getHourOfDay();
        org.joda.time.DateTime.Property property24 = dateTime20.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = dateTime20.toString(dateTimeFormatter25);
        org.joda.time.DateTime dateTime28 = dateTime20.plusMinutes(17);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.getMinimumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone39.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime43.plusMinutes((int) '4');
        boolean boolean47 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime15.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra(42);
        org.joda.time.DateTime dateTime54 = dateTime52.plusHours(53550);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str26, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(6);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.getMinimumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone39.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.Interval interval45 = interval28.withEnd((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = interval45.toPeriod();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = interval45.withDurationAfterStart(readableDuration47);
        org.joda.time.Duration duration49 = interval48.toDuration();
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.DateTime dateTime51 = dateTime18.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusYears(1439);
        org.joda.time.DateTime dateTime54 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime56 = dateTime51.plusMonths(2000);
        org.joda.time.DateTime dateTime58 = dateTime56.plusWeeks(10);
        int int59 = dateTime58.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = dateTimeFormatter7.parseLocalDateTime("java.util.GregorianCalendar[time=60005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=5,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.DurationField durationField20 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.minuteOfDay();
        long long24 = dateTimeField21.addWrapField(1645455023466L, 1439);
        java.lang.String str26 = dateTimeField21.getAsShortText(1645453102320L);
        int int28 = dateTimeField21.getMinimumValue(53513196L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645454963466L + "'", long24 == 1645454963466L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "858" + "'", str26, "858");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        int int10 = dateTime9.getHourOfDay();
        int int11 = dateTime9.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(86399);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(53358);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter12.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter12.withPivotYear(32770);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter16.getParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeParser17);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 370, chronology7);
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = localTime11.isAfter(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        long long10 = interval8.toDurationMillis();
        boolean boolean11 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = interval8.toInterval();
        long long13 = interval12.getStartMillis();
        long long14 = interval12.toDurationMillis();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1, chronology28);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localTime29, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.dayOfYear();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.get();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Period period43 = interval41.toPeriod();
        int[] intArray45 = chronology20.get((org.joda.time.ReadablePeriod) period43, (long) (byte) 100);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfMonth();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology52);
        long long58 = chronology20.set((org.joda.time.ReadablePartial) localTime56, 25200000L);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField60 = chronology20.secondOfMinute();
        boolean boolean61 = interval12.equals((java.lang.Object) dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645402199990L + "'", long13 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 60000L + "'", long14 == 60000L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 53623941L + "'", long58 == 53623941L);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        long long5 = date1.getTime();
        date1.setSeconds((int) ' ');
        java.lang.String str8 = date1.toLocaleString();
        date1.setYear(3);
        java.time.Instant instant11 = date1.toInstant();
        java.time.Instant instant12 = date1.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        int int14 = date13.getMonth();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:32 UTC 1903");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 660100L + "'", long5 == 660100L);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan 1, 1970 12:11:32 AM" + "'", str8, "Jan 1, 1970 12:11:32 AM");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:11:32 UTC 1903");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        int int6 = date1.getMonth();
        java.time.Instant instant7 = date1.toInstant();
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale8);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMonth();
        int int17 = date15.getMinutes();
        boolean boolean18 = date1.before(date15);
        date15.setYear(125);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United States" + "'", str13, "United States");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455224013,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=13,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 21 14:53:44 UTC 2025");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        org.joda.time.DateTime dateTime27 = dateTime23.withHourOfDay(2);
        boolean boolean28 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        org.joda.time.DateTime dateTime42 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime44 = dateTime42.minusSeconds((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime.Property property46 = dateTime44.property(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime44.plusMinutes(27424235);
        boolean boolean49 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.TimeOfDay timeOfDay50 = dateTime23.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeOfDay50);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable8, 660000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.Interval interval35 = interval8.toInterval();
        long long36 = interval35.getStartMillis();
        org.joda.time.Interval interval37 = interval35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        java.util.Date date40 = new java.util.Date((long) (byte) 100);
        date40.setMinutes(11);
        long long43 = date40.getTime();
        int int44 = date40.getMonth();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromDateFields(date40);
        org.joda.time.DateTime dateTime46 = localTime45.toDateTimeToday();
        org.joda.time.DateTime dateTime48 = dateTime46.minusHours((int) (byte) -1);
        boolean boolean49 = interval37.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645402199990L + "'", long36 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 660100L + "'", long43 == 660100L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.util.Calendar calendar35 = dateTime25.toCalendar(locale31);
        java.util.Date date36 = calendar35.getTime();
        int int37 = calendar35.getFirstDayOfWeek();
        calendar35.set(600000, 48, 17590, 1970, (int) (byte) 0);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        int int54 = localTime48.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.LocalTime.Property property55 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime57 = property55.addCopy((int) (byte) 100);
        java.lang.String str58 = property55.toString();
        org.joda.time.DateTimeField dateTimeField59 = property55.getField();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 1, chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.hourOfHalfday();
        long long72 = dateTimeField69.add((long) 'u', 7);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        int int81 = localTime75.compareTo((org.joda.time.ReadablePartial) localTime78);
        org.joda.time.LocalTime.Property property82 = localTime75.hourOfDay();
        org.joda.time.LocalTime localTime84 = property82.addCopy(6);
        org.joda.time.LocalTime localTime85 = property82.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime86 = property82.roundCeilingCopy();
        org.joda.time.LocalTime localTime88 = localTime86.plusHours(2922789);
        java.util.Locale locale89 = java.util.Locale.ITALY;
        boolean boolean90 = locale89.hasExtensions();
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = dateTimeField69.getAsText((org.joda.time.ReadablePartial) localTime86, locale89);
        java.lang.String str93 = dateTimeField59.getAsShortText((long) 1439, locale89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap94 = calendar35.getDisplayNames(53611753, 540000, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455224170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=600000,MONTH=48,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=17590,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=1970,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Property[hourOfDay]" + "'", str58, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 25200117L + "'", long72 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1" + "'", str92, "1");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0" + "'", str93, "0");
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int6 = dateTimeZone4.getOffset((long) (byte) 1);
        long long8 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) 3);
        long long10 = dateTimeZone2.previousTransition(0L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(1645454875924L, dateTimeZone2);
        org.joda.time.DateTime dateTime13 = dateTime11.minus(1645455024535L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTime dateTime32 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone34.isLocalDateTimeGap(localDateTime35);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime32.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime38);
        org.joda.time.Interval interval40 = interval23.withEnd((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationAfterStart(readableDuration42);
        org.joda.time.Duration duration44 = interval43.toDuration();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int55 = dateTimeZone53.getOffset((long) (byte) 1);
        long long57 = dateTimeZone51.getMillisKeepLocal(dateTimeZone53, (long) 3);
        org.joda.time.DateTime dateTime58 = dateTime49.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime60 = dateTime49.minus((long) '#');
        org.joda.time.DateTime.Property property61 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime63 = dateTime49.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.LocalTime localTime69 = dateTime68.toLocalTime();
        org.joda.time.DateTime.Property property70 = dateTime68.minuteOfHour();
        int int71 = property70.get();
        org.joda.time.Interval interval72 = property70.toInterval();
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.DateTime.Property property80 = dateTime78.minuteOfHour();
        int int81 = property80.getMinimumValue();
        org.joda.time.DateTime dateTime82 = property80.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime85 = null;
        boolean boolean86 = dateTimeZone84.isLocalDateTimeGap(localDateTime85);
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime82.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((java.lang.Object) dateTime88);
        org.joda.time.Interval interval90 = interval73.withEnd((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration91 = interval73.toDuration();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration91);
        boolean boolean93 = duration44.isLongerThan((org.joda.time.ReadableDuration) duration91);
        long long94 = duration91.getMillis();
        org.joda.time.Duration duration95 = duration91.toDuration();
        org.joda.time.Duration duration96 = duration91.toDuration();
        org.joda.time.DateTime dateTime97 = dateTime13.plus((org.joda.time.ReadableDuration) duration96);
        org.joda.time.Period period98 = duration96.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 60000L + "'", long94 == 60000L);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        long long13 = dateTimeField11.roundHalfFloor(9L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        boolean boolean32 = dateTimeFieldType23.isSupported(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.centuryOfEra();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(chronology30);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology30);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale37.getVariant();
        java.lang.String str39 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime36, locale37);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 1);
        int[] intArray43 = localTime42.getValues();
        int[] intArray45 = dateTimeField11.addWrapField((org.joda.time.ReadablePartial) localTime36, (int) (byte) 0, intArray43, (int) (byte) -1);
        org.joda.time.LocalTime.Property property46 = localTime36.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2" + "'", str39, "2");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 0, 0, 11]");
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfDay(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str8 = dateTimeFieldType7.toString();
        int int9 = localTime6.get(dateTimeFieldType7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localTime26, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfYear();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Period period40 = interval38.toPeriod();
        int[] intArray42 = chronology17.get((org.joda.time.ReadablePeriod) period40, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField43 = chronology17.weekOfWeekyear();
        boolean boolean44 = dateTimeFieldType10.isSupported(chronology17);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType10.getField(chronology50);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfHour();
        int int60 = property59.get();
        org.joda.time.Interval interval61 = property59.toInterval();
        org.joda.time.Period period62 = interval61.toPeriod();
        long long65 = chronology50.add((org.joda.time.ReadablePeriod) period62, (long) 86399999, 419);
        org.joda.time.LocalTime localTime67 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period62, 302);
        int int68 = localTime67.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 111539999L + "'", long65 == 111539999L);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.lang.String str17 = locale12.getDisplayCountry(locale16);
        java.lang.String str18 = dateTimeField10.getAsShortText(53261168L, locale12);
        int int21 = dateTimeField10.getDifference((long) 12, (long) (-95));
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology30);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTime.Property property34 = dateTime32.millisOfDay();
        java.lang.String str35 = property34.getAsShortText();
        org.joda.time.DateTime dateTime37 = property34.addToCopy(14);
        org.joda.time.DateTimeField dateTimeField38 = property34.getField();
        java.lang.String str40 = dateTimeField38.getAsText(1640995200000L);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(dateTimeZone42);
        java.util.Locale locale47 = new java.util.Locale("hours");
        java.lang.String str48 = locale47.getDisplayCountry();
        java.util.Locale locale49 = locale47.stripExtensions();
        java.lang.String str50 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localTime45, locale49);
        // The following exception was thrown during execution in test generation
        try {
            long long51 = dateTimeField10.set(1645402199990L, "53", locale49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"53\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United States" + "'", str17, "United States");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Jan" + "'", str18, "Jan");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53624398" + "'", str35, "53624398");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertEquals(locale47.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "hours");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "53624408" + "'", str50, "53624408");
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.minus(readableDuration10);
        java.util.Date date12 = dateTime11.toDate();
        java.util.Date date19 = new java.util.Date(419, 22, (int) (byte) -1, 2022, 366, 2922789);
        boolean boolean20 = date12.before(date19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.getMinimumValue();
        org.joda.time.DateTime dateTime29 = property27.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.minus(readableDuration31);
        java.util.Date date33 = dateTime32.toDate();
        boolean boolean34 = date19.after(date33);
        int int35 = date19.getMonth();
        date19.setHours(600000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertEquals(date19.toString(), "Mon Aug 07 00:59:09 UTC 2389");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 'x');
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((-27423369));
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.LocalTime localTime12 = localTime2.withFieldAdded(durationFieldType10, 7);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1, chronology28);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePartial) localTime29, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.dayOfYear();
        org.joda.time.DurationField durationField33 = durationFieldType14.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField34 = chronology20.centuryOfEra();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(1645454862530L, chronology20);
        org.joda.time.DurationField durationField36 = durationFieldType10.getField(chronology20);
        long long39 = durationField36.subtract(1645423800000L, 30152L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 342857400000L + "'", long39 == 342857400000L);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(35);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField28 = durationFieldType9.getField(chronology15);
        org.joda.time.DurationField durationField29 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology15.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter8.withChronology(chronology15);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology15.getDateTimeMillis(10, (-19257), 259, 15706);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19257 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime4.minusHours(600);
        java.util.GregorianCalendar gregorianCalendar21 = dateTime4.toGregorianCalendar();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        boolean boolean23 = calendar22.isWeekDateSupported();
        long long24 = calendar22.getTimeInMillis();
        java.util.TimeZone timeZone25 = calendar22.getTimeZone();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField34.getType();
        boolean boolean36 = dateTimeField34.isSupported();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        int int45 = localTime39.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime.Property property46 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime48 = property46.addCopy(6);
        org.joda.time.LocalTime localTime49 = property46.roundHalfCeilingCopy();
        int int50 = property46.get();
        org.joda.time.LocalTime localTime52 = property46.addWrapFieldToCopy((-100800));
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = property46.getAsText(locale53);
        int int55 = dateTimeField34.getMaximumShortTextLength(locale53);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone25, locale53);
        gregorianCalendar21.setTimeZone(timeZone25);
        gregorianCalendar21.set(6, (-100800), 258);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(gregorianCalendar21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455224585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645455224585L + "'", long24 == 1645455224585L);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645455224585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=44,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getCountry();
        int int16 = property6.getMaximumShortTextLength(locale12);
        java.lang.String str17 = locale12.getCountry();
        java.lang.String str19 = locale12.getExtension('a');
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "HI!" + "'", str15, "HI!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "HI!" + "'", str17, "HI!");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        int int8 = property7.getMinimumValue();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localTime25, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = chronology16.dayOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Period period39 = interval37.toPeriod();
        int[] intArray41 = chronology16.get((org.joda.time.ReadablePeriod) period39, (long) (byte) 100);
        org.joda.time.DateTime dateTime42 = dateTime9.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        org.joda.time.DateTime dateTime57 = dateTime48.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime59 = dateTime48.minus((long) '#');
        org.joda.time.DateTime.Property property60 = dateTime48.weekyear();
        org.joda.time.DateTime dateTime62 = dateTime48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime63 = dateTime48.toDateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime66 = dateTime48.plusSeconds(5);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMonths(100);
        java.lang.String str69 = dateTime68.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2013-10-21T00:10:05.000+00:00:00.010" + "'", str69, "2013-10-21T00:10:05.000+00:00:00.010");
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        java.lang.String str32 = interval31.toString();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePartial) localTime48, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.weekyear();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 5, chronology39);
        org.joda.time.Interval interval53 = interval31.withChronology(chronology39);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.Interval interval63 = interval62.toInterval();
        boolean boolean64 = interval31.isAfter((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.toDurationMillis();
        boolean boolean67 = interval63.isAfter(1645454917611L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str32, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 60000L + "'", long65 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology5.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology5.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime37.plus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = localTime41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = dateTime34.withFields((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        long long55 = dateTimeZone46.convertLocalToUTC((long) 9, false);
        java.lang.String str56 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime57 = localTime41.toDateTimeToday(dateTimeZone46);
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(dateTimeZone46);
        org.joda.time.LocalTime.Property property59 = localTime58.secondOfMinute();
        boolean boolean60 = dateTime27.equals((java.lang.Object) localTime58);
        org.joda.time.Instant instant61 = dateTime27.toInstant();
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localTime65.toDateTime(readableInstant66);
        org.joda.time.Chronology chronology68 = localTime65.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.weekyears();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = chronology68.minuteOfDay();
        org.joda.time.DateTime dateTime72 = instant61.toDateTime(chronology68);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField20 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.centuryOfEra();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField23 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology6.centuries();
        long long25 = durationField24.getUnitMillis();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3155695200000L + "'", long25 == 3155695200000L);
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("US", 0.0d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "us" + "'", str4, "us");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "us" + "'", str7, "us");
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 9, false);
        java.lang.String str45 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime46 = localTime30.toDateTimeToday(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime49 = dateTime16.toDateTime(dateTimeZone35);
        long long53 = dateTimeZone35.convertLocalToUTC(1645454910417L, false, 1645280375L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645454910407L + "'", long53 == 1645454910407L);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.dayOfMonth();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.LocalTime localTime21 = localTime19.plusHours((int) 'u');
        long long23 = chronology6.set((org.joda.time.ReadablePartial) localTime19, 0L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(7213320000L, chronology6);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = chronology30.era();
        org.joda.time.DateTimeField dateTimeField45 = chronology30.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime24.toMutableDateTime(chronology30);
        org.joda.time.DateTime dateTime48 = dateTime24.withMinuteOfHour(25);
        org.joda.time.DateTime dateTime50 = dateTime24.plusHours(1620);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime24.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53625189L + "'", long23 == 53625189L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar.Builder builder9 = builder0.setDate((int) (short) 10, 31, 4);
        java.util.Locale locale10 = java.util.Locale.US;
        java.lang.String str11 = locale10.getDisplayName();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayName(locale12);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale14.getISO3Language();
        java.util.Calendar.Builder builder16 = builder9.setLocale(locale14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder16.setWeekDefinition(22, (-343140000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (United States)" + "'", str11, "English (United States)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str13, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.withMaximumValue();
        java.util.Locale locale13 = java.util.Locale.US;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale13.getVariant();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale13);
        java.lang.String str18 = locale13.getUnicodeLocaleType("CN");
        java.lang.String str19 = locale13.getDisplayScript();
        java.lang.String str20 = property9.getAsText(locale13);
        org.joda.time.DateTimeField dateTimeField21 = property9.getField();
        java.lang.String str22 = property9.getAsText();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455225259,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=259,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        java.lang.String str4 = calendar0.getCalendarType();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance();
        boolean boolean6 = calendar5.isWeekDateSupported();
        long long7 = calendar5.getTimeInMillis();
        java.util.TimeZone timeZone8 = calendar5.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8);
        int int12 = calendar0.compareTo(calendar11);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455225360,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=360,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455225360L + "'", long2 == 1645455225360L);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455225361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645455225361L + "'", long7 == 1645455225361L);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455225361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455225361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=361,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.Interval interval36 = interval35.toInterval();
        long long37 = interval35.toDurationMillis();
        org.joda.time.Interval interval38 = interval35.toInterval();
        org.joda.time.Interval interval39 = interval9.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.MutableInterval mutableInterval40 = interval38.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 60000L + "'", long37 == 60000L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        int int15 = localTime11.indexOf(dateTimeFieldType14);
        boolean boolean16 = localTime5.isSupported(dateTimeFieldType14);
        org.joda.time.LocalTime localTime18 = localTime5.plusSeconds((-100800));
        org.joda.time.LocalTime.Property property19 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime21 = property19.addWrapFieldToCopy(370);
        int int22 = localTime21.size();
        org.joda.time.LocalTime localTime24 = localTime21.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localTime24.getFields();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645402140000L, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        int int12 = dateTime11.getSecondOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weekyears();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePartial) localTime35, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = chronology26.dayOfYear();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        int int46 = property45.get();
        org.joda.time.Interval interval47 = property45.toInterval();
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Period period49 = interval47.toPeriod();
        int[] intArray51 = chronology26.get((org.joda.time.ReadablePeriod) period49, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = localTime63.getChronology();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) (byte) 1, chronology66);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePartial) localTime67, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField70 = chronology58.dayOfYear();
        org.joda.time.DurationField durationField71 = durationFieldType52.getField(chronology58);
        int int72 = period49.get(durationFieldType52);
        int[] intArray75 = chronology19.get((org.joda.time.ReadablePeriod) period49, 1645454861756L, (long) 9);
        org.joda.time.DateTime dateTime77 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 540000);
        boolean boolean78 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime80 = dateTime11.plusMillis(891);
        org.joda.time.DateTime dateTime82 = dateTime11.plus(117L);
        org.joda.time.Chronology chronology83 = dateTime82.getChronology();
        org.joda.time.Chronology chronology84 = chronology83.withUTC();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53625 + "'", int12 == 53625);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.Interval interval53 = interval8.withChronology(chronology46);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        int int63 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime.Property property64 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime66 = property64.addCopy(6);
        int int67 = localTime66.getSecondOfMinute();
        org.joda.time.LocalTime.Property property68 = localTime66.secondOfMinute();
        org.joda.time.LocalTime localTime69 = property68.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime70 = property68.getLocalTime();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localTime74.toDateTime(readableInstant75);
        org.joda.time.Chronology chronology77 = localTime74.getChronology();
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((long) (byte) 1, chronology77);
        org.joda.time.DateTime dateTime79 = localTime78.toDateTimeToday();
        org.joda.time.LocalTime localTime81 = localTime78.minusMinutes(1);
        org.joda.time.LocalTime.Property property82 = localTime78.millisOfDay();
        int int83 = localTime78.getMillisOfDay();
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.era();
        boolean boolean87 = localTime85.isSupported(dateTimeFieldType86);
        boolean boolean88 = localTime78.isSupported(dateTimeFieldType86);
        boolean boolean89 = localTime70.isSupported(dateTimeFieldType86);
        java.lang.String str90 = dateTimeFieldType86.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property91 = localTime54.property(dateTimeFieldType86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "era" + "'", str90, "era");
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.roll((int) (byte) 0, 366);
        boolean boolean10 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        long long12 = calendar6.getTimeInMillis();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455225620,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=620,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645455225620L + "'", long12 == 1645455225620L);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((long) 888);
        org.joda.time.Instant instant4 = instant2.minus((-61914758399990L));
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        int int12 = property11.get();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.joda.time.Interval interval14 = interval13.toInterval();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime26 = null;
        boolean boolean27 = dateTimeZone25.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime23.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime29);
        org.joda.time.Interval interval31 = interval14.withEnd((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = interval31.toPeriod();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval31.withDurationAfterStart(readableDuration33);
        org.joda.time.Duration duration35 = interval34.toDuration();
        org.joda.time.Duration duration36 = duration35.toDuration();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        int int43 = dateTime41.getMonthOfYear();
        int int44 = dateTime41.getHourOfDay();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int55 = dateTimeZone53.getOffset((long) (byte) 1);
        long long57 = dateTimeZone51.getMillisKeepLocal(dateTimeZone53, (long) 3);
        org.joda.time.DateTime dateTime58 = dateTime49.withZone(dateTimeZone51);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isBefore((long) 21);
        org.joda.time.Duration duration62 = interval59.toDuration();
        boolean boolean63 = duration35.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration64 = duration62.toDuration();
        org.joda.time.Instant instant65 = instant4.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Instant instant67 = instant4.minus((long) 14);
        long long68 = instant4.getMillis();
        org.joda.time.Instant instant71 = instant4.withDurationAdded(949636862000L, (int) '#');
        org.joda.time.DateTime dateTime72 = instant4.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = dateTime72.withWeekOfWeekyear(2186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2186 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 63560213626512L + "'", long68 == 63560213626512L);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DurationField durationField18 = property17.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        org.joda.time.DateTime.Property property10 = dateTime8.minuteOfHour();
        java.lang.String str11 = property10.toString();
        org.joda.time.DateTime dateTime12 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property10.addToCopy((long) 366);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(7);
        org.joda.time.DateTime dateTime23 = dateTime19.plusWeeks((int) (short) 10);
        int int24 = property10.getDifference((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, readableDuration25);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.LocalTime localTime39 = localTime37.plusHours((int) 'u');
        org.joda.time.LocalTime localTime41 = localTime37.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int47 = dateTimeZone45.getOffset((long) (byte) 1);
        long long49 = dateTimeZone43.getMillisKeepLocal(dateTimeZone45, (long) 3);
        long long52 = dateTimeZone43.convertLocalToUTC((long) 9, false);
        java.lang.String str53 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime54 = localTime41.toDateTimeToday(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.minus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime54.minusHours((int) 'a');
        boolean boolean59 = interval26.contains((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = localTime63.getChronology();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) (byte) 1, chronology66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.monthOfYear();
        org.joda.time.DateTime dateTime70 = dateTime54.toDateTime(chronology66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(0, 2922750, 7, 419, chronology66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922750 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[minuteOfHour]" + "'", str11, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-100800) + "'", int24 == (-100800));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3L + "'", long49 == 3L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DurationField durationField13 = dateTimeField12.getRangeDurationField();
        int int16 = dateTimeField12.getDifference((long) 15, 3003279000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField12.getType();
        java.lang.String str19 = dateTimeField12.getAsText(342857400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-95) + "'", int16 == (-95));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1980" + "'", str19, "1980");
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter(660100L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.Interval interval34 = interval33.toInterval();
        long long35 = interval33.toDurationMillis();
        org.joda.time.Period period36 = interval33.toPeriod();
        org.joda.time.Interval interval37 = interval22.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        java.lang.String str38 = period36.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 60000L + "'", long35 == 60000L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT1M" + "'", str38, "PT1M");
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.weekyear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 5, chronology18);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DateTime dateTime42 = dateTime31.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime9.minus((org.joda.time.ReadablePeriod) period41);
        long long44 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime9.secondOfMinute();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.getMinimumValue();
        org.joda.time.DateTime dateTime63 = property61.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfYear();
        boolean boolean65 = interval54.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        java.lang.String str73 = property72.toString();
        org.joda.time.DateTime dateTime74 = property72.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readableDuration75);
        org.joda.time.Interval interval77 = interval54.withStart((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Interval interval78 = interval54.toInterval();
        org.joda.time.DateTime dateTime79 = interval54.getEnd();
        org.joda.time.DateTime dateTime81 = dateTime79.minus(1645401697000L);
        boolean boolean82 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime81);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar85 = dateTime9.toCalendar(locale84);
        boolean boolean87 = dateTime9.isEqual((-11044943999996L));
        org.joda.time.DateTime dateTime88 = dateTime9.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645402199990L + "'", long44 == 1645402199990L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Property[minuteOfHour]" + "'", str73, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        int int15 = localTime11.indexOf(dateTimeFieldType14);
        int int16 = dateTime4.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime18 = dateTime4.minusDays((int) (byte) -1);
        org.joda.time.DateTime dateTime20 = dateTime4.minus((-1478803860000L));
        int int21 = dateTime20.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 68460 + "'", int21 == 68460);
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        java.lang.String str46 = property45.toString();
        org.joda.time.DateTime dateTime47 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime49 = property45.addToCopy((long) 366);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears(7);
        org.joda.time.DateTime dateTime58 = dateTime54.plusWeeks((int) (short) 10);
        int int59 = property45.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, readableDuration60);
        boolean boolean62 = interval8.equals((java.lang.Object) interval61);
        boolean boolean64 = interval61.contains(10740000L);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.LocalTime localTime70 = dateTime69.toLocalTime();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfHour();
        int int72 = property71.get();
        org.joda.time.Interval interval73 = property71.toInterval();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.DateTime.Property property80 = dateTime78.minuteOfHour();
        int int81 = property80.getMinimumValue();
        org.joda.time.DateTime dateTime82 = property80.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property83 = dateTime82.dayOfYear();
        boolean boolean84 = interval73.contains((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean85 = interval61.abuts((org.joda.time.ReadableInterval) interval73);
        org.joda.time.Interval interval86 = interval61.toInterval();
        org.joda.time.MutableInterval mutableInterval87 = interval86.toMutableInterval();
        boolean boolean89 = mutableInterval87.contains(1645455194702L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[minuteOfHour]" + "'", str46, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-100800) + "'", int59 == (-100800));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        int int2 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date3 = calendar0.getTime();
        calendar0.setLenient(false);
        java.util.Date date7 = new java.util.Date((long) (byte) 100);
        date7.setMinutes(11);
        long long10 = date7.getTime();
        int int11 = date7.getMonth();
        int int12 = date7.getMonth();
        java.time.Instant instant13 = date7.toInstant();
        java.util.Date date14 = java.util.Date.from(instant13);
        calendar0.setTime(date14);
        java.util.TimeZone timeZone16 = calendar0.getTimeZone();
        calendar0.set(15706, 13, 32, 34, 5, 7800000);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll(122, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=15706,MONTH=13,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=32,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=34,MINUTE=5,SECOND=7800000,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455225949L + "'", long1 == 1645455225949L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:53:45 UTC 2022");
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 660100L + "'", long10 == 660100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime4.minusMinutes(100);
        long long18 = dateTime4.getMillis();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        int int27 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime24);
        org.joda.time.LocalTime.Property property28 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime30 = property28.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime32 = localTime30.plusMillis(13);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        int int34 = localTime32.getSecondOfMinute();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.clockhourOfHalfday();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) localTime32, chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.monthOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.US;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale48.getVariant();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale48);
        java.lang.String str53 = locale48.getUnicodeLocaleType("CN");
        java.lang.String str54 = locale48.getLanguage();
        java.util.Locale.setDefault(locale48);
        java.lang.String str56 = locale48.getVariant();
        java.lang.String str57 = locale48.getCountry();
        int int58 = dateTimeField47.getMaximumShortTextLength(locale48);
        java.util.Calendar calendar59 = dateTime4.toCalendar(locale48);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645402199990L + "'", long18 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645455225970,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=45,MILLISECOND=970,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en" + "'", str54, "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "US" + "'", str57, "US");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.year();
        long long20 = dateTimeField17.getDifferenceAsLong((-1663844635000L), (long) 7800000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-52L) + "'", long20 == (-52L));
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("+00:00");
        java.lang.String str2 = dateTimeZone1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) str2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTC" + "'", str2, "UTC");
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Chronology chronology26 = interval20.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        int int8 = property7.get();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        long long38 = dateTime37.getMillis();
        boolean boolean39 = interval9.equals((java.lang.Object) long38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        boolean boolean49 = dateTimeFieldType40.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.centuryOfEra();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(chronology47);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.Interval interval54 = interval9.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField55 = chronology47.secondOfMinute();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((java.lang.Object) 48698L, chronology47);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        int int63 = dateTime61.getMonthOfYear();
        int int64 = dateTime61.getHourOfDay();
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = dateTime61.toString(dateTimeFormatter66);
        org.joda.time.DateTime dateTime69 = dateTime61.plusMinutes(17);
        org.joda.time.DateTime dateTime71 = dateTime69.withHourOfDay((int) (short) 10);
        boolean boolean72 = dateTime56.equals((java.lang.Object) dateTime71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property74 = dateTime71.property(dateTimeFieldType73);
        java.lang.String str75 = property74.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645402199990L + "'", long38 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str67, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Property[weekyearOfCentury]" + "'", str75, "Property[weekyearOfCentury]");
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("hours");
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.util.Date date13 = new java.util.Date(419, 22, (int) (byte) -1, 2022, 366, 2922789);
        calendar6.setTime(date13);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromDateFields(date13);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale20 = new java.util.Locale("", "hi!", "");
        java.lang.String str21 = locale16.getDisplayCountry(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale16);
        java.util.Date date23 = calendar22.getTime();
        java.util.Date date25 = new java.util.Date((long) (byte) 100);
        date25.setMinutes(11);
        long long28 = date25.getTime();
        int int29 = date25.getMonth();
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale30);
        java.util.Date date37 = calendar36.getTime();
        boolean boolean38 = date25.before(date37);
        boolean boolean39 = date23.before(date37);
        boolean boolean40 = date13.before(date23);
        int int41 = date23.getHours();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455226375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455226375L + "'", long2 == 1645455226375L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "hours");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=11081260749000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2321,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=59,SECOND=9,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 25 07:59:09 UTC 2321");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "United States" + "'", str21, "United States");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455226375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Feb 21 14:53:46 UTC 2022");
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 660100L + "'", long28 == 660100L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "United States" + "'", str35, "United States");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455226375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 14:53:46 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 14 + "'", int41 == 14);
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime41 = dateTime39.withYear((-95));
        int int42 = dateTime39.getCenturyOfEra();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.monthOfYear();
        org.joda.time.DurationField durationField53 = chronology49.months();
        org.joda.time.DateTimeField dateTimeField54 = chronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime59 = null;
        boolean boolean60 = dateTimeZone58.isLocalDateTimeGap(localDateTime59);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone58);
        org.joda.time.LocalTime localTime63 = localTime61.minusMinutes(3);
        int int64 = localTime63.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime68 = null;
        boolean boolean69 = dateTimeZone67.isLocalDateTimeGap(localDateTime68);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone67);
        org.joda.time.LocalTime localTime71 = localTime63.withFields((org.joda.time.ReadablePartial) localTime70);
        java.util.Locale locale74 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str75 = locale74.getCountry();
        java.lang.String str76 = dateTimeField55.getAsText((org.joda.time.ReadablePartial) localTime71, locale74);
        java.lang.String str77 = locale74.getDisplayLanguage();
        java.util.Calendar calendar78 = dateTime39.toCalendar(locale74);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = calendar78.getMinimum(68460);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 68460");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 23 + "'", int64 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertEquals(locale74.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "THU JAN 01 00:00:00 UTC 1970" + "'", str75, "THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "10" + "'", str76, "10");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "property[minuteofhour]" + "'", str77, "property[minuteofhour]");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645401599991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.weekyear();
        java.lang.String str18 = dateTimeField17.getName();
        long long21 = dateTimeField17.set((-2208988800000L), 13);
        java.util.Locale locale24 = new java.util.Locale("Property[dayOfMonth]", "java.util.GregorianCalendar[time=1645454883425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=48,SECOND=3,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        int int25 = dateTimeField17.getMaximumTextLength(locale24);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyear" + "'", str18, "weekyear");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61756992000000L) + "'", long21 == (-61756992000000L));
        org.junit.Assert.assertEquals(locale24.toString(), "property[dayofmonth]_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645454883425,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=48,SECOND=3,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval8.toPeriod(periodType11);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        int int19 = dateTime17.getMonthOfYear();
        int int20 = dateTime17.getHourOfDay();
        org.joda.time.DateTime.Property property21 = dateTime17.dayOfMonth();
        boolean boolean22 = interval8.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar39 = dateTime36.toGregorianCalendar();
        int int40 = dateTime36.getYear();
        org.joda.time.DateTime dateTime42 = dateTime36.withYear(9);
        org.joda.time.DateTime dateTime44 = dateTime42.minusHours(31);
        boolean boolean45 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime42.plusMinutes(2);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        long long58 = interval56.toDurationMillis();
        org.joda.time.Interval interval59 = interval56.toInterval();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int70 = dateTimeZone68.getOffset((long) (byte) 1);
        long long72 = dateTimeZone66.getMillisKeepLocal(dateTimeZone68, (long) 3);
        org.joda.time.DateTime dateTime73 = dateTime64.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = dateTime73.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar76 = dateTime73.toGregorianCalendar();
        org.joda.time.DateTime.Property property77 = dateTime73.weekyear();
        org.joda.time.DateTime dateTime78 = property77.roundHalfCeilingCopy();
        boolean boolean79 = interval59.isBefore((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.TimeOfDay timeOfDay80 = dateTime78.toTimeOfDay();
        int int81 = dateTime78.getMillisOfSecond();
        int int82 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime78);
        int int83 = dateTime47.getYearOfEra();
        org.joda.time.DateTime.Property property84 = dateTime47.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3L + "'", long72 == 3L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(gregorianCalendar76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfMonth();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.year();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(17L, 1645454862530L, chronology13);
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        boolean boolean17 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime6.toGregorianCalendar();
        int int11 = gregorianCalendar9.getActualMaximum(0);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar9);
        java.util.TimeZone timeZone13 = gregorianCalendar9.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        calendar0.setTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-95), 19);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        org.joda.time.DateTime dateTime28 = localTime27.toDateTimeToday();
        org.joda.time.LocalTime localTime30 = localTime27.minusMinutes(1);
        org.joda.time.LocalTime.Property property31 = localTime27.millisOfDay();
        int int32 = localTime27.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean34 = localTime27.isSupported(dateTimeFieldType33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        int int41 = dateTime39.getMonthOfYear();
        int int42 = dateTime39.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int48 = dateTimeZone46.getOffset((long) (byte) 1);
        long long50 = dateTimeZone44.getMillisKeepLocal(dateTimeZone46, (long) 3);
        org.joda.time.DateTime dateTime51 = dateTime39.toDateTime(dateTimeZone44);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime54 = dateTime39.withFieldAdded(durationFieldType52, 2022);
        org.joda.time.LocalTime localTime56 = localTime27.withFieldAdded(durationFieldType52, 1439);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.weekyears();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) (byte) 1, chronology70);
        int[] intArray73 = chronology62.get((org.joda.time.ReadablePartial) localTime71, (long) (short) -1);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.DateTime.Property property80 = dateTime78.minuteOfHour();
        int int81 = property80.getMinimumValue();
        org.joda.time.DateTime dateTime82 = property80.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime85 = null;
        boolean boolean86 = dateTimeZone84.isLocalDateTimeGap(localDateTime85);
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime82.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime89 = localTime71.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean90 = localTime27.equals((java.lang.Object) dateTime88);
        int int91 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime88);
        boolean boolean92 = calendar0.before((java.lang.Object) dateTimeZone19);
        long long94 = dateTimeZone19.previousTransition(1645454887558L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455226613,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=613,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455226613,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=623,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455226613,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=623,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3L + "'", long50 == 3L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-343140000) + "'", int91 == (-343140000));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1645454887558L + "'", long94 == 1645454887558L);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        long long23 = durationField20.subtract(0L, (long) (byte) 1);
        boolean boolean24 = durationField20.isPrecise();
        long long27 = durationField20.add(1645402200000L, (-1L));
        long long29 = durationField20.getMillis(1645454869965L);
        long long32 = durationField20.subtract(1645454910417L, 3720000);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60000L) + "'", long23 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645402140000L + "'", long27 == 1645402140000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 98727292197900000L + "'", long29 == 98727292197900000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1422254910417L + "'", long32 == 1422254910417L);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(5, 292278993, (-143999));
        java.util.Calendar calendar5 = builder4.build();
        calendar5.add(0, (int) (short) 10);
        calendar5.set(0, 889, 53308, 999, 983, (int) (byte) 10);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=889,WEEK_OF_YEAR=38,WEEK_OF_MONTH=4,DAY_OF_MONTH=53308,DAY_OF_YEAR=261,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=999,MINUTE=983,SECOND=10,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((-1645455183), 4, 600, 7020010, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7020010 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        int int15 = dateTimeField13.getMaximumValue((long) 'a');
        long long18 = dateTimeField13.add(0L, 25200000L);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter22.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withDefaultYear(1);
        boolean boolean26 = dateTimeFormatter25.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withPivotYear(0);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(0, 5);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter29.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfDay();
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.util.Locale locale38 = java.util.Locale.US;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getISO3Language();
        java.lang.String str41 = locale37.getDisplayName(locale38);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Locale.setDefault(locale37);
        java.lang.String str44 = dateTimeField35.getAsText((long) 70, locale37);
        java.lang.String str45 = dateTimeField13.getAsText(49, locale37);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 99 + "'", int15 == 99);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 795235190400000000L + "'", long18 == 795235190400000000L);
        org.junit.Assert.assertNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English" + "'", str41, "English");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645455226759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=46,MILLISECOND=759,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "24" + "'", str44, "24");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "49" + "'", str45, "49");
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        java.util.Locale locale2 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str3 = locale2.getCountry();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.lang.String str5 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "THU JAN 01 00:00:00 UTC 1970" + "'", str3, "THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone27.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.TimeOfDay timeOfDay33 = dateTime31.toTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime31.withWeekOfWeekyear(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone6.isLocalDateTimeGap(localDateTime7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((int) ' ', (-1), 599990, 1, (int) (byte) 10, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.Interval interval11 = interval9.withStartMillis((long) 17);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Period period22 = interval20.toPeriod();
        org.joda.time.Interval interval23 = interval20.toInterval();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.Interval interval43 = interval42.toInterval();
        boolean boolean44 = interval33.isBefore((org.joda.time.ReadableInterval) interval42);
        boolean boolean45 = interval20.overlaps((org.joda.time.ReadableInterval) interval42);
        org.joda.time.Period period46 = interval20.toPeriod();
        org.joda.time.Interval interval47 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = period46.getValue(190);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 190");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        calendar2.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        int int11 = calendar2.getWeeksInWeekYear();
        calendar2.set(48, 3720000, 999);
        java.util.Date date16 = calendar2.getTime();
        int int17 = date16.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=9722289600000000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=310057,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Feb 03 00:00:00 UTC 310057");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 308157 + "'", int17 == 308157);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Date date5 = new java.util.Date((long) (byte) 100);
        date5.setMinutes(11);
        long long8 = date5.getTime();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date5);
        java.util.Date date11 = new java.util.Date((long) (byte) 100);
        date11.setMinutes(11);
        long long14 = date11.getTime();
        int int15 = date11.getMonth();
        int int16 = date11.getMonth();
        java.time.Instant instant17 = date11.toInstant();
        int int18 = date11.getDate();
        java.util.Calendar.Builder builder19 = builder9.setInstant(date11);
        int int20 = date11.getMonth();
        java.lang.Object obj21 = date11.clone();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 660100L + "'", long8 == 660100L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 660100L + "'", long14 == 660100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "Thu Jan 01 00:11:00 UTC 1970");
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        calendar2.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes(53);
        org.joda.time.DateTimeField[] dateTimeFieldArray13 = localTime12.getFields();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldArray13);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weekyears" + "'", str2, "weekyears");
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval25.contains(readableInterval28);
        org.joda.time.Interval interval31 = interval25.withStartMillis((long) 99);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        long long42 = interval40.toDurationMillis();
        org.joda.time.Interval interval43 = interval40.toInterval();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        org.joda.time.DateTime dateTime57 = dateTime48.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime59 = dateTime57.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, readableDuration60);
        org.joda.time.Period period62 = interval61.toPeriod();
        boolean boolean63 = interval43.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.LocalTime localTime69 = dateTime68.toLocalTime();
        org.joda.time.DateTime.Property property70 = dateTime68.minuteOfHour();
        int int71 = property70.get();
        org.joda.time.Interval interval72 = property70.toInterval();
        org.joda.time.Period period73 = interval72.toPeriod();
        long long74 = interval72.toDurationMillis();
        boolean boolean75 = interval72.isBeforeNow();
        org.joda.time.Interval interval76 = interval72.toInterval();
        long long77 = interval72.getStartMillis();
        long long78 = interval72.getStartMillis();
        boolean boolean79 = interval43.isAfter((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Interval interval80 = interval31.overlap((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Duration duration81 = interval43.toDuration();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 60000L + "'", long42 == 60000L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 60000L + "'", long74 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645402199990L + "'", long77 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645402199990L + "'", long78 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.DateTime dateTime3 = localTime1.toDateTimeToday();
        int int4 = dateTime3.getWeekyear();
        int int5 = dateTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 2, 22]");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        long long5 = date1.getTime();
        date1.setSeconds(5);
        int int8 = date1.getMinutes();
        int int9 = date1.getYear();
        int int10 = date1.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:05 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 660100L + "'", long5 == 660100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 3);
        long long41 = dateTimeZone32.convertLocalToUTC((long) 9, false);
        java.lang.String str42 = dateTimeZone32.toString();
        org.joda.time.Chronology chronology43 = chronology5.withZone(dateTimeZone32);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone32);
        java.lang.String str45 = dateTimeZone32.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod31 = period28.toMutablePeriod();
        org.joda.time.Period period32 = mutablePeriod31.toPeriod();
        org.joda.time.PeriodType periodType33 = mutablePeriod31.getPeriodType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("days", strMap8);
        java.util.Set<java.lang.String> strSet10 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet10);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet14);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection16);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        int int7 = dateTime5.getMonthOfYear();
        int int8 = dateTime5.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime5.plusMinutes(5);
        org.joda.time.DateTime dateTime14 = dateTime5.minusMillis(419);
        org.joda.time.Chronology chronology15 = dateTime5.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.months();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 49, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property17 = dateTime13.weekyear();
        int int18 = property17.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        long long5 = date1.getTime();
        date1.setSeconds((int) ' ');
        java.lang.String str8 = date1.toLocaleString();
        date1.setYear(3);
        date1.setMinutes(0);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime28 = dateTime17.minus((long) '#');
        org.joda.time.DateTime.Property property29 = dateTime17.weekyear();
        org.joda.time.DurationField durationField30 = property29.getRangeDurationField();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePartial) localTime45, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology36.weekyear();
        int int50 = dateTimeField48.get((long) 7);
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale52.getVariant();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale52);
        java.lang.String str56 = locale52.getScript();
        java.lang.String str57 = dateTimeField48.getAsShortText(59, locale52);
        int int58 = property29.getMaximumTextLength(locale52);
        java.lang.String str59 = locale52.getISO3Language();
        boolean boolean60 = date1.equals((java.lang.Object) str59);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:32 UTC 1903");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 660100L + "'", long5 == 660100L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Jan 1, 1970 12:11:32 AM" + "'", str8, "Jan 1, 1970 12:11:32 AM");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645455227456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=47,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "59" + "'", str57, "59");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "eng" + "'", str59, "eng");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 1, chronology40);
        int[] intArray43 = chronology32.get((org.joda.time.ReadablePartial) localTime41, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField45 = durationFieldType26.getField(chronology32);
        org.joda.time.DurationFieldType durationFieldType46 = durationField45.getType();
        org.joda.time.LocalTime localTime48 = localTime22.withFieldAdded(durationFieldType46, 4);
        org.joda.time.LocalTime.Property property49 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime50 = property49.roundCeilingCopy();
        org.joda.time.LocalTime localTime51 = property49.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.minusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = localTime2.minusMinutes(58);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.Period period21 = interval19.toPeriod();
        java.lang.String str22 = interval19.toString();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.get();
        org.joda.time.Interval interval31 = property29.toInterval();
        org.joda.time.Interval interval32 = interval31.toInterval();
        long long33 = interval31.toDurationMillis();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = interval31.toPeriod(periodType34);
        org.joda.time.Interval interval36 = interval19.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = interval36.toPeriod(periodType37);
        org.joda.time.ReadableInterval readableInterval39 = null;
        boolean boolean40 = interval36.contains(readableInterval39);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        int int47 = dateTime45.getMonthOfYear();
        int int48 = dateTime45.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        org.joda.time.DateTime dateTime57 = dateTime45.toDateTime(dateTimeZone50);
        org.joda.time.Interval interval58 = interval36.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        int int67 = localTime61.compareTo((org.joda.time.ReadablePartial) localTime64);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean69 = localTime61.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property70 = dateTime45.property(dateTimeFieldType68);
        org.joda.time.DateTime dateTime72 = dateTime45.withMillisOfDay(10);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.LocalTime localTime78 = dateTime77.toLocalTime();
        org.joda.time.DateTime.Property property79 = dateTime77.minuteOfHour();
        int int80 = property79.getMinimumValue();
        org.joda.time.DateTime dateTime81 = property79.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property82 = dateTime81.dayOfYear();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime84 = dateTime81.minus(readableDuration83);
        org.joda.time.DateTime dateTime86 = dateTime81.withYearOfEra(3);
        org.joda.time.DateTime dateTime88 = dateTime86.minusYears(888);
        boolean boolean89 = dateTime72.isEqual((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = dateTime72.toDateTime();
        org.joda.time.DateTime dateTime91 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str22, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.minusSeconds(1);
        int int20 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime.Property property21 = dateTime16.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime16.withDayOfWeek(30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone3.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime6.withPeriodAdded(readablePeriod7, 17);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        int int16 = dateTime14.getMonthOfYear();
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime29 = dateTime14.withFieldAdded(durationFieldType27, 2022);
        org.joda.time.LocalTime localTime31 = localTime9.withFieldAdded(durationFieldType27, 122);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        org.joda.time.Chronology chronology42 = chronology38.withUTC();
        org.joda.time.DurationField durationField43 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.halfdayOfDay();
        long long48 = chronology42.add(121320000L, 31L, (int) '#');
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyear();
        boolean boolean50 = durationFieldType27.isSupported(chronology42);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.Chronology chronology57 = localTime54.getChronology();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) (byte) 1, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfMonth();
        org.joda.time.Chronology chronology61 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekyearOfCentury();
        boolean boolean65 = durationFieldType27.isSupported(chronology61);
        boolean boolean66 = durationFieldType0.isSupported(chronology61);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 121321085L + "'", long48 == 121321085L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology5.seconds();
        boolean boolean19 = durationField18.isPrecise();
        long long21 = durationField18.getMillis(458342);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 458342000L + "'", long21 == 458342000L);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours((int) 'u');
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        long long33 = dateTimeZone24.convertLocalToUTC((long) 9, false);
        java.lang.String str34 = dateTimeZone24.toString();
        org.joda.time.DateTime dateTime35 = localTime22.toDateTimeToday(dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime35.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime6.toDateTime(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getID();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.010" + "'", str34, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.Interval interval36 = interval9.withStart((org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = dateTime35.isEqual((long) 9);
        int int39 = dateTime35.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property40 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime41 = property40.roundFloorCopy();
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(559);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Interval interval11 = interval8.toInterval();
        boolean boolean13 = interval8.isAfter((long) (-143999));
        org.joda.time.DateTime dateTime14 = interval8.getStart();
        boolean boolean15 = interval8.containsNow();
        long long16 = interval8.getEndMillis();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        long long27 = interval25.toDurationMillis();
        org.joda.time.Interval interval28 = interval25.toInterval();
        boolean boolean29 = interval28.containsNow();
        boolean boolean30 = interval8.isBefore((org.joda.time.ReadableInterval) interval28);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645402259990L + "'", long16 == 1645402259990L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 60000L + "'", long27 == 60000L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.getName();
        long long13 = dateTimeField9.add((long) 1970, (long) (short) 0);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.parse("14");
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime15);
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalTime localTime38 = localTime34.plus(readablePeriod37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean40 = localTime38.isSupported(dateTimeFieldType39);
        org.joda.time.DateTime dateTime41 = dateTime31.withFields((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int47 = dateTimeZone45.getOffset((long) (byte) 1);
        long long49 = dateTimeZone43.getMillisKeepLocal(dateTimeZone45, (long) 3);
        long long52 = dateTimeZone43.convertLocalToUTC((long) 9, false);
        java.lang.String str53 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime54 = localTime38.toDateTimeToday(dateTimeZone43);
        long long55 = dateTime54.getMillis();
        boolean boolean56 = interval26.equals((java.lang.Object) long55);
        long long57 = interval26.getStartMillis();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        int int66 = localTime60.compareTo((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.LocalTime.Property property67 = localTime60.hourOfDay();
        org.joda.time.LocalTime localTime69 = property67.addCopy(6);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        org.joda.time.LocalTime localTime75 = dateTime74.toLocalTime();
        org.joda.time.DateTime.Property property76 = dateTime74.minuteOfHour();
        int int77 = property76.get();
        org.joda.time.Interval interval78 = property76.toInterval();
        org.joda.time.Interval interval79 = interval78.toInterval();
        long long80 = interval78.toDurationMillis();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = interval78.toPeriod(periodType81);
        org.joda.time.LocalTime localTime84 = localTime69.withPeriodAdded((org.joda.time.ReadablePeriod) period82, 8);
        org.joda.time.PeriodType periodType85 = period82.getPeriodType();
        org.joda.time.Period period86 = interval26.toPeriod(periodType85);
        org.joda.time.LocalTime localTime87 = localTime15.plus((org.joda.time.ReadablePeriod) period86);
        int[] intArray88 = localTime15.getValues();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1970L + "'", long13 == 1970L);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3L + "'", long49 == 3L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645402199990L + "'", long55 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645402199990L + "'", long57 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 60000L + "'", long80 == 60000L);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[14, 0, 0, 0]");
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        java.lang.String str46 = property45.toString();
        org.joda.time.DateTime dateTime47 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime49 = property45.addToCopy((long) 366);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears(7);
        org.joda.time.DateTime dateTime58 = dateTime54.plusWeeks((int) (short) 10);
        int int59 = property45.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, readableDuration60);
        boolean boolean62 = interval8.equals((java.lang.Object) interval61);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localTime65.toDateTime(readableInstant66);
        org.joda.time.LocalTime localTime68 = dateTime67.toLocalTime();
        int int69 = dateTime67.getMonthOfYear();
        int int70 = dateTime67.getHourOfDay();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int81 = dateTimeZone79.getOffset((long) (byte) 1);
        long long83 = dateTimeZone77.getMillisKeepLocal(dateTimeZone79, (long) 3);
        org.joda.time.DateTime dateTime84 = dateTime75.withZone(dateTimeZone77);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime84);
        boolean boolean86 = interval8.equals((java.lang.Object) dateTime84);
        org.joda.time.DateTime dateTime87 = interval8.getEnd();
        boolean boolean89 = interval8.isBefore(1645455158481L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[minuteOfHour]" + "'", str46, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-100800) + "'", int59 == (-100800));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3L + "'", long83 == 3L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.getMinimumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone39.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.Interval interval45 = interval28.withEnd((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = interval28.toDuration();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.getMinimumValue();
        org.joda.time.DateTime dateTime66 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone68.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) dateTime72);
        org.joda.time.Interval interval74 = interval57.withEnd((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationAfterStart(readableDuration76);
        org.joda.time.Duration duration78 = interval77.toDuration();
        org.joda.time.Period period79 = duration78.toPeriod();
        boolean boolean80 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.ReadableDuration readableDuration81 = null;
        boolean boolean82 = duration46.isShorterThan(readableDuration81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        boolean boolean84 = duration46.isEqual(readableDuration83);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        long long22 = durationField19.getMillis(0);
        long long24 = durationField19.getMillis(42);
        int int26 = durationField19.getValue(53308415L);
        long long28 = durationField19.getValueAsLong(1645455127724L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 151200000L + "'", long24 == 151200000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 14 + "'", int26 == 14);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 457070L + "'", long28 == 457070L);
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone27.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        java.util.Date date33 = dateTime31.toDate();
        int int34 = dateTime31.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 600000 + "'", int34 == 600000);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        int int16 = localTime10.compareTo((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property17 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime19 = property17.addCopy(6);
        org.joda.time.LocalTime localTime20 = property17.withMaximumValue();
        org.joda.time.LocalTime localTime22 = property17.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime23 = property17.roundHalfEvenCopy();
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType6.getField(chronology24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(1645454950258L, chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(390, 95, (int) 'u', 11, 4, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 95 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        int int21 = dateTimeField10.get((long) 16);
        long long24 = dateTimeField10.getDifferenceAsLong(1645455072680L, 1645455154959L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-1519753794000L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int7 = dateTimeZone5.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, dateTimeZone5);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded((-62162812260010L), 11);
        boolean boolean14 = dateTime2.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.LocalTime localTime26 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localTime11.getFieldTypes();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        java.lang.String str35 = property34.toString();
        org.joda.time.DateTime dateTime36 = property34.roundFloorCopy();
        org.joda.time.DateTime dateTime38 = property34.addToCopy((long) 366);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears(7);
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks((int) (short) 10);
        int int48 = property34.getDifference((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, readableDuration49);
        org.joda.time.DateTime dateTime51 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays((int) (short) 100);
        int int54 = dateTime53.getHourOfDay();
        org.joda.time.DateTime.Property property55 = dateTime53.year();
        java.util.Locale locale56 = java.util.Locale.US;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale56.getVariant();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale56);
        java.lang.String str61 = locale56.getUnicodeLocaleType("CN");
        java.lang.String str62 = locale56.getDisplayScript();
        int int63 = property55.getMaximumShortTextLength(locale56);
        int int64 = property55.get();
        org.joda.time.DurationField durationField65 = property55.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField66 = property55.getField();
        long long69 = dateTimeField66.set(1645455250269L, 31);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[minuteOfHour]" + "'", str35, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-100800) + "'", int48 == (-100800));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645455228223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=48,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-61184451949731L) + "'", long69 == (-61184451949731L));
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((int) 'a');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Period period42 = interval40.toPeriod();
        org.joda.time.DateTime dateTime43 = dateTime31.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.PeriodType periodType44 = period42.getPeriodType();
        int int45 = period42.size();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = period42.getValue(11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.Interval interval36 = interval35.toInterval();
        long long37 = interval35.toDurationMillis();
        org.joda.time.Interval interval38 = interval35.toInterval();
        org.joda.time.Interval interval39 = interval9.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        org.joda.time.DateTime dateTime53 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = dateTime53.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, readableDuration56);
        org.joda.time.Period period58 = interval57.toPeriod();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval57.toPeriod(periodType59);
        org.joda.time.PeriodType periodType61 = period60.getPeriodType();
        org.joda.time.Period period62 = interval38.toPeriod(periodType61);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((-59006173800000L));
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.Chronology chronology71 = localTime68.getChronology();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) (byte) 1, chronology71);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology71);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DateTime.Property property75 = dateTime73.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime73.toMutableDateTimeISO();
        boolean boolean77 = instant64.isBefore((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean78 = interval38.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 60000L + "'", long37 == 60000L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.MutableDateTime mutableDateTime29 = instant28.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.weekyear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 5, chronology18);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DateTime dateTime42 = dateTime31.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime9.minus((org.joda.time.ReadablePeriod) period41);
        long long44 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime9.secondOfMinute();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.getMinimumValue();
        org.joda.time.DateTime dateTime63 = property61.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfYear();
        boolean boolean65 = interval54.contains((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        java.lang.String str73 = property72.toString();
        org.joda.time.DateTime dateTime74 = property72.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.minus(readableDuration75);
        org.joda.time.Interval interval77 = interval54.withStart((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Interval interval78 = interval54.toInterval();
        org.joda.time.DateTime dateTime79 = interval54.getEnd();
        org.joda.time.DateTime dateTime81 = dateTime79.minus(1645401697000L);
        boolean boolean82 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime81);
        java.util.Locale locale84 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar85 = dateTime9.toCalendar(locale84);
        calendar85.set(20, 7800000, 600000, (int) (byte) 0, 28);
        // The following exception was thrown during execution in test generation
        try {
            int int93 = calendar85.getMaximum(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645402199990L + "'", long44 == 1645402199990L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Property[minuteOfHour]" + "'", str73, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(calendar85);
        org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=20,MONTH=7800000,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=600000,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=28,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        java.util.Date date5 = new java.util.Date(53, 1, 2922789, (-292275054), 370);
        int int6 = date5.getYear();
        int int7 = date5.getHours();
        org.junit.Assert.assertEquals(date5.toString(), "Thu May 08 00:10:00 UTC 23388");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21488 + "'", int6 == 21488);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str3 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withLocale(locale8);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfMonth();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) 'u');
        org.joda.time.LocalTime localTime25 = localTime21.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        long long36 = dateTimeZone27.convertLocalToUTC((long) 9, false);
        java.lang.String str37 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime38 = localTime25.toDateTimeToday(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime38.minusHours((int) 'a');
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.lang.String str54 = property49.getAsText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property49.getFieldType();
        int int56 = dateTime42.get(dateTimeFieldType55);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        org.joda.time.DateTime.Property property63 = dateTime61.minuteOfHour();
        int int64 = property63.get();
        org.joda.time.Interval interval65 = property63.toInterval();
        org.joda.time.Interval interval66 = interval65.toInterval();
        long long67 = interval65.toDurationMillis();
        org.joda.time.Interval interval69 = interval65.withStartMillis(10L);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.Chronology chronology76 = localTime73.getChronology();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) (byte) 1, chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology76);
        org.joda.time.Interval interval79 = interval65.withChronology(chronology76);
        org.joda.time.DateTimeZone dateTimeZone80 = chronology76.getZone();
        boolean boolean81 = dateTimeFieldType55.isSupported(chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter10.withChronology(chronology76);
        org.joda.time.Chronology chronology83 = dateTimeFormatter82.getChronolgy();
        org.joda.time.DurationField durationField84 = chronology83.years();
        boolean boolean85 = durationField84.isPrecise();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (United States)" + "'", str51, "English (United States)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str53, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 53 + "'", int56 == 53);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMinutes(5);
        int int12 = dateTime4.getMonthOfYear();
        int int13 = dateTime4.getHourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime4.minusWeeks(983);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.LocalTime localTime28 = localTime26.plusHours((int) 'u');
        org.joda.time.LocalTime localTime30 = localTime26.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        int int37 = dateTime35.getMonthOfYear();
        int int38 = dateTime35.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int44 = dateTimeZone42.getOffset((long) (byte) 1);
        long long46 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 3);
        org.joda.time.DateTime dateTime47 = dateTime35.toDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime48 = localTime30.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime.Property property49 = dateTime48.weekOfWeekyear();
        org.joda.time.DateTime dateTime51 = property49.addWrapFieldToCopy(17);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        boolean boolean53 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime4.withWeekOfWeekyear(5);
        org.joda.time.DateTime dateTime10 = dateTime4.plusMinutes(53283606);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.getMinimumValue();
        org.joda.time.DateTime dateTime29 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone31.isLocalDateTimeGap(localDateTime32);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime29.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime35);
        org.joda.time.Interval interval37 = interval20.withEnd((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = interval37.withDurationAfterStart(readableDuration39);
        org.joda.time.Duration duration41 = interval40.toDuration();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int52 = dateTimeZone50.getOffset((long) (byte) 1);
        long long54 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, (long) 3);
        org.joda.time.DateTime dateTime55 = dateTime46.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime57 = dateTime46.minus((long) '#');
        org.joda.time.DateTime.Property property58 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime60 = dateTime46.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.LocalTime localTime66 = dateTime65.toLocalTime();
        org.joda.time.DateTime.Property property67 = dateTime65.minuteOfHour();
        int int68 = property67.get();
        org.joda.time.Interval interval69 = property67.toInterval();
        org.joda.time.Interval interval70 = interval69.toInterval();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        int int78 = property77.getMinimumValue();
        org.joda.time.DateTime dateTime79 = property77.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime82 = null;
        boolean boolean83 = dateTimeZone81.isLocalDateTimeGap(localDateTime82);
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime(dateTimeZone81);
        org.joda.time.DateTime dateTime85 = dateTime79.withZoneRetainFields(dateTimeZone81);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((java.lang.Object) dateTime85);
        org.joda.time.Interval interval87 = interval70.withEnd((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Duration duration88 = interval70.toDuration();
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration88);
        boolean boolean90 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration88);
        org.joda.time.Period period91 = duration88.toPeriod();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration88);
        org.joda.time.ReadableInterval readableInterval93 = null;
        boolean boolean94 = interval92.contains(readableInterval93);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3L + "'", long54 == 3L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (-95), chronology11);
        org.joda.time.DurationField durationField15 = chronology11.millis();
        long long17 = durationField15.getMillis(53440539L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53440539L + "'", long17 == 53440539L);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        org.joda.time.DateTime dateTime44 = dateTime35.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, readableDuration47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval48.toPeriod(periodType50);
        org.joda.time.Period period52 = period51.toPeriod();
        int[] intArray55 = chronology5.get((org.joda.time.ReadablePeriod) period52, 19044L, (-60000L));
        org.joda.time.DateTimeField dateTimeField56 = chronology5.centuryOfEra();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime64.plus(readablePeriod67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean70 = localTime68.isSupported(dateTimeFieldType69);
        org.joda.time.DateTime dateTime71 = dateTime61.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int77 = dateTimeZone75.getOffset((long) (byte) 1);
        long long79 = dateTimeZone73.getMillisKeepLocal(dateTimeZone75, (long) 3);
        long long82 = dateTimeZone73.convertLocalToUTC((long) 9, false);
        java.lang.String str83 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime84 = localTime68.toDateTimeToday(dateTimeZone73);
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.now(dateTimeZone73);
        org.joda.time.Chronology chronology86 = chronology5.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField87 = chronology86.halfdays();
        org.joda.time.DateTimeField dateTimeField88 = chronology86.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, -1, -19, -44]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 3L + "'", long79 == 3L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.DateTime dateTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("days", strMap4);
        java.lang.String[] strArray16 = new java.lang.String[] { "2022-02-21T00:10:00.000Z", "1970-01-01T00:00:00.052Z", "2022-02-21T00:10:00.000Z", "days", "days", "2022-02-21T00:10:00.000Z", "United States", "United States", "dayOfMonth", "10" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.String str43 = locale42.getScript();
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = locale44.getDisplayLanguage();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale44);
        java.util.Locale locale47 = java.util.Locale.UK;
        java.util.Locale locale51 = new java.util.Locale("", "hi!", "");
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Locale locale53 = java.util.Locale.US;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayCountry(locale57);
        java.util.Locale locale59 = java.util.Locale.US;
        java.util.Locale locale60 = locale59.stripExtensions();
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale69);
        java.util.Locale locale71 = java.util.Locale.US;
        java.lang.String str72 = locale71.getDisplayName();
        java.util.Locale locale73 = java.util.Locale.UK;
        java.util.Locale locale75 = new java.util.Locale("hours");
        java.util.Locale locale76 = java.util.Locale.US;
        java.lang.String str77 = locale76.getDisplayLanguage();
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale76);
        java.util.Locale locale82 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale82);
        java.util.Locale[] localeArray84 = new java.util.Locale[] { locale37, locale40, locale42, locale44, locale47, locale51, locale57, locale59, locale62, locale63, locale65, locale69, locale71, locale73, locale75, locale76, locale82 };
        java.util.ArrayList<java.util.Locale> localeList85 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList85, localeArray84);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList85, filteringMode87);
        java.util.Locale locale89 = java.util.Locale.lookup(languageRangeList31, (java.util.Collection<java.util.Locale>) localeList88);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList26, (java.util.Collection<java.util.Locale>) localeList88, filteringMode90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList92, filteringMode93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale95 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "inglese" + "'", str45, "inglese");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645455228891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=48,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "und" + "'", str52, "und");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "United States" + "'", str58, "United States");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English (United States)" + "'", str72, "English (United States)");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale75.toString(), "hours");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645455228891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=48,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale82.toString(), "_HI!");
        org.junit.Assert.assertNotNull(localeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode87.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNull(locale89);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode93.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList94);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(5);
        long long5 = dateTimeZone1.convertLocalToUTC((-8465561423999999698L), true, 1645423799990L);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = localTime8.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePartial) localTime20, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.dayOfYear();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Period period34 = interval32.toPeriod();
        int[] intArray36 = chronology11.get((org.joda.time.ReadablePeriod) period34, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int42 = dateTimeZone40.getOffset((long) (byte) 1);
        long long44 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 3);
        long long47 = dateTimeZone38.convertLocalToUTC((long) 9, false);
        java.lang.String str48 = dateTimeZone38.toString();
        org.joda.time.Chronology chronology49 = chronology11.withZone(dateTimeZone38);
        int int51 = dateTimeZone38.getOffsetFromLocal(1645454862530L);
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        java.lang.String str55 = dateTimeZone38.getShortName(25200117L, locale54);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone38);
        long long59 = dateTimeZone1.getMillisKeepLocal(dateTimeZone38, (long) 600059);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-8465561424017999698L) + "'", long5 == (-8465561424017999698L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + category53 + "' != '" + java.util.Locale.Category.FORMAT + "'", category53.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 18600049L + "'", long59 == 18600049L);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter5.getParser();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTime dateTime19 = localTime18.toDateTimeToday();
        org.joda.time.LocalTime localTime21 = localTime18.minusMinutes(1);
        org.joda.time.LocalTime.Property property22 = localTime18.millisOfDay();
        int int23 = localTime18.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean25 = localTime18.isSupported(dateTimeFieldType24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        int int32 = dateTime30.getMonthOfYear();
        int int33 = dateTime30.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        org.joda.time.DateTime dateTime42 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime45 = dateTime30.withFieldAdded(durationFieldType43, 2022);
        org.joda.time.LocalTime localTime47 = localTime18.withFieldAdded(durationFieldType43, 1439);
        org.joda.time.DateTime dateTime49 = dateTime10.withFieldAdded(durationFieldType43, 12);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        int int2 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date3 = calendar0.getTime();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int14 = dateTimeZone12.getOffset((long) (byte) 1);
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 3);
        org.joda.time.DateTime dateTime17 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime19 = dateTime8.minus((long) '#');
        org.joda.time.DateTime.Property property20 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime22 = dateTime8.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime8.toDateTime();
        org.joda.time.TimeOfDay timeOfDay24 = dateTime8.toTimeOfDay();
        boolean boolean25 = calendar0.before((java.lang.Object) timeOfDay24);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime28 = localTime26.plusMinutes(1022);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455229008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=49,MILLISECOND=8,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455229008L + "'", long1 == 1645455229008L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:53:49 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar6 = builder0.build();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime10 = null;
        boolean boolean11 = dateTimeZone9.isLocalDateTimeGap(localDateTime10);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone9);
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(3);
        int int15 = localTime14.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone18.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone18);
        org.joda.time.LocalTime localTime22 = localTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        int[] intArray23 = localTime21.getValues();
        java.util.Calendar.Builder builder24 = builder0.setFields(intArray23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime29.minus((long) '#');
        org.joda.time.DateTime.Property property41 = dateTime29.weekyear();
        org.joda.time.DateTime dateTime43 = dateTime29.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime29.toDateTime();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = localTime48.getChronology();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.monthOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((java.lang.Object) dateTime44, chronology51);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        int int65 = localTime59.compareTo((org.joda.time.ReadablePartial) localTime62);
        org.joda.time.LocalTime.Property property66 = localTime59.hourOfDay();
        org.joda.time.LocalTime localTime68 = property66.addCopy(6);
        int int69 = localTime68.getSecondOfMinute();
        org.joda.time.LocalTime.Property property70 = localTime68.secondOfMinute();
        org.joda.time.LocalTime localTime71 = property70.getLocalTime();
        int[] intArray73 = chronology51.get((org.joda.time.ReadablePartial) localTime71, (long) 'u');
        java.util.Calendar.Builder builder74 = builder24.setFields(intArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder76 = builder24.setCalendarType("2022-02-21T00:09:59.990Z/2022-02-21T00:10:59.990Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 2022-02-21T00:09:59.990Z/2022-02-21T00:10:59.990Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-40019997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=53,SECOND=0,MILLISECOND=3,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 117]");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = property6.getAsText(locale13);
        long long16 = property6.remainder();
        org.joda.time.DateTimeField dateTimeField17 = property6.getField();
        java.lang.String str18 = property6.getAsString();
        java.lang.String str19 = property6.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United States" + "'", str14, "United States");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10" + "'", str18, "10");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[minuteOfHour]" + "'", str19, "Property[minuteOfHour]");
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property6.getMaximumShortTextLength(locale9);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale9);
        java.lang.String str13 = locale9.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455229083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=49,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en_US" + "'", str13, "en_US");
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, 0L, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter8.getZone();
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronolgy();
        java.lang.Appendable appendable12 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        int int16 = property15.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property15.getFieldType();
        org.joda.time.DateTime dateTime19 = property15.addToCopy(1439);
        org.joda.time.DateTime dateTime21 = dateTime19.minus((long) 120);
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable12, (org.joda.time.ReadableInstant) dateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 62 + "'", int16 == 62);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        int int4 = calendar2.getActualMaximum(6);
        calendar2.roll(0, true);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar2.getMaximum((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=49,MILLISECOND=290,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 365 + "'", int4 == 365);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localTime25, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = chronology16.dayOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.Period period39 = interval37.toPeriod();
        int[] intArray41 = chronology16.get((org.joda.time.ReadablePeriod) period39, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (byte) 1, chronology56);
        int[] intArray59 = chronology48.get((org.joda.time.ReadablePartial) localTime57, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField60 = chronology48.dayOfYear();
        org.joda.time.DurationField durationField61 = durationFieldType42.getField(chronology48);
        int int62 = period39.get(durationFieldType42);
        int[] intArray65 = chronology9.get((org.joda.time.ReadablePeriod) period39, 1645454861756L, (long) 9);
        org.joda.time.DurationField durationField66 = chronology9.hours();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(111539999L, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval68 = new org.joda.time.Interval(373249672920000000L, (long) (-74714), chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localTime25, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = chronology16.weekyear();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 5, chronology16);
        org.joda.time.DurationField durationField30 = chronology16.seconds();
        int int31 = durationField9.compareTo(durationField30);
        org.joda.time.DurationFieldType durationFieldType32 = durationField9.getType();
        long long33 = durationField9.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 31556952000L + "'", long33 == 31556952000L);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(888, 53625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 888 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        java.util.Date date5 = new java.util.Date((-26), 891, 10, 2070, 18000000);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Sep 25 06:00:00 UTC 1982");
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter8.withChronology(chronology16);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.dayOfYear();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.get();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Period period53 = interval51.toPeriod();
        int[] intArray55 = chronology30.get((org.joda.time.ReadablePeriod) period53, (long) (byte) 100);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (byte) 1, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfMonth();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(chronology62);
        long long68 = chronology30.set((org.joda.time.ReadablePartial) localTime66, 25200000L);
        org.joda.time.DateTimeField dateTimeField69 = chronology30.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter24.withChronology(chronology30);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 53629505L + "'", long68 == 53629505L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar28 = dateTime25.toGregorianCalendar();
        org.joda.time.DateTime.Property property29 = dateTime25.weekyear();
        org.joda.time.DateTime dateTime30 = property29.roundHalfCeilingCopy();
        boolean boolean31 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime30.getMillisOfDay();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        int int41 = localTime35.compareTo((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property42 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime44 = property42.addCopy(6);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.DateTime.Property property51 = dateTime49.minuteOfHour();
        int int52 = property51.get();
        org.joda.time.Interval interval53 = property51.toInterval();
        org.joda.time.Interval interval54 = interval53.toInterval();
        long long55 = interval53.toDurationMillis();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval53.toPeriod(periodType56);
        org.joda.time.LocalTime localTime59 = localTime44.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 8);
        org.joda.time.Period period60 = period57.toPeriod();
        java.lang.String str61 = period57.toString();
        org.joda.time.DurationFieldType durationFieldType63 = period57.getFieldType(5);
        org.joda.time.DateTime dateTime64 = dateTime30.plus((org.joda.time.ReadablePeriod) period57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = dateTime30.withYearOfEra((-27423369));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27423369 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 60000L + "'", long55 == 60000L);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT1M" + "'", str61, "PT1M");
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        calendar0.setTimeInMillis((long) 1);
        long long6 = calendar0.getTimeInMillis();
        int int7 = calendar0.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        int int16 = dateTimeField13.get(21600000L);
        long long19 = dateTimeField13.set(175367340000L, 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-866011860000L) + "'", long19 == (-866011860000L));
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(9);
        java.lang.StringBuffer stringBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer11, (long) 308157);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        long long39 = interval8.getStartMillis();
        org.joda.time.Interval interval41 = interval8.withEndMillis(1645454908348L);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.getMinimumValue();
        org.joda.time.DateTime dateTime50 = property48.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.minus(readableDuration52);
        java.util.Date date54 = dateTime53.toDate();
        java.lang.String str56 = dateTime53.toString("14:48:35.924");
        org.joda.time.DateTime dateTime57 = dateTime53.withTimeAtStartOfDay();
        boolean boolean58 = interval8.equals((java.lang.Object) dateTime57);
        org.joda.time.MutableInterval mutableInterval59 = interval8.toMutableInterval();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfHour();
        java.lang.String str67 = property66.getAsString();
        org.joda.time.DateTime dateTime68 = property66.withMaximumValue();
        org.joda.time.DateTime dateTime70 = dateTime68.minusHours(34);
        org.joda.time.DateTime dateTime71 = dateTime70.withEarlierOffsetAtOverlap();
        boolean boolean72 = mutableInterval59.isBefore((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645402199990L + "'", long39 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(date54);
        org.junit.Assert.assertEquals(date54.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "14:48:35.924" + "'", str56, "14:48:35.924");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableInterval59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10" + "'", str67, "10");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant7 = calendar0.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar0.getGreatestMinimum(458342);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 458342");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455229701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=49,MILLISECOND=701,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology5.getZone();
        org.joda.time.DateTimeField dateTimeField45 = chronology5.secondOfMinute();
        org.joda.time.DurationField durationField46 = chronology5.halfdays();
        long long50 = chronology5.add((-880L), 53389102L, 473354279);
        java.lang.String str51 = chronology5.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53629715L + "'", long43 == 53629715L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25271959883666578L + "'", long50 == 25271959883666578L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime13 = property9.addCopy(1645454873951L);
        org.joda.time.LocalTime localTime14 = property9.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalTime localTime24 = localTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime localTime26 = localTime14.minusMillis((-95));
        org.joda.time.LocalTime.Property property27 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime28 = property27.withMinimumValue();
        org.joda.time.LocalTime.Property property29 = localTime28.minuteOfHour();
        org.joda.time.Chronology chronology30 = localTime28.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        int int39 = localTime33.compareTo((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime.Property property40 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        int int47 = dateTime45.getMonthOfYear();
        int int48 = dateTime45.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        org.joda.time.DateTime dateTime57 = dateTime45.toDateTime(dateTimeZone50);
        int int58 = dateTime57.getEra();
        org.joda.time.DateTime.Property property59 = dateTime57.millisOfSecond();
        int int60 = property40.getDifference((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime57.secondOfMinute();
        org.joda.time.Chronology chronology62 = dateTime57.getChronology();
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.now(chronology62);
        boolean boolean64 = localTime28.isEqual((org.joda.time.ReadablePartial) localTime63);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-457055) + "'", int60 == (-457055));
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.getName();
        int int13 = dateTimeField9.getDifference(1645454965929L, 1645454902320L);
        java.lang.String str15 = dateTimeField9.getAsText((long) 1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale23.getDisplayName(locale25);
        java.lang.String str27 = property22.getAsText(locale23);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str29 = locale28.getCountry();
        java.lang.String str30 = property22.getAsText(locale28);
        int int31 = dateTimeField9.getMaximumShortTextLength(locale28);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        int[] intArray48 = chronology37.get((org.joda.time.ReadablePartial) localTime46, (long) (short) -1);
        long long52 = chronology37.add((long) ' ', (-61914758399990L), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField53 = chronology37.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clear();
        java.util.Locale.Builder builder60 = builder56.setVariant("53275870");
        java.util.Locale.Builder builder61 = builder60.clear();
        java.util.Locale.Builder builder63 = builder60.setRegion("");
        java.util.Locale locale64 = builder63.build();
        java.util.Locale locale65 = builder63.build();
        java.lang.String str66 = dateTimeField53.getAsText(readablePartial54, 789, locale65);
        java.lang.String str67 = locale28.getDisplayLanguage(locale65);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English (United States)" + "'", str24, "English (United States)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str26, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "10" + "'", str27, "10");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CN" + "'", str29, "CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10" + "'", str30, "10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-61914758399958L) + "'", long52 == (-61914758399958L));
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "789" + "'", str66, "789");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese" + "'", str67, "Chinese");
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DurationField durationField17 = chronology5.hours();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField19 = chronology5.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        boolean boolean21 = dateTimeFieldType12.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.centuryOfEra();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.millisOfSecond();
        org.joda.time.DurationField durationField25 = chronology19.days();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 1, chronology40);
        int[] intArray43 = chronology32.get((org.joda.time.ReadablePartial) localTime41, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = chronology32.weekyear();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 5, chronology32);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.DateTime dateTime56 = dateTime45.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod57 = period55.toMutablePeriod();
        int[] intArray59 = chronology19.get((org.joda.time.ReadablePeriod) period55, 7687676336460000L);
        org.joda.time.LocalTime localTime60 = localTime11.minus((org.joda.time.ReadablePeriod) period55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime62 = localTime11.withSecondOfMinute(60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 60 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 12711105, 0, 9, 1, 0, 0]");
        org.junit.Assert.assertNotNull(localTime60);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        boolean boolean8 = dateTimeFormatter7.isOffsetParsed();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime13.plusHours(1970);
        org.joda.time.DateTime dateTime29 = dateTime27.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime37.plus(readablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = localTime41.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = dateTime34.withFields((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        long long55 = dateTimeZone46.convertLocalToUTC((long) 9, false);
        java.lang.String str56 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime57 = localTime41.toDateTimeToday(dateTimeZone46);
        java.util.Locale locale59 = null;
        java.lang.String str60 = dateTimeZone46.getShortName((long) 100, locale59);
        boolean boolean62 = dateTimeZone46.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime63 = dateTime29.withZoneRetainFields(dateTimeZone46);
        int int65 = dateTimeZone46.getStandardOffset(2863424L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter7.withZone(dateTimeZone46);
        boolean boolean67 = dateTimeFormatter7.isPrinter();
        java.lang.Integer int68 = dateTimeFormatter7.getPivotYear();
        java.lang.Integer int69 = dateTimeFormatter7.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.parse("PT60S", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNull(int69);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(13);
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime20 = dateTime18.withMonthOfYear(1);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime25.plusWeeks(0);
        org.joda.time.Chronology chronology30 = dateTime25.getChronology();
        int int31 = dateTime25.getDayOfWeek();
        int int32 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime34 = dateTime18.minusSeconds((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        int int8 = date7.getDay();
        date7.setDate(86399999);
        int int11 = date7.getTimezoneOffset();
        date7.setMonth(53595);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455230080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=50,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon May 01 14:53:50 UTC 243043");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '4');
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime8.toGregorianCalendar();
        int int13 = gregorianCalendar11.getActualMaximum(0);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar11);
        java.lang.String str15 = localTime14.toString();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.get();
        org.joda.time.Interval interval24 = property22.toInterval();
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Period period26 = interval24.toPeriod();
        java.lang.String str27 = interval24.toString();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        long long38 = interval36.toDurationMillis();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = interval36.toPeriod(periodType39);
        org.joda.time.Interval interval41 = interval24.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Period period42 = interval36.toPeriod();
        org.joda.time.LocalTime localTime44 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 47);
        int int45 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime44);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00:10:00.000" + "'", str15, "00:10:00.000");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str27, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 60000L + "'", long38 == 60000L);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(17L, 1645454862530L, chronology12);
        org.joda.time.Interval interval16 = interval14.withStartMillis((long) 21);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.Interval interval26 = interval25.toInterval();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.getMinimumValue();
        org.joda.time.DateTime dateTime35 = property33.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((java.lang.Object) dateTime41);
        org.joda.time.Interval interval43 = interval26.withEnd((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.Interval interval45 = interval14.withPeriodAfterStart((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology46 = interval14.getChronology();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePartial) localTime45, (long) (short) -1);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.getMinimumValue();
        org.joda.time.DateTime dateTime56 = property54.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime59 = null;
        boolean boolean60 = dateTimeZone58.isLocalDateTimeGap(localDateTime59);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(dateTimeZone58);
        org.joda.time.DateTime dateTime62 = dateTime56.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = localTime45.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.LocalTime localTime69 = dateTime68.toLocalTime();
        org.joda.time.DateTime.Property property70 = dateTime68.minuteOfHour();
        int int71 = property70.get();
        org.joda.time.Interval interval72 = property70.toInterval();
        org.joda.time.Interval interval73 = interval72.toInterval();
        long long74 = interval72.toDurationMillis();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Period period76 = interval72.toPeriod(periodType75);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) period76);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localTime80.toDateTime(readableInstant81);
        org.joda.time.LocalTime localTime83 = dateTime82.toLocalTime();
        org.joda.time.DateTime.Property property84 = dateTime82.minuteOfHour();
        org.joda.time.DateTime dateTime86 = dateTime82.plusWeeks(0);
        org.joda.time.Chronology chronology87 = dateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.millisOfDay();
        org.joda.time.DateTime dateTime89 = dateTime63.toDateTime(chronology87);
        org.joda.time.DateTime dateTime90 = dateTime30.toDateTime(chronology87);
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime30.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 60000L + "'", long74 == 60000L);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMinutes(5);
        org.joda.time.DateTime.Property property12 = dateTime4.yearOfCentury();
        java.lang.String str13 = dateTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime4.withTime((int) (byte) 1, (-27422807), 50, 540000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27422807 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str13, "2022-02-21T00:10:00.000+00:00:00.010");
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale0.getDisplayCountry(locale7);
        java.util.Locale locale12 = new java.util.Locale("600000", "\u82f1\u6587");
        java.lang.String str13 = locale0.getDisplayName(locale12);
        java.util.Locale.setDefault(locale0);
        java.lang.String str15 = locale0.getDisplayScript();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology22.monthOfYear();
        boolean boolean36 = calendar16.equals((java.lang.Object) dateTimeField35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455230356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=50,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Stati Uniti" + "'", str9, "Stati Uniti");
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (United States)" + "'", str13, "English (United States)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455230357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=50,MILLISECOND=357,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int[] intArray20 = chronology9.get((org.joda.time.ReadablePartial) localTime18, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField21 = chronology9.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) calendar0, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar0.get(87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 87");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455230411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=50,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455230411L + "'", long2 == 1645455230411L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("days", strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("days", strMap5);
        java.lang.String[] strArray17 = new java.lang.String[] { "2022-02-21T00:10:00.000Z", "1970-01-01T00:00:00.052Z", "2022-02-21T00:10:00.000Z", "days", "days", "2022-02-21T00:10:00.000Z", "United States", "United States", "dayOfMonth", "10" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strList18);
        java.lang.String str21 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strList20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        boolean boolean31 = dateTimeFieldType22.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.centuryOfEra();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (byte) 1, chronology39);
        int int41 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localTime40);
        int int43 = dateTimeField32.get((long) 16);
        long long45 = dateTimeField32.remainder((-35999900L));
        java.util.Locale locale48 = new java.util.Locale("hours");
        java.lang.String str49 = locale48.getDisplayCountry();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.lang.String str51 = dateTimeField32.getAsShortText(1645454869965L, locale48);
        java.util.Set<java.lang.String> strSet52 = locale48.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, strMap57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList58, strMap59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.parse("days", strMap62);
        java.lang.String[] strArray74 = new java.lang.String[] { "2022-02-21T00:10:00.000Z", "1970-01-01T00:00:00.052Z", "2022-02-21T00:10:00.000Z", "days", "days", "2022-02-21T00:10:00.000Z", "United States", "United States", "dayOfMonth", "10" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags(languageRangeList63, (java.util.Collection<java.lang.String>) strList75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList58, (java.util.Collection<java.lang.String>) strList77, filteringMode78);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList53, filteringMode78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "days" + "'", str21, "days");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2922789 + "'", int41 == 2922789);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-35999900L) + "'", long45 == (-35999900L));
        org.junit.Assert.assertEquals(locale48.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "20" + "'", str51, "20");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode78.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(3);
        int int8 = localTime7.getHourOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.plus(readablePeriod14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        org.joda.time.DateTime dateTime29 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, readableDuration32);
        org.joda.time.Period period34 = interval33.toPeriod();
        org.joda.time.LocalTime localTime35 = localTime11.plus((org.joda.time.ReadablePeriod) period34);
        int int36 = localTime7.compareTo((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.LocalTime.Property property37 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime38 = property37.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime39 = property37.getLocalTime();
        org.joda.time.LocalTime localTime40 = property37.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-14));
        java.util.Locale locale10 = new java.util.Locale("dayOfYear", "11");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withLocale(locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.lang.String str15 = dateTimeZone12.getShortName((long) 2922789, locale14);
        long long18 = dateTimeZone12.adjustOffset((long) (-1), false);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.DateTime dateTime28 = property26.roundHalfEvenCopy();
        boolean boolean30 = dateTime28.isBefore((long) (byte) 10);
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayCountry(locale35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale31);
        java.util.Locale locale38 = java.util.Locale.ITALY;
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String str40 = locale31.getDisplayCountry(locale38);
        java.util.Calendar calendar41 = dateTime28.toCalendar(locale38);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.weekyears();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = localTime52.getChronology();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 1, chronology55);
        int[] intArray58 = chronology47.get((org.joda.time.ReadablePartial) localTime56, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField59 = chronology47.dayOfYear();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfHour();
        int int67 = property66.get();
        org.joda.time.Interval interval68 = property66.toInterval();
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Period period70 = interval68.toPeriod();
        int[] intArray72 = chronology47.get((org.joda.time.ReadablePeriod) period70, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int78 = dateTimeZone76.getOffset((long) (byte) 1);
        long long80 = dateTimeZone74.getMillisKeepLocal(dateTimeZone76, (long) 3);
        long long83 = dateTimeZone74.convertLocalToUTC((long) 9, false);
        java.lang.String str84 = dateTimeZone74.toString();
        org.joda.time.Chronology chronology85 = chronology47.withZone(dateTimeZone74);
        int int87 = dateTimeZone74.getOffsetFromLocal(1645454862530L);
        java.util.Locale.Category category89 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale90 = java.util.Locale.getDefault(category89);
        java.lang.String str91 = dateTimeZone74.getShortName(25200117L, locale90);
        java.lang.String str92 = locale90.getDisplayCountry();
        java.lang.String str93 = locale38.getDisplayName(locale90);
        java.lang.String str94 = dateTimeZone12.getShortName((-259200010L), locale90);
        java.lang.String str95 = locale10.getDisplayScript(locale90);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals(locale10.toString(), "dayofyear_11");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.010" + "'", str15, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United States" + "'", str36, "United States");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455230585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=50,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Stati Uniti" + "'", str40, "Stati Uniti");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3L + "'", long80 == 3L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00:00.010" + "'", str84, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + category89 + "' != '" + java.util.Locale.Category.FORMAT + "'", category89.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.010" + "'", str91, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "United States" + "'", str92, "United States");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Italian (Italy)" + "'", str93, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.010" + "'", str94, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readableDuration16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval17.toPeriod(periodType19);
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        int[] intArray39 = chronology28.get((org.joda.time.ReadablePartial) localTime37, (long) (short) -1);
        org.joda.time.DurationField durationField40 = chronology28.hours();
        long long43 = durationField40.subtract((long) (byte) 100, 10);
        java.lang.String str44 = durationField40.toString();
        long long45 = durationField40.getUnitMillis();
        org.joda.time.DurationFieldType durationFieldType46 = durationField40.getType();
        boolean boolean47 = period21.isSupported(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-35999900L) + "'", long43 == (-35999900L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DurationField[hours]" + "'", str44, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3600000L + "'", long45 == 3600000L);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        long long49 = dateTime48.getMillis();
        boolean boolean50 = interval20.equals((java.lang.Object) long49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        boolean boolean60 = dateTimeFieldType51.isSupported(chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.centuryOfEra();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(chronology58);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.Interval interval65 = interval20.withChronology(chronology58);
        boolean boolean66 = interval8.isAfter((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTime dateTime67 = interval8.getEnd();
        int int68 = dateTime67.getYearOfCentury();
        org.joda.time.DateTime dateTime70 = dateTime67.plusSeconds(983);
        org.joda.time.DateTime.Property property71 = dateTime67.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645402199990L + "'", long49 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 22 + "'", int68 == 22);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int19 = dateTimeZone17.getOffset((long) (byte) 1);
        long long21 = dateTimeZone15.getMillisKeepLocal(dateTimeZone17, (long) 3);
        org.joda.time.DateTime dateTime22 = dateTime13.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime24 = dateTime13.minus((long) '#');
        org.joda.time.DateTime.Property property25 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime13.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime13.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 12);
        boolean boolean32 = dateTimeZone28.isStandardOffset((long) '4');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        org.joda.time.DateTime dateTime37 = dateTime34.withYear(53);
        int int38 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        org.joda.time.DateTime dateTime53 = dateTime44.withZone(dateTimeZone46);
        org.joda.time.DateTime dateTime55 = dateTime44.minus((long) '#');
        org.joda.time.DateTime dateTime57 = dateTime44.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime59 = dateTime44.plus(readablePeriod58);
        org.joda.time.DateTime.Property property60 = dateTime44.millisOfDay();
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = property60.getAsShortText(locale61);
        java.lang.String str64 = locale61.getExtension('u');
        java.lang.String str65 = dateTimeZone28.getShortName(5382789L, locale61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter7.withZone(dateTimeZone28);
        boolean boolean67 = dateTimeZone28.isFixed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "600000" + "'", str62, "600000");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.010" + "'", str65, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        int int13 = property9.get();
        org.joda.time.LocalTime localTime14 = property9.roundHalfFloorCopy();
        java.util.Locale locale15 = java.util.Locale.ENGLISH;
        java.lang.String str16 = property9.getAsText(locale15);
        java.util.Locale locale20 = new java.util.Locale("\u82f1\u6587\u7f8e\u56fd)", "java.util.GregorianCalendar[time=1645401599991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=10,DST_OFFSET=0]", "java.util.GregorianCalendar[time=1645454883425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=48,SECOND=3,MILLISECOND=425,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.lang.String str21 = locale15.getDisplayCountry(locale20);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfHour();
        int int13 = property12.get();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        boolean boolean25 = interval14.contains((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        java.lang.String str33 = property32.toString();
        org.joda.time.DateTime dateTime34 = property32.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.Interval interval37 = interval14.withStart((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str38 = interval37.toString();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.weekyears();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1, chronology53);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePartial) localTime54, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField57 = chronology45.weekyear();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 5, chronology45);
        org.joda.time.Interval interval59 = interval37.withChronology(chronology45);
        org.joda.time.DurationField durationField60 = chronology45.weekyears();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(chronology45);
        org.joda.time.DurationField durationField62 = chronology45.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(53554, 1645401650, 22, (int) (short) -1, 26185096, 53308, chronology45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[minuteOfHour]" + "'", str33, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str38, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMinutes(27424235);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("English");
        java.lang.String str22 = locale21.getLanguage();
        java.util.Calendar calendar23 = dateTime19.toCalendar(locale21);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar23.getGreatestMinimum(600000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 600000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "english");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "english" + "'", str22, "english");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=3290856182990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=103,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=43,SECOND=3,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((-1645401599));
        int int11 = dateTimeFormatter2.getDefaultYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTime dateTime2 = dateTime0.minus(readableDuration1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        java.lang.String str4 = durationFieldType3.getName();
        org.joda.time.DateTime dateTime6 = dateTime2.withFieldAdded(durationFieldType3, 600);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        long long8 = property7.remainder();
        int int9 = property7.getMaximumValue();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        int int20 = dateTime19.getYearOfCentury();
        int int21 = property7.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "days" + "'", str4, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 50989L + "'", long8 == 50989L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1439 + "'", int9 == 1439);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        int int16 = property9.get();
        org.joda.time.LocalTime localTime18 = property9.addCopy(1645454869205L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property9.setCopy("07:10:00.000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"07:10:00.000\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        int int14 = property9.getMinimumValueOverall();
        int int15 = property9.getMaximumValue();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.dayOfYear();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        long long46 = dateTimeField43.add((long) 'u', 7);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        int int55 = localTime49.compareTo((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.LocalTime.Property property56 = localTime49.hourOfDay();
        org.joda.time.LocalTime localTime58 = property56.addCopy(6);
        org.joda.time.LocalTime localTime59 = property56.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime60 = property56.roundCeilingCopy();
        org.joda.time.LocalTime localTime62 = localTime60.plusHours(2922789);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        boolean boolean64 = locale63.hasExtensions();
        boolean boolean65 = locale63.hasExtensions();
        java.lang.String str66 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localTime60, locale63);
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = java.util.Locale.ITALY;
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String str71 = locale68.getDisplayVariant(locale69);
        java.lang.String str72 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localTime60, (int) '4', locale68);
        java.lang.String str73 = locale68.getCountry();
        java.lang.String str74 = locale68.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime75 = property9.setCopy("", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 23 + "'", int15 == 23);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 25200117L + "'", long46 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "52" + "'", str72, "52");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "TW" + "'", str73, "TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "TWN" + "'", str74, "TWN");
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        boolean boolean34 = dateTime30.isEqual(175367340000L);
        java.util.Date date35 = dateTime30.toDate();
        int int36 = date35.getHours();
        long long37 = date35.getTime();
        int int38 = date35.getMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 60005L + "'", long37 == 60005L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.setCopy("1");
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        int int19 = property18.getMaximumValue();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.parse("11");
        long long22 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1030334470L + "'", long22 == 1030334470L);
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("1970-01-01T00:00:00.055+00:00:00.010/2022-02-21T14:49:32.366+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTime();
        org.joda.time.DateTime dateTime46 = dateTime44.withYear(21488);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = interval9.getEnd();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = dateTime27.minus((long) '#');
        org.joda.time.DateTime.Property property39 = dateTime27.weekyear();
        org.joda.time.DateTime dateTime41 = dateTime27.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime44 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(0L, dateTimeZone47);
        java.util.TimeZone timeZone51 = dateTimeZone47.toTimeZone();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str54 = locale53.getCountry();
        java.lang.String str55 = dateTimeZone47.getShortName(0L, locale53);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        java.lang.String str63 = property62.toString();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.DateTime dateTime66 = property62.addToCopy((long) 366);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.DateTime dateTime73 = dateTime71.plusYears(7);
        org.joda.time.DateTime dateTime75 = dateTime71.plusWeeks((int) (short) 10);
        int int76 = property62.getDifference((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime75, readableDuration77);
        int int79 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean81 = instant22.isBefore((org.joda.time.ReadableInstant) dateTime44);
        java.lang.String str82 = instant22.toString();
        int int83 = dateTime21.compareTo((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime84 = instant22.toDateTimeISO();
        org.joda.time.DateTime.Property property85 = dateTime84.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime90 = dateTime84.withTime(53550, 233, 599994, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53550 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "CN" + "'", str54, "CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Property[minuteOfHour]" + "'", str63, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-100800) + "'", int76 == (-100800));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-21T14:53:51.355Z" + "'", str82, "2022-02-21T14:53:51.355Z");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        boolean boolean10 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfYear();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (-14), chronology8);
        org.joda.time.DurationField durationField16 = chronology8.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(12, 2000, 0);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale7.getDisplayName(locale8);
        java.util.Calendar.Builder builder12 = builder6.setLocale(locale7);
        java.util.Calendar.Builder builder16 = builder12.setTimeOfDay(25, 62, 0);
        java.util.Calendar.Builder builder21 = builder12.setTimeOfDay(27424249, 32770, (-27423368), 58);
        java.util.Calendar.Builder builder23 = builder12.setLenient(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.Interval interval28 = interval27.toInterval();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.getMinimumValue();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime40 = null;
        boolean boolean41 = dateTimeZone39.isLocalDateTimeGap(localDateTime40);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime37.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((java.lang.Object) dateTime43);
        org.joda.time.Interval interval45 = interval28.withEnd((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = interval28.toDuration();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.getMinimumValue();
        org.joda.time.DateTime dateTime66 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone68.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) dateTime72);
        org.joda.time.Interval interval74 = interval57.withEnd((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Period period75 = interval74.toPeriod();
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationAfterStart(readableDuration76);
        org.joda.time.Duration duration78 = interval77.toDuration();
        org.joda.time.Period period79 = duration78.toPeriod();
        boolean boolean80 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.ReadableDuration readableDuration81 = null;
        boolean boolean82 = duration46.isShorterThan(readableDuration81);
        org.joda.time.ReadableDuration readableDuration83 = null;
        boolean boolean84 = duration46.isLongerThan(readableDuration83);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(14);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(3);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        gregorianCalendar16.setTimeInMillis((long) 34);
        int int19 = gregorianCalendar16.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53631533" + "'", str11, "53631533");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = interval9.getEnd();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        int int29 = dateTime27.getMonthOfYear();
        int int30 = dateTime27.getHourOfDay();
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime27.toString(dateTimeFormatter32);
        org.joda.time.DateTime dateTime35 = dateTime27.plusMinutes(17);
        org.joda.time.DateTime dateTime37 = dateTime27.withWeekyear(5);
        org.joda.time.DateTime dateTime39 = dateTime37.minusYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        org.joda.time.DateTime dateTime41 = dateTime21.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone40.isLocalDateTimeGap(localDateTime42);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str33, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale5 = new java.util.Locale("", "hi!", "");
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Locale.setDefault(category0, locale5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.lang.String str11 = dateTimeZone8.getShortName((long) 2922789, locale10);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale13.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "United States" + "'", str6, "United States");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.months();
        long long15 = chronology10.add(1020100L, 53406951L, 4);
        org.joda.time.DurationField durationField16 = chronology10.minutes();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 214647904L + "'", long15 == 214647904L);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-1663837435000L));
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.Instant instant4 = instant1.withMillis(53283791L);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.Instant instant7 = instant4.withMillis(604800000L);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        org.joda.time.DateTime.Property property14 = dateTime12.minuteOfHour();
        int int15 = property14.get();
        org.joda.time.Interval interval16 = property14.toInterval();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        boolean boolean27 = interval16.contains((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        java.lang.String str35 = property34.toString();
        org.joda.time.DateTime dateTime36 = property34.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readableDuration37);
        org.joda.time.Interval interval39 = interval16.withStart((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Interval interval40 = interval16.toInterval();
        org.joda.time.DateTime dateTime41 = interval16.getEnd();
        org.joda.time.DateTime dateTime42 = interval16.getEnd();
        org.joda.time.Interval interval43 = interval16.toInterval();
        long long44 = interval43.getStartMillis();
        org.joda.time.Interval interval45 = interval43.toInterval();
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.LocalTime localTime54 = localTime52.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        int int56 = localTime52.indexOf(dateTimeFieldType55);
        boolean boolean57 = dateTime46.isSupported(dateTimeFieldType55);
        int int58 = instant7.get(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[minuteOfHour]" + "'", str35, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645402199990L + "'", long44 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        java.util.Locale locale2 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str3 = locale2.getCountry();
        java.lang.String str4 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "THU JAN 01 00:00:00 UTC 1970" + "'", str3, "THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "THU JAN 01 00:00:00 UTC 1970" + "'", str4, "THU JAN 01 00:00:00 UTC 1970");
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("hours");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        java.util.Locale.Builder builder8 = builder1.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.lang.String str15 = locale14.getVariant();
        java.lang.String str16 = locale10.getDisplayScript(locale14);
        boolean boolean17 = locale10.hasExtensions();
        java.util.Locale.Builder builder18 = builder8.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder8.setExtension('4', "Thu Jan 01 00:00:00 UTC 1970");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hours");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.setFirstDayOfWeek(7);
        calendar6.setLenient(true);
        java.util.Date date12 = new java.util.Date((long) (byte) 100);
        date12.setMinutes(11);
        int int15 = date12.getSeconds();
        java.util.Date date17 = new java.util.Date((long) (byte) 100);
        date17.setMinutes(11);
        boolean boolean20 = date12.before(date17);
        date12.setMinutes((int) 'u');
        calendar6.setTime(date12);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar6.getActualMaximum(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=7020100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=7,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=57,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 01:57:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.setCopy("1");
        org.joda.time.Interval interval18 = property9.toInterval();
        org.joda.time.LocalTime localTime20 = property9.addCopy(366);
        org.joda.time.LocalTime localTime21 = property9.getLocalTime();
        java.lang.String str22 = property9.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property9.addNoWrapToCopy(604);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DurationField durationField26 = dateTimeField8.getDurationField();
        org.joda.time.DurationFieldType durationFieldType27 = durationField26.getType();
        org.joda.time.Chronology chronology28 = null;
        boolean boolean29 = durationFieldType27.isSupported(chronology28);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        int int21 = dateTime19.getMonthOfYear();
        int int22 = dateTime19.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        int int34 = dateTime32.getMinuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.DateTime dateTime38 = dateTime32.withField(dateTimeFieldType35, 999);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        org.joda.time.DateTime dateTime52 = dateTime43.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime54 = dateTime43.minus((long) '#');
        org.joda.time.DateTime dateTime56 = dateTime43.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime43.plus(readablePeriod57);
        org.joda.time.DateTime.Property property59 = dateTime43.millisOfDay();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = property59.getAsShortText(locale60);
        java.lang.String str63 = locale60.getExtension('u');
        java.util.Calendar calendar64 = dateTime32.toCalendar(locale60);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 893 + "'", int34 == 893);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "600000" + "'", str61, "600000");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645455230991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=1,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTime dateTime2 = dateTime0.minus(readableDuration1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.days();
        java.lang.String str4 = durationFieldType3.getName();
        org.joda.time.DateTime dateTime6 = dateTime2.withFieldAdded(durationFieldType3, 600);
        org.joda.time.DateTime.Property property7 = dateTime6.minuteOfDay();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTime.Property property17 = dateTime13.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime13.toString(dateTimeFormatter18);
        org.joda.time.DateTime dateTime21 = dateTime13.plusMinutes(17);
        org.joda.time.DateTime dateTime23 = dateTime13.withWeekyear(5);
        org.joda.time.DateTime dateTime25 = dateTime23.minusYears((int) (byte) -1);
        org.joda.time.DateTime dateTime27 = dateTime23.withYear(10);
        java.util.Locale locale29 = java.util.Locale.US;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.lang.String str31 = locale29.getVariant();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale29);
        java.lang.String str34 = locale29.getUnicodeLocaleType("CN");
        java.lang.String str35 = locale29.getLanguage();
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.lang.String str40 = locale39.getVariant();
        java.lang.String str41 = locale29.getDisplayName(locale39);
        java.lang.String str42 = dateTime23.toString("00:00:00.001", locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = property7.setCopy("dayofyear", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayofyear\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "days" + "'", str4, "days");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str19, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455231820,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=820,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en" + "'", str35, "en");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "English (United States)" + "'", str41, "English (United States)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "00:00:00.001" + "'", str42, "00:00:00.001");
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        long long20 = dateTimeZone11.convertLocalToUTC((long) 9, false);
        java.lang.String str21 = dateTimeZone11.toString();
        java.lang.String str23 = dateTimeZone11.getShortName((long) (byte) 100);
        java.lang.String str24 = dateTimeZone11.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter5.withZone(dateTimeZone11);
        int int27 = dateTimeZone11.getOffset(63560213412815L);
        long long29 = dateTimeZone11.convertUTCToLocal((long) 7);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 17L + "'", long29 == 17L);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime42 = dateTime8.withTimeAtStartOfDay();
        boolean boolean43 = dateTime42.isEqualNow();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfCentury();
        java.lang.String str45 = property44.toString();
        org.joda.time.DateTime dateTime46 = property44.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[yearOfCentury]" + "'", str45, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone27.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra(86399999);
        long long35 = dateTime32.getMillis();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfMonth();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.LocalTime localTime48 = localTime46.plusHours((int) 'u');
        org.joda.time.LocalTime localTime50 = localTime46.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int56 = dateTimeZone54.getOffset((long) (byte) 1);
        long long58 = dateTimeZone52.getMillisKeepLocal(dateTimeZone54, (long) 3);
        long long61 = dateTimeZone52.convertLocalToUTC((long) 9, false);
        java.lang.String str62 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime63 = localTime50.toDateTimeToday(dateTimeZone52);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.lang.String str70 = locale65.getDisplayCountry(locale69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale65);
        java.util.Locale locale72 = java.util.Locale.ITALY;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = locale65.getDisplayCountry(locale72);
        java.lang.String str75 = dateTimeZone52.getShortName((long) 2022, locale65);
        java.lang.String str76 = locale65.getDisplayName();
        java.util.Calendar calendar77 = dateTime32.toCalendar(locale65);
        java.util.Date date79 = new java.util.Date((long) (byte) 100);
        date79.setMinutes(11);
        java.lang.String str82 = date79.toLocaleString();
        calendar77.setTime(date79);
        calendar77.setTimeInMillis(1645401599991L);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = dateTime87.toString(dateTimeFormatter88);
        int int90 = dateTime87.getEra();
        org.joda.time.ReadableDuration readableDuration91 = null;
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime87, readableDuration91);
        boolean boolean93 = calendar77.after((java.lang.Object) interval92);
        int int94 = calendar77.getWeeksInWeekYear();
        int int95 = calendar77.getWeekYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645401599991L + "'", long35 == 1645401599991L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United States" + "'", str70, "United States");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455231967,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=51,MILLISECOND=967,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Stati Uniti" + "'", str74, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English (United States)" + "'", str76, "English (United States)");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1645401599991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str82, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str89, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 53 + "'", int94 == 53);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2022 + "'", int95 == 2022);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder5 = builder1.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale locale7 = new java.util.Locale("hours");
        java.lang.String str8 = locale7.getDisplayCountry();
        java.util.Locale locale9 = locale7.stripExtensions();
        java.util.Locale.Builder builder10 = builder1.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("2022-02-21T00:00:00.001+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-21T00:00:00.001+00:00:00.010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(locale7.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "hours");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField12.getType();
        boolean boolean14 = dateTimeField12.isSupported();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        int int23 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.LocalTime.Property property24 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime26 = property24.addCopy(6);
        org.joda.time.LocalTime localTime27 = property24.roundHalfCeilingCopy();
        int int28 = property24.get();
        org.joda.time.LocalTime localTime30 = property24.addWrapFieldToCopy((-100800));
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.lang.String str32 = property24.getAsText(locale31);
        int int33 = dateTimeField12.getMaximumShortTextLength(locale31);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone3, locale31);
        java.lang.String str35 = locale31.getCountry();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455232037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=52,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455232037L + "'", long2 == 1645455232037L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455232038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=52,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CA" + "'", str35, "CA");
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayName();
        org.joda.time.LocalTime localTime16 = property9.setCopy("0", locale14);
        org.joda.time.LocalTime localTime18 = property9.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime19 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property9.roundHalfCeilingCopy();
        java.lang.String str21 = property9.getAsShortText();
        java.lang.String str22 = property9.getAsText();
        org.joda.time.LocalTime localTime23 = property9.roundHalfEvenCopy();
        java.lang.String str24 = localTime23.toString();
        int int25 = localTime23.size();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United States)" + "'", str15, "English (United States)");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "00:00:00.000" + "'", str24, "00:00:00.000");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        long long17 = dateTimeZone9.previousTransition(0L);
        java.lang.String str19 = dateTimeZone9.getNameKey(720100L);
        org.joda.time.DateTime dateTime20 = dateTime4.withZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        int int29 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime.Property property30 = localTime23.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfMonth();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime52 = localTime50.plusHours((int) 'u');
        long long54 = chronology37.set((org.joda.time.ReadablePartial) localTime50, 0L);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((java.lang.Object) localTime23, chronology37);
        org.joda.time.Chronology chronology56 = localTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 53632148L + "'", long54 == 53632148L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withChronology(chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        org.joda.time.DateTime dateTime29 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = dateTime20.minus((long) '#');
        org.joda.time.DateTime.Property property32 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime20.withSecondOfMinute(0);
        boolean boolean38 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology39 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.getMinimumValue();
        org.joda.time.DateTime dateTime40 = property38.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime40.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime46);
        org.joda.time.Interval interval48 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = interval31.toDuration();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.LocalTime localTime56 = dateTime55.toLocalTime();
        org.joda.time.DateTime.Property property57 = dateTime55.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.weekyears();
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.Chronology chronology72 = localTime69.getChronology();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) (byte) 1, chronology72);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePartial) localTime73, (long) (short) -1);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.DateTime.Property property82 = dateTime80.minuteOfHour();
        int int83 = property82.getMinimumValue();
        org.joda.time.DateTime dateTime84 = property82.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime87 = null;
        boolean boolean88 = dateTimeZone86.isLocalDateTimeGap(localDateTime87);
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime(dateTimeZone86);
        org.joda.time.DateTime dateTime90 = dateTime84.withZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime dateTime91 = localTime73.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        long long92 = property57.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime93 = property57.getDateTime();
        boolean boolean94 = interval50.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 9L + "'", long92 == 9L);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.getMinimumValue();
        org.joda.time.DateTime dateTime27 = property25.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        boolean boolean29 = interval18.contains((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        java.lang.String str37 = property36.toString();
        org.joda.time.DateTime dateTime38 = property36.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.Interval interval41 = interval18.withStart((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Interval interval42 = interval18.toInterval();
        org.joda.time.Interval interval43 = interval18.toInterval();
        boolean boolean44 = interval18.isAfterNow();
        boolean boolean45 = interval9.isAfter((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Duration duration46 = interval18.toDuration();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[minuteOfHour]" + "'", str37, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone11);
        boolean boolean16 = dateTimeZone11.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter5.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withPivotYear((-1645432682));
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        boolean boolean29 = dateTimeFieldType20.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.centuryOfEra();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology27);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DurationField durationField35 = chronology27.seconds();
        long long38 = durationField35.add(3600000L, 53);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3653000L + "'", long38 == 3653000L);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.minuteOfHour();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology6);
        org.joda.time.LocalTime localTime22 = localTime20.minusMillis(318367);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        int[] intArray39 = chronology28.get((org.joda.time.ReadablePartial) localTime37, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 1, chronology48);
        boolean boolean50 = dateTimeFieldType41.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.centuryOfEra();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        int int60 = dateTimeField51.getMaximumValue((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) 1);
        int[] intArray63 = localTime62.getValues();
        int int64 = dateTimeField40.getMaximumValue((org.joda.time.ReadablePartial) localTime59, intArray63);
        org.joda.time.LocalTime localTime66 = localTime59.minusMillis(366);
        java.lang.String str67 = localTime66.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = localTime66.getFieldTypes();
        boolean boolean69 = localTime20.isAfter((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localTime74.toDateTime(readableInstant75);
        org.joda.time.Chronology chronology77 = localTime74.getChronology();
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((long) (byte) 1, chronology77);
        boolean boolean79 = dateTimeFieldType70.isSupported(chronology77);
        org.joda.time.DateTimeField dateTimeField80 = chronology77.centuryOfEra();
        org.joda.time.DurationField durationField81 = chronology77.hours();
        org.joda.time.DurationFieldType durationFieldType82 = durationField81.getType();
        java.lang.String str83 = durationFieldType82.toString();
        boolean boolean84 = localTime20.isSupported(durationFieldType82);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2922789 + "'", int60 == 2922789);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 366 + "'", int64 == 366);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "23:59:59.635" + "'", str67, "23:59:59.635");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "hours" + "'", str83, "hours");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        java.lang.String str12 = dateTimeField10.getAsShortText((-3241594890627141L));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField10.getType();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "889" + "'", str12, "889");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfDay" + "'", str14, "minuteOfDay");
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField20 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.hourOfHalfday();
        int int24 = dateTimeField21.getDifference(69673013365113L, 1645455015461L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 18896543 + "'", int24 == 18896543);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(17L, 1645454862530L, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology12);
        org.joda.time.DurationField durationField17 = chronology12.halfdays();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, 0L, chronology8);
        java.lang.String str12 = interval11.toString();
        org.joda.time.ReadableInterval readableInterval13 = null;
        boolean boolean14 = interval11.contains(readableInterval13);
        long long15 = interval11.getEndMillis();
        org.joda.time.Period period16 = interval11.toPeriod();
        java.lang.Object obj17 = null;
        boolean boolean18 = period16.equals(obj17);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 'u', dateTimeZone30);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        int[] intArray48 = chronology37.get((org.joda.time.ReadablePartial) localTime46, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField49 = chronology37.dayOfYear();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.Period period60 = interval58.toPeriod();
        int[] intArray62 = chronology37.get((org.joda.time.ReadablePeriod) period60, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField63 = chronology37.dayOfYear();
        java.lang.String str64 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology37.dayOfMonth();
        org.joda.time.DateTime dateTime66 = dateTime31.withChronology(chronology37);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        int int75 = localTime69.compareTo((org.joda.time.ReadablePartial) localTime72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean77 = localTime69.isSupported(dateTimeFieldType76);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType76.getRangeDurationType();
        org.joda.time.DateTime dateTime80 = dateTime31.withFieldAdded(durationFieldType78, 1408);
        boolean boolean81 = period16.isSupported(durationFieldType78);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str12, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = interval8.toDuration();
        org.joda.time.Chronology chronology21 = interval8.getChronology();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int34 = dateTimeZone32.getOffset((long) (byte) 1);
        long long36 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, (long) 3);
        org.joda.time.DateTime dateTime37 = dateTime28.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime39 = dateTime28.minus((long) '#');
        org.joda.time.DateTime.Property property40 = dateTime28.weekyear();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime28.plus(readableDuration41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        int[] intArray44 = localTime43.getValues();
        java.util.Locale locale45 = java.util.Locale.ITALY;
        boolean boolean46 = locale45.hasExtensions();
        java.util.Locale locale47 = locale45.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localTime43, locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 10, 0, 0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int11 = dateTimeZone9.getOffset((long) (byte) 1);
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 3);
        org.joda.time.DateTime dateTime14 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = dateTime5.minus((long) '#');
        org.joda.time.DateTime.Property property17 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime19 = dateTime5.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime5.withWeekyear(15);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        int int25 = dateTime22.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime22.getZone();
        boolean boolean28 = dateTimeZone26.isStandardOffset(110L);
        long long30 = dateTimeZone26.nextTransition((-61914758399958L));
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 60, dateTimeZone26);
        int int32 = dateTime31.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-61914758399958L) + "'", long30 == (-61914758399958L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        long long13 = dateTimeField10.add((long) 99, 3180000L);
        long long15 = dateTimeField10.remainder(949636862000L);
        java.lang.String str17 = dateTimeField10.getAsShortText((long) (-343140000));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 8362592323200099L + "'", long13 == 8362592323200099L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 273662000L + "'", long15 == 273662000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Dec" + "'", str17, "Dec");
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        java.util.TimeZone timeZone4 = calendar2.getTimeZone();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        int int11 = dateTime9.getMonthOfYear();
        int int12 = dateTime9.getHourOfDay();
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property15.addToCopy(53);
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        boolean boolean20 = calendar2.after((java.lang.Object) dateTime19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455232670,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=52,MILLISECOND=670,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        long long19 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 3);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readableDuration23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.LocalTime localTime26 = localTime2.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime localTime28 = localTime2.plusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localTime28.isSupported(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = localTime28.plusSeconds(23);
        org.joda.time.LocalTime.Property property33 = localTime28.millisOfDay();
        org.joda.time.LocalTime localTime34 = property33.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("dayofyear_11", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=dayofyear_11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        int int15 = dateTime14.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime14.toGregorianCalendar();
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale17.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale17);
        java.lang.String str20 = calendar19.getCalendarType();
        calendar19.setTimeInMillis(366L);
        int int23 = calendar19.getMinimalDaysInFirstWeek();
        int int24 = gregorianCalendar16.compareTo(calendar19);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = interval9.toPeriod();
        int int28 = period27.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        boolean boolean39 = dateTimeFieldType30.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.centuryOfEra();
        java.lang.String str41 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType29.getField(chronology37);
        org.joda.time.DurationField durationField43 = chronology37.weeks();
        org.joda.time.DurationField durationField44 = chronology37.minutes();
        org.joda.time.DurationFieldType durationFieldType45 = durationField44.getType();
        int int46 = period27.get(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology6.months();
        long long12 = durationField10.getValueAsLong(18600049L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale12.getCountry();
        int int16 = property6.getMaximumShortTextLength(locale12);
        java.lang.Object obj17 = locale12.clone();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "HI!" + "'", str15, "HI!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "_HI!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "_HI!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "_HI!");
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.years();
        boolean boolean10 = localTime6.isSupported(durationFieldType9);
        java.lang.String str11 = durationFieldType9.toString();
        java.lang.String str12 = durationFieldType9.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime16 = null;
        boolean boolean17 = dateTimeZone15.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localTime18.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology21.getZone();
        boolean boolean24 = durationFieldType9.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "years" + "'", str11, "years");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "years" + "'", str12, "years");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.010" + "'", str20, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.getMinimumValue();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone40.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime38.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime44);
        org.joda.time.Interval interval46 = interval29.withEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.DurationField durationField55 = chronology53.halfdays();
        org.joda.time.DateTime dateTime56 = dateTime44.toDateTime(chronology53);
        org.joda.time.TimeOfDay timeOfDay57 = dateTime56.toTimeOfDay();
        org.joda.time.DateTime.Property property58 = dateTime56.centuryOfEra();
        int int59 = dateTime56.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 990 + "'", int59 == 990);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        int int9 = dateTime8.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfYear();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Period period44 = interval42.toPeriod();
        int[] intArray46 = chronology21.get((org.joda.time.ReadablePeriod) period44, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = localTime58.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (byte) 1, chronology61);
        int[] intArray64 = chronology53.get((org.joda.time.ReadablePartial) localTime62, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField65 = chronology53.dayOfYear();
        org.joda.time.DurationField durationField66 = durationFieldType47.getField(chronology53);
        int int67 = period44.get(durationFieldType47);
        org.joda.time.DateTime dateTime68 = dateTime4.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime.Property property69 = dateTime4.year();
        org.joda.time.DateTime dateTime70 = property69.roundCeilingCopy();
        org.joda.time.DateTime dateTime72 = dateTime70.plusWeeks(21488);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        java.util.Locale locale6 = java.util.Locale.US;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayCountry(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.util.Date date13 = calendar12.getTime();
        boolean boolean14 = date1.before(date13);
        date13.setMinutes(48);
        int int17 = date13.getDay();
        java.lang.String str18 = date13.toGMTString();
        date13.setDate((-292275054));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United States" + "'", str11, "United States");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455233113,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=53,MILLISECOND=113,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sat Aug 06 14:48:53 UTC 798185");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "21 Feb 2022 14:48:53 GMT" + "'", str18, "21 Feb 2022 14:48:53 GMT");
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        int int35 = dateTime33.getMonthOfYear();
        int int36 = dateTime33.getHourOfDay();
        org.joda.time.DateTime.Property property37 = dateTime33.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime33.toString(dateTimeFormatter38);
        org.joda.time.DateTime dateTime41 = dateTime33.plusMinutes(17);
        org.joda.time.DateTime dateTime43 = dateTime33.plus((long) 5);
        int int44 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime43);
        long long47 = dateTimeZone17.adjustOffset((-45705500L), false);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        long long50 = dateTimeZone17.getMillisKeepLocal(dateTimeZone48, 53370750L);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(21168000000L, dateTimeZone17);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) 45, 1645454972356L);
        org.joda.time.DateTime dateTime55 = interval54.getStart();
        int int56 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str39, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-45705500L) + "'", long47 == (-45705500L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 53370750L + "'", long50 == 53370750L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("English");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localTime19, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField23 = durationFieldType4.getField(chronology10);
        org.joda.time.DurationField durationField24 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        boolean boolean35 = dateTimeFieldType26.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.centuryOfEra();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology33);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        org.joda.time.DateTime dateTime47 = localTime46.toDateTimeToday();
        org.joda.time.LocalTime localTime49 = localTime46.minusMinutes(1);
        org.joda.time.LocalTime.Property property50 = localTime46.millisOfDay();
        org.joda.time.LocalTime localTime51 = localTime38.withFields((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime.Property property52 = localTime46.hourOfDay();
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localTime46, 42, locale54);
        java.util.Locale.Builder builder56 = builder1.setLocale(locale54);
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clear();
        java.util.Locale.Builder builder60 = builder56.addUnicodeLocaleAttribute("53510244");
        java.util.Locale.Builder builder61 = builder60.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "42" + "'", str55, "42");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime.Property property17 = localTime14.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property17.getLocalTime();
        org.joda.time.LocalTime localTime19 = property17.getLocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        int int26 = dateTime24.getMonthOfYear();
        int int27 = dateTime24.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfDay();
        java.lang.String str38 = property37.getAsText();
        org.joda.time.DateTime dateTime39 = property37.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMonths(28);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        int int48 = dateTime46.getMonthOfYear();
        int int49 = dateTime46.getHourOfDay();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = dateTime46.toString(dateTimeFormatter51);
        org.joda.time.DateTime dateTime54 = dateTime46.plusMinutes(17);
        org.joda.time.DateTime dateTime56 = dateTime46.withWeekyear(5);
        org.joda.time.DateTime dateTime58 = dateTime56.minusYears((int) (byte) -1);
        org.joda.time.DateTime.Property property59 = dateTime56.weekyear();
        boolean boolean60 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime56);
        int int61 = dateTime56.getMillisOfSecond();
        org.joda.time.DateTime dateTime63 = dateTime56.withMillis((long) 892);
        org.joda.time.DateTime dateTime64 = localTime19.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "600000" + "'", str38, "600000");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str52, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime7 = null;
        boolean boolean8 = dateTimeZone6.isLocalDateTimeGap(localDateTime7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localTime9.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(590, (-1645379999), (-143999), (-27422807), chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 590 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "00:00:00.010" + "'", str11, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        java.util.Date date3 = new java.util.Date(458342, 53535925, 2922750);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Apr 21 00:00:00 UTC 4929571");
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        int int18 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(6);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        long long32 = interval30.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval30.toPeriod(periodType33);
        org.joda.time.LocalTime localTime36 = localTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 8);
        org.joda.time.PeriodType periodType37 = period34.getPeriodType();
        org.joda.time.Period period38 = interval9.toPeriod(periodType37);
        org.joda.time.MutableInterval mutableInterval39 = interval9.toMutableInterval();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        int int46 = dateTime44.getMonthOfYear();
        int int47 = dateTime44.getHourOfDay();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int58 = dateTimeZone56.getOffset((long) (byte) 1);
        long long60 = dateTimeZone54.getMillisKeepLocal(dateTimeZone56, (long) 3);
        org.joda.time.DateTime dateTime61 = dateTime52.withZone(dateTimeZone54);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isBefore((long) 21);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.LocalTime localTime70 = dateTime69.toLocalTime();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfHour();
        int int72 = property71.get();
        org.joda.time.Interval interval73 = property71.toInterval();
        org.joda.time.DateTime dateTime74 = interval73.getEnd();
        org.joda.time.Period period75 = interval73.toPeriod();
        java.lang.String str76 = interval73.toString();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localTime79.toDateTime(readableInstant80);
        org.joda.time.LocalTime localTime82 = dateTime81.toLocalTime();
        org.joda.time.DateTime.Property property83 = dateTime81.minuteOfHour();
        int int84 = property83.get();
        org.joda.time.Interval interval85 = property83.toInterval();
        org.joda.time.Interval interval86 = interval85.toInterval();
        long long87 = interval85.toDurationMillis();
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Period period89 = interval85.toPeriod(periodType88);
        org.joda.time.Interval interval90 = interval73.overlap((org.joda.time.ReadableInterval) interval85);
        boolean boolean91 = interval62.isBefore((org.joda.time.ReadableInterval) interval73);
        boolean boolean92 = mutableInterval39.isAfter((org.joda.time.ReadableInterval) interval62);
        java.lang.String str93 = interval62.toString();
        java.lang.String str94 = interval62.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 60000L + "'", long32 == 60000L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3L + "'", long60 == 3L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str76, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 60000L + "'", long87 == 60000L);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:10:00.000+00:00:00.010" + "'", str93, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:10:00.000+00:00:00.010" + "'", str94, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:10:00.000+00:00:00.010");
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime7.minusMinutes(1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int16 = dateTimeZone14.getOffset((long) (byte) 1);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 3);
        long long21 = dateTimeZone12.convertLocalToUTC((long) 9, false);
        java.lang.String str22 = dateTimeZone12.toString();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime24 = localTime7.toDateTimeToday(dateTimeZone12);
        int int26 = dateTimeZone12.getStandardOffset(3180000L);
        boolean boolean28 = dateTimeZone12.isStandardOffset((long) 540);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime localTime43 = localTime36.minusMillis(366);
        org.joda.time.LocalTime localTime45 = localTime36.plusSeconds(0);
        org.joda.time.LocalTime localTime47 = localTime36.minusHours(10);
        org.joda.time.LocalTime localTime49 = localTime36.withMinuteOfHour(0);
        int int50 = localTime36.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        java.util.Locale locale2 = new java.util.Locale("", "Property[minuteOfHour]");
        java.util.Locale locale5 = new java.util.Locale("2022-02-21T00:10:00.000+00:00:00.010", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.Calendar.Builder builder13 = builder7.setTimeOfDay(12, 2000, 0);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale18 = builder15.build();
        java.util.Calendar.Builder builder19 = builder7.setLocale(locale18);
        java.lang.String str20 = locale18.toLanguageTag();
        java.lang.String str21 = locale2.getDisplayLanguage(locale18);
        org.junit.Assert.assertEquals(locale2.toString(), "_PROPERTY[MINUTEOFHOUR]");
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-21t00:10:00.000+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.minus(readableDuration14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.LocalTime localTime30 = localTime28.plusHours((int) 'u');
        org.joda.time.LocalTime localTime32 = localTime28.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        int int39 = dateTime37.getMonthOfYear();
        int int40 = dateTime37.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int46 = dateTimeZone44.getOffset((long) (byte) 1);
        long long48 = dateTimeZone42.getMillisKeepLocal(dateTimeZone44, (long) 3);
        org.joda.time.DateTime dateTime49 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime50 = localTime32.toDateTimeToday(dateTimeZone42);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 5, dateTimeZone42);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        org.joda.time.DateTime dateTime60 = dateTime56.plusWeeks(0);
        int int61 = dateTime60.getYearOfEra();
        org.joda.time.DateTime.Property property62 = dateTime60.year();
        boolean boolean63 = localTime51.equals((java.lang.Object) property62);
        java.lang.String str64 = property62.getAsShortText();
        org.joda.time.DateTime dateTime65 = property62.roundCeilingCopy();
        boolean boolean66 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022" + "'", str64, "2022");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime41 = dateTime39.withYear((-95));
        org.joda.time.DateTime.Property property42 = dateTime41.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) 0);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.monthOfYear();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime15.plus(readablePeriod18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = localTime19.isSupported(dateTimeFieldType20);
        int[] intArray22 = new int[] {};
        int int23 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localTime19, intArray22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        int int32 = localTime26.compareTo((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.LocalTime.Property property33 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime35 = property33.addCopy(6);
        org.joda.time.LocalTime localTime36 = property33.roundHalfCeilingCopy();
        int int37 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = localTime36.minusMillis(11);
        boolean boolean40 = localTime1.equals((java.lang.Object) localTime39);
        int int41 = localTime1.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        boolean boolean51 = dateTimeFieldType42.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.millisOfSecond();
        org.joda.time.DurationField durationField55 = chronology49.days();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.weekyears();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) (byte) 1, chronology70);
        int[] intArray73 = chronology62.get((org.joda.time.ReadablePartial) localTime71, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField74 = chronology62.weekyear();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 5, chronology62);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.DateTime.Property property82 = dateTime80.minuteOfHour();
        int int83 = property82.get();
        org.joda.time.Interval interval84 = property82.toInterval();
        org.joda.time.Period period85 = interval84.toPeriod();
        org.joda.time.DateTime dateTime86 = dateTime75.plus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.MutablePeriod mutablePeriod87 = period85.toMutablePeriod();
        int[] intArray89 = chronology49.get((org.joda.time.ReadablePeriod) period85, 7687676336460000L);
        org.joda.time.LocalTime localTime90 = localTime1.minus((org.joda.time.ReadablePeriod) period85);
        java.util.Locale locale92 = new java.util.Locale("1970-01-01T00:00:00.041+00:00:00.010");
        java.util.Set<java.lang.String> strSet93 = locale92.getUnicodeLocaleKeys();
        boolean boolean94 = period85.equals((java.lang.Object) locale92);
        java.lang.String str95 = locale92.getLanguage();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutablePeriod87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 12711105, 0, 9, 1, 0, 0]");
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertEquals(locale92.toString(), "1970-01-01t00:00:00.041+00:00:00.010");
        org.junit.Assert.assertNotNull(strSet93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "1970-01-01t00:00:00.041+00:00:00.010" + "'", str95, "1970-01-01t00:00:00.041+00:00:00.010");
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTime();
        int int12 = dateTime10.getDayOfMonth();
        boolean boolean14 = dateTime10.isEqual((long) 50340000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 21 + "'", int12 == 21);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        java.util.Date date1 = new java.util.Date(3195590399991L);
        org.junit.Assert.assertEquals(date1.toString(), "Mon Apr 06 23:59:59 UTC 2071");
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        boolean boolean23 = interval8.isAfterNow();
        org.joda.time.DateTime dateTime24 = interval8.getStart();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.Interval interval34 = interval33.toInterval();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone45.isLocalDateTimeGap(localDateTime46);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) dateTime49);
        org.joda.time.Interval interval51 = interval34.withEnd((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period52 = interval34.toPeriod();
        org.joda.time.Interval interval53 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType55 = period52.getFieldType(574);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localTime59, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField62 = chronology50.dayOfYear();
        org.joda.time.DurationField durationField63 = durationFieldType44.getField(chronology50);
        org.joda.time.DurationFieldType durationFieldType64 = durationField63.getType();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localTime70.toDateTime(readableInstant71);
        org.joda.time.Chronology chronology73 = localTime70.getChronology();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((long) (byte) 1, chronology73);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology73);
        org.joda.time.Interval interval76 = new org.joda.time.Interval(0L, 0L, chronology73);
        org.joda.time.DurationField durationField77 = durationFieldType64.getField(chronology73);
        boolean boolean78 = localTime43.isSupported(durationFieldType64);
        java.lang.String str79 = durationFieldType64.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localTime84.toDateTime(readableInstant85);
        org.joda.time.Chronology chronology87 = localTime84.getChronology();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime((long) (byte) 1, chronology87);
        boolean boolean89 = dateTimeFieldType80.isSupported(chronology87);
        org.joda.time.DateTimeField dateTimeField90 = chronology87.centuryOfEra();
        org.joda.time.LocalTime localTime91 = org.joda.time.LocalTime.now(chronology87);
        org.joda.time.DateTimeField dateTimeField92 = chronology87.year();
        org.joda.time.DateTimeField dateTimeField93 = chronology87.weekyearOfCentury();
        boolean boolean94 = durationFieldType64.isSupported(chronology87);
        java.lang.String str95 = durationFieldType64.toString();
        java.lang.String str96 = durationFieldType64.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hours" + "'", str79, "hours");
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hours" + "'", str95, "hours");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "hours" + "'", str96, "hours");
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Period period11 = interval8.toPeriod();
        boolean boolean13 = interval8.isBefore((long) 3);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.DateTime dateTime23 = interval22.getEnd();
        org.joda.time.Period period24 = interval22.toPeriod();
        org.joda.time.Period period25 = interval22.toPeriod();
        boolean boolean27 = interval22.isBefore((long) 3);
        boolean boolean28 = interval8.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.Interval interval39 = interval38.toInterval();
        boolean boolean40 = interval29.isAfter((org.joda.time.ReadableInterval) interval38);
        boolean boolean41 = interval29.isBeforeNow();
        long long42 = interval29.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645402199990L + "'", long42 == 1645402199990L);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        int int6 = date1.getMonth();
        java.time.Instant instant7 = date1.toInstant();
        java.util.Date date13 = new java.util.Date(0, 3, 4, 21, 2922789);
        boolean boolean14 = date1.after(date13);
        int int15 = date1.getHours();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals(date13.toString(), "Wed Oct 25 14:09:00 UTC 1905");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime4.era();
        java.lang.String str11 = property10.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) 'u');
        org.joda.time.LocalTime localTime15 = localTime11.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        int int22 = dateTime20.getMonthOfYear();
        int int23 = dateTime20.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        org.joda.time.DateTime dateTime32 = dateTime20.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime33 = localTime15.toDateTimeToday(dateTimeZone25);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 5, dateTimeZone25);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.Interval interval44 = interval43.toInterval();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = interval44.toPeriod(periodType45);
        org.joda.time.LocalTime localTime47 = localTime34.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalTime localTime49 = localTime47.minusSeconds(10);
        org.joda.time.LocalTime.Property property50 = localTime49.millisOfSecond();
        org.joda.time.Chronology chronology51 = localTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfDay();
        java.lang.String str53 = dateTimeField52.getName();
        long long56 = dateTimeField52.addWrapField(1645455019802L, 50400000);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "secondOfDay" + "'", str53, "secondOfDay");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645483819802L + "'", long56 == 1645483819802L);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime4.minusMinutes(100);
        org.joda.time.DateTime dateTime19 = dateTime4.plusYears((int) (byte) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis(86400009L);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime26.plusHours(1970);
        org.joda.time.DateTime dateTime42 = dateTime40.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalTime localTime54 = localTime50.plus(readablePeriod53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean56 = localTime54.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = dateTime47.withFields((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int63 = dateTimeZone61.getOffset((long) (byte) 1);
        long long65 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 3);
        long long68 = dateTimeZone59.convertLocalToUTC((long) 9, false);
        java.lang.String str69 = dateTimeZone59.toString();
        org.joda.time.DateTime dateTime70 = localTime54.toDateTimeToday(dateTimeZone59);
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeZone59.getShortName((long) 100, locale72);
        boolean boolean75 = dateTimeZone59.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime76 = dateTime42.withZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTime dateTime77 = dateTime21.toDateTime(dateTimeZone59);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = localTime78.toString("1 f\351vr. 2022 14:47:49");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.DurationField durationField9 = dateTimeField7.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = durationField9.subtract(1645454877715L, 28044137682720L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -28044137682720 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(35);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology17);
        org.joda.time.Interval interval20 = new org.joda.time.Interval(0L, 0L, chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology17.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.DurationField durationField26 = chronology17.years();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        int int34 = durationField26.compareTo(durationField33);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(2, 163239569);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 163239569");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int7 = dateTimeZone5.getOffset((long) (byte) 1);
        long long9 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 3);
        long long12 = dateTimeZone3.convertLocalToUTC((long) 9, false);
        java.lang.String str13 = dateTimeZone3.toString();
        long long15 = dateTimeZone3.convertUTCToLocal((long) '#');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) -1, 1645455102106L, dateTimeZone3);
        long long19 = dateTimeZone3.convertLocalToUTC((long) 18000000, true);
        java.lang.String str21 = dateTimeZone3.getNameKey((long) 59);
        int int23 = dateTimeZone3.getOffsetFromLocal((-60526224000000L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3L + "'", long9 == 3L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.010" + "'", str13, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 45L + "'", long15 == 45L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 17999990L + "'", long19 == 17999990L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime16.minusMinutes(100);
        long long30 = dateTime16.getMillis();
        boolean boolean31 = interval8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property32 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime16.withMillisOfSecond(12);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale39 = builder36.build();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hours");
        java.util.Locale.Builder builder42 = builder36.setLocale(locale41);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayName(locale45);
        java.util.Locale.Builder builder47 = builder36.setLocale(locale43);
        java.util.Calendar calendar48 = dateTime34.toCalendar(locale43);
        org.joda.time.DateTime dateTime50 = dateTime34.plusSeconds(302);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTime34);
        int int52 = dateTime51.getYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645402199990L + "'", long30 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hours");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "anglais (Etats-Unis)" + "'", str44, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str46, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645402200002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=12,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str4 = locale0.getDisplayName(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale0);
        calendar5.setLenient(true);
        calendar5.set(39, 21488, 600074, 32769, (-14));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English" + "'", str4, "English");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=39,MONTH=21488,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=600074,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=32769,MINUTE=-14,SECOND=54,MILLISECOND=613,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        boolean boolean10 = dateTime8.isBefore((long) (byte) 10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localTime33, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField36 = chronology24.dayOfYear();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        int int44 = property43.get();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Period period47 = interval45.toPeriod();
        int[] intArray49 = chronology24.get((org.joda.time.ReadablePeriod) period47, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.weekyears();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) (byte) 1, chronology64);
        int[] intArray67 = chronology56.get((org.joda.time.ReadablePartial) localTime65, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField68 = chronology56.dayOfYear();
        org.joda.time.DurationField durationField69 = durationFieldType50.getField(chronology56);
        int int70 = period47.get(durationFieldType50);
        int[] intArray73 = chronology17.get((org.joda.time.ReadablePeriod) period47, 1645454861756L, (long) 9);
        boolean boolean74 = dateTime8.equals((java.lang.Object) chronology17);
        org.joda.time.DurationField durationField75 = chronology17.months();
        java.lang.String str76 = chronology17.toString();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField78 = chronology17.weekyear();
        int int81 = dateTimeField78.getDifference((long) 53535925, (-1478803860000L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[UTC]" + "'", str76, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 46 + "'", int81 == 46);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T00:10:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t00:10:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime18 = localTime14.minusSeconds(53545);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime21.plus(readablePeriod24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 3);
        org.joda.time.DateTime dateTime39 = dateTime30.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, readableDuration42);
        org.joda.time.Period period44 = interval43.toPeriod();
        org.joda.time.LocalTime localTime45 = localTime21.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.LocalTime localTime47 = localTime21.plusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = null;
        boolean boolean49 = localTime47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalTime localTime51 = localTime47.plusSeconds(23);
        org.joda.time.LocalTime.Property property52 = localTime47.millisOfDay();
        org.joda.time.LocalTime localTime53 = property52.roundHalfFloorCopy();
        int int54 = localTime53.getSecondOfMinute();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.get();
        org.joda.time.Interval interval63 = property61.toInterval();
        org.joda.time.Interval interval64 = interval63.toInterval();
        long long65 = interval63.toDurationMillis();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = interval63.toPeriod(periodType66);
        org.joda.time.MutablePeriod mutablePeriod68 = period67.toMutablePeriod();
        org.joda.time.PeriodType periodType69 = period67.getPeriodType();
        org.joda.time.LocalTime localTime71 = localTime53.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 86399999);
        org.joda.time.LocalTime localTime73 = localTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 18896543);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 60000L + "'", long65 == 60000L);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(mutablePeriod68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime73);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        boolean boolean17 = dateTimeZone9.isFixed();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone9);
        int int20 = dateTimeZone9.getOffset(1645455145701L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(18896543, 21488, 82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18896543 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(12, 2000, 0);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = locale7.getDisplayName(locale8);
        java.util.Calendar.Builder builder12 = builder6.setLocale(locale7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfYear();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.minus(readableDuration23);
        java.util.Date date25 = dateTime24.toDate();
        java.util.Date date32 = new java.util.Date(419, 22, (int) (byte) -1, 2022, 366, 2922789);
        boolean boolean33 = date25.before(date32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.getMinimumValue();
        org.joda.time.DateTime dateTime42 = property40.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.minus(readableDuration44);
        java.util.Date date46 = dateTime45.toDate();
        boolean boolean47 = date32.after(date46);
        int int48 = date32.getDay();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder49 = builder12.setInstant(date32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertEquals(date32.toString(), "Fri Feb 25 07:59:09 UTC 2321");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        int int18 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(6);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        long long32 = interval30.toDurationMillis();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = interval30.toPeriod(periodType33);
        org.joda.time.LocalTime localTime36 = localTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 8);
        org.joda.time.PeriodType periodType37 = period34.getPeriodType();
        org.joda.time.Period period38 = interval9.toPeriod(periodType37);
        org.joda.time.MutableInterval mutableInterval39 = interval9.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = interval9.isAfter(readableInterval40);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        java.lang.String str49 = property48.toString();
        org.joda.time.DateTime dateTime50 = property48.roundFloorCopy();
        org.joda.time.DateTime dateTime52 = property48.addToCopy((long) 366);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusYears(7);
        org.joda.time.DateTime dateTime61 = dateTime57.plusWeeks((int) (short) 10);
        int int62 = property48.getDifference((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, readableDuration63);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.LocalTime localTime70 = dateTime69.toLocalTime();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfHour();
        int int72 = property71.get();
        org.joda.time.Interval interval73 = property71.toInterval();
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localTime77.toDateTime(readableInstant78);
        org.joda.time.LocalTime localTime80 = dateTime79.toLocalTime();
        org.joda.time.DateTime.Property property81 = dateTime79.minuteOfHour();
        int int82 = property81.getMinimumValue();
        org.joda.time.DateTime dateTime83 = property81.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime86 = null;
        boolean boolean87 = dateTimeZone85.isLocalDateTimeGap(localDateTime86);
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(dateTimeZone85);
        org.joda.time.DateTime dateTime89 = dateTime83.withZoneRetainFields(dateTimeZone85);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((java.lang.Object) dateTime89);
        org.joda.time.Interval interval91 = interval74.withEnd((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.Duration duration92 = interval74.toDuration();
        boolean boolean93 = interval64.overlaps((org.joda.time.ReadableInterval) interval74);
        boolean boolean94 = interval9.abuts((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Chronology chronology95 = interval9.getChronology();
        java.lang.String str96 = interval9.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 60000L + "'", long32 == 60000L);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Property[minuteOfHour]" + "'", str49, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-100800) + "'", int62 == (-100800));
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str96, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        calendar0.add(0, (int) 'a');
        int int7 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455235171,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=55,MILLISECOND=171,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        java.lang.String str7 = dateTimeZone2.getShortName(38075L);
        java.lang.String str8 = dateTimeZone2.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.010" + "'", str7, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.010" + "'", str8, "+00:00:00.010");
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = localTime48.getChronology();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 1, chronology51);
        boolean boolean53 = dateTimeFieldType44.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.centuryOfEra();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(chronology51);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime43.toMutableDateTime(chronology51);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1382400008L);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        org.joda.time.LocalTime localTime13 = localTime10.minusMinutes(1);
        org.joda.time.LocalTime.Property property14 = localTime10.millisOfDay();
        int int15 = localTime10.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean17 = localTime10.isSupported(dateTimeFieldType16);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime22.getMonthOfYear();
        int int25 = dateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        org.joda.time.DateTime dateTime34 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime37 = dateTime22.withFieldAdded(durationFieldType35, 2022);
        org.joda.time.LocalTime localTime39 = localTime10.withFieldAdded(durationFieldType35, 1439);
        org.joda.time.DateTime dateTime41 = dateTime2.withFieldAdded(durationFieldType35, 12);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int45 = dateTimeZone43.getOffset((long) (byte) 1);
        java.lang.String str46 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime(dateTimeZone43);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(1645454895971L, dateTimeZone43);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = localTime52.getChronology();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 1, chronology55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.minutes();
        boolean boolean59 = dateTimeZone43.equals((java.lang.Object) chronology55);
        org.joda.time.DurationField durationField60 = chronology55.eras();
        java.lang.String str61 = durationField60.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = durationField60.add(1645401599991L, (-343140000));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "eras" + "'", str61, "eras");
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        java.util.Date date6 = new java.util.Date(419, 22, (int) (byte) -1, 2022, 366, 2922789);
        date6.setMonth(21);
        int int9 = date6.getHours();
        date6.setSeconds(390);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Oct 25 08:05:30 UTC 2322");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = interval8.toDuration();
        org.joda.time.DateTime dateTime21 = interval8.getStart();
        org.joda.time.MutableInterval mutableInterval22 = interval8.toMutableInterval();
        org.joda.time.DateTime dateTime23 = mutableInterval22.getEnd();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableInterval22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone2);
        int int5 = localTime4.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 55 + "'", int5 == 55);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        java.util.Calendar.Builder builder21 = builder15.set(4, 2922789);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime26.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = dateTime26.minus((long) '#');
        org.joda.time.DateTime.Property property38 = dateTime26.weekyear();
        org.joda.time.DateTime dateTime40 = dateTime26.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime();
        org.joda.time.DateTime dateTime43 = dateTime26.withWeekyear(15);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.minuteOfDay();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfMonth();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.LocalTime localTime59 = localTime57.plusHours((int) 'u');
        org.joda.time.LocalTime localTime61 = localTime57.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.LocalTime localTime67 = dateTime66.toLocalTime();
        int int68 = dateTime66.getMonthOfYear();
        int int69 = dateTime66.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int75 = dateTimeZone73.getOffset((long) (byte) 1);
        long long77 = dateTimeZone71.getMillisKeepLocal(dateTimeZone73, (long) 3);
        org.joda.time.DateTime dateTime78 = dateTime66.toDateTime(dateTimeZone71);
        org.joda.time.DateTime dateTime79 = localTime61.toDateTimeToday(dateTimeZone71);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((long) 5, dateTimeZone71);
        int[] intArray82 = chronology44.get((org.joda.time.ReadablePartial) localTime80, 3779990L);
        java.util.Calendar.Builder builder83 = builder21.setFields(intArray82);
        java.util.Calendar.Builder builder87 = builder83.setWeekDate(83400000, 29, 53);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3L + "'", long77 == 3L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[1, 3, 0, 0]");
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("1970-1-9 0:11:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970-1-9 0:11:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        java.util.Date date7 = new java.util.Date((long) (byte) 100);
        date7.setMinutes(11);
        long long10 = date7.getTime();
        int int11 = date7.getMonth();
        calendar0.setTime(date7);
        calendar0.set(600000, 888, 11);
        long long17 = calendar0.getTimeInMillis();
        calendar0.setMinimalDaysInFirstWeek(5);
        int int20 = calendar0.getWeekYear();
        int int21 = calendar0.getFirstDayOfWeek();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(0L, dateTimeZone41);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = dateTime26.toDateTime(dateTimeZone41);
        java.util.TimeZone timeZone47 = dateTimeZone41.toTimeZone();
        calendar0.setTimeZone(timeZone47);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.set(35, 53611753);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=18874340151060100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=600074,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=11,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 660100L + "'", long10 == 660100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 18874340151060100L + "'", long17 == 18874340151060100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 600074 + "'", int20 == 600074);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.minus(readableDuration14);
        org.joda.time.Instant instant16 = dateTime4.toInstant();
        org.joda.time.Instant instant18 = instant16.minus(1641168000000L);
        org.joda.time.Instant instant20 = instant16.withMillis(1645454995020L);
        org.joda.time.MutableDateTime mutableDateTime21 = instant16.toMutableDateTime();
        org.joda.time.Instant instant23 = instant16.minus(21600000L);
        org.joda.time.Instant instant25 = instant16.minus(1645454988275L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime10 = property6.addWrapFieldToCopy(9);
        java.util.Locale locale13 = new java.util.Locale("", "Property[minuteOfHour]");
        java.util.Locale locale16 = new java.util.Locale("2022-02-21T00:10:00.000+00:00:00.010", "");
        java.lang.String str17 = locale13.getDisplayLanguage(locale16);
        java.lang.String str19 = locale16.getExtension('u');
        int int20 = property6.getMaximumTextLength(locale16);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals(locale13.toString(), "_PROPERTY[MINUTEOFHOUR]");
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-21t00:10:00.000+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear(0);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronolgy();
        java.lang.Appendable appendable11 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        int int20 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime.Property property21 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime23 = property21.addCopy(6);
        org.joda.time.LocalTime localTime24 = property21.roundCeilingCopy();
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale26.getDisplayName();
        org.joda.time.LocalTime localTime28 = property21.setCopy("0", locale26);
        org.joda.time.LocalTime localTime29 = property21.roundFloorCopy();
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis(22);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable11, (org.joda.time.ReadablePartial) localTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "English (United States)" + "'", str27, "English (United States)");
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withWeekyear(15);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        int int23 = dateTime21.getMillisOfDay();
        boolean boolean24 = dateTime21.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime21.getZone();
        int int27 = dateTimeZone25.getOffsetFromLocal(1645454990000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 600000 + "'", int23 == 600000);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setTimeInMillis(1645454972384L);
        int int8 = calendar0.getLeastMaximum(11);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar0.getMaximum(888);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 888");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645454972384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=49,SECOND=32,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455235843L + "'", long2 == 1645455235843L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears(7);
        org.joda.time.DateTime dateTime49 = dateTime45.plusWeeks((int) (short) 10);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime58 = dateTime54.plusWeeks(0);
        org.joda.time.Chronology chronology59 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.millisOfDay();
        org.joda.time.DateTime dateTime61 = dateTime45.toDateTime(chronology59);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.Chronology chronology69 = localTime66.getChronology();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 1, chronology69);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.minuteOfDay();
        java.lang.String str75 = dateTimeField73.getAsShortText((-3241594890627141L));
        int int76 = dateTime45.get(dateTimeField73);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeField73.set(13222396800060L, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=0,YEAR=1645430661,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=52,SECOND=0,MILLISECOND=372,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=0,YEAR=1645430661,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=52,SECOND=0,MILLISECOND=372,ZONE_OFFSET=0,DST_OFFSET=0]\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "889" + "'", str75, "889");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 9 + "'", int76 == 9);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        int[] intArray32 = chronology7.get((org.joda.time.ReadablePeriod) period30, (long) (byte) 100);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime37.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, readableDuration49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = interval50.toPeriod(periodType52);
        org.joda.time.Period period54 = period53.toPeriod();
        int[] intArray57 = chronology7.get((org.joda.time.ReadablePeriod) period54, 19044L, (-60000L));
        org.joda.time.DateTimeField dateTimeField58 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalTime localTime70 = localTime66.plus(readablePeriod69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean72 = localTime70.isSupported(dateTimeFieldType71);
        org.joda.time.DateTime dateTime73 = dateTime63.withFields((org.joda.time.ReadablePartial) localTime70);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int79 = dateTimeZone77.getOffset((long) (byte) 1);
        long long81 = dateTimeZone75.getMillisKeepLocal(dateTimeZone77, (long) 3);
        long long84 = dateTimeZone75.convertLocalToUTC((long) 9, false);
        java.lang.String str85 = dateTimeZone75.toString();
        org.joda.time.DateTime dateTime86 = localTime70.toDateTimeToday(dateTimeZone75);
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.now(dateTimeZone75);
        org.joda.time.Chronology chronology88 = chronology7.withZone(dateTimeZone75);
        org.joda.time.Interval interval89 = new org.joda.time.Interval(1645454877715L, 21390274062062L, dateTimeZone75);
        org.joda.time.PeriodType periodType90 = null;
        org.joda.time.Period period91 = interval89.toPeriod(periodType90);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, -1, -19, -44]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.010" + "'", str85, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        java.lang.String str4 = date1.toLocaleString();
        java.lang.String str5 = date1.toGMTString();
        java.time.Instant instant6 = date1.toInstant();
        date1.setMinutes(34);
        int int9 = date1.getYear();
        java.util.Date date15 = new java.util.Date(0, (int) ' ', 0, 9, 43);
        date15.setYear((int) (byte) 0);
        boolean boolean18 = date1.after(date15);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfMonth();
        java.lang.String str29 = dateTimeField28.getName();
        long long32 = dateTimeField28.add((long) 1970, (long) (short) 0);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.parse("14");
        int int35 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        int int42 = dateTime40.getMonthOfYear();
        int int43 = dateTime40.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        org.joda.time.DateTime dateTime52 = dateTime40.toDateTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int57 = dateTimeZone55.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(0L, dateTimeZone55);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = dateTime40.toDateTime(dateTimeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.DateTime dateTime62 = localTime34.toDateTimeToday(dateTimeZone55);
        boolean boolean63 = date1.equals((java.lang.Object) localTime34);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:34:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str4, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 Jan 1970 00:11:00 GMT" + "'", str5, "1 Jan 1970 00:11:00 GMT");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Aug 31 09:43:00 UTC 1900");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1970L + "'", long32 == 1970L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology5.weeks();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        java.lang.String str21 = property20.getName();
        org.joda.time.LocalTime localTime22 = property20.withMaximumValue();
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = localTime22.isAfter(readablePartial23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfHour" + "'", str21, "minuteOfHour");
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime28 = dateTime13.withFieldAdded(durationFieldType26, 2022);
        org.joda.time.LocalTime localTime30 = localTime8.withFieldAdded(durationFieldType26, 122);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.Chronology chronology41 = chronology37.withUTC();
        org.joda.time.DurationField durationField42 = chronology41.months();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.halfdayOfDay();
        long long47 = chronology41.add(121320000L, 31L, (int) '#');
        org.joda.time.DateTimeField dateTimeField48 = chronology41.weekyear();
        boolean boolean49 = durationFieldType26.isSupported(chronology41);
        org.joda.time.DateTimeField dateTimeField50 = chronology41.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 121321085L + "'", long47 == 121321085L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.getMinimumValue();
        org.joda.time.DateTime dateTime40 = property38.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime43 = null;
        boolean boolean44 = dateTimeZone42.isLocalDateTimeGap(localDateTime43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime40.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) dateTime46);
        org.joda.time.Interval interval48 = interval31.withEnd((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = interval31.toDuration();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.DateTime dateTime52 = dateTime16.withMillisOfSecond(100);
        org.joda.time.DateTime dateTime54 = dateTime16.withMillisOfDay(100);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.roll((int) (byte) 0, 366);
        boolean boolean10 = calendar6.isWeekDateSupported();
        java.time.Instant instant11 = calendar6.toInstant();
        calendar6.setMinimalDaysInFirstWeek(50340000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455236447,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=50340000,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=56,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(15706);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = dateTimeFormatter8.parseLocalTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayName();
        org.joda.time.LocalTime localTime16 = property9.setCopy("0", locale14);
        org.joda.time.LocalTime localTime18 = property9.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime20 = property9.addNoWrapToCopy(7);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        int int29 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime.Property property30 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime32 = property30.addCopy(6);
        org.joda.time.LocalTime localTime33 = property30.roundHalfCeilingCopy();
        int int34 = property30.get();
        org.joda.time.LocalTime localTime36 = property30.addWrapFieldToCopy((-100800));
        java.lang.String str37 = localTime36.toString();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        boolean boolean56 = dateTimeFieldType47.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.centuryOfEra();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology54);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology54);
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getVariant();
        java.lang.String str63 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localTime60, locale61);
        int int64 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime60);
        int[] intArray65 = localTime60.getValues();
        int int66 = localTime20.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime localTime68 = localTime20.minusHours((int) ' ');
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "inglese (Stati Uniti)" + "'", str15, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "00:10:00.000" + "'", str37, "00:10:00.000");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2" + "'", str63, "2");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[14, 53, 56, 485]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(localTime68);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = dateTime9.toString(dateTimeFormatter10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.weekyear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 5, chronology18);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.DateTime dateTime42 = dateTime31.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime9.minus((org.joda.time.ReadablePeriod) period41);
        long long44 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime9.secondOfMinute();
        int int46 = dateTime9.getMillisOfSecond();
        org.joda.time.DateTime dateTime48 = dateTime9.minusDays(458342);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645402199990L + "'", long44 == 1645402199990L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withPivotYear(0);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        long long39 = dateTimeField36.add((long) 'u', 7);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        int int48 = localTime42.compareTo((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.LocalTime.Property property49 = localTime42.hourOfDay();
        org.joda.time.LocalTime localTime51 = property49.addCopy(6);
        org.joda.time.LocalTime localTime52 = property49.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime53 = property49.roundCeilingCopy();
        org.joda.time.LocalTime localTime55 = localTime53.plusHours(2922789);
        java.util.Locale locale56 = java.util.Locale.ITALY;
        boolean boolean57 = locale56.hasExtensions();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localTime53, locale56);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.ITALY;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale61.getDisplayVariant(locale62);
        java.lang.String str65 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localTime53, (int) '4', locale61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter9.withLocale(locale61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter9.withDefaultYear((-44));
        int int69 = dateTimeFormatter68.getDefaultYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 25200117L + "'", long39 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "52" + "'", str65, "52");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-44) + "'", int69 == (-44));
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.LocalTime localTime29 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 17);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Period period40 = interval38.toPeriod();
        java.lang.String str41 = interval38.toString();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.Interval interval51 = interval50.toInterval();
        long long52 = interval50.toDurationMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval50.toPeriod(periodType53);
        org.joda.time.Interval interval55 = interval38.overlap((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval55.toPeriod(periodType56);
        org.joda.time.LocalTime localTime58 = localTime14.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType59.getDurationType();
        java.lang.String str61 = durationFieldType60.toString();
        org.joda.time.LocalTime localTime63 = localTime14.withFieldAdded(durationFieldType60, 9);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str41, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 60000L + "'", long52 == 60000L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "seconds" + "'", str61, "seconds");
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 9, false);
        java.lang.String str45 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime46 = localTime30.toDateTimeToday(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime49 = dateTime16.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.withChronology(chronology50);
        org.joda.time.DateTime.Property property52 = dateTime49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        int int54 = dateTimeField53.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(0);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        int int55 = dateTime52.getYearOfCentury();
        int int56 = property42.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = property42.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField59 = localTime57.getField(0);
        long long61 = dateTimeField59.roundHalfCeiling((long) 934);
        long long64 = dateTimeField59.add(1645455133130L, 0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645455133130L + "'", long64 == 1645455133130L);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(120, 5, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.getAsString();
        org.joda.time.DateTime dateTime8 = property6.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(0L, dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime8.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property17 = dateTime8.weekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10" + "'", str7, "10");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        int int13 = property9.get();
        org.joda.time.LocalTime localTime15 = property9.addWrapFieldToCopy((-100800));
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        org.joda.time.DateTime dateTime24 = localTime23.toDateTimeToday();
        org.joda.time.LocalTime localTime26 = localTime23.minusMinutes(1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalTime localTime29 = localTime23.withPeriodAdded(readablePeriod27, 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(1645402140000L, chronology40);
        org.joda.time.DurationField durationField42 = chronology40.weeks();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType30.getField(chronology40);
        int int44 = localTime23.get(dateTimeFieldType30);
        int int45 = localTime15.get(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, (int) (byte) 10);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        int int26 = dateTime24.getMonthOfYear();
        int int27 = dateTime24.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime24.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property37 = dateTime24.dayOfYear();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (byte) 1, chronology44);
        org.joda.time.DateTime dateTime46 = localTime45.toDateTimeToday();
        org.joda.time.DateTime dateTime48 = dateTime46.minus(0L);
        int int49 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime48.minusMinutes((int) ' ');
        boolean boolean52 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime51.getMinuteOfDay();
        int int54 = dateTime51.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1408 + "'", int53 == 1408);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("English", strMap1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.minus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime11.withYearOfEra(3);
        org.joda.time.DateTime dateTime18 = dateTime16.minusYears(888);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localTime33, (long) (short) -1);
        org.joda.time.DurationField durationField36 = chronology24.hours();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        int[] intArray53 = chronology42.get((org.joda.time.ReadablePartial) localTime51, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField54 = chronology42.dayOfYear();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.get();
        org.joda.time.Interval interval63 = property61.toInterval();
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Period period65 = interval63.toPeriod();
        int[] intArray67 = chronology42.get((org.joda.time.ReadablePeriod) period65, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localTime71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = localTime71.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.weekyears();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localTime79.toDateTime(readableInstant80);
        org.joda.time.Chronology chronology82 = localTime79.getChronology();
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((long) (byte) 1, chronology82);
        int[] intArray85 = chronology74.get((org.joda.time.ReadablePartial) localTime83, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField86 = chronology74.dayOfYear();
        org.joda.time.DurationField durationField87 = durationFieldType68.getField(chronology74);
        int int88 = period65.get(durationFieldType68);
        int[] intArray90 = chronology24.get((org.joda.time.ReadablePeriod) period65, (long) 2);
        org.joda.time.DateTimeField dateTimeField91 = chronology24.dayOfWeek();
        org.joda.time.DateTime dateTime92 = dateTime18.toDateTime(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime((java.lang.Object) "English", chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight40 = dateTime39.toDateMidnight();
        boolean boolean42 = dateTime39.isEqual(1645454987618L);
        org.joda.time.LocalTime localTime43 = dateTime39.toLocalTime();
        org.joda.time.DateTime dateTime44 = dateTime39.toDateTime();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationAfterStart(readableDuration28);
        org.joda.time.Duration duration30 = interval29.toDuration();
        org.joda.time.Duration duration31 = duration30.toDuration();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        boolean boolean33 = calendar32.isWeekDateSupported();
        long long34 = calendar32.getTimeInMillis();
        java.util.TimeZone timeZone35 = calendar32.getTimeZone();
        int int36 = calendar32.getMinimalDaysInFirstWeek();
        boolean boolean37 = duration30.equals((java.lang.Object) calendar32);
        java.lang.String str38 = duration30.toString();
        java.lang.String str39 = duration30.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455237314,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=57,MILLISECOND=314,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645455237314L + "'", long34 == 1645455237314L);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0S" + "'", str39, "PT0S");
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(3);
        int int8 = localTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone11);
        org.joda.time.LocalTime localTime15 = localTime7.withFields((org.joda.time.ReadablePartial) localTime14);
        int[] intArray16 = localTime14.getValues();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = localTime14.toString(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0, 0, 10]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "00:00:00.010" + "'", str18, "00:00:00.010");
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(15706);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 122);
        java.lang.StringBuffer stringBuffer11 = null;
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer11, readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setRegion("-27423368");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: -27423368 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Date date5 = new java.util.Date((long) (byte) 100);
        date5.setMinutes(11);
        long long8 = date5.getTime();
        java.util.Calendar.Builder builder9 = builder0.setInstant(date5);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder11 = builder0.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder15 = builder0.setDate(17, 49, 7020010);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 660100L + "'", long8 == 660100L);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getISO3Language();
        java.lang.String str4 = locale0.getDisplayName(locale1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale0);
        calendar5.setLenient(false);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance();
        boolean boolean9 = calendar8.isWeekDateSupported();
        long long10 = calendar8.getTimeInMillis();
        java.util.TimeZone timeZone11 = calendar8.getTimeZone();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localTime26, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) calendar8, chronology17);
        calendar8.set(9, 59, 1439, (-14), 15706, 18);
        java.util.TimeZone timeZone38 = calendar8.getTimeZone();
        calendar5.setTimeZone(timeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        java.util.Locale locale41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone38, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "English" + "'", str4, "English");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455237471,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=57,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=9,MONTH=59,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1439,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=-14,MINUTE=15706,SECOND=18,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455237471L + "'", long10 == 1645455237471L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property17 = dateTime4.weekOfWeekyear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime20.plus(readablePeriod23);
        org.joda.time.LocalTime localTime26 = localTime20.minusMillis((int) (byte) 100);
        java.lang.String str27 = localTime26.toString();
        org.joda.time.DateTime dateTime28 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.DateTime dateTime31 = property29.addWrapFieldToCopy(35);
        org.joda.time.DurationField durationField32 = property29.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "00:09:59.900" + "'", str27, "00:09:59.900");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNull(durationField32);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        long long12 = dateTimeField10.remainder(1L);
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = dateTimeField10.getMaximumValue(readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        int int11 = dateTimeField10.getMaximumValue();
        long long13 = dateTimeField10.roundHalfFloor((long) 23);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.getMinimumValue();
        org.joda.time.DateTime dateTime22 = property20.roundHalfEvenCopy();
        java.util.Locale locale23 = java.util.Locale.US;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale23.getDisplayCountry(locale27);
        java.lang.String str29 = property20.getAsText(locale27);
        long long30 = property20.remainder();
        org.joda.time.DateTimeField dateTimeField31 = property20.getField();
        boolean boolean32 = dateTimeField31.isLenient();
        long long34 = dateTimeField31.roundCeiling((long) 3720000);
        org.joda.time.DurationField durationField35 = dateTimeField31.getLeapDurationField();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        int int44 = localTime38.compareTo((org.joda.time.ReadablePartial) localTime41);
        org.joda.time.LocalTime.Property property45 = localTime38.hourOfDay();
        org.joda.time.LocalTime localTime47 = property45.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime49 = localTime47.plusMillis(13);
        int int50 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.dayOfMonth();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.LocalTime localTime64 = localTime62.plusHours((int) 'u');
        org.joda.time.LocalTime localTime66 = localTime62.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int72 = dateTimeZone70.getOffset((long) (byte) 1);
        long long74 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 3);
        long long77 = dateTimeZone68.convertLocalToUTC((long) 9, false);
        java.lang.String str78 = dateTimeZone68.toString();
        org.joda.time.DateTime dateTime79 = localTime66.toDateTimeToday(dateTimeZone68);
        org.joda.time.LocalTime localTime81 = localTime66.minusMillis(21);
        org.joda.time.DateTimeField[] dateTimeFieldArray82 = localTime81.getFields();
        int[] intArray83 = localTime81.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField10.set((org.joda.time.ReadablePartial) localTime47, 2186, intArray83, 22383);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399 + "'", int11 == 86399);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-10L) + "'", long13 == (-10L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "United States" + "'", str28, "United States");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "10" + "'", str29, "10");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3779990L + "'", long34 == 3779990L);
        org.junit.Assert.assertNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3L + "'", long74 == 3L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(dateTimeFieldArray82);
        org.junit.Assert.assertNotNull(intArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[14, 53, 56, 980]");
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property17 = dateTime13.weekyear();
        long long18 = property17.remainder();
        java.lang.String str19 = property17.toString();
        org.joda.time.DateTime dateTime20 = property17.getDateTime();
        java.lang.String str21 = dateTime20.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4234200000L + "'", long18 == 4234200000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[weekyear]" + "'", str19, "Property[weekyear]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str21, "2022-02-21T00:10:00.000+00:00:00.010");
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localTime17, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.dayOfYear();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        int[] intArray33 = chronology8.get((org.joda.time.ReadablePeriod) period31, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField34 = chronology8.weekOfWeekyear();
        boolean boolean35 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType1.getField(chronology41);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay(1645455093057L, chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.hourOfDay();
        org.joda.time.DurationField durationField47 = chronology41.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime4.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime4.withDayOfMonth(17);
        int int21 = dateTime20.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, dateTimeZone24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.getMinimumValue();
        org.joda.time.DateTime dateTime46 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime46.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime52);
        org.joda.time.Interval interval54 = interval37.withEnd((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.DateTime dateTime57 = dateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period55, (-1645379999));
        org.joda.time.DateTime dateTime59 = dateTime20.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 8);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar61 = dateTime59.toGregorianCalendar();
        java.util.Date date63 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromDateFields(date63);
        date63.setYear((-1645379999));
        boolean boolean67 = gregorianCalendar61.before((java.lang.Object) (-1645379999));
        // The following exception was thrown during execution in test generation
        try {
            int int69 = gregorianCalendar61.getActualMaximum(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(gregorianCalendar61);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Jan 24 19:17:34 UTC 108250262");
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        java.util.Date date5 = new java.util.Date(1970, 0, 9, 7, 32769);
        date5.setSeconds((-143999));
        date5.setHours(746);
        date5.setMonth(190);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Nov 30 10:09:01 UTC 3885");
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology16.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter8.withChronology(chronology16);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.getMinimumValue();
        org.joda.time.DateTime dateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime33.minusMillis(6);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localTime55, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField58 = chronology46.dayOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType40.getField(chronology46);
        org.joda.time.DurationField durationField60 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField61 = chronology46.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = dateTime39.toMutableDateTime(chronology46);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        int int71 = localTime65.compareTo((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.LocalTime.Property property72 = localTime65.hourOfDay();
        org.joda.time.LocalTime localTime74 = property72.addCopy(6);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localTime77.toDateTime(readableInstant78);
        org.joda.time.LocalTime localTime80 = dateTime79.toLocalTime();
        org.joda.time.DateTime.Property property81 = dateTime79.minuteOfHour();
        int int82 = property81.get();
        org.joda.time.Interval interval83 = property81.toInterval();
        org.joda.time.Interval interval84 = interval83.toInterval();
        long long85 = interval83.toDurationMillis();
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.Period period87 = interval83.toPeriod(periodType86);
        org.joda.time.LocalTime localTime89 = localTime74.withPeriodAdded((org.joda.time.ReadablePeriod) period87, 8);
        org.joda.time.LocalTime localTime91 = localTime89.withSecondOfMinute(52);
        org.joda.time.Chronology chronology92 = localTime89.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime39.toMutableDateTime(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            int int97 = dateTimeFormatter24.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime94, "04:10:00.013", 5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 60000L + "'", long85 == 60000L);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localTime17, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField21 = durationFieldType2.getField(chronology8);
        org.joda.time.DurationField durationField22 = chronology8.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval23 = new org.joda.time.Interval(1646722381698L, 53485825L, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        boolean boolean13 = durationFieldType0.isSupported(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfHour();
        long long19 = dateTimeField17.roundHalfEven(1645455015017L);
        long long22 = dateTimeField17.addWrapField(1645454879931L, 890);
        java.util.Locale locale24 = new java.util.Locale("PT0S");
        int int25 = dateTimeField17.getMaximumShortTextLength(locale24);
        java.lang.String str27 = locale24.getExtension('a');
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645455000000L + "'", long19 == 1645455000000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645454279931L + "'", long22 == 1645454279931L);
        org.junit.Assert.assertEquals(locale24.toString(), "pt0s");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField20 = chronology6.centuryOfEra();
        java.util.Locale locale23 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        int int24 = dateTimeField20.getMaximumShortTextLength(locale23);
        java.lang.String str26 = dateTimeField20.getAsShortText(27424247L);
        long long28 = dateTimeField20.remainder(1645454869965L);
        long long30 = dateTimeField20.roundHalfFloor(53536469L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale23.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19" + "'", str26, "19");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1510305130035L) + "'", long28 == (-1510305130035L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 946684800000L + "'", long30 == 946684800000L);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        int int14 = dateTime12.getMonthOfYear();
        int int15 = dateTime12.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(1970);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime36.plus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = dateTime33.withFields((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        long long54 = dateTimeZone45.convertLocalToUTC((long) 9, false);
        java.lang.String str55 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime56 = localTime40.toDateTimeToday(dateTimeZone45);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone45.getShortName((long) 100, locale58);
        boolean boolean61 = dateTimeZone45.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime62 = dateTime28.withZoneRetainFields(dateTimeZone45);
        int int64 = dateTimeZone45.getStandardOffset(2863424L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter6.withZone(dateTimeZone45);
        boolean boolean66 = dateTimeFormatter6.isPrinter();
        java.lang.Integer int67 = dateTimeFormatter6.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime69 = dateTimeFormatter6.parseMutableDateTime("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(int67);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone17);
        int int31 = dateTimeZone17.getOffsetFromLocal((long) 21);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 31, dateTimeZone17);
        org.joda.time.DateTime dateTime34 = dateTime32.withMinuteOfHour((int) (short) 0);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.DateTime dateTime36 = property35.getDateTime();
        org.joda.time.DateTime dateTime38 = dateTime36.plus(1645454936001L);
        org.joda.time.DateTime dateTime40 = dateTime38.minusHours(53389);
        boolean boolean42 = dateTime40.isAfter((long) 27424250);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter(660100L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.Interval interval34 = interval33.toInterval();
        long long35 = interval33.toDurationMillis();
        org.joda.time.Period period36 = interval33.toPeriod();
        org.joda.time.Interval interval37 = interval22.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        java.lang.String str45 = property44.toString();
        org.joda.time.DateTime dateTime46 = property44.roundFloorCopy();
        org.joda.time.DateTime dateTime48 = dateTime46.plusSeconds((int) '4');
        boolean boolean49 = dateTime46.isBeforeNow();
        int int50 = dateTime46.getMonthOfYear();
        boolean boolean51 = interval37.contains((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalTime localTime52 = dateTime46.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 60000L + "'", long35 == 60000L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[minuteOfHour]" + "'", str45, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.util.Calendar calendar35 = dateTime25.toCalendar(locale31);
        java.util.Date date36 = calendar35.getTime();
        calendar35.setTimeInMillis(3180000L);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromCalendarFields(calendar35);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English" + "'", str32, "English");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455238067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=58,MILLISECOND=67,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=3180000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=53,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(7);
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(16);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int16 = dateTimeZone14.getOffset((long) (byte) 1);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 3);
        long long21 = dateTimeZone12.convertLocalToUTC((long) 9, false);
        java.lang.String str22 = dateTimeZone12.toString();
        long long24 = dateTimeZone12.convertUTCToLocal((long) 7);
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone12);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((-1034120877845938L), 1645454955233L, dateTimeZone12);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.Period period37 = interval35.toPeriod();
        java.lang.String str38 = interval35.toString();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        int int46 = property45.get();
        org.joda.time.Interval interval47 = property45.toInterval();
        org.joda.time.Interval interval48 = interval47.toInterval();
        long long49 = interval47.toDurationMillis();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval47.toPeriod(periodType50);
        org.joda.time.Interval interval52 = interval35.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval52.toPeriod(periodType53);
        org.joda.time.ReadableInterval readableInterval55 = null;
        boolean boolean56 = interval52.contains(readableInterval55);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        int int63 = dateTime61.getMonthOfYear();
        int int64 = dateTime61.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int70 = dateTimeZone68.getOffset((long) (byte) 1);
        long long72 = dateTimeZone66.getMillisKeepLocal(dateTimeZone68, (long) 3);
        org.joda.time.DateTime dateTime73 = dateTime61.toDateTime(dateTimeZone66);
        org.joda.time.Interval interval74 = interval52.withEnd((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime75 = dateTime61.toDateTime();
        org.joda.time.Chronology chronology76 = dateTime61.getChronology();
        org.joda.time.Interval interval77 = interval26.withStart((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean79 = dateTime61.isAfter(63560213420138L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 17L + "'", long24 == 17L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str38, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 60000L + "'", long49 == 60000L);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3L + "'", long72 == 3L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfMonth();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours((int) 'u');
        long long22 = chronology5.set((org.joda.time.ReadablePartial) localTime18, 0L);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePartial) localTime38, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField41 = chronology29.weekyear();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 5, chronology29);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.get();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalTime localTime54 = localTime18.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period55 = period52.toPeriod();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.centuries();
        int int57 = period55.get(durationFieldType56);
        java.lang.String str58 = durationFieldType56.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 53638177L + "'", long22 == 53638177L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "centuries" + "'", str58, "centuries");
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.lang.String str16 = locale11.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale11);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale11.getDisplayCountry(locale18);
        int int21 = dateTimeField10.getMaximumShortTextLength(locale18);
        long long23 = dateTimeField10.roundFloor((long) 7200000);
        org.joda.time.DurationField durationField24 = dateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United States" + "'", str16, "United States");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455238302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=58,MILLISECOND=302,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Stati Uniti" + "'", str20, "Stati Uniti");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 7200000L + "'", long23 == 7200000L);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        boolean boolean16 = dateTimeField13.isLeap(54000000L);
        boolean boolean17 = dateTimeField13.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.year();
        long long8 = dateTimeField6.roundHalfCeiling(35L);
        org.joda.time.DurationField durationField9 = dateTimeField6.getDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder14 = builder10.setDate(31, 53, 52);
        java.util.Calendar.Builder builder16 = builder10.setLenient(false);
        java.util.Locale locale19 = new java.util.Locale("600000", "\u82f1\u6587");
        java.util.Calendar.Builder builder20 = builder16.setLocale(locale19);
        java.lang.Object obj21 = locale19.clone();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "\u82f1\u6587");
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.DateTime.Property property35 = dateTime34.weekOfWeekyear();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.get();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.Interval interval45 = interval44.toInterval();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.getMinimumValue();
        org.joda.time.DateTime dateTime54 = property52.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone56.isLocalDateTimeGap(localDateTime57);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = dateTime54.withZoneRetainFields(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((java.lang.Object) dateTime60);
        org.joda.time.Interval interval62 = interval45.withEnd((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period63 = interval62.toPeriod();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval62.withDurationAfterStart(readableDuration64);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        int int73 = property72.get();
        org.joda.time.Interval interval74 = property72.toInterval();
        org.joda.time.Interval interval75 = interval74.toInterval();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = interval75.toPeriod(periodType76);
        org.joda.time.Interval interval78 = interval62.withPeriodAfterStart((org.joda.time.ReadablePeriod) period77);
        org.joda.time.DateTime dateTime79 = dateTime34.minus((org.joda.time.ReadablePeriod) period77);
        int int80 = dateTime34.getDayOfWeek();
        int int81 = dateTime34.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(0L, dateTimeZone19);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime4.withSecondOfMinute(3);
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.getMinimumValue();
        org.joda.time.DateTime dateTime46 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime46.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime52);
        org.joda.time.Interval interval54 = interval37.withEnd((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationAfterStart(readableDuration56);
        org.joda.time.Duration duration58 = interval57.toDuration();
        org.joda.time.DateTime dateTime60 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration58, 473354279);
        org.joda.time.DateTime dateTime62 = dateTime60.withCenturyOfEra(60);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=46,MILLISECOND=688,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-1-9 0:11:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=46,MILLISECOND=688,ZONE_OFFSET=0,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePartial) localTime17, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.dayOfYear();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.Period period31 = interval29.toPeriod();
        int[] intArray33 = chronology8.get((org.joda.time.ReadablePeriod) period31, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField34 = chronology8.weekOfWeekyear();
        boolean boolean35 = dateTimeFieldType1.isSupported(chronology8);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType1.getField(chronology41);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay(1645455093057L, chronology41);
        int int47 = localTime45.getValue(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.minusMillis(6);
        org.joda.time.DateTime dateTime16 = dateTime8.plus(1571616599990L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readableDuration27);
        int int29 = dateTime28.getMinuteOfDay();
        org.joda.time.Instant instant30 = dateTime28.toInstant();
        boolean boolean31 = interval8.isBefore((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Instant instant33 = instant30.withMillis(1645454877853L);
        long long34 = instant30.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 893 + "'", int29 == 893);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(instant33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645455238734L + "'", long34 == 1645455238734L);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        long long20 = dateTimeField17.add((long) 99, (-1645379999));
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        boolean boolean24 = calendar23.isWeekDateSupported();
        long long25 = calendar23.getTimeInMillis();
        java.util.TimeZone timeZone26 = calendar23.getTimeZone();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.LocalTime localTime39 = localTime37.plusHours((int) 'u');
        org.joda.time.LocalTime localTime41 = localTime37.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int47 = dateTimeZone45.getOffset((long) (byte) 1);
        long long49 = dateTimeZone43.getMillisKeepLocal(dateTimeZone45, (long) 3);
        long long52 = dateTimeZone43.convertLocalToUTC((long) 9, false);
        java.lang.String str53 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime54 = localTime41.toDateTimeToday(dateTimeZone43);
        java.util.Locale locale56 = java.util.Locale.US;
        java.util.Locale locale60 = new java.util.Locale("", "hi!", "");
        java.lang.String str61 = locale56.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(locale56);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        boolean boolean64 = locale63.hasExtensions();
        java.lang.String str65 = locale56.getDisplayCountry(locale63);
        java.lang.String str66 = dateTimeZone43.getShortName((long) 2022, locale56);
        java.lang.String str67 = locale56.getDisplayScript();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone26, locale56);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = dateTimeField17.set(38075L, "us", locale56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"us\" for clockhourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-5923367996399901L) + "'", long20 == (-5923367996399901L));
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455238765,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=58,MILLISECOND=765,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455238765L + "'", long25 == 1645455238765L);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3L + "'", long49 == 3L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.010" + "'", str53, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "United States" + "'", str61, "United States");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645455238765,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=58,MILLISECOND=765,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Stati Uniti" + "'", str65, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645455238765,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=58,MILLISECOND=765,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks((int) (short) 10);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime13.plusWeeks(0);
        org.joda.time.Chronology chronology18 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime4.toDateTime(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.weekyears();
        org.joda.time.DurationField durationField22 = chronology18.centuries();
        org.joda.time.DurationField durationField23 = chronology18.minutes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        long long20 = interval18.toDurationMillis();
        org.joda.time.Interval interval22 = interval18.withStartMillis(10L);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology29);
        org.joda.time.Interval interval32 = interval18.withChronology(chronology29);
        org.joda.time.Duration duration33 = interval32.toDuration();
        long long34 = interval32.getEndMillis();
        boolean boolean35 = interval9.isBefore((org.joda.time.ReadableInterval) interval32);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60000L + "'", long20 == 60000L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645402259990L + "'", long34 == 1645402259990L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder4 = builder2.setCalendarType("United Kingdom");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: United Kingdom");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayName();
        org.joda.time.LocalTime localTime16 = property9.setCopy("0", locale14);
        org.joda.time.LocalTime localTime18 = property9.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime19 = property9.roundHalfCeilingCopy();
        long long20 = property9.remainder();
        org.joda.time.LocalTime localTime21 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime23 = property9.addWrapFieldToCopy(53560109);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United States)" + "'", str15, "English (United States)");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 600000L + "'", long20 == 600000L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, 0L, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        int int14 = dateTimeField12.getMinimumValue(63560213466411L);
        org.joda.time.DurationField durationField15 = dateTimeField12.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale37 = java.util.Locale.US;
        java.lang.String str38 = locale37.getDisplayLanguage();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale37);
        java.util.Locale locale40 = java.util.Locale.UK;
        java.util.Locale locale44 = new java.util.Locale("", "hi!", "");
        java.lang.String str45 = locale44.toLanguageTag();
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.lang.String str51 = locale46.getDisplayCountry(locale50);
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale62);
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale64.getDisplayName();
        java.util.Locale locale66 = java.util.Locale.UK;
        java.util.Locale locale68 = new java.util.Locale("hours");
        java.util.Locale locale69 = java.util.Locale.US;
        java.lang.String str70 = locale69.getDisplayLanguage();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale69);
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale75);
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale30, locale33, locale35, locale37, locale40, locale44, locale50, locale52, locale55, locale56, locale58, locale62, locale64, locale66, locale68, locale69, locale75 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList78, filteringMode80);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList24, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList81, filteringMode83);
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags(languageRangeList8, (java.util.Collection<java.lang.String>) strSet12, filteringMode83);
        java.lang.String str86 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strList85);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "English" + "'", str38, "English");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455239005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=5,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "und" + "'", str45, "und");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "United States" + "'", str51, "United States");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English (United States)" + "'", str65, "English (United States)");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale68.toString(), "hours");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "English" + "'", str70, "English");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455239005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=5,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale75.toString(), "_HI!");
        org.junit.Assert.assertNotNull(localeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode80.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertTrue("'" + filteringMode83 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode83.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        int int17 = dateTime13.getYear();
        org.joda.time.DateTime dateTime19 = dateTime13.withYear(9);
        int int20 = dateTime19.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("en", strMap2);
        java.util.Set<java.lang.String> strSet4 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Collection<java.util.Locale> localeCollection13 = null;
        java.util.List<java.util.Locale> localeList14 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, localeCollection13);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList19, strMap20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.US;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.lang.String str31 = locale30.getScript();
        java.util.Locale locale32 = java.util.Locale.US;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale35 = java.util.Locale.UK;
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.lang.String str40 = locale39.toLanguageTag();
        java.util.Locale locale41 = java.util.Locale.US;
        java.util.Locale locale45 = new java.util.Locale("", "hi!", "");
        java.lang.String str46 = locale41.getDisplayCountry(locale45);
        java.util.Locale locale47 = java.util.Locale.US;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale57);
        java.util.Locale locale59 = java.util.Locale.US;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.UK;
        java.util.Locale locale63 = new java.util.Locale("hours");
        java.util.Locale locale64 = java.util.Locale.US;
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale64);
        java.util.Locale locale70 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(locale70);
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale25, locale28, locale30, locale32, locale35, locale39, locale45, locale47, locale50, locale51, locale53, locale57, locale59, locale61, locale63, locale64, locale70 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList73, filteringMode75);
        java.util.Locale locale77 = java.util.Locale.lookup(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, strMap82);
        java.util.Collection<java.util.Locale> localeCollection84 = null;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, localeCollection84);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.parse("days", strMap87);
        java.util.Set<java.lang.String> strSet89 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList88, (java.util.Collection<java.lang.String>) strSet89);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strList90);
        java.lang.String str92 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList91);
        java.lang.String str93 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strList91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strList91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(localeList14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645455239137,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "und" + "'", str40, "und");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United States" + "'", str46, "United States");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "English (United States)" + "'", str60, "English (United States)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale63.toString(), "hours");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English" + "'", str65, "English");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645455239137,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=137,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode75.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNull(locale78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(languageRangeList88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.roll((int) (byte) 0, 366);
        boolean boolean10 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        java.lang.String str12 = calendar6.getCalendarType();
        java.lang.String str13 = calendar6.getCalendarType();
        java.time.Instant instant14 = calendar6.toInstant();
        calendar6.setMinimalDaysInFirstWeek(44);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455239180,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=44,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=180,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 6, 53389102L);
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder0.build();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455239209,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=209,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        calendar8.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone11 = calendar8.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Calendar.Builder builder14 = builder5.setTimeZone(timeZone11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder16 = builder14.setCalendarType("Germany");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: Germany");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455239241,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=241,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        int int6 = date1.getMonth();
        java.time.Instant instant7 = date1.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.util.Date date9 = java.util.Date.from(instant7);
        int int10 = date9.getMinutes();
        java.lang.Object obj11 = date9.clone();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "Thu Jan 01 00:11:00 UTC 1970");
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        boolean boolean18 = dateTime16.isAfterNow();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime20, "\ufffd\ufffd", (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology5.weekOfWeekyear();
        long long21 = dateTimeField19.roundHalfEven(1645455033514L);
        int int22 = dateTimeField19.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645401600000L + "'", long21 == 1645401600000L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        boolean boolean18 = dateTime16.isAfter(53288352L);
        org.joda.time.DateTime dateTime20 = dateTime16.withMillis(3195590399991L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        int int16 = dateTime14.getMonthOfYear();
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.millisOfSecond();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.secondOfMinute();
        java.lang.String str31 = property30.toString();
        org.joda.time.DateTime dateTime33 = property30.setCopy("42");
        int int34 = dateTime33.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime33.getZone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-457055) + "'", int29 == (-457055));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[secondOfMinute]" + "'", str31, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(0L, dateTimeZone19);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone19);
        org.joda.time.DateTime dateTime24 = dateTime4.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime26 = dateTime4.withSecondOfMinute(3);
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.Interval interval37 = interval36.toInterval();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.getMinimumValue();
        org.joda.time.DateTime dateTime46 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone48.isLocalDateTimeGap(localDateTime49);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = dateTime46.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((java.lang.Object) dateTime52);
        org.joda.time.Interval interval54 = interval37.withEnd((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationAfterStart(readableDuration56);
        org.joda.time.Duration duration58 = interval57.toDuration();
        org.joda.time.DateTime dateTime60 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration58, 473354279);
        long long61 = duration58.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        int int13 = property6.getMinimumValueOverall();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        int int16 = property6.getMaximumTextLength(locale14);
        org.joda.time.DateTime dateTime18 = property6.setCopy("6");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (United States)" + "'", str8, "English (United States)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime4.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 12);
        boolean boolean23 = dateTimeZone19.isStandardOffset((long) '4');
        int int25 = dateTimeZone19.getStandardOffset(3L);
        java.lang.String str27 = dateTimeZone19.getShortName(1645454972124L);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTime28);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        org.joda.time.DateTime dateTime44 = dateTime35.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime46 = dateTime44.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, readableDuration47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = interval48.toPeriod(periodType50);
        org.joda.time.Period period52 = period51.toPeriod();
        int[] intArray55 = chronology5.get((org.joda.time.ReadablePeriod) period52, 19044L, (-60000L));
        org.joda.time.DateTimeField dateTimeField56 = chronology5.centuryOfEra();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime64.plus(readablePeriod67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean70 = localTime68.isSupported(dateTimeFieldType69);
        org.joda.time.DateTime dateTime71 = dateTime61.withFields((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int77 = dateTimeZone75.getOffset((long) (byte) 1);
        long long79 = dateTimeZone73.getMillisKeepLocal(dateTimeZone75, (long) 3);
        long long82 = dateTimeZone73.convertLocalToUTC((long) 9, false);
        java.lang.String str83 = dateTimeZone73.toString();
        org.joda.time.DateTime dateTime84 = localTime68.toDateTimeToday(dateTimeZone73);
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.now(dateTimeZone73);
        org.joda.time.Chronology chronology86 = chronology5.withZone(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField87 = chronology5.era();
        org.joda.time.DateTimeField dateTimeField88 = chronology5.millisOfSecond();
        org.joda.time.Chronology chronology89 = chronology5.withUTC();
        org.joda.time.LocalTime localTime90 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField91 = chronology5.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long95 = chronology5.add((long) 7200000, 63560213483231L, (-6280956));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 63560213483231 * -6280956");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, -1, -19, -44]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 3L + "'", long79 == 3L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.010" + "'", str83, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("35");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationAfterStart(readableDuration28);
        org.joda.time.Duration duration30 = interval29.toDuration();
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration32 = duration30.toDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        java.lang.String str34 = duration32.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone17);
        int int31 = dateTimeZone17.getOffsetFromLocal((long) 21);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 31, dateTimeZone17);
        int int34 = dateTimeZone17.getOffsetFromLocal(63560213412805L);
        boolean boolean36 = dateTimeZone17.isStandardOffset(1645452000000L);
        long long38 = dateTimeZone17.previousTransition(1645455127573L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645455127573L + "'", long38 == 1645455127573L);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        java.lang.String str11 = dateTimeZone8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        int int18 = dateTime16.getMonthOfYear();
        int int19 = dateTime16.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int25 = dateTimeZone23.getOffset((long) (byte) 1);
        long long27 = dateTimeZone21.getMillisKeepLocal(dateTimeZone23, (long) 3);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime42 = localTime38.plus(readablePeriod41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean44 = localTime42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = dateTime35.withFields((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int51 = dateTimeZone49.getOffset((long) (byte) 1);
        long long53 = dateTimeZone47.getMillisKeepLocal(dateTimeZone49, (long) 3);
        long long56 = dateTimeZone47.convertLocalToUTC((long) 9, false);
        java.lang.String str57 = dateTimeZone47.toString();
        org.joda.time.DateTime dateTime58 = localTime42.toDateTimeToday(dateTimeZone47);
        boolean boolean60 = dateTimeZone47.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime61 = dateTime28.toDateTime(dateTimeZone47);
        int int62 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime61);
        java.util.TimeZone timeZone63 = dateTimeZone8.toTimeZone();
        java.lang.String str65 = dateTimeZone8.getNameKey(53460890L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(53358, 2070, 39, 0, 2070, 574, 53401, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2070 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.010" + "'", str57, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int11 = dateTimeZone9.getOffset((long) (byte) 1);
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 3);
        org.joda.time.DateTime dateTime14 = dateTime5.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = dateTime14.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar17 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTime.Property property18 = dateTime14.weekyear();
        long long19 = property18.remainder();
        org.joda.time.DateTime dateTime21 = property18.addToCopy(1970);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, dateTimeZone24);
        java.util.TimeZone timeZone28 = dateTimeZone24.toTimeZone();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale30.getCountry();
        java.lang.String str32 = dateTimeZone24.getShortName(0L, locale30);
        java.lang.String str33 = property18.getAsShortText(locale30);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale35 = java.util.Locale.getDefault(category0);
        java.util.Locale locale36 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 4234200000L + "'", long19 == 4234200000L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "CN" + "'", str31, "CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = dateTimeZone6.getShortName((long) 2922789, locale8);
        long long12 = dateTimeZone6.adjustOffset((long) (-1), false);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(22);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        int int24 = localTime18.compareTo((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime.Property property25 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime27 = property25.addCopy(6);
        org.joda.time.LocalTime localTime28 = property25.roundCeilingCopy();
        java.util.Locale locale30 = java.util.Locale.US;
        java.lang.String str31 = locale30.getDisplayName();
        org.joda.time.LocalTime localTime32 = property25.setCopy("0", locale30);
        org.joda.time.LocalTime localTime33 = property25.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        int int42 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property43 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime45 = property43.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime47 = localTime45.plusMillis(13);
        boolean boolean48 = localTime33.isBefore((org.joda.time.ReadablePartial) localTime45);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.LocalTime localTime54 = dateTime53.toLocalTime();
        org.joda.time.DateTime.Property property55 = dateTime53.minuteOfHour();
        int int56 = property55.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = property55.getFieldType();
        int int58 = localTime33.indexOf(dateTimeFieldType57);
        boolean boolean59 = dateTime15.isSupported(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime61 = localTime2.withField(dateTimeFieldType57, 53321001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53321001 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.010" + "'", str9, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str31, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.time.Instant instant1 = calendar0.toInstant();
        calendar0.set(12, (int) (byte) 0, 32772, (-100800), 365);
        calendar0.setTimeInMillis((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePartial) localTime28, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.dayOfYear();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Period period42 = interval40.toPeriod();
        int[] intArray44 = chronology19.get((org.joda.time.ReadablePeriod) period42, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField45 = chronology19.weekOfWeekyear();
        boolean boolean46 = dateTimeFieldType12.isSupported(chronology19);
        boolean boolean47 = dateTimeFieldType10.isSupported(chronology19);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        int int56 = localTime50.compareTo((org.joda.time.ReadablePartial) localTime53);
        org.joda.time.LocalTime.Property property57 = localTime50.hourOfDay();
        org.joda.time.LocalTime localTime59 = property57.addCopy(6);
        org.joda.time.LocalTime localTime60 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime61 = property57.roundCeilingCopy();
        int[] intArray63 = chronology19.get((org.joda.time.ReadablePartial) localTime61, (long) (byte) 1);
        boolean boolean64 = calendar0.before((java.lang.Object) intArray63);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.lang.String str70 = locale65.getDisplayCountry(locale69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale65);
        java.util.Date date72 = calendar71.getTime();
        int int73 = date72.getHours();
        int int74 = date72.getYear();
        calendar0.setTime(date72);
        date72.setSeconds(53550);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455239947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United States" + "'", str70, "United States");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455239947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=59,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Tue Feb 22 05:45:30 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 14 + "'", int73 == 14);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 122 + "'", int74 == 122);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime localTime23 = localTime20.minusMinutes(1);
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime25 = localTime12.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        int int32 = dateTime30.getMonthOfYear();
        int int33 = dateTime30.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        org.joda.time.DateTime dateTime42 = dateTime30.toDateTime(dateTimeZone35);
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfDay();
        org.joda.time.DateTime.Property property44 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        int int52 = dateTime50.getMonthOfYear();
        int int53 = dateTime50.getHourOfDay();
        org.joda.time.DateTime.Property property54 = dateTime50.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = dateTime50.toString(dateTimeFormatter55);
        org.joda.time.DateTime dateTime58 = dateTime50.plusMinutes(17);
        org.joda.time.DateTime dateTime60 = dateTime50.withWeekyear(5);
        org.joda.time.DateTime dateTime62 = dateTime60.minusYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone63 = dateTime62.getZone();
        java.lang.String str64 = dateTimeZone63.getID();
        org.joda.time.DateTime dateTime65 = dateTime45.withZoneRetainFields(dateTimeZone63);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((java.lang.Object) localTime25, dateTimeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval67 = new org.joda.time.Interval((java.lang.Object) localTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str56, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.minus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime23.minusDays(0);
        int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime30 = property13.withMinimumValue();
        java.lang.String str32 = localTime30.toString("59");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1645379999) + "'", int29 == (-1645379999));
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "59" + "'", str32, "59");
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.get();
        org.joda.time.Interval interval23 = property21.toInterval();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime31.plus(readablePeriod34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = localTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = dateTime28.withFields((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int44 = dateTimeZone42.getOffset((long) (byte) 1);
        long long46 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 3);
        long long49 = dateTimeZone40.convertLocalToUTC((long) 9, false);
        java.lang.String str50 = dateTimeZone40.toString();
        org.joda.time.DateTime dateTime51 = localTime35.toDateTimeToday(dateTimeZone40);
        long long52 = dateTime51.getMillis();
        boolean boolean53 = interval23.equals((java.lang.Object) long52);
        org.joda.time.MutableInterval mutableInterval54 = interval23.toMutableInterval();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        int int63 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime.Property property64 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime66 = property64.addCopy(6);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.LocalTime localTime72 = dateTime71.toLocalTime();
        org.joda.time.DateTime.Property property73 = dateTime71.minuteOfHour();
        int int74 = property73.get();
        org.joda.time.Interval interval75 = property73.toInterval();
        org.joda.time.Interval interval76 = interval75.toInterval();
        long long77 = interval75.toDurationMillis();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval75.toPeriod(periodType78);
        org.joda.time.LocalTime localTime81 = localTime66.withPeriodAdded((org.joda.time.ReadablePeriod) period79, 8);
        org.joda.time.PeriodType periodType82 = period79.getPeriodType();
        org.joda.time.Period period83 = mutableInterval54.toPeriod(periodType82);
        org.joda.time.Period period84 = interval14.toPeriod(periodType82);
        org.joda.time.MutablePeriod mutablePeriod85 = period84.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.010" + "'", str50, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645402199990L + "'", long52 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 60000L + "'", long77 == 60000L);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(mutablePeriod85);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = property6.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField17 = property6.getField();
        org.joda.time.DateTime dateTime18 = property6.withMinimumValue();
        org.joda.time.DateTime dateTime19 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        org.joda.time.DateTime dateTime33 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = dateTime24.minus((long) '#');
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        int[] intArray52 = chronology41.get((org.joda.time.ReadablePartial) localTime50, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField53 = chronology41.dayOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Period period64 = interval62.toPeriod();
        int[] intArray66 = chronology41.get((org.joda.time.ReadablePeriod) period64, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localTime70.toDateTime(readableInstant71);
        org.joda.time.Chronology chronology73 = localTime70.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.weekyears();
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.Chronology chronology81 = localTime78.getChronology();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((long) (byte) 1, chronology81);
        int[] intArray84 = chronology73.get((org.joda.time.ReadablePartial) localTime82, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField85 = chronology73.dayOfYear();
        org.joda.time.DurationField durationField86 = durationFieldType67.getField(chronology73);
        int int87 = period64.get(durationFieldType67);
        org.joda.time.DateTime dateTime88 = dateTime24.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime89 = dateTime19.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology90 = dateTime89.getChronology();
        org.joda.time.DateTime dateTime91 = dateTime89.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime89.withMonthOfYear(53554);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53554 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United States" + "'", str14, "United States");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 9, false);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours(318367);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.monthOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) dateTime19, chronology26);
        int int32 = localTime31.getSecondOfMinute();
        java.lang.String str33 = localTime31.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "00:09:59.990" + "'", str33, "00:09:59.990");
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime8 = localTime6.withMinuteOfHour((int) '#');
        org.joda.time.LocalTime localTime10 = localTime6.minusMinutes((-100800));
        org.joda.time.LocalTime.Property property11 = localTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localTime6.getFieldType(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 40");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("53321001");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = localTime7.getValue(390);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 390");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("USA");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.removeUnicodeLocaleAttribute("secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: secondOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        long long12 = dateTimeField8.getDifferenceAsLong((long) 15, (long) 11);
        boolean boolean13 = dateTimeField8.isLenient();
        java.lang.String str14 = dateTimeField8.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField8.getType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str14, "DateTimeField[hourOfHalfday]");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate13 = property8.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        org.joda.time.DateTime dateTime22 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(0);
        org.joda.time.DateTime dateTime27 = dateTime23.plusYears(10);
        org.joda.time.DateTime dateTime29 = dateTime27.plusWeeks(3940);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) (-1));
        org.joda.time.DateTime dateTime37 = dateTime34.withTimeAtStartOfDay();
        java.util.Date date38 = dateTime34.toDate();
        java.util.Locale locale39 = java.util.Locale.US;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Calendar calendar41 = dateTime34.toCalendar(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime dateTime44 = dateTime34.withField(dateTimeFieldType42, 12);
        org.joda.time.DateTime dateTime46 = dateTime29.withField(dateTimeFieldType42, 20);
        org.joda.time.LocalDate.Property property47 = localDate13.property(dateTimeFieldType42);
        org.joda.time.LocalDate localDate49 = property47.addToCopy(1200000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-44179689599900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=569,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusDays(2000);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1970, dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = localDate10.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1970, dateTimeZone14);
        int int16 = localDate15.getDayOfWeek();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate10, (org.joda.time.ReadablePartial) localDate15);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((java.lang.Object) localDate15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay18.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime4.withZone(dateTimeZone19);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime23.withYearOfCentury(25728415);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25728415 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = property5.addToCopy(26);
        org.joda.time.TimeOfDay timeOfDay10 = property5.withMinimumValue();
        java.lang.String str11 = timeOfDay10.toString();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "T00:00:00.000" + "'", str11, "T00:00:00.000");
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.withDayOfMonth(6);
        int int3 = localDate0.getWeekOfWeekyear();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = property7.setCopy(2);
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = dateTimeField12.getAsShortText((int) ' ', locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        java.util.Locale locale21 = java.util.Locale.US;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        java.lang.String str23 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate20, locale21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 1970, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31, periodType32);
        int int34 = dateMidnight30.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone35);
        org.joda.time.Interval interval38 = localDate26.toInterval(dateTimeZone35);
        org.joda.time.LocalDate.Property property39 = localDate26.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        int int41 = localDate20.compareTo((org.joda.time.ReadablePartial) localDate40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 1970, dateTimeZone43);
        int int45 = localDate44.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDate.Property property48 = localDate40.property(dateTimeFieldType46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = localDate0.withField(dateTimeFieldType46, (-180));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -180 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514155899,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=55,MILLISECOND=899,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7, periodType8);
        int int10 = dateMidnight7.getYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight12, readableDuration15, periodType16);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay3.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.Object obj19 = mutablePeriod17.clone();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay0.plusHours(30);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        java.util.Date date3 = new java.util.Date(37, 32772, 2765);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Jul 27 00:00:00 GMT 4675");
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(22089888000000L);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus(68256000000L);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 23448, dateTimeZone1);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate.Property property6 = localDate2.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = locale8.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property6.setCopy("69", locale9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"69\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(100);
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        org.joda.time.DateTime dateTime7 = dateTime3.plusYears(35);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) dateTime7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime7.withWeekOfWeekyear((-457063));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -457063 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1970, dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = localDate17.withWeekyear((-1));
        int int22 = localDate21.getWeekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean26 = localDate21.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate localDate27 = localDate7.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateMidnight dateMidnight30 = localDate21.toDateMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property31 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate32 = property31.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36, periodType37);
        int int39 = dateMidnight36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime42.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str46 = dateTimeFieldType45.getName();
        mutableDateTime44.set(dateTimeFieldType45, 5);
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType45.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDate32.get(dateTimeFieldType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfDay" + "'", str46, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType49);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        java.lang.String str4 = yearMonthDay0.toString();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.plusDays((int) '4');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay0.plusMonths(985);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        boolean boolean12 = dateTimeZone10.isFixed();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        boolean boolean14 = dateTimeZone10.isFixed();
        org.joda.time.Interval interval15 = yearMonthDay0.toInterval(dateTimeZone10);
        org.joda.time.Interval interval16 = yearMonthDay0.toInterval();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay17.year();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        org.joda.time.YearMonthDay yearMonthDay25 = property20.setCopy("1", locale22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonthDay25.getFieldTypes();
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = interval16.withEnd((org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22" + "'", str4, "2022-02-22");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fran\347ais (France)" + "'", str24, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(22089888000000L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfFloorCopy();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay5.year();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = property8.getAsText(locale9);
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        long long14 = dateTimeField11.add((long) (byte) 10, (long) '4');
        java.util.Locale locale15 = java.util.Locale.US;
        int int16 = dateTimeField11.getMaximumTextLength(locale15);
        long long18 = dateTimeField11.roundHalfEven((long) (-1));
        long long20 = dateTimeField11.roundHalfFloor((long) 6);
        long long22 = dateTimeField11.roundHalfFloor((long) 8);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonthDay23.getFieldTypes();
        int int26 = yearMonthDay23.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay28.year();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = property31.getAsText(locale32);
        org.joda.time.YearMonthDay yearMonthDay35 = property31.setCopy(2);
        org.joda.time.DateTimeField dateTimeField36 = property31.getField();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = dateTimeField36.getAsShortText((int) ' ', locale38);
        java.lang.String str40 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) yearMonthDay23, 7, locale38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight41 = property2.setCopy("22 Feb 1997 00:00:00 GMT", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22 Feb 1997 00:00:00 GMT\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1640995200010L + "'", long14 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7" + "'", str40, "7");
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        int int8 = dateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = dateTime7.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        mutablePeriod10.addSeconds(5);
        mutablePeriod10.setPeriod((long) 70);
        mutablePeriod10.addYears(570);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.yearOfCentury();
        mutablePeriod10.setPeriod((long) 25901, chronology35);
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekyearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        boolean boolean5 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        long long30 = chronology25.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DurationField durationField32 = chronology25.months();
        org.joda.time.DateTimeField dateTimeField33 = chronology25.clockhourOfHalfday();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 59, (long) 32769, chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter4.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField37 = chronology25.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addToCopy(3);
        org.joda.time.Interval interval10 = property7.toInterval();
        org.joda.time.LocalDate localDate12 = property7.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property7.setCopy((-46800000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -46800000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime5 = dateTime2.withMonthOfYear(11);
        org.joda.time.DateTime dateTime7 = dateTime5.minusSeconds(428);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod24.setMinutes(11);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTime dateTime28 = interval27.getStart();
        org.joda.time.Duration duration29 = interval27.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration29, 86390032);
        int int32 = dateTime31.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37 + "'", int32 == 37);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11, periodType12);
        mutablePeriod13.addMillis((int) '4');
        int int16 = mutablePeriod13.size();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        int int21 = dateTime19.getYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = property29.setCopy(180);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfSecond();
        boolean boolean37 = dateTime33.isBefore((long) 25728415);
        int int38 = dateTime33.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 1, (long) 'a');
        org.joda.time.Period period4 = period2.withSeconds(6);
        org.joda.time.Period period6 = period4.withMillis(25789);
        org.joda.time.Period period8 = period4.plusHours(120);
        org.joda.time.Period period10 = period8.withSeconds(741);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = period8.withPeriodType(periodType11);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight12 = localDate2.toDateMidnight(dateTimeZone11);
        org.joda.time.Interval interval13 = localDate2.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514156455,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=56,MILLISECOND=455,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfMonth();
        boolean boolean21 = calendar4.before((java.lang.Object) property20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        int int23 = calendar4.getWeeksInWeekYear();
        calendar4.set((int) (short) 10, (int) (byte) 0, 1922, 292278993, 9);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime36 = yearMonthDay35.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay35.year();
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = property38.getAsText(locale39);
        org.joda.time.DateTimeField dateTimeField41 = property38.getField();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime43 = yearMonthDay42.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime44 = yearMonthDay42.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay42.year();
        java.util.Locale locale46 = java.util.Locale.US;
        int int47 = property45.getMaximumShortTextLength(locale46);
        java.lang.String str48 = property38.getAsText(locale46);
        java.lang.String str49 = locale46.getLanguage();
        java.lang.String str50 = locale34.getDisplayVariant(locale46);
        java.lang.String str51 = locale32.getDisplayLanguage(locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = calendar4.getDisplayName(0, 723, locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=10,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1922,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=292278993,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514156471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=56,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Franz\366sisch" + "'", str51, "Franz\366sisch");
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(9, (int) (byte) 1, 10);
        org.joda.time.LocalTime localTime5 = localTime3.plusSeconds(0);
        org.joda.time.LocalTime localTime7 = localTime3.withHourOfDay(15);
        org.joda.time.LocalTime localTime9 = localTime3.withMillisOfDay(122);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime11 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonthDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTime dateTime22 = yearMonthDay10.toDateTime(timeOfDay14, dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) localTime3, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514156554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=15,SECOND=56,MILLISECOND=554,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        boolean boolean32 = dateTime30.isAfter((long) 6);
        org.joda.time.DateTime dateTime33 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime33.plus(68256000000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean37 = dateTime35.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = dateTime35.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        boolean boolean18 = dateTimeZone16.isFixed();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        mutableDateTime14.setZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime21 = localDate4.toDateTimeAtMidnight(dateTimeZone16);
        int int23 = dateTimeZone16.getStandardOffset(1970L);
        java.lang.Character[] charArray26 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet27 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet27, charArray26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone30);
        boolean boolean34 = charSet27.contains((java.lang.Object) dateTimeZone30);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) 7);
        long long38 = dateTimeZone16.getMillisKeepLocal(dateTimeZone30, (long) 1978);
        long long41 = dateTimeZone16.adjustOffset(0L, false);
        int int43 = dateTimeZone16.getStandardOffset((-441848999900L));
        long long45 = dateTimeZone16.nextTransition(100L);
        boolean boolean46 = dateTimeZone16.isFixed();
        java.lang.String str48 = dateTimeZone16.getShortName(1735689600000L);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1978L + "'", long38 == 1978L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 'u');
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean4 = dateTimeZone3.isFixed();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone3);
        int int6 = localDateTime5.getMillisOfSecond();
        int int7 = localDateTime5.getMonthOfYear();
        java.util.Date date8 = localDateTime5.toDate();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withWeekyear((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone18);
        int int21 = localDateTime20.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 0);
        int int29 = mutablePeriod26.getMillis();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, (-1));
        mutablePeriod26.clear();
        mutablePeriod26.add((int) (short) 1, 5000, 180, 55, 100, 292278994, 428, 664);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 42);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 971 + "'", int29 == 971);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plusDays((int) 'a');
        long long10 = dateMidnight9.getMillis();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) long10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay12.year();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = property15.getAsText(locale16);
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        boolean boolean19 = dateTimeField18.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField18.getType();
        int int21 = localDate11.get(dateTimeFieldType20);
        int int22 = localDate4.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDate.Property property23 = localDate4.yearOfEra();
        org.joda.time.LocalDate.Property property24 = localDate4.centuryOfEra();
        org.joda.time.LocalDate localDate25 = property24.withMinimumValue();
        org.joda.time.LocalDate localDate27 = property24.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.LocalDate.Property property28 = localDate27.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = localDate27.withEra(2024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2024 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 8380800000L + "'", long10 == 8380800000L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateMidnight8, periodType9);
        int int11 = dateMidnight8.getYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime14.copy();
        int int17 = mutableDateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 12);
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.MutableDateTime mutableDateTime23 = property18.add(32772);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) localTime47, 10L);
        org.joda.time.DurationField durationField50 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField51 = chronology42.millisOfSecond();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology42);
        mutableDateTime23.setChronology(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(1999, 192, 82850000, 25728984, (int) (short) 100, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25728984 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 28861000L + "'", long49 == 28861000L);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate13 = property8.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime3.getFieldTypes();
        int int11 = localDateTime3.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.withFieldAdded(durationFieldType12, 12);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        boolean boolean16 = localDateTime14.equals((java.lang.Object) calendar15);
        java.util.TimeZone timeZone17 = calendar15.getTimeZone();
        calendar15.set((int) (short) 100, 32770, 957, 13, 533);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight29, readableDuration30, periodType31);
        int int33 = dateMidnight29.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight29.getZone();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone34);
        long long39 = dateTimeZone34.convertLocalToUTC((long) 9, false);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 29, 1645513760572L, dateTimeZone34);
        boolean boolean41 = calendar15.after((java.lang.Object) dateTimeZone34);
        long long43 = dateTimeZone34.previousTransition(23L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=32770,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=957,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=13,MINUTE=533,SECOND=56,MILLISECOND=783,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 9L + "'", long39 == 9L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 23L + "'", long43 == 23L);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[Etc\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property3.setCopy(14);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.year();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay10.plusDays((-292273657));
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusYears(53);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        int int21 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology39);
        long long44 = chronology39.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology39);
        org.joda.time.MonthDay monthDay46 = new org.joda.time.MonthDay(chronology39);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType49);
        org.joda.time.MonthDay monthDay51 = monthDay46.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.MonthDay monthDay53 = monthDay46.minusDays(2);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57, periodType58);
        int int60 = dateMidnight57.getYear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight57.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight62, readableDuration63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight62, readableDuration65);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod69.setMinutes(11);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight62, (org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.Chronology chronology73 = dateMidnight62.getChronology();
        org.joda.time.MonthDay monthDay74 = monthDay46.withChronologyRetainFields(chronology73);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0, 2, 985, 15);
        org.joda.time.MonthDay monthDay80 = monthDay74.plus((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight(1L, dateTimeZone83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = new org.joda.time.Period(readableDuration81, (org.joda.time.ReadableInstant) dateMidnight84, periodType85);
        org.joda.time.Hours hours87 = period86.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType88 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period90 = period86.withFieldAdded(durationFieldType88, 100);
        mutablePeriod79.set(durationFieldType88, 23448);
        mutableDateTime20.add(durationFieldType88, 537);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay15.withFieldAdded(durationFieldType88, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(monthDay51);
        org.junit.Assert.assertNotNull(monthDay53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(monthDay74);
        org.junit.Assert.assertNotNull(monthDay80);
        org.junit.Assert.assertNotNull(hours87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        java.lang.String str7 = property5.toString();
        org.joda.time.TimeOfDay timeOfDay9 = property5.addToCopy(16);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[hourOfDay]" + "'", str7, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-44179689599900L));
        org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond(180);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        long long8 = dateTimeField5.getDifferenceAsLong(155155014000L, (-1123408535000L));
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMillis(100);
        org.joda.time.Period period16 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        org.joda.time.DateTime dateTime22 = dateTime19.withMonthOfYear(11);
        org.joda.time.Duration duration23 = period16.toDurationFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime12.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType32 = periodType31.withWeeksRemoved();
        java.lang.String str33 = periodType32.getName();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateMidnight28, periodType32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMillis(100);
        org.joda.time.Period period42 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = dateTime45.toLocalDateTime();
        org.joda.time.DateTime dateTime48 = dateTime45.withMonthOfYear(11);
        org.joda.time.Duration duration49 = period42.toDurationFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime38.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime38.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.yearOfCentury();
        boolean boolean54 = duration23.equals((java.lang.Object) localDateTime52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusHours(26);
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.withYearOfEra(10);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 1970, dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = null;
        boolean boolean65 = localDate63.isSupported(dateTimeFieldType64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 1970, dateTimeZone67);
        int int69 = localDate68.getDayOfWeek();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate63, (org.joda.time.ReadablePartial) localDate68);
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((java.lang.Object) localDate68);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone73 = dateTimeZone72.toTimeZone();
        org.joda.time.DateMidnight dateMidnight74 = yearMonthDay71.toDateMidnight(dateTimeZone72);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        int int78 = dateTimeZone76.getStandardOffset((long) 5);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone81 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean82 = timeZone79.hasSameRules(timeZone81);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone81);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        java.util.TimeZone timeZone85 = dateTimeZone84.toTimeZone();
        long long87 = dateTimeZone76.getMillisKeepLocal(dateTimeZone84, (long) 100);
        org.joda.time.Interval interval88 = yearMonthDay71.toInterval(dateTimeZone76);
        int[] intArray89 = yearMonthDay71.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField5.addWrapField((org.joda.time.ReadablePartial) localDateTime59, 2765, intArray89, 25755533);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2765");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 355156L + "'", long8 == 355156L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "YearWeekDayNoWeeks" + "'", str33, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone81);
// flaky:         org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1645514160767,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=0,MILLISECOND=767,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 100L + "'", long87 == 100L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1970, 1, 1]");
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(180);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime11.withYearOfCentury(53);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.withChronology(chronology16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod33.setMinutes(11);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTime dateTime37 = interval36.getStart();
        org.joda.time.Period period46 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period48 = period46.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plusDays((int) 'a');
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period46, (org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Interval interval55 = interval36.withPeriodAfterStart((org.joda.time.ReadablePeriod) period46);
        java.lang.Character[] charArray58 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet59 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet59, charArray58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(100L, dateTimeZone62);
        boolean boolean64 = dateTimeZone62.isFixed();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(dateTimeZone62);
        boolean boolean66 = charSet59.contains((java.lang.Object) dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plus((long) 19);
        org.joda.time.Period period71 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(100L, dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = dateTime74.toLocalDateTime();
        org.joda.time.DateTime dateTime77 = dateTime74.withMonthOfYear(11);
        org.joda.time.Duration duration78 = period71.toDurationFrom((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight67.withDurationAdded((org.joda.time.ReadableDuration) duration78, 59);
        org.joda.time.Duration duration81 = duration78.toDuration();
        org.joda.time.Interval interval82 = interval36.withDurationAfterStart((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(100L, dateTimeZone84);
        org.joda.time.LocalDateTime localDateTime86 = dateTime85.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.minusMonths(3);
        int int89 = localDateTime86.size();
        org.joda.time.DateTime dateTime90 = localDateTime86.toDateTime();
        org.joda.time.DateTime.Property property91 = dateTime90.hourOfDay();
        boolean boolean92 = duration81.equals((java.lang.Object) property91);
        org.joda.time.DateTime dateTime93 = dateTime15.minus((org.joda.time.ReadableDuration) duration81);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight3.plusDays(61);
        int int11 = dateMidnight3.getWeekOfWeekyear();
        org.joda.time.DateMidnight.Property property12 = dateMidnight3.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod17.addHours(0);
        mutablePeriod17.addMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        int int41 = dateMidnight38.getYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = mutableDateTime44.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTime();
        mutablePeriod17.setPeriod((org.joda.time.ReadableInstant) mutableDateTime31, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property51 = dateTime47.property(dateTimeFieldType50);
        boolean boolean52 = dateMidnight3.isSupported(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone12);
        int int15 = localDateTime14.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        boolean boolean18 = period10.equals((java.lang.Object) property16);
        org.joda.time.LocalDateTime localDateTime19 = property16.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfMonth(3);
        int int23 = localDateTime22.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = localDateTime22.toString("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(32770);
        java.lang.Object obj8 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13, periodType14);
        int int16 = dateMidnight12.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight12.getZone();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(obj8, dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter5.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter21.getZone();
        boolean boolean23 = dateTimeFormatter21.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter21.withPivotYear(570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter21.withDefaultYear((int) 'x');
        boolean boolean28 = dateTimeFormatter27.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant30 = org.joda.time.Instant.parse("", dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        java.time.Instant instant5 = calendar4.toInstant();
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        calendar4.roll((int) (byte) 10, (int) '4');
        calendar4.clear();
        int int12 = calendar4.getMinimum(0);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        calendar4.setTimeZone(timeZone15);
        int int18 = timeZone15.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addToCopy(3);
        org.joda.time.Interval interval10 = property7.toInterval();
        org.joda.time.LocalDate localDate12 = property7.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate13 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property7.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("PT32H-1M78.055S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT32H-1M78.055S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.LocalTime.Property property7 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property7.addNoWrapToCopy(55);
        org.joda.time.LocalTime localTime11 = property7.setCopy(32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.withYear(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate2.withDayOfMonth(25918579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25918579 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfEvenCopy();
        int int13 = localDate12.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime23.copy();
        mutableDateTime23.addMonths((int) (byte) 100);
        mutableDateTime23.setWeekyear(1);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime23.copy();
        int int31 = mutableDateTime30.getYearOfEra();
        boolean boolean32 = localDate12.equals((java.lang.Object) mutableDateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1970, dateTimeZone34);
        int int36 = localDate35.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, dateTimeZone39);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(dateTimeZone39);
        int int43 = dateTimeZone39.getOffsetFromLocal((long) 570);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) "2022", dateTimeZone39);
        int int46 = dateTimeZone39.getOffset(1L);
        org.joda.time.DateTime dateTime47 = localDate35.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateTime dateTime48 = localDate12.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime48.getZone();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3940 + "'", int13 == 3940);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        java.util.Date date3 = new java.util.Date(70, 59, 1200000);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed May 26 00:00:00 GMT 5260");
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime5 = dateTime2.toLocalTime();
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property6.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localTime9.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645574390000L, (-5270399989L));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology16);
        long long18 = interval17.getEndMillis();
        java.lang.String str19 = interval17.toString();
        org.joda.time.MutableInterval mutableInterval20 = interval17.toMutableInterval();
        org.joda.time.Period period21 = interval17.toPeriod();
        org.joda.time.Period period23 = period21.minusWeeks((-15994));
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period26 = period21.plusSeconds(4);
        org.joda.time.LocalTime localTime28 = localTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 103);
        org.joda.time.Period period39 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period41 = period39.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.plusDays((int) 'a');
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period39, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now(chronology48);
        long long53 = chronology48.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology48);
        org.joda.time.DurationField durationField55 = chronology48.months();
        org.joda.time.DateTimeField dateTimeField56 = chronology48.clockhourOfHalfday();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 59, (long) 32769, chronology48);
        org.joda.time.Period period59 = period57.plusDays(17);
        org.joda.time.LocalTime localTime61 = localTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 211);
        org.joda.time.Period period63 = period57.minusYears((-46800000));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str19, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DurationField durationField25 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.millisOfSecond();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(0L, chronology18);
        org.joda.time.MonthDay.Property property28 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay monthDay31 = property29.addToCopy(6);
        org.joda.time.MonthDay monthDay33 = property29.addWrapFieldToCopy(113);
        org.joda.time.MonthDay monthDay34 = property29.getMonthDay();
        org.joda.time.MonthDay monthDay36 = monthDay34.plusMonths(9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertNotNull(monthDay33);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(monthDay36);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        java.util.Date date5 = new java.util.Date((int) (short) 0, 32772, (int) (byte) 1, (int) '#', 2);
        java.lang.String str6 = date5.toLocaleString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Jan 02 11:02:00 GMT 4631");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2 janv. 4631 11:02:00" + "'", str6, "2 janv. 4631 11:02:00");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.centuryOfEra();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology17);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.Period period1 = new org.joda.time.Period(0L);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean10 = charSet3.contains((java.lang.Object) dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((long) 19);
        org.joda.time.Period period15 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear(11);
        org.joda.time.Duration duration22 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight11.withDurationAdded((org.joda.time.ReadableDuration) duration22, 59);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis(100);
        org.joda.time.Period period32 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = dateTime35.toLocalDateTime();
        org.joda.time.DateTime dateTime38 = dateTime35.withMonthOfYear(11);
        org.joda.time.Duration duration39 = period32.toDurationFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime28.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44, periodType45);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        java.lang.String str49 = periodType48.getName();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateMidnight44, periodType48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean53 = dateTimeZone52.isFixed();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMillis(100);
        org.joda.time.Period period58 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(100L, dateTimeZone60);
        org.joda.time.LocalDateTime localDateTime62 = dateTime61.toLocalDateTime();
        org.joda.time.DateTime dateTime64 = dateTime61.withMonthOfYear(11);
        org.joda.time.Duration duration65 = period58.toDurationFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime54.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime54.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.yearOfCentury();
        boolean boolean70 = duration39.equals((java.lang.Object) localDateTime68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plusHours(26);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int74 = localDateTime68.indexOf(dateTimeFieldType73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime68.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean77 = localDateTime68.isSupported(dateTimeFieldType76);
        org.joda.time.DateMidnight.Property property78 = dateMidnight24.property(dateTimeFieldType76);
        int int79 = dateMidnight24.getYearOfCentury();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "YearWeekDayNoWeeks" + "'", str49, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.Interval interval4 = interval3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 1970, dateTimeZone11);
        int int13 = localDate12.getDayOfWeek();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((java.lang.Object) localDate12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay15.toDateMidnight(dateTimeZone16);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        int int22 = dateTimeZone20.getStandardOffset((long) 5);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        long long31 = dateTimeZone20.getMillisKeepLocal(dateTimeZone28, (long) 100);
        org.joda.time.Interval interval32 = yearMonthDay15.toInterval(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 1970, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40, periodType41);
        int int43 = dateMidnight39.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight39.getZone();
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone44);
        org.joda.time.Interval interval47 = localDate35.toInterval(dateTimeZone44);
        org.joda.time.Interval interval49 = interval47.withEndMillis(4518499391L);
        boolean boolean50 = interval32.contains((org.joda.time.ReadableInterval) interval47);
        long long51 = interval32.toDurationMillis();
        boolean boolean52 = interval3.isBefore((org.joda.time.ReadableInterval) interval32);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514161318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=1,MILLISECOND=318,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L + "'", long31 == 100L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86400000L + "'", long51 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DurationField durationField25 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.millisOfSecond();
        org.joda.time.MonthDay monthDay27 = new org.joda.time.MonthDay(0L, chronology18);
        org.joda.time.MonthDay.Property property28 = monthDay27.dayOfMonth();
        org.joda.time.MonthDay.Property property29 = monthDay27.dayOfMonth();
        java.lang.String str30 = property29.getName();
        java.lang.String str31 = property29.getAsText();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "dayOfMonth" + "'", str30, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withField(dateTimeFieldType6, (int) (short) 10);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        int int13 = dateTimeZone11.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime14 = localDateTime3.toDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime3.plusHours(25720043);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean20 = dateTimeZone19.isFixed();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone19);
        int int22 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMaximumValue();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withField(dateTimeFieldType27, 7);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minuteOfDay" + "'", str7, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 49 + "'", int17 == 49);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(8380800000L, chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property3.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        java.time.Instant instant0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = java.util.Date.from(instant0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(26);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.hourOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay9.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay12 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod6.setMinutes(11);
        java.lang.String str9 = mutablePeriod6.toString();
        mutablePeriod6.setPeriod(569, 0, (int) (short) 1, (int) (short) 100, 31, (int) ' ', (int) (byte) -1, 985);
        org.joda.time.Period period29 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period31 = period29.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusDays((int) 'a');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology38);
        long long43 = chronology38.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology38);
        org.joda.time.DurationField durationField46 = chronology38.minutes();
        org.joda.time.DurationField durationField47 = chronology38.millis();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 26, chronology38);
        org.joda.time.DateTimeField dateTimeField49 = chronology38.secondOfMinute();
        mutablePeriod6.add((long) 'a', chronology38);
        org.joda.time.DurationField durationField51 = chronology38.millis();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) 60679957, chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(410, 17, 60679957, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT11M0.101S" + "'", str9, "PT11M0.101S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        boolean boolean36 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = property37.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight40 = property37.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight41 = property37.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology44);
        long long46 = interval45.getEndMillis();
        java.lang.String str47 = interval45.toString();
        org.joda.time.MutableInterval mutableInterval48 = interval45.toMutableInterval();
        org.joda.time.Period period49 = interval45.toPeriod();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.Period period52 = interval45.toPeriod(periodType50);
        org.joda.time.Duration duration53 = interval45.toDuration();
        java.lang.Object obj54 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59, periodType60);
        int int62 = dateMidnight58.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight58.getZone();
        org.joda.time.DateMidnight dateMidnight64 = org.joda.time.DateMidnight.now(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(obj54, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableDuration67, (org.joda.time.ReadableInstant) dateMidnight70, periodType71);
        int int73 = dateMidnight70.getYear();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight70.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight75, readableDuration78, periodType79);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime66, periodType79);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight41, periodType79);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight(1L, dateTimeZone85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period(readableDuration83, (org.joda.time.ReadableInstant) dateMidnight86, periodType87);
        org.joda.time.Hours hours89 = period88.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period92 = period88.withFieldAdded(durationFieldType90, 100);
        mutablePeriod82.mergePeriod((org.joda.time.ReadablePeriod) period92);
        org.joda.time.Interval interval94 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) period92);
        boolean boolean95 = interval94.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str47, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(hours89);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        org.joda.time.DateMidnight dateMidnight30 = property29.roundFloorCopy();
        boolean boolean31 = localDate7.equals((java.lang.Object) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight30.toMutableDateTime();
        int int35 = dateMidnight30.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight30.withDurationAdded(readableDuration36, 86390032);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.withCenturyOfEra(20);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight30.minusMonths((-457063));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 70 + "'", int35 == 70);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        int int30 = dateMidnight27.getYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration35, periodType36);
        mutablePeriod37.addMillis((int) '4');
        int int40 = mutablePeriod37.size();
        int[] intArray42 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod37, (-44179689599900L));
        org.joda.time.DurationField durationField43 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField44 = chronology17.minuteOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, -511338, -23, -59, -59, -900]");
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long10 = dateTimeField7.add((long) 0, 10L);
        long long12 = dateTimeField7.remainder((long) (short) -1);
        long long14 = dateTimeField7.roundHalfEven((long) (-78888));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-78888L) + "'", long14 == (-78888L));
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.days();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateMidnight8, periodType9);
        int int11 = dateMidnight8.getYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.Period period27 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period29 = period27.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plusDays((int) 'a');
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period27, (org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.now(chronology36);
        long long41 = chronology36.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology36);
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology36);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime17, chronology36);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 1, chronology36);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.Period period47 = new org.joda.time.Period((-44179689599900L), periodType3, chronology36);
        org.joda.time.PeriodType periodType48 = periodType3.withWeeksRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withMonthsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((long) (-54), (-1645513760380L), periodType48);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.addToCopy((int) '#');
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime30 = dateTime28.plus((long) (-1));
        org.joda.time.DateTime dateTime31 = dateTime28.withTimeAtStartOfDay();
        java.util.Date date32 = dateTime28.toDate();
        org.joda.time.YearMonthDay yearMonthDay33 = org.joda.time.YearMonthDay.fromDateFields(date32);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date32);
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) '4');
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay23, (org.joda.time.ReadablePartial) localDate34);
        int int38 = period37.getYears();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1402) + "'", int38 == (-1402));
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = property17.setCopy(180);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths(4);
        org.joda.time.DateTime dateTime25 = dateTime21.withYearOfCentury(53);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime dateTime28 = dateTime25.plusDays(2765);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.DateTime dateTime37 = dateTime31.withField(dateTimeFieldType34, (int) 'u');
        int int38 = dateTime28.get(dateTimeFieldType34);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.plusHours((int) (short) 0);
        int int43 = timeOfDay42.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property44 = timeOfDay42.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay45 = property44.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property46 = timeOfDay45.hourOfDay();
        java.lang.String str47 = property46.getName();
        org.joda.time.TimeOfDay timeOfDay48 = property46.withMaximumValue();
        org.joda.time.Period period57 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period59 = period57.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusDays((int) 'a');
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period57, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.DateMidnight dateMidnight67 = org.joda.time.DateMidnight.now(chronology66);
        long long71 = chronology66.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(chronology66);
        org.joda.time.DateMidnight dateMidnight73 = org.joda.time.DateMidnight.now(chronology66);
        org.joda.time.DateTimeField dateTimeField74 = chronology66.clockhourOfHalfday();
        java.lang.String str75 = chronology66.toString();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay48, chronology66);
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType34.getField(chronology66);
        boolean boolean78 = localTime7.isSupported(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minuteOfDay" + "'", str35, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 180 + "'", int38 == 180);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hourOfDay" + "'", str47, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTimeField74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[UTC]" + "'", str75, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = dateMidnight18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime24.copy();
        mutableDateTime24.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.dayOfMonth();
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1970, dateTimeZone32);
        int int34 = localDate33.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight43 = localDate33.toDateMidnight(dateTimeZone42);
        mutableDateTime24.setZoneRetainFields(dateTimeZone42);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime24.era();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.addWrapField((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.secondOfDay();
        java.lang.Object obj49 = mutableDateTime47.clone();
        mutableDateTime47.addWeekyears(1);
        org.joda.time.Period period62 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period64 = period62.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plusDays((int) 'a');
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period62, (org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.DateMidnight dateMidnight72 = org.joda.time.DateMidnight.now(chronology71);
        long long76 = chronology71.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.dayOfWeek();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 14, chronology71);
        org.joda.time.Chronology chronology79 = chronology71.withUTC();
        org.joda.time.Period period80 = new org.joda.time.Period((-61851599998030L), chronology71);
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DurationField durationField82 = chronology71.centuries();
        mutableDateTime47.setChronology(chronology71);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514161889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=1,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "-1978-05-10T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "-1978-05-10T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "-1978-05-10T00:00:00.000Z");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 100, (int) '#', 0, 0, 1970, (int) '#', (int) (byte) 100, periodType8);
        org.joda.time.Period period11 = period9.withMillis(8);
        org.joda.time.Period period13 = period11.minusWeeks((int) 'x');
        int int14 = period11.getSeconds();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        int int16 = period11.get(durationFieldType15);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (byte) 0);
        org.joda.time.Period period25 = period23.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod26 = period23.toMutablePeriod();
        mutablePeriod26.setPeriod((long) 100);
        mutablePeriod26.setMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.plusHours((int) (short) 0);
        int int37 = timeOfDay36.getHourOfDay();
        org.joda.time.TimeOfDay.Property property38 = timeOfDay36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.TimeOfDay timeOfDay40 = property38.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay42 = property38.addToCopy(26);
        org.joda.time.Period period51 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period53 = period51.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(1L, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plusDays((int) 'a');
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period51, (org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.DateMidnight dateMidnight61 = org.joda.time.DateMidnight.now(chronology60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight64, readableDuration65, periodType66);
        org.joda.time.Chronology chronology69 = null;
        mutablePeriod67.setPeriod(1L, chronology69);
        long long73 = chronology60.add((org.joda.time.ReadablePeriod) mutablePeriod67, (long) (short) 0, 32769);
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay42.withChronologyRetainFields(chronology60);
        mutablePeriod26.setPeriod((long) 53, 28861000L, chronology60);
        org.joda.time.DurationField durationField76 = chronology60.hours();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((-44179603259900L), (-30486691386000L), chronology60);
        org.joda.time.Period period78 = new org.joda.time.Period(1970L, chronology60);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromMillisOfDay((long) 16, chronology60);
        org.joda.time.DurationField durationField80 = chronology60.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval81 = new org.joda.time.Interval((java.lang.Object) durationFieldType15, chronology60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 32769L + "'", long73 == 32769L);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        int int6 = dateMidnight2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone7);
        java.lang.String str10 = dateTimeZone7.getName((-1L));
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        java.lang.String str20 = property19.getAsString();
        org.joda.time.DateTime dateTime21 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property19.setCopy(180);
        org.joda.time.DateTime dateTime25 = property19.addWrapFieldToCopy(2022);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29, periodType30);
        int int32 = dateMidnight29.getYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        mutablePeriod36.addSeconds(5);
        mutablePeriod36.setPeriod((long) 70);
        org.joda.time.DateTime dateTime42 = dateTime25.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod36, 22);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(1L, dateTimeZone46);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration44, (org.joda.time.ReadableInstant) dateMidnight47, periodType48);
        org.joda.time.Hours hours50 = period49.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period53 = period49.withFieldAdded(durationFieldType51, 100);
        org.joda.time.Period period62 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period64 = period62.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.plusDays((int) 'a');
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period62, (org.joda.time.ReadableInstant) dateMidnight69);
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now(chronology71);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(chronology71);
        org.joda.time.DurationField durationField74 = durationFieldType51.getField(chronology71);
        org.joda.time.DurationField durationField75 = chronology71.centuries();
        mutablePeriod36.setPeriod((-1L), chronology71);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((java.lang.Object) monthDay11, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period16 = period14.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) 'a');
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period33 = period31.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusDays((int) 'a');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyear();
        org.joda.time.Interval interval43 = interval22.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter3.withChronology(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.parse("", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.MonthDay monthDay4 = property1.addToCopy(985);
        org.joda.time.MonthDay monthDay6 = property1.addToCopy(765);
        org.joda.time.MonthDay monthDay7 = property1.getMonthDay();
        org.joda.time.MonthDay monthDay9 = monthDay7.minusMonths(1380);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(monthDay9);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(32770);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        int int15 = dateMidnight11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj7, dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter20.getZone();
        boolean boolean22 = dateTimeFormatter20.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withPivotYear(570);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter20.withPivotYear((java.lang.Integer) (-90));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = dateTimeFormatter28.parseLocalDate("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        int int19 = localDateTime18.getMinuteOfHour();
        int int20 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusDays(260);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(10368032769L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.Period period12 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period14 = period12.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusDays((int) 'a');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(chronology21);
        long long26 = chronology21.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.DurationField durationField29 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.centuryOfEra();
        boolean boolean32 = dateTimeField30.isLeap((-44179689599900L));
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime35 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay34.year();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = property37.getAsText(locale38);
        org.joda.time.DateTimeField dateTimeField40 = property37.getField();
        long long43 = dateTimeField40.add((long) (byte) 10, (long) '4');
        java.util.Locale locale44 = java.util.Locale.US;
        int int45 = dateTimeField40.getMaximumTextLength(locale44);
        long long47 = dateTimeField40.roundHalfEven((long) (-1));
        long long49 = dateTimeField40.roundHalfFloor((long) 6);
        long long51 = dateTimeField40.roundHalfFloor((long) 8);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime53 = yearMonthDay52.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray54 = yearMonthDay52.getFieldTypes();
        int int55 = yearMonthDay52.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime58 = yearMonthDay57.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime59 = yearMonthDay57.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay57.year();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = property60.getAsText(locale61);
        org.joda.time.YearMonthDay yearMonthDay64 = property60.setCopy(2);
        org.joda.time.DateTimeField dateTimeField65 = property60.getField();
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.lang.String str68 = dateTimeField65.getAsShortText((int) ' ', locale67);
        java.lang.String str69 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) yearMonthDay52, 7, locale67);
        java.util.Locale locale70 = locale67.stripExtensions();
        java.lang.String str71 = dateTimeField30.getAsText((long) 59, locale70);
        java.util.Locale locale72 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet73 = locale72.getExtensionKeys();
        java.lang.String str74 = locale70.getDisplayCountry(locale72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = localTime1.toString("1970-01-01T00:01:00.100", locale72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022" + "'", str39, "2022");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1640995200010L + "'", long43 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022" + "'", str62, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "32" + "'", str68, "32");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "7" + "'", str69, "7");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "19" + "'", str71, "19");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology11);
        long long13 = interval12.getEndMillis();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = interval12.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1970, dateTimeZone17);
        int int19 = localDate18.getDayOfWeek();
        org.joda.time.LocalDate localDate21 = localDate18.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval22 = localDate18.toInterval();
        boolean boolean23 = interval12.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Interval interval24 = interval12.toInterval();
        org.joda.time.Chronology chronology25 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DurationField durationField27 = dateTimeField26.getLeapDurationField();
        java.util.Locale locale29 = new java.util.Locale("ap. J.-C.");
        int int30 = dateTimeField26.getMaximumTextLength(locale29);
        java.util.Calendar calendar31 = dateMidnight8.toCalendar(locale29);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str14, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNull(durationField27);
        org.junit.Assert.assertEquals(locale29.toString(), "ap. j.-c.");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(366, (int) '#', 30, 8, (int) 'u', (int) 'x', 1200000, 6, periodType8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Period period10 = interval3.toPeriod(periodType8);
        org.joda.time.Duration duration11 = interval3.toDuration();
        java.lang.Object obj12 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        int int20 = dateMidnight16.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight16.getZone();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj12, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        int int31 = dateMidnight28.getYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, readableDuration36, periodType37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime24, periodType37);
        org.joda.time.PeriodType periodType40 = periodType37.withHoursRemoved();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str5, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType40);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long10 = dateTimeField7.add((long) 0, 10L);
        boolean boolean11 = dateTimeField7.isSupported();
        int int13 = dateTimeField7.getMinimumValue(2629746000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        int int15 = mutableDateTime9.getRoundingMode();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime25.copy();
        mutableDateTime25.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime33 = localTime31.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.millis();
        boolean boolean35 = localTime31.isSupported(durationFieldType34);
        mutableDateTime25.add(durationFieldType34, (-1));
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41, periodType42);
        int int44 = dateMidnight41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str51 = dateTimeFieldType50.getName();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.property(dateTimeFieldType50);
        mutableDateTime25.set(dateTimeFieldType50, 9);
        mutableDateTime9.set(dateTimeFieldType50, 55);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType50.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "minuteOfDay" + "'", str51, "minuteOfDay");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType57);
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay2 = new org.joda.time.MonthDay(27, 38090);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, (-30486691386000L));
        mutablePeriod2.addMillis((-51));
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        int int8 = charSet3.size();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours((int) (short) 0);
        int int13 = timeOfDay12.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay12.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = property14.getTimeOfDay();
        boolean boolean16 = charSet3.contains((java.lang.Object) property14);
        boolean boolean17 = charSet3.isEmpty();
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.util.Set<java.lang.Character> charSet21 = locale18.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        boolean boolean25 = charSet21.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23);
        boolean boolean26 = charSet21.isEmpty();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36);
        mutablePeriod37.addSeconds(5);
        mutablePeriod37.setPeriod((long) 70);
        mutablePeriod37.addSeconds(0);
        org.joda.time.base.BasePeriod[] basePeriodArray44 = new org.joda.time.base.BasePeriod[] { mutablePeriod37 };
        org.joda.time.base.BasePeriod[] basePeriodArray45 = charSet21.toArray(basePeriodArray44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "fran\347ais (France)" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList51);
        boolean boolean54 = charSet21.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47);
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.lang.String[] strArray59 = new java.lang.String[] { "fran\347ais (France)" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strList60);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream63 = languageRangeList56.stream();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.util.Set<java.lang.Character> charSet69 = locale66.getExtensionKeys();
        java.util.Locale.FilteringMode filteringMode70 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean71 = charSet69.remove((java.lang.Object) filteringMode70);
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet65, filteringMode70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean78 = charSet76.remove((java.lang.Object) filteringMode77);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strSet65, filteringMode77);
        boolean boolean80 = charSet3.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strMap81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fran\347ais (France)" + "'", str20, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(basePeriodArray44);
        org.junit.Assert.assertNotNull(basePeriodArray45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeStream63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "fran\347ais (France)" + "'", str68, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertTrue("'" + filteringMode70 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode70.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fran\347ais (France)" + "'", str75, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(languageRangeList82);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval3.withDurationBeforeEnd(readableDuration4);
        long long6 = interval3.toDurationMillis();
        boolean boolean8 = interval3.isAfter(1645513699391L);
        long long9 = interval3.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) (-1));
        org.joda.time.DateTime dateTime17 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded(readableDuration18, 1970);
        boolean boolean21 = interval3.contains((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property22 = dateTime14.minuteOfDay();
        org.joda.time.DateTime dateTime23 = dateTime14.toDateTime();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 11L + "'", long6 == 11L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 11L + "'", long9 == 11L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18, periodType19);
        int int21 = dateMidnight17.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight17.getZone();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight14.withZoneRetainFields(dateTimeZone22);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        java.util.TimeZone timeZone26 = dateTimeZone22.toTimeZone();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1366416086400122L);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod2.add(3940, (int) (short) 100, 366, (int) (byte) 1, 2922789, (int) (short) 100, 180, 200);
        int int12 = mutablePeriod2.getYears();
        mutablePeriod2.setWeeks(50);
        int int15 = mutablePeriod2.getYears();
        mutablePeriod2.setWeeks((int) ' ');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27);
        mutablePeriod28.addSeconds(5);
        mutablePeriod28.setPeriod((long) 70);
        org.joda.time.format.PeriodFormatter periodFormatter33 = null;
        java.lang.String str34 = mutablePeriod28.toString(periodFormatter33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = interval38.withDurationBeforeEnd(readableDuration39);
        mutablePeriod28.add((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Interval interval43 = interval38.withEndMillis(32769L);
        long long44 = interval43.toDurationMillis();
        long long45 = interval43.getEndMillis();
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval43);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3940 + "'", int12 == 3940);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3940 + "'", int15 == 3940);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.070S" + "'", str34, "PT0.070S");
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32770L + "'", long44 == 32770L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32769L + "'", long45 == 32769L);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis(100);
        org.joda.time.DateTime dateTime12 = dateTime10.withEra(0);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = dateTimeZone14.isFixed();
        org.joda.time.DateTime dateTime16 = dateTime12.withZoneRetainFields(dateTimeZone14);
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone14.getShortName((long) 6, locale18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(999, 25728415, (int) (short) 100, 36000000, 82, 625, 26052, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        org.joda.time.DurationField durationField23 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.year();
        org.joda.time.DurationField durationField26 = chronology17.days();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        boolean boolean13 = dateTimeZone11.isFixed();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime9.setZoneRetainFields(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime9);
        mutableDateTime9.addMillis(292278994);
        java.lang.String str20 = mutableDateTime9.toString("+100:00");
        mutableDateTime9.addYears(537);
        mutableDateTime9.setMillisOfDay(2053);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        int int17 = property16.get();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        int int6 = property3.get();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.setCopy(70);
        org.joda.time.YearMonthDay yearMonthDay10 = property3.addToCopy(1919);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6, periodType7);
        int int9 = dateMidnight6.getYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration12, (org.joda.time.ReadableInstant) dateMidnight15, periodType16);
        int int18 = dateMidnight15.getYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withDayOfMonth((int) (byte) 10);
        boolean boolean21 = dateMidnight6.isBefore((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight20.monthOfYear();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        int int24 = property22.getMaximumShortTextLength(locale23);
        org.joda.time.DurationField durationField25 = property22.getDurationField();
        org.joda.time.DateMidnight dateMidnight26 = property22.withMinimumValue();
        int int27 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0);
        int int30 = localTime29.getMinuteOfHour();
        int int31 = localTime29.getHourOfDay();
        org.joda.time.LocalTime localTime33 = localTime29.withMinuteOfHour(19);
        org.joda.time.Period period42 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period44 = period42.minusMillis(0);
        org.joda.time.Period period46 = period42.minusMonths(9);
        java.lang.String str47 = period42.toString();
        org.joda.time.LocalTime localTime48 = localTime33.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight26.withFields((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMillis(984005542548937098L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight53 = dateMidnight49.withCenturyOfEra(25990590);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25990590 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1200000 + "'", int27 == 1200000);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "P-1Y10M100DT-1H-1M99.999S" + "'", str47, "P-1Y10M100DT-1H-1M99.999S");
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7, periodType8);
        int int10 = dateMidnight6.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone11);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone11);
        java.lang.String str15 = interval14.toString();
        org.joda.time.Interval interval16 = interval14.toInterval();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 1970, dateTimeZone18);
        int int20 = localDate19.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateMidnight dateMidnight29 = localDate19.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 1970, dateTimeZone31);
        int int33 = localDate32.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean35 = localDate32.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDate localDate37 = localDate32.plusYears(1970);
        org.joda.time.LocalDate.Property property38 = localDate37.yearOfEra();
        java.lang.String str39 = property38.getAsShortText();
        org.joda.time.LocalDate localDate40 = property38.roundFloorCopy();
        org.joda.time.LocalDate localDate41 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate42 = localDate19.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46, periodType47);
        int int49 = dateMidnight46.getYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55, periodType56);
        int int58 = dateMidnight55.getYear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight55.withDayOfMonth((int) (byte) 10);
        boolean boolean61 = dateMidnight46.isBefore((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight60.monthOfYear();
        org.joda.time.DateMidnight dateMidnight63 = property62.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight65 = property62.setCopy((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69, periodType70);
        int int72 = dateMidnight69.getYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight69.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight74.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime75.copy();
        mutableDateTime75.setMillis((long) (byte) 10);
        int int80 = mutableDateTime75.getYearOfEra();
        mutableDateTime75.setWeekyear(11);
        mutableDateTime75.addYears(5);
        mutableDateTime75.add((long) 10);
        int int87 = property62.getDifference((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime75.hourOfDay();
        org.joda.time.DateTime dateTime89 = localDate42.toDateTime((org.joda.time.ReadableInstant) mutableDateTime75);
        boolean boolean90 = interval16.contains((org.joda.time.ReadableInstant) dateTime89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime((java.lang.Object) interval16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str15, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645514162681,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=2,MILLISECOND=681,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3940" + "'", str39, "3940");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 23448 + "'", int87 == 23448);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean10 = charSet3.contains((java.lang.Object) dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((long) 19);
        org.joda.time.Period period15 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear(11);
        org.joda.time.Duration duration22 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight11.withDurationAdded((org.joda.time.ReadableDuration) duration22, 59);
        org.joda.time.Duration duration25 = duration22.toDuration();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 1970);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = dateTime34.toDateMidnight();
        org.joda.time.Period period37 = org.joda.time.Period.hours(20);
        org.joda.time.PeriodType periodType38 = period37.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateTime34, periodType38);
        int int40 = mutablePeriod39.getYears();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration41, (org.joda.time.ReadableInstant) dateMidnight44, periodType45);
        int int47 = dateMidnight44.getYear();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight44.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight49, readableDuration50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight49, readableDuration52, periodType53);
        int int55 = mutablePeriod54.getYears();
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod54.toMutablePeriod();
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        mutablePeriod56.setPeriod(68256000000L);
        int int60 = mutablePeriod56.getMonths();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645514162717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=2,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 570, chronology18);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = dateMidnight26.toCalendar(locale27);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42, periodType43);
        int int45 = dateMidnight42.getYear();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight42.withDayOfMonth((int) (byte) 10);
        boolean boolean48 = dateMidnight33.isBefore((org.joda.time.ReadableInstant) dateMidnight47);
        int int49 = dateMidnight33.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight33.withDurationAdded(readableDuration50, (int) '#');
        boolean boolean53 = calendar28.before((java.lang.Object) dateMidnight33);
        org.joda.time.DateMidnight.Property property54 = dateMidnight33.year();
        org.joda.time.DateMidnight dateMidnight55 = property54.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.minus(10368032769L);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withEra(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.FilteringMode filteringMode4 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        boolean boolean5 = charSet3.remove((java.lang.Object) filteringMode4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withField(dateTimeFieldType12, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.plusSeconds(25728415);
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.dayOfWeek();
        boolean boolean21 = charSet3.remove((java.lang.Object) localDateTime9);
        java.lang.Character[] charArray28 = new java.lang.Character[] { 'x', ' ', 'x', ' ', '4', 'x' };
        java.util.LinkedHashSet<java.lang.Character> charSet29 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet29, charArray28);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.util.Set<java.lang.Character> charSet34 = locale31.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        boolean boolean38 = charSet34.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36);
        boolean boolean39 = charSet34.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator40 = charSet34.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList42, strMap43);
        boolean boolean45 = charSet34.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44);
        boolean boolean46 = charSet29.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44);
        java.lang.Object[] objArray47 = charSet29.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.parse("year", strMap49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList50, strMap51);
        boolean boolean53 = charSet29.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52);
        boolean boolean54 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + filteringMode4 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode4.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfDay" + "'", str13, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fran\347ais (France)" + "'", str33, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(charSpliterator40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[x,  , 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[x,  , 4]");
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(29376000000L);
        org.joda.time.Instant instant3 = instant1.withMillis(1296000000L);
        org.junit.Assert.assertNotNull(instant3);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        boolean boolean18 = localDate6.equals((java.lang.Object) readableDuration16);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        int int24 = dateMidnight21.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = localDate6.toDateTime((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.LocalDate localDate27 = localDate6.withYearOfCentury(30);
        java.util.Date date28 = localDate27.toDate();
        org.joda.time.LocalDate.Property property29 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = property29.roundHalfFloorCopy();
        int int31 = localDate30.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Jan 07 00:00:00 GMT 31");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 30 + "'", int31 == 30);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.Period period1 = org.joda.time.Period.hours(1971);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 570, chronology18);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = dateMidnight26.toCalendar(locale27);
        calendar28.setMinimalDaysInFirstWeek(59);
        java.util.Date date31 = calendar28.getTime();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=59,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(180);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(4);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfDay();
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        boolean boolean36 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.monthOfYear();
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        int int39 = property37.getMaximumShortTextLength(locale38);
        java.lang.String str40 = locale16.getDisplayLanguage(locale38);
        boolean boolean41 = locale38.hasExtensions();
        java.lang.String str42 = locale38.getVariant();
        java.lang.String str43 = property14.getAsShortText(locale38);
        java.lang.String str44 = locale38.getLanguage();
        java.util.Locale.setDefault(locale38);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fran\347ais (France)" + "'", str17, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str40, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10800100" + "'", str43, "10800100");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ja" + "'", str44, "ja");
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int int12 = localDateTime11.getMinuteOfHour();
        int int13 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(25728984);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(292278994, (int) (byte) 1, (-292275054));
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean17 = timeZone13.observesDaylightTime();
        java.util.Calendar.Builder builder18 = builder6.setTimeZone(timeZone13);
        boolean boolean19 = timeZone0.hasSameRules(timeZone13);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone0);
        int int21 = calendar20.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514163019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514163019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=19,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        boolean boolean19 = localTime15.isSupported(durationFieldType18);
        mutableDateTime9.add(durationFieldType18, (-1));
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime9.setZoneRetainFields(dateTimeZone23);
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology42);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50, periodType51);
        int int53 = dateMidnight50.getYear();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight55, readableDuration56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod57, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(100L, dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property67 = dateTime64.minuteOfDay();
        org.joda.time.DateTime dateTime68 = property67.roundCeilingCopy();
        org.joda.time.DateTime dateTime70 = dateTime68.minusDays(35);
        org.joda.time.Duration duration71 = mutablePeriod57.toDurationTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration72 = duration71.toDuration();
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime9.era();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime79 = localTime77.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.millis();
        boolean boolean81 = localTime77.isSupported(durationFieldType80);
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((long) 0);
        int int84 = localTime83.getMinuteOfHour();
        boolean boolean85 = localTime77.equals((java.lang.Object) localTime83);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean87 = localTime77.isSupported(dateTimeFieldType86);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType86.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType86.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime9.property(dateTimeFieldType86);
        mutableDateTime9.addWeekyears(30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval3.withDurationBeforeEnd(readableDuration4);
        org.joda.time.Period period6 = interval3.toPeriod();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology9);
        long long11 = interval10.getEndMillis();
        org.joda.time.Interval interval13 = interval10.withEndMillis((long) 11);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period15 = interval13.toPeriod(periodType14);
        boolean boolean16 = interval3.contains((org.joda.time.ReadableInterval) interval13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        calendar21.clear();
        java.util.Date date23 = calendar21.getTime();
        java.time.Instant instant24 = calendar21.toInstant();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        int int31 = dateMidnight28.getYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime34.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfMonth();
        boolean boolean38 = calendar21.before((java.lang.Object) property37);
        org.joda.time.MutableDateTime mutableDateTime40 = property37.add((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime41 = property37.roundHalfCeiling();
        boolean boolean42 = interval13.equals((java.lang.Object) property37);
        org.joda.time.MutableDateTime mutableDateTime43 = property37.roundFloor();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTime dateTime10 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate13 = localDate2.withFieldAdded(durationFieldType11, 15);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) (-1));
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime26 = dateTime21.withTime((int) (short) 0, 53, 26, 50);
        org.joda.time.LocalDateTime localDateTime27 = dateTime21.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = localDate13.isEqual((org.joda.time.ReadablePartial) localDateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int5 = dateTimeZone3.getStandardOffset((long) 5);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long14 = dateTimeZone3.getMillisKeepLocal(dateTimeZone11, (long) 100);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(3L, dateTimeZone11);
        int int17 = dateTimeZone11.getOffset((long) 985);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(1642835350512L, dateTimeZone11);
        java.lang.String str20 = dateTimeZone11.getNameKey((-13219199999L));
        java.lang.String str22 = dateTimeZone11.getShortName((long) 25979270);
        boolean boolean23 = dateTimeZone11.isFixed();
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514163131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=131,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(78, 26140726, 48, (-19036), 42, 211, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19036 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513697880L, chronology1);
        org.joda.time.Period period4 = org.joda.time.Period.seconds(1978);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) period4);
        org.junit.Assert.assertNotNull(period4);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        int int8 = localTime7.getMinuteOfHour();
        boolean boolean9 = localTime1.equals((java.lang.Object) localTime7);
        org.joda.time.LocalTime localTime11 = localTime1.withMinuteOfHour(0);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (-1), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localTime11.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(25720043);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(570);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute(53);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(chronology29);
        org.joda.time.Period period32 = org.joda.time.Period.weeks(569);
        int int33 = period32.size();
        int[] intArray36 = chronology29.get((org.joda.time.ReadablePeriod) period32, (long) 741, (long) (byte) 1);
        org.joda.time.Period period38 = period32.withMinutes(0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514163196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=196,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -740]");
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        int int11 = property8.getMinimumValue();
        org.joda.time.LocalDate localDate12 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        int int14 = localDate12.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        boolean boolean19 = localDate12.isSupported(durationFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate12.withDayOfMonth(252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3940 + "'", int14 == 3940);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minuteOfDay" + "'", str16, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        int int2 = localTime1.getMinuteOfHour();
        int int3 = localTime1.getHourOfDay();
        org.joda.time.LocalTime localTime5 = localTime1.withMinuteOfHour(19);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds((int) (short) 0);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (byte) 0);
        org.joda.time.Period period12 = period10.minusSeconds((int) '#');
        org.joda.time.Period period13 = period10.toPeriod();
        org.joda.time.Period period14 = period13.normalizedStandard();
        int int15 = period13.getHours();
        org.joda.time.LocalTime localTime17 = localTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 1982);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = new org.joda.time.Period((java.lang.Object) localTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        int int8 = property3.get();
        int int9 = property3.get();
        int int10 = property3.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property3.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay12 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7, periodType8);
        int int10 = dateMidnight6.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone11);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        boolean boolean21 = interval14.isAfter((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime dateTime22 = instant20.toDateTimeISO();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((int) (short) -1, (int) (byte) 100, (int) '#', 0, 0, 1970, (int) '#', (int) (byte) 100, periodType31);
        org.joda.time.Period period34 = period32.withMillis(8);
        org.joda.time.Period period36 = period34.minusWeeks((int) 'x');
        int int37 = period34.getSeconds();
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period40 = period34.withFieldAdded(durationFieldType38, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44, periodType45);
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod46.setPeriod(1L, chronology48);
        mutablePeriod46.add(100L);
        int int52 = mutablePeriod46.getYears();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.millis();
        mutablePeriod46.add(durationFieldType53, 6);
        boolean boolean56 = period40.isSupported(durationFieldType53);
        org.joda.time.DateTime dateTime58 = dateTime22.withFieldAdded(durationFieldType53, 561);
        int int59 = dateTime58.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.hours();
        java.lang.String str4 = periodType3.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, periodType3, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 32769, 0L, periodType3, chronology7);
        org.joda.time.Period period10 = period8.plusHours(2765);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration11, (org.joda.time.ReadableInstant) dateMidnight14, periodType15);
        int int17 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        boolean boolean29 = dateMidnight14.isBefore((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        int int31 = dateMidnight28.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight28, dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.withMinuteOfHour((int) ' ');
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((int) (short) -1, (int) (byte) 100, (int) '#', 0, 0, 1970, (int) '#', (int) (byte) 100, periodType44);
        org.joda.time.Period period47 = period45.withMillis(8);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(1L, dateTimeZone50);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration48, (org.joda.time.ReadableInstant) dateMidnight51, periodType52);
        org.joda.time.Hours hours54 = period53.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period57 = period53.withFieldAdded(durationFieldType55, 100);
        org.joda.time.Period period58 = period45.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period61 = period59.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.millis();
        int int63 = period61.get(durationFieldType62);
        int int64 = period58.get(durationFieldType62);
        org.joda.time.LocalTime localTime66 = localTime35.withFieldAdded(durationFieldType62, 11);
        boolean boolean67 = period8.isSupported(durationFieldType62);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Hours]" + "'", str4, "PeriodType[Hours]");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        int int29 = dateMidnight26.getYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight26.withDayOfMonth((int) (byte) 10);
        boolean boolean32 = dateMidnight17.isBefore((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.monthOfYear();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        int int35 = property33.getMaximumShortTextLength(locale34);
        java.lang.String str36 = locale12.getDisplayLanguage(locale34);
        java.util.Locale.setDefault(locale12);
        java.lang.String str38 = locale12.getISO3Language();
        java.util.Locale.setDefault(category10, locale12);
        java.lang.String str40 = property8.getAsText(locale12);
        org.joda.time.LocalDate localDate41 = property8.withMinimumValue();
        int int42 = localDate41.getWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fran\347ais (France)" + "'", str13, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str36, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "3940" + "'", str40, "3940");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        mutableDateTime19.addWeekyears(1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.DateTime dateTime32 = property29.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime34 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay33.year();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime43 = dateTime41.plus((long) (-1));
        org.joda.time.DateTime dateTime44 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded(readableDuration45, 1970);
        int int48 = property36.compareTo((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean49 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology50 = dateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime19.toMutableDateTime(chronology50);
        boolean boolean52 = charSet3.contains((java.lang.Object) mutableDateTime51);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        boolean boolean60 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58);
        boolean boolean61 = charSet56.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator62 = charSet56.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList64, strMap65);
        boolean boolean67 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        boolean boolean68 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        java.lang.Object[][] objArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray70 = charSet3.toArray(objArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais (France)" + "'", str55, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charSpliterator62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = timeZone0.observesDaylightTime();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder3.setDate(12, (int) 'u', (int) (short) -1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        int int10 = timeZone8.getRawOffset();
        java.util.Calendar.Builder builder11 = builder3.setTimeZone(timeZone8);
        java.util.Calendar calendar12 = builder3.build();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar.Builder builder17 = builder3.setTimeZone(timeZone13);
        boolean boolean18 = timeZone0.hasSameRules(timeZone13);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime20 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay19.year();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = property22.getAsText(locale23);
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        int int35 = dateMidnight32.getYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41, periodType42);
        int int44 = dateMidnight41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withDayOfMonth((int) (byte) 10);
        boolean boolean47 = dateMidnight32.isBefore((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.monthOfYear();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        int int50 = property48.getMaximumShortTextLength(locale49);
        java.lang.String str51 = locale27.getDisplayLanguage(locale49);
        java.util.Locale.setDefault(locale27);
        java.lang.String str53 = locale27.getISO3Language();
        java.lang.String str54 = locale23.getDisplayLanguage(locale27);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale27);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone0, locale27);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = calendar56.getActualMinimum(50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61481203200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=21,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=272,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "deu" + "'", str25, "deu");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fran\347ais (France)" + "'", str28, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str51, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "allemand" + "'", str54, "allemand");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645514163398,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=398,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514163398,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=3,MILLISECOND=398,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod4.setMinutes(11);
        org.joda.time.LocalTime localTime8 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod4, (int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localTime1.getFields();
        org.joda.time.LocalTime.Property property10 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime8 = dateTime6.minusYears((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology11);
        long long13 = interval12.getEndMillis();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = interval12.toMutableInterval();
        org.joda.time.Period period16 = interval12.toPeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Period period19 = interval12.toPeriod(periodType17);
        org.joda.time.Period period20 = interval12.toPeriod();
        org.joda.time.DateTime dateTime21 = dateTime6.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime6.toMutableDateTime();
        org.joda.time.DateTime.Property property23 = dateTime6.dayOfMonth();
        org.joda.time.DateTime.Property property24 = dateTime6.yearOfEra();
        org.joda.time.LocalTime localTime25 = dateTime6.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str14, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusHours(26);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDateTime49.getValue(26006889);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26006889");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        java.util.Date date2 = dateTime1.toDate();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date2);
        int int4 = date2.getSeconds();
        date2.setDate((int) (byte) 100);
        int int7 = date2.getMonth();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date2);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Wed May 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withDefaultYear(50);
        int int48 = dateTimeFormatter47.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateTimeFormatter47.print((long) 2764);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 50 + "'", int48 == 50);
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(1011, 438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1011 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        int int45 = dateTimeFormatter44.getDefaultYear();
        org.joda.time.Chronology chronology46 = dateTimeFormatter44.getChronology();
        int int47 = dateTimeFormatter44.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2000 + "'", int45 == 2000);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2000 + "'", int47 == 2000);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay6.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("janvier");
        int int32 = property29.getMaximumTextLength(locale31);
        org.joda.time.DateTimeField dateTimeField33 = property29.getField();
        org.joda.time.DateMidnight dateMidnight35 = property29.addToCopy(32769);
        int int36 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.TimeOfDay timeOfDay38 = property8.addWrapFieldToCopy((int) 'x');
        org.joda.time.DurationFieldType durationFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay41 = timeOfDay38.withFieldAdded(durationFieldType39, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int int12 = localDateTime11.getMinuteOfHour();
        int int13 = localDateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        long long19 = dateTimeZone15.nextTransition(2022L);
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.minusMonths(16799);
        org.joda.time.DateTimeField[] dateTimeFieldArray23 = localDateTime22.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2022L + "'", long19 == 2022L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray23);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        long long9 = dateTimeField6.add((long) (byte) 10, (long) '4');
        java.util.Locale locale10 = java.util.Locale.US;
        int int11 = dateTimeField6.getMaximumTextLength(locale10);
        int int14 = dateTimeField6.getDifference(8380800000L, 0L);
        java.lang.String str15 = dateTimeField6.toString();
        long long17 = dateTimeField6.remainder(1645513699391L);
        long long19 = dateTimeField6.roundFloor((long) 30);
        long long22 = dateTimeField6.add((long) 24356582, (-17L));
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1640995200010L + "'", long9 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[year]" + "'", str15, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4518499391L + "'", long17 == 4518499391L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-536433243418L) + "'", long22 == (-536433243418L));
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        int int14 = mutableDateTime9.getYearOfEra();
        mutableDateTime9.setWeekyear(11);
        mutableDateTime9.addYears(5);
        mutableDateTime9.add((long) 10);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime9.secondOfMinute();
        mutableDateTime9.setWeekyear(40414);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime9.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime26 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay25.year();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = property28.getAsText(locale29);
        org.joda.time.YearMonthDay yearMonthDay32 = property28.setCopy(2);
        int int33 = property28.get();
        org.joda.time.YearMonthDay yearMonthDay35 = property28.setCopy(4);
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay35.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay37 = property36.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = yearMonthDay37.getFieldType(0);
        mutableDateTime9.set(dateTimeFieldType39, 723);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology39);
        long long44 = chronology39.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight45 = org.joda.time.DateMidnight.now(chronology39);
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(chronology39);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime20, chronology39);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) 1, chronology39);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52, periodType53);
        int int55 = dateMidnight52.getYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight52.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTime();
        org.joda.time.Period period71 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period73 = period71.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(1L, dateTimeZone75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.plusDays((int) 'a');
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period71, (org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.Chronology chronology80 = interval79.getChronology();
        org.joda.time.DateMidnight dateMidnight81 = org.joda.time.DateMidnight.now(chronology80);
        long long85 = chronology80.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight86 = org.joda.time.DateMidnight.now(chronology80);
        org.joda.time.DateMidnight dateMidnight87 = org.joda.time.DateMidnight.now(chronology80);
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime61, chronology80);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.hours();
        java.lang.String str90 = periodType89.toString();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime61, periodType89);
        org.joda.time.LocalDate localDate92 = localDate6.plus((org.joda.time.ReadablePeriod) period91);
        org.joda.time.Period period93 = period91.negated();
        org.joda.time.DurationFieldType[] durationFieldTypeArray94 = period91.getFieldTypes();
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.forFields(durationFieldTypeArray94);
        org.joda.time.PeriodType periodType96 = org.joda.time.PeriodType.forFields(durationFieldTypeArray94);
        org.joda.time.Chronology chronology97 = null;
        org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod((-61851599999634L), (long) 25720043, periodType96, chronology97);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "PeriodType[Hours]" + "'", str90, "PeriodType[Hours]");
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(durationFieldTypeArray94);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(periodType96);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 1970, dateTimeZone8);
        int int10 = localDate9.getDayOfWeek();
        org.joda.time.LocalDate localDate12 = localDate9.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval13 = localDate9.toInterval();
        boolean boolean14 = interval3.contains((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval18.withDurationBeforeEnd(readableDuration19);
        org.joda.time.Period period21 = interval18.toPeriod();
        org.joda.time.Interval interval22 = interval3.gap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology25);
        long long27 = interval26.getEndMillis();
        java.lang.String str28 = interval26.toString();
        org.joda.time.MutableInterval mutableInterval29 = interval26.toMutableInterval();
        org.joda.time.Period period30 = interval26.toPeriod();
        org.joda.time.Interval interval31 = interval18.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(100L, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property40 = dateTime37.minuteOfDay();
        org.joda.time.DateTime dateTime42 = dateTime37.minusWeeks(6);
        java.util.Date date43 = dateTime42.toDate();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime42);
        int int45 = dateTime32.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str5, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNull(interval22);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 10L + "'", long27 == 10L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str28, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Nov 18 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str8 = property3.getAsText(locale7);
        java.lang.String str9 = property3.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay10 = property3.getYearMonthDay();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = yearMonthDay10.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) (-15994));
        long long3 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        int int6 = property5.getMinimumValue();
        org.junit.Assert.assertNotNull(instant2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514163845L + "'", long3 == 1645514163845L);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int7 = timeZone5.getRawOffset();
        java.util.Calendar.Builder builder8 = builder0.setTimeZone(timeZone5);
        java.util.Calendar calendar9 = builder0.build();
        org.joda.time.MonthDay monthDay10 = org.joda.time.MonthDay.fromCalendarFields(calendar9);
        int int11 = calendar9.getWeekYear();
        calendar9.set(823, 100, 25918579);
        calendar9.set(0, (int) '4', 38, (-86399998), 569, 40414);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=52,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=38,DAY_OF_YEAR=272,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=-86399998,MINUTE=569,SECOND=40414,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 1970, dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = null;
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = localDate17.withWeekyear((-1));
        int int22 = localDate21.getWeekyear();
        org.joda.time.LocalDate localDate24 = localDate21.withDayOfYear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean26 = localDate21.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate localDate27 = localDate7.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateMidnight dateMidnight30 = localDate21.toDateMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property31 = localDate21.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = localDate21.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withYearOfCentury(238497);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 238497 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean5 = dateTimeZone4.isFixed();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone4);
        int int7 = localDateTime6.getMillisOfSecond();
        int int8 = localDateTime6.getMonthOfYear();
        java.util.Date date9 = localDateTime6.toDate();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean15 = localDateTime11.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.dayOfYear();
        int int17 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property18 = localDateTime11.centuryOfEra();
        int int19 = localDateTime11.getMillisOfSecond();
        boolean boolean20 = locale1.equals((java.lang.Object) int19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType1 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("months");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("en-US");
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("year");
        java.util.Locale.Builder builder8 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.setVariant("0570-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 0570-01-01T00:00:00.000Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod5 = period2.toMutablePeriod();
        mutablePeriod5.setPeriod((long) 100);
        mutablePeriod5.addSeconds(0);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0);
        int int12 = localTime11.getMinuteOfHour();
        int int13 = localTime11.getHourOfDay();
        org.joda.time.LocalTime localTime15 = localTime11.withMillisOfSecond(26);
        org.joda.time.LocalTime localTime17 = localTime11.withSecondOfMinute(5);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.millis();
        int int22 = period20.get(durationFieldType21);
        boolean boolean23 = localTime17.isSupported(durationFieldType21);
        java.lang.String str24 = durationFieldType21.toString();
        boolean boolean25 = mutablePeriod5.isSupported(durationFieldType21);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29, periodType30);
        int int32 = dateMidnight29.getYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime35.copy();
        mutableDateTime35.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime43 = localTime41.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.millis();
        boolean boolean45 = localTime41.isSupported(durationFieldType44);
        mutableDateTime35.add(durationFieldType44, (-1));
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        mutableDateTime35.setZoneRetainFields(dateTimeZone49);
        long long52 = dateTimeZone49.nextTransition((long) 1970);
        java.lang.String str54 = dateTimeZone49.getName((long) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.Duration duration56 = mutablePeriod5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        mutableDateTime55.setMillisOfDay(765);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millis" + "'", str24, "millis");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1970L + "'", long52 == 1970L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime17.withField(dateTimeFieldType20, (int) 'u');
        java.lang.String str24 = dateTimeFieldType20.toString();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        boolean boolean44 = dateTimeFieldType20.isSupported(chronology42);
        boolean boolean45 = localDate7.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate.Property property46 = localDate7.weekyear();
        int int47 = localDate7.getDayOfYear();
        org.joda.time.DateTime dateTime48 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate50 = localDate7.plusMonths(37);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfDay" + "'", str21, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minuteOfDay" + "'", str24, "minuteOfDay");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate50);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfMonth();
        boolean boolean21 = calendar4.before((java.lang.Object) property20);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(100L, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        org.joda.time.DateTime dateTime32 = dateTime27.minusWeeks(6);
        java.util.Date date33 = dateTime32.toDate();
        calendar4.setTime(date33);
        java.lang.String str35 = calendar4.getCalendarType();
        java.util.Date date36 = calendar4.getTime();
        calendar4.setMinimalDaysInFirstWeek(122);
        int int39 = calendar4.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-44183318399900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=122,ERA=1,YEAR=569,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=322,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Mon Nov 18 00:00:00 GMT 569");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Nov 18 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        org.joda.time.Hours hours7 = period6.toStandardHours();
        org.joda.time.Period period9 = period6.multipliedBy((int) (short) 100);
        org.joda.time.MonthDay monthDay10 = monthDay0.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.MonthDay monthDay12 = monthDay0.withDayOfMonth(8);
        org.joda.time.MonthDay.Property property13 = monthDay12.dayOfMonth();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = monthDay12.getFieldTypes();
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(monthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, readableDuration5, periodType6);
        int int8 = dateMidnight4.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight4.getZone();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone9);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(obj0, dateTimeZone9);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((int) '#');
        org.joda.time.DateTime dateTime16 = property13.withMaximumValue();
        java.lang.String str17 = property13.getName();
        org.joda.time.DateTime dateTime18 = property13.getDateTime();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "yearOfEra" + "'", str17, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        java.lang.String str6 = property5.getAsShortText();
        int int7 = property5.get();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay10 = property5.addToCopy(0);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusHours(22);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.secondOfMinute();
        int int14 = property13.get();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate19 = localDate15.withFieldAdded(durationFieldType17, (int) (byte) 10);
        int[] intArray20 = localDate19.getValues();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[7, 1, 17]");
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(575, 572);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 572");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime11.addWeekyears(1);
        mutableDateTime11.addMinutes((int) (short) 100);
        org.joda.time.Period period24 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period26 = period24.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plusDays((int) 'a');
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period24, (org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(chronology33);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.hourOfHalfday();
        int int37 = dateTimeField36.getMinimumValue();
        java.lang.String str38 = dateTimeField36.getName();
        int int39 = mutableDateTime11.get(dateTimeField36);
        int int40 = mutableDateTime11.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hourOfHalfday" + "'", str38, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property7.addToCopy(3);
        org.joda.time.Interval interval10 = property7.toInterval();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) (byte) 100);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime15.getYear();
        boolean boolean18 = interval10.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight22);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.parse("70");
        mutableDateTime30.setWeekOfWeekyear(31);
        int int33 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37, periodType38);
        int int40 = dateMidnight37.getYear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration45, periodType46);
        mutablePeriod47.addMillis((int) '4');
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType52 = periodType51.withWeeksRemoved();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#', periodType52, chronology53);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadablePeriod) period54);
        boolean boolean57 = localDate28.equals((java.lang.Object) interval56);
        boolean boolean58 = interval10.contains((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 1970, dateTimeZone60);
        int int62 = localDate61.getDayOfWeek();
        org.joda.time.LocalDate localDate64 = localDate61.minusWeeks((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(1L, dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight67, readableDuration68, periodType69);
        boolean boolean71 = localDate64.equals((java.lang.Object) dateMidnight67);
        org.joda.time.LocalDate localDate73 = localDate64.minusYears((int) (byte) 1);
        org.joda.time.Interval interval74 = localDate64.toInterval();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(1L, dateTimeZone77);
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableDuration75, (org.joda.time.ReadableInstant) dateMidnight78, periodType79);
        org.joda.time.Hours hours81 = period80.toStandardHours();
        org.joda.time.Period period83 = period80.multipliedBy((int) (short) 100);
        org.joda.time.Interval interval84 = interval74.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        boolean boolean85 = interval56.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration86 = interval74.toDuration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(hours81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6, periodType7);
        org.joda.time.Hours hours9 = period8.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period12 = period8.withFieldAdded(durationFieldType10, 100);
        org.joda.time.Period period21 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period23 = period21.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusDays((int) 'a');
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DurationField durationField33 = durationFieldType10.getField(chronology30);
        org.joda.time.DurationField durationField34 = chronology30.centuries();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        int int41 = dateMidnight38.getYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime44.copy();
        int int47 = mutableDateTime44.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.weekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(1L, dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight53, readableDuration54, periodType55);
        org.joda.time.Chronology chronology58 = null;
        mutablePeriod56.setPeriod(1L, chronology58);
        mutableDateTime50.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        int[] intArray63 = chronology30.get((org.joda.time.ReadablePeriod) mutablePeriod56, (long) (byte) 10, (-13219199999L));
        org.joda.time.DurationField durationField64 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField65 = chronology30.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((-13), 301, 27, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 301 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, -5, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withDefaultYear(50);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeFormatter47.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTimeFormatter47.parseDateTime("--06-21");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(dateTimeZone48);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset((long) 5);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone1.getMillisKeepLocal(dateTimeZone9, (long) 100);
        java.lang.String str13 = dateTimeZone1.toString();
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514164298,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=4,MILLISECOND=298,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.hourOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy((-1));
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.minuteOfHour();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getVariant();
        java.lang.String str15 = locale13.getDisplayLanguage();
        int int16 = property12.getMaximumTextLength(locale13);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hourOfDay" + "'", str8, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fran\347ais" + "'", str15, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        int int4 = localDateTime3.getMillisOfDay();
        int int5 = localDateTime3.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        boolean boolean27 = dateMidnight12.isBefore((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight26.monthOfYear();
        org.joda.time.DateMidnight dateMidnight29 = property28.roundFloorCopy();
        org.joda.time.DateTime dateTime30 = dateMidnight29.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime30.minusWeeks(8);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration34, (org.joda.time.ReadableInstant) dateMidnight37, periodType38);
        int int40 = dateMidnight37.getYear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, readableDuration43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight42, readableDuration45);
        org.joda.time.Period period48 = period46.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime49 = dateTime33.plus((org.joda.time.ReadablePeriod) period48);
        int int50 = property8.compareTo((org.joda.time.ReadableInstant) dateTime33);
        int int51 = property8.getMaximumValueOverall();
        org.joda.time.TimeOfDay timeOfDay52 = property8.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay54 = property8.addNoWrapToCopy(20);
        org.joda.time.Period period56 = org.joda.time.Period.days(4);
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.joda.time.Period period58 = period56.toPeriod();
        org.joda.time.PeriodType periodType59 = period58.getPeriodType();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay54.plus((org.joda.time.ReadablePeriod) period58);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(timeOfDay60);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = dateMidnight18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.Period period37 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period39 = period37.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusDays((int) 'a');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateMidnight dateMidnight47 = org.joda.time.DateMidnight.now(chronology46);
        long long51 = chronology46.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology46);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime27, chronology46);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 1, chronology46);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.DateTime dateTime58 = dateTime13.withChronology(chronology46);
        org.joda.time.DateTime dateTime60 = dateTime13.withMinuteOfHour((int) '4');
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime13.getZone();
        org.joda.time.DateTime.Property property62 = dateTime13.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate2.minusWeeks((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        boolean boolean12 = localDate5.equals((java.lang.Object) dateMidnight8);
        org.joda.time.LocalDate localDate14 = localDate5.minusYears((int) (byte) 1);
        org.joda.time.Interval interval15 = localDate5.toInterval();
        boolean boolean16 = interval15.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        int int23 = dateMidnight19.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight19.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight19.withField(dateTimeFieldType25, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight19.withCenturyOfEra(26);
        int int30 = dateMidnight29.getCenturyOfEra();
        boolean boolean31 = interval15.contains((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Interval interval33 = interval15.withEndMillis((long) 103);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 26 + "'", int30 == 26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("DateTimeField[weekyear]", throwable2);
        java.io.IOException iOException4 = new java.io.IOException("1970-04-20T00:00:00.000Z", (java.lang.Throwable) iOException3);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.minus((long) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-1));
        org.joda.time.DateTime dateTime18 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) (short) 1);
        boolean boolean21 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime4.withWeekyear(50);
        org.joda.time.DateTime dateTime24 = dateTime4.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfWeek(3);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfEra();
        org.joda.time.LocalDate.Property property20 = localDate17.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate17.withYearOfCentury(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0007-01-03" + "'", str18, "0007-01-03");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(8, (int) (short) 1, (int) (byte) 1);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) localTime22, 10L);
        org.joda.time.DurationField durationField25 = chronology17.millis();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.millisOfSecond();
        int int28 = dateTimeField26.get((long) 2765);
        long long30 = dateTimeField26.roundHalfFloor(1645574400000L);
        org.joda.time.DurationField durationField31 = dateTimeField26.getLeapDurationField();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 28861000L + "'", long24 == 28861000L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 765 + "'", int28 == 765);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645574400000L + "'", long30 == 1645574400000L);
        org.junit.Assert.assertNull(durationField31);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration42, (org.joda.time.ReadableInstant) dateMidnight45, periodType46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        java.lang.String str50 = periodType49.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        boolean boolean52 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration40);
        long long53 = duration40.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "YearWeekDayNoWeeks" + "'", str50, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.era();
        int int12 = mutableDateTime9.getMillisOfDay();
        java.util.Date date13 = mutableDateTime9.toDate();
        int int14 = mutableDateTime9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        int int19 = dateTime17.getYear();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.hourOfDay();
        mutableDateTime20.setMillisOfDay(765);
        boolean boolean24 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sat Jan 10 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        boolean boolean10 = charSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) strMap11);
        boolean boolean14 = calendar1.after((java.lang.Object) mutableDateTime13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        timeZone20.setRawOffset(1);
        int int23 = timeZone20.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.time.ZoneId zoneId26 = timeZone24.toZoneId();
        java.time.ZoneId zoneId27 = timeZone24.toZoneId();
        boolean boolean28 = timeZone20.hasSameRules(timeZone24);
        calendar19.setTimeZone(timeZone20);
        calendar1.setTimeZone(timeZone20);
        int int31 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(25926723, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514164655,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=4,MILLISECOND=655,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fran\347ais (France)" + "'", str5, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514164655,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=4,MILLISECOND=655,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(zoneId27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) (-15994));
        long long3 = instant0.getMillis();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        int int6 = mutableDateTime4.getEra();
        org.junit.Assert.assertNotNull(instant2);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514164682L + "'", long3 == 1645514164682L);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMonths(70);
        int int15 = localDateTime10.getEra();
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.plusMonths(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime18.getValue(26037256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26037256");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(99, 71, 0);
        java.util.Calendar.Builder builder12 = builder4.setWeekDate(2922789, (int) (byte) 10, 25946);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period18.withFieldAdded(durationFieldType20, 100);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period33 = period31.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusDays((int) 'a');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DurationField durationField43 = durationFieldType20.getField(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.centuries();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48, periodType49);
        int int51 = dateMidnight48.getYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight48.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime54.copy();
        int int57 = mutableDateTime54.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.weekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.add((long) 12);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight63, readableDuration64, periodType65);
        org.joda.time.Chronology chronology68 = null;
        mutablePeriod66.setPeriod(1L, chronology68);
        mutableDateTime60.add((org.joda.time.ReadablePeriod) mutablePeriod66);
        int[] intArray73 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod66, (long) (byte) 10, (-13219199999L));
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField75 = chronology40.era();
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder77.setLanguage("months");
        java.util.Locale.Builder builder81 = builder77.setLanguageTag("en-US");
        java.util.Locale.Builder builder82 = builder77.clear();
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder84 = builder82.setLocale(locale83);
        java.util.Locale locale86 = java.util.Locale.forLanguageTag("1970-01-01");
        java.lang.String str87 = locale83.getDisplayName(locale86);
        java.util.Locale locale88 = locale83.stripExtensions();
        java.lang.String str89 = dateTimeField75.getAsText((long) 1200000, locale88);
        java.util.Calendar.Builder builder90 = builder4.setLocale(locale88);
        java.util.TimeZone timeZone91 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone93 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean94 = timeZone91.hasSameRules(timeZone93);
        java.util.Calendar calendar95 = java.util.Calendar.getInstance(timeZone93);
        java.time.Instant instant96 = calendar95.toInstant();
        org.joda.time.YearMonthDay yearMonthDay97 = org.joda.time.YearMonthDay.fromCalendarFields(calendar95);
        int[] intArray98 = yearMonthDay97.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder99 = builder90.setFields(intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, -5, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "AD" + "'", str89, "AD");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(calendar95);
// flaky:         org.junit.Assert.assertEquals(calendar95.toString(), "java.util.GregorianCalendar[time=1645514164740,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=4,MILLISECOND=740,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(yearMonthDay97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[2022, 2, 22]");
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        int int6 = property3.get();
        org.joda.time.YearMonthDay yearMonthDay8 = property3.setCopy(70);
        org.joda.time.YearMonthDay.Property property9 = yearMonthDay8.year();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay11 = property9.withMaximumValue();
        org.joda.time.Period period22 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        org.joda.time.Hours hours29 = period28.toStandardHours();
        org.joda.time.Period period31 = period28.multipliedBy((int) (short) 100);
        org.joda.time.Period period32 = period31.negated();
        org.joda.time.Period period34 = period31.withMonths(292278993);
        org.joda.time.PeriodType periodType35 = period31.getPeriodType();
        org.joda.time.Period period36 = period22.withPeriodType(periodType35);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 428, 28927206000L, periodType35);
        mutablePeriod37.setMonths(736);
        int int40 = mutablePeriod37.getMinutes();
        mutablePeriod37.addMinutes(569);
        mutablePeriod37.addDays(1946);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertNotNull(yearMonthDay45);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("janvier");
        int int22 = property19.getMaximumTextLength(locale21);
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        org.joda.time.DateMidnight dateMidnight24 = property19.withMinimumValue();
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight26 = property25.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addWrapFieldToCopy((-9));
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale13 = locale12.stripExtensions();
        int int14 = property8.getMaximumShortTextLength(locale13);
        org.joda.time.TimeOfDay timeOfDay15 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusMillis(58);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.setMillis((long) (byte) 0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime9.isEqual(readableInstant12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        mutableDateTime9.add(durationFieldType17, (int) (byte) 0);
        int int20 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24, periodType25);
        int int27 = dateMidnight24.getYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        boolean boolean39 = dateMidnight24.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight38.monthOfYear();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        int int42 = property40.getMaximumShortTextLength(locale41);
        java.lang.String str43 = property40.getAsString();
        org.joda.time.DateMidnight dateMidnight44 = property40.roundCeilingCopy();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateMidnight44);
        java.lang.String str46 = mutableDateTime9.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setTime((-2), 2, 78, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minuteOfDay" + "'", str16, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str46, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        int int5 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfDay();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.millis();
        int int11 = period9.get(durationFieldType10);
        org.joda.time.Period period13 = period9.minusWeeks(9);
        org.joda.time.Period period14 = period9.toPeriod();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = dateMidnight18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime24.copy();
        mutableDateTime24.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime32 = localTime30.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        boolean boolean34 = localTime30.isSupported(durationFieldType33);
        mutableDateTime24.add(durationFieldType33, (-1));
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        mutableDateTime24.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime24.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime42.property(dateTimeFieldType43);
        org.joda.time.Duration duration45 = period14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration45, 113);
        int int48 = mutableDateTime4.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        int int16 = localDateTime15.getWeekyear();
        int int17 = localDateTime15.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11, periodType12);
        mutablePeriod13.addMillis((int) '4');
        int int16 = mutablePeriod13.size();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        int int21 = dateTime19.getYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = property29.setCopy(180);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfSecond();
        org.joda.time.DateTime dateTime36 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Feb");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("hi!");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        int int7 = timeZone1.getOffset((long) (short) 100);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.US;
        int int5 = property3.getMaximumShortTextLength(locale4);
        int int6 = property3.getMaximumValueOverall();
        java.lang.String str7 = property3.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.setCopy(86);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.time.ZoneId zoneId12 = timeZone10.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime14 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone13);
        int int15 = dateTime14.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(zoneId12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86 + "'", int15 == 86);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(4);
        int int15 = mutableDateTime14.getSecondOfMinute();
        int int16 = mutableDateTime14.getRoundingMode();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weeks();
        mutableDateTime14.add(durationFieldType17, 12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withWeekyear(16799);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(1L, dateTimeZone8);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight9, periodType10);
        int int12 = dateMidnight9.getYear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration15, (org.joda.time.ReadableInstant) dateMidnight18, periodType19);
        int int21 = dateMidnight18.getYear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.withDayOfMonth((int) (byte) 10);
        boolean boolean24 = dateMidnight9.isBefore((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.monthOfYear();
        org.joda.time.DateMidnight dateMidnight26 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime27.minusWeeks(8);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration31, (org.joda.time.ReadableInstant) dateMidnight34, periodType35);
        int int37 = dateMidnight34.getYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight34.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight39, readableDuration40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, readableDuration42);
        org.joda.time.Period period45 = period43.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime46 = dateTime30.plus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.TimeOfDay timeOfDay47 = dateTime46.toTimeOfDay();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology50);
        long long52 = interval51.getEndMillis();
        java.lang.String str53 = interval51.toString();
        org.joda.time.MutableInterval mutableInterval54 = interval51.toMutableInterval();
        org.joda.time.Period period55 = interval51.toPeriod();
        org.joda.time.Period period57 = period55.withMillis(570);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType59 = periodType58.withWeeksRemoved();
        org.joda.time.PeriodType periodType60 = periodType59.withWeeksRemoved();
        org.joda.time.Period period61 = period55.withPeriodType(periodType60);
        org.joda.time.Days days62 = period55.toStandardDays();
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay47.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 728);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = localDateTime5.isBefore((org.joda.time.ReadablePartial) timeOfDay64);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str53, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(days62);
        org.junit.Assert.assertNotNull(timeOfDay64);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        int int5 = localDateTime4.getMillisOfSecond();
        int int6 = localDateTime4.getEra();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(100);
        org.joda.time.Period period14 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.DateTime dateTime20 = dateTime17.withMonthOfYear(11);
        org.joda.time.Duration duration21 = period14.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration23, (org.joda.time.ReadableInstant) dateMidnight26, periodType27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        java.lang.String str31 = periodType30.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight26, periodType30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusMillis(100);
        org.joda.time.Period period40 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(100L, dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = dateTime43.toLocalDateTime();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear(11);
        org.joda.time.Duration duration47 = period40.toDurationFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime36.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime36.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.yearOfCentury();
        boolean boolean52 = duration21.equals((java.lang.Object) localDateTime50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration21, 985);
        org.joda.time.Instant instant56 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration21, (-19036));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = instant56.toDateTime(dateTimeZone57);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YearWeekDayNoWeeks" + "'", str31, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(551L);
        java.lang.String str3 = localDateTime1.toString("6");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "6" + "'", str3, "6");
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7, periodType8);
        int int10 = dateMidnight6.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone11);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone11);
        org.joda.time.Interval interval16 = interval14.withEndMillis(4518499391L);
        java.lang.String str17 = interval14.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str17, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(600100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(0);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis(71);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(37746);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours(3940);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-598130, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 4, chronology1);
        int int3 = timeOfDay2.getHourOfDay();
        java.lang.String str4 = timeOfDay2.toString();
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology22);
        long long27 = chronology22.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology22);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay2.withChronologyRetainFields(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = timeOfDay30.getValue(37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 37");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "T00:00:00.004" + "'", str4, "T00:00:00.004");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(timeOfDay30);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        java.lang.Object obj2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(obj2);
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval5 = new org.joda.time.Interval(1970L, 0L, chronology4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DurationField durationField26 = chronology18.minutes();
        org.joda.time.DurationField durationField27 = chronology18.millis();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 26, chronology18);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(5);
        org.joda.time.Period period37 = new org.joda.time.Period(31536000000L, 1640995200010L);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42, periodType43);
        org.joda.time.Hours hours45 = period44.toStandardHours();
        org.joda.time.Period period47 = period44.multipliedBy((int) (short) 100);
        org.joda.time.Period period48 = period37.withFields((org.joda.time.ReadablePeriod) period47);
        int[] intArray51 = chronology18.get((org.joda.time.ReadablePeriod) period48, (long) 59, (-1813157425000L));
        org.joda.time.DateTimeField dateTimeField52 = chronology18.era();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period54.minusSeconds((int) (byte) 0);
        org.joda.time.Period period58 = period56.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod59 = period56.toMutablePeriod();
        mutablePeriod59.setPeriod((long) 100);
        mutablePeriod59.addSeconds(0);
        mutablePeriod59.setWeeks(551);
        org.joda.time.LocalTime localTime66 = localTime53.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        mutablePeriod59.setSeconds(0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-57, -5, -1, -6, -14, -50, -25, -59]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(32770);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        int int15 = dateMidnight11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj7, dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withDefaultYear(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(2922789);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter23.withPivotYear((java.lang.Integer) 25901);
        java.util.Locale locale28 = dateTimeFormatter27.getLocale();
        boolean boolean29 = dateTimeFormatter27.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19, periodType20);
        int int22 = dateMidnight18.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight15.withZoneRetainFields(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) 37746L, dateTimeZone23);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone32);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromCalendarFields(calendar34);
        org.joda.time.YearMonthDay yearMonthDay36 = org.joda.time.YearMonthDay.fromCalendarFields(calendar34);
        int int37 = yearMonthDay36.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 1970, dateTimeZone40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate41.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDate localDate45 = localDate41.withWeekyear((-1));
        org.joda.time.LocalDate.Property property46 = localDate41.dayOfWeek();
        org.joda.time.LocalDate localDate48 = property46.addToCopy(3);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime50 = yearMonthDay49.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime51 = yearMonthDay49.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay49.year();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = property52.getAsText(locale53);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str57 = property52.getAsText(locale56);
        java.lang.String str58 = property46.getAsText(locale56);
        java.lang.String str59 = yearMonthDay36.toString("2022", locale56);
        org.joda.time.Period period68 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period70 = period68.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(1L, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight73.plusDays((int) 'a');
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period68, (org.joda.time.ReadableInstant) dateMidnight75);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.DateMidnight dateMidnight78 = org.joda.time.DateMidnight.now(chronology77);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(1L, dateTimeZone80);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight81, readableDuration82, periodType83);
        org.joda.time.Chronology chronology86 = null;
        mutablePeriod84.setPeriod(1L, chronology86);
        long long90 = chronology77.add((org.joda.time.ReadablePeriod) mutablePeriod84, (long) (short) 0, 32769);
        org.joda.time.YearMonthDay yearMonthDay91 = yearMonthDay36.minus((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.LocalDate localDate93 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod84, 26017869);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514165318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=5,MILLISECOND=318,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022" + "'", str54, "2022");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Thursday" + "'", str58, "Thursday");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022" + "'", str59, "2022");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 32769L + "'", long90 == 32769L);
        org.junit.Assert.assertNotNull(yearMonthDay91);
        org.junit.Assert.assertNotNull(localDate93);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(100);
        org.joda.time.DateTime dateTime5 = dateTime3.withEra(0);
        org.joda.time.DateTime dateTime7 = dateTime3.plusYears(35);
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        long long30 = chronology25.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.DurationField durationField32 = chronology25.months();
        java.lang.String str33 = durationField32.getName();
        org.joda.time.DurationFieldType durationFieldType34 = durationField32.getType();
        org.joda.time.Period period43 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period45 = period43.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plusDays((int) 'a');
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Period period60 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period62 = period60.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plusDays((int) 'a');
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period60, (org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekyear();
        org.joda.time.Interval interval72 = interval51.withChronology(chronology69);
        org.joda.time.DurationField durationField73 = chronology69.months();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.hourOfHalfday();
        boolean boolean75 = durationFieldType34.isSupported(chronology69);
        org.joda.time.DateTime dateTime76 = dateTime7.withChronology(chronology69);
        org.joda.time.DateTime.Property property77 = dateTime76.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "months" + "'", str33, "months");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(180);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime11.withYearOfCentury(53);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime dateTime18 = dateTime15.plusDays(2765);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.plus((-61346386121007L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        java.util.Date date7 = calendar4.getTime();
        calendar4.setTimeInMillis(12L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight12, readableDuration13, periodType14);
        int int16 = dateMidnight12.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = dateMidnight12.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight12.withField(dateTimeFieldType18, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plus((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.withMillis((long) 1);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.withWeekyear(570);
        int int27 = dateMidnight26.getYearOfEra();
        boolean boolean28 = calendar4.before((java.lang.Object) dateMidnight26);
        calendar4.setMinimalDaysInFirstWeek(32770);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=12,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=32770,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=12,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:16:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 570 + "'", int27 == 570);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.hourOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod19.addHours(0);
        mutablePeriod19.addMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        int int30 = dateMidnight27.getYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTime(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40, periodType41);
        int int43 = dateMidnight40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = mutableDateTime46.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTime();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateTime49);
        mutablePeriod19.addSeconds((int) (byte) 100);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod19, 1200000);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod19.setValue(24356582, 25961696);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24356582");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        int int8 = localDateTime6.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2922789 + "'", int8 == 2922789);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = yearMonthDay0.getFieldTypes();
        int int3 = yearMonthDay0.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay0.minusMonths((int) (byte) 0);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (byte) 0);
        org.joda.time.Period period10 = period8.minusSeconds(100);
        org.joda.time.Period period11 = period10.negated();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay5.minus((org.joda.time.ReadablePeriod) period10);
        java.lang.String str13 = yearMonthDay5.toString();
        int int14 = yearMonthDay5.getMonthOfYear();
        org.joda.time.DateTime dateTime15 = yearMonthDay5.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22" + "'", str13, "2022-02-22");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        int int8 = charSet3.size();
        charSet3.clear();
        java.lang.Character[] charArray16 = new java.lang.Character[] { 'x', ' ', 'x', ' ', '4', 'x' };
        java.util.LinkedHashSet<java.lang.Character> charSet17 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet17, charArray16);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        boolean boolean26 = charSet22.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24);
        boolean boolean27 = charSet22.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator28 = charSet22.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList30, strMap31);
        boolean boolean33 = charSet22.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        boolean boolean34 = charSet17.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap35);
        boolean boolean37 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.weekyear();
        org.joda.time.LocalDate localDate40 = property39.withMaximumValue();
        boolean boolean41 = charSet3.remove((java.lang.Object) property39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime47 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay46.year();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = property49.getAsText(locale50);
        org.joda.time.DateTimeField dateTimeField52 = property49.getField();
        long long55 = dateTimeField52.add((long) (byte) 10, (long) '4');
        java.util.Locale locale56 = java.util.Locale.US;
        int int57 = dateTimeField52.getMaximumTextLength(locale56);
        long long59 = dateTimeField52.roundHalfEven((long) (-1));
        long long61 = dateTimeField52.roundHalfFloor((long) 6);
        long long63 = dateTimeField52.roundHalfFloor((long) 8);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime65 = yearMonthDay64.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray66 = yearMonthDay64.getFieldTypes();
        int int67 = yearMonthDay64.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime70 = yearMonthDay69.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime71 = yearMonthDay69.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay69.year();
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.lang.String str74 = property72.getAsText(locale73);
        org.joda.time.YearMonthDay yearMonthDay76 = property72.setCopy(2);
        org.joda.time.DateTimeField dateTimeField77 = property72.getField();
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.lang.String str80 = dateTimeField77.getAsShortText((int) ' ', locale79);
        java.lang.String str81 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) yearMonthDay64, 7, locale79);
        java.lang.String str82 = dateTimeZone44.getName(1978L, locale79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate83 = property39.setCopy("1970-01-01T00:00:00.000Z/1970-01-01T00:01:00.000Z", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.000Z/1970-01-01T00:01:00.000Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fran\347ais (France)" + "'", str21, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(charSpliterator28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1640995200010L + "'", long55 == 1640995200010L);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022" + "'", str74, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "32" + "'", str80, "32");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "7" + "'", str81, "7");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+100:00" + "'", str82, "+100:00");
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.LocalDate localDate5 = localDate2.minusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate7 = localDate2.withYearOfEra(569);
        org.joda.time.LocalDate localDate9 = localDate2.minusMonths(0);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfEra();
        long long11 = property10.remainder();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7, periodType8);
        int int10 = dateMidnight7.getYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        int int19 = dateMidnight16.getYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight16.withDayOfMonth((int) (byte) 10);
        boolean boolean22 = dateMidnight7.isBefore((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight21.monthOfYear();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        int int25 = property23.getMaximumShortTextLength(locale24);
        org.joda.time.DurationField durationField26 = property23.getDurationField();
        org.joda.time.DateMidnight dateMidnight27 = property23.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight28 = property23.withMinimumValue();
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(2764, 257264, 575, 993, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2764 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight14.toYearMonthDay();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getStandardOffset((long) 5);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        long long28 = dateTimeZone17.getMillisKeepLocal(dateTimeZone25, (long) 100);
        java.lang.String str30 = dateTimeZone17.getName((long) 2);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay15.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514165617,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=5,MILLISECOND=617,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.Instant instant27 = instant0.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology30);
        long long32 = interval31.getEndMillis();
        java.lang.String str33 = interval31.toString();
        org.joda.time.MutableInterval mutableInterval34 = interval31.toMutableInterval();
        org.joda.time.Period period35 = interval31.toPeriod();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = interval31.toPeriod(periodType36);
        org.joda.time.Duration duration39 = interval31.toDuration();
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (short) 10);
        org.joda.time.Instant instant43 = instant27.plus((long) 'u');
        org.joda.time.DateTime dateTime44 = instant27.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone46);
        int int49 = localDateTime48.getYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusDays(1970);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(1L, dateTimeZone54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(readableDuration52, (org.joda.time.ReadableInstant) dateMidnight55, periodType56);
        int int58 = dateMidnight55.getYear();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight55.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight60.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime61.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str65 = dateTimeFieldType64.getName();
        mutableDateTime63.set(dateTimeFieldType64, 5);
        org.joda.time.LocalDateTime.Property property68 = localDateTime48.property(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime69 = property68.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime70 = property68.roundHalfFloorCopy();
        boolean boolean71 = instant27.equals((java.lang.Object) property68);
        org.joda.time.Instant instant73 = instant27.withMillis((long) 14);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearWeekDayNoWeeks" + "'", str25, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str33, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "minuteOfDay" + "'", str65, "minuteOfDay");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(instant73);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        int int6 = dateMidnight2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) 23448);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 1970, dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1970, dateTimeZone17);
        int int19 = localDate18.getDayOfWeek();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate13, (org.joda.time.ReadablePartial) localDate18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24, periodType25);
        int int27 = dateMidnight24.getYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight24.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        int int36 = dateMidnight33.getYear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDayOfMonth((int) (byte) 10);
        boolean boolean39 = dateMidnight24.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight38.monthOfYear();
        org.joda.time.DateMidnight dateMidnight41 = property40.roundFloorCopy();
        boolean boolean42 = localDate18.equals((java.lang.Object) dateMidnight41);
        org.joda.time.LocalDate.Property property43 = localDate18.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime45 = yearMonthDay44.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime46 = yearMonthDay44.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay44.year();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = property47.getAsText(locale48);
        org.joda.time.DateTimeField dateTimeField50 = property47.getField();
        boolean boolean51 = dateTimeField50.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField50.getType();
        boolean boolean53 = localDate18.isSupported(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType52.getDurationType();
        int int55 = dateMidnight10.get(dateTimeFieldType52);
        org.joda.time.DateMidnight.Property property56 = dateMidnight10.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        int int45 = dateTimeFormatter44.getDefaultYear();
        org.joda.time.Chronology chronology46 = dateTimeFormatter44.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = dateTimeFormatter44.parseLocalDate("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2000 + "'", int45 == 2000);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear(14);
        boolean boolean48 = dateTimeFormatter47.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime26 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, readablePeriod29);
        boolean boolean31 = interval30.containsNow();
        org.joda.time.Interval interval33 = interval30.withStartMillis((-61346386121007L));
        org.joda.time.Interval interval35 = interval30.withStartMillis((-259200000L));
        boolean boolean36 = interval35.containsNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        java.io.IOException iOException1 = new java.io.IOException("");
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100L, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) (-1));
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1970, dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 1970, dateTimeZone20);
        int int22 = localDate21.getDayOfWeek();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((java.lang.Object) localDate21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateMidnight dateMidnight27 = yearMonthDay24.toDateMidnight(dateTimeZone25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime10.withZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(561, 26, 71352, 1380, 561, 9, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1380 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        org.joda.time.MonthDay monthDay0 = org.joda.time.MonthDay.now();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        org.joda.time.Hours hours7 = period6.toStandardHours();
        org.joda.time.Period period9 = period6.multipliedBy((int) (short) 100);
        org.joda.time.MonthDay monthDay10 = monthDay0.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = monthDay0.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay13 = monthDay0.withMonthOfYear(765);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 765 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(monthDay0);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(monthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 260);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property4 = localTime1.property(dateTimeFieldType3);
        org.joda.time.LocalTime localTime6 = localTime1.plusMillis(35);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(obj0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(40414);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40414 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean10 = charSet3.contains((java.lang.Object) dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone6);
        long long14 = dateTimeZone6.adjustOffset((-1645513760380L), true);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property24 = dateTime21.minuteOfDay();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.DateTime dateTime26 = property24.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = property24.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime30 = yearMonthDay29.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay29.year();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = property32.getAsText(locale33);
        org.joda.time.DateTimeField dateTimeField35 = property32.getField();
        boolean boolean36 = dateTimeField35.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField35.getType();
        long long40 = dateTimeField35.addWrapField((long) 4, 19);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableDuration45, (org.joda.time.ReadableInstant) dateMidnight48, periodType49);
        int int51 = dateMidnight48.getYear();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight48.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableDuration54, (org.joda.time.ReadableInstant) dateMidnight57, periodType58);
        int int60 = dateMidnight57.getYear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight57.withDayOfMonth((int) (byte) 10);
        boolean boolean63 = dateMidnight48.isBefore((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight.Property property64 = dateMidnight62.monthOfYear();
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        int int66 = property64.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale43.getDisplayLanguage(locale65);
        java.lang.String str68 = locale65.getDisplayLanguage();
        java.lang.String str69 = dateTimeField35.getAsShortText((long) 'u', locale65);
        org.joda.time.DateTime dateTime70 = property24.setCopy("4", locale65);
        java.lang.String str71 = locale16.getDisplayCountry(locale65);
        java.lang.String str72 = dateTimeZone6.getName((long) 301, locale16);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1645513760380L) + "'", long14 == (-1645513760380L));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022" + "'", str34, "2022");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 599616000004L + "'", long40 == 599616000004L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fran\347ais (France)" + "'", str44, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str67, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "japonais" + "'", str68, "japonais");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970" + "'", str69, "1970");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str71, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00" + "'", str72, "+00:00");
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        int int6 = dateMidnight2.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        boolean boolean32 = dateTime30.isAfter((long) 6);
        org.joda.time.DateTime dateTime33 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded((long) 15, 292271115);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime38 = yearMonthDay37.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate39 = dateTime38.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(100L, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str46 = dateTimeFieldType45.getName();
        org.joda.time.DateTime dateTime48 = dateTime42.withField(dateTimeFieldType45, (int) 'u');
        int int49 = dateTime38.get(dateTimeFieldType45);
        org.joda.time.DateTime.Property property50 = dateTime38.era();
        org.joda.time.DateTime dateTime52 = dateTime38.plusYears(192);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes(15);
        boolean boolean55 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime36.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfDay" + "'", str46, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date8);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) '4');
        org.joda.time.LocalDate localDate14 = localDate10.minusYears(52);
        int int15 = localDate14.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology17);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType27);
        org.joda.time.MonthDay monthDay29 = monthDay24.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.MonthDay monthDay31 = monthDay24.minusDays(2);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        int int38 = dateMidnight35.getYear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight40, readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight40, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod47.setMinutes(11);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology51 = dateMidnight40.getChronology();
        org.joda.time.MonthDay monthDay52 = monthDay24.withChronologyRetainFields(chronology51);
        org.joda.time.MonthDay monthDay54 = monthDay24.withDayOfMonth(14);
        int int55 = monthDay24.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField57 = monthDay24.getField(23448);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 23448");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(monthDay29);
        org.junit.Assert.assertNotNull(monthDay31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(monthDay52);
        org.junit.Assert.assertNotNull(monthDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        java.util.Locale locale3 = new java.util.Locale("", "fr_FR", "16:00:53.000");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for FR_FR");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_FR_FR_16:00:53.000");
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.Period period10 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period12 = period10.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays((int) 'a');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyear();
        org.joda.time.DurationField durationField22 = chronology19.centuries();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 1200000, chronology19);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 2922789, chronology19);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        int int31 = dateMidnight28.getYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime34.copy();
        int int37 = mutableDateTime34.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.yearOfCentury();
        mutableDateTime34.setMonthOfYear((int) (short) 10);
        mutableDateTime34.addWeeks(1);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) mutableDateTime34);
        int int44 = mutableDateTime34.getRoundingMode();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime34.secondOfDay();
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period16 = period14.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) 'a');
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period33 = period31.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusDays((int) 'a');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyear();
        org.joda.time.Interval interval43 = interval22.withChronology(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter3.withChronology(chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.parse("0570-01-01T00:00:00.000Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        java.lang.Object obj0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(obj0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1970, dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate localDate10 = localDate6.withWeekyear((-1));
        boolean boolean12 = localDate10.equals((java.lang.Object) 8);
        int int13 = localDate10.getYear();
        boolean boolean14 = yearMonthDay2.equals((java.lang.Object) localDate10);
        int int15 = localDate10.size();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#', periodType18, chronology19);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) localDate10, periodType18);
        org.joda.time.LocalDate localDate23 = localDate10.minusDays(8);
        org.joda.time.LocalDate.Property property24 = localDate10.centuryOfEra();
        java.lang.String str25 = property24.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        org.joda.time.Interval interval6 = interval3.withEndMillis((long) 11);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period8 = interval6.toPeriod(periodType7);
        org.joda.time.Period period10 = period8.plusSeconds(17);
        org.joda.time.Period period12 = period10.withSeconds((int) (short) 10);
        int int13 = period12.getDays();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.yearOfEra();
        int int7 = localDateTime1.getEra();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(100L, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        java.lang.String str18 = property17.getAsString();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property17.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay22.year();
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = property25.getAsText(locale26);
        org.joda.time.DateTimeField dateTimeField28 = property25.getField();
        boolean boolean29 = dateTimeField28.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField28.getType();
        long long33 = dateTimeField28.addWrapField((long) 4, 19);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41, periodType42);
        int int44 = dateMidnight41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50, periodType51);
        int int53 = dateMidnight50.getYear();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withDayOfMonth((int) (byte) 10);
        boolean boolean56 = dateMidnight41.isBefore((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.monthOfYear();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        int int59 = property57.getMaximumShortTextLength(locale58);
        java.lang.String str60 = locale36.getDisplayLanguage(locale58);
        java.lang.String str61 = locale58.getDisplayLanguage();
        java.lang.String str62 = dateTimeField28.getAsShortText((long) 'u', locale58);
        org.joda.time.DateTime dateTime63 = property17.setCopy("4", locale58);
        java.lang.String str64 = locale9.getDisplayCountry(locale58);
        java.util.Locale locale66 = new java.util.Locale("25");
        java.util.Locale locale67 = java.util.Locale.UK;
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str69 = locale67.getDisplayVariant(locale68);
        java.lang.String str70 = locale66.getDisplayCountry(locale67);
        java.lang.String str71 = locale9.getDisplayScript(locale67);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale67);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = localDateTime1.toString("", locale67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 599616000004L + "'", long33 == 599616000004L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fran\347ais (France)" + "'", str37, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str60, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "japonais" + "'", str61, "japonais");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str64, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertEquals(locale66.toString(), "25");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645514166240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=6,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period1.minusSeconds((int) (byte) 0);
        org.joda.time.Period period5 = period3.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod6 = period3.toMutablePeriod();
        mutablePeriod6.setPeriod((long) 100);
        mutablePeriod6.setMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.plusHours((int) (short) 0);
        int int17 = timeOfDay16.getHourOfDay();
        org.joda.time.TimeOfDay.Property property18 = timeOfDay16.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.TimeOfDay timeOfDay20 = property18.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = property18.addToCopy(26);
        org.joda.time.Period period31 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period33 = period31.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plusDays((int) 'a');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(1L, dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight44, readableDuration45, periodType46);
        org.joda.time.Chronology chronology49 = null;
        mutablePeriod47.setPeriod(1L, chronology49);
        long long53 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod47, (long) (short) 0, 32769);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay22.withChronologyRetainFields(chronology40);
        mutablePeriod6.setPeriod((long) 53, 28861000L, chronology40);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.Chronology chronology57 = dateMidnight56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(0L, chronology57);
        mutableDateTime58.addHours(569);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32769L + "'", long53 == 32769L);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.setCopy((int) (short) 10);
        boolean boolean23 = property19.isLeap();
        org.joda.time.DateMidnight dateMidnight24 = property19.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight25 = property19.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = period5.size();
        org.joda.time.Period period8 = period5.withMonths(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime26 = localTime24.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        boolean boolean28 = localTime24.isSupported(durationFieldType27);
        mutableDateTime18.add(durationFieldType27, (-1));
        boolean boolean31 = period8.isSupported(durationFieldType27);
        org.joda.time.Period period33 = period8.plusMillis(54);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime8 = dateTime6.minusYears((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology11);
        long long13 = interval12.getEndMillis();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = interval12.toMutableInterval();
        org.joda.time.Period period16 = interval12.toPeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Period period19 = interval12.toPeriod(periodType17);
        org.joda.time.Period period20 = interval12.toPeriod();
        org.joda.time.DateTime dateTime21 = dateTime6.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime6.toMutableDateTime();
        org.joda.time.Instant instant23 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime25 = dateTime6.minusHours(69);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str14, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        java.lang.Character[] charArray2 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        boolean boolean8 = dateTimeZone6.isFixed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        boolean boolean10 = charSet3.contains((java.lang.Object) dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plus((long) 19);
        org.joda.time.MonthDay monthDay14 = new org.joda.time.MonthDay((java.lang.Object) dateMidnight13);
        int int15 = dateMidnight13.getEra();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withPivotYear(14);
        org.joda.time.format.DateTimeParser dateTimeParser48 = dateTimeFormatter45.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter45.withOffsetParsed();
        org.joda.time.Period period59 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period61 = period59.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plusDays((int) 'a');
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period59, (org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.DateMidnight dateMidnight69 = org.joda.time.DateMidnight.now(chronology68);
        long long73 = chronology68.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight74 = org.joda.time.DateMidnight.now(chronology68);
        org.joda.time.DurationField durationField75 = chronology68.months();
        org.joda.time.DateTimeField dateTimeField76 = chronology68.millisOfSecond();
        org.joda.time.Chronology chronology77 = chronology68.withUTC();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(chronology77);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime((long) 600100, chronology77);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.roundHalfCeiling();
        mutableDateTime81.setMinuteOfDay(6);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = dateTimeFormatter49.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime81, "2022-02-22T07:10:56.275", 24356582);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(dateTimeParser48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.joda.time.Period period10 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period12 = period10.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(1L, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays((int) 'a');
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period10, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(chronology19);
        long long24 = chronology19.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DurationField durationField27 = chronology19.minutes();
        org.joda.time.DurationField durationField28 = chronology19.millis();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 26, chronology19);
        org.joda.time.DateTimeField dateTimeField30 = chronology19.secondOfMinute();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(32769L, chronology19);
        org.joda.time.DateTimeField dateTimeField32 = chronology19.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField33 = chronology19.weekyearOfCentury();
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 12);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(260);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean21 = dateTimeZone20.isFixed();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str26 = dateTimeFieldType25.getName();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withField(dateTimeFieldType25, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.property(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getDurationType();
        mutableDateTime18.add(durationFieldType33, 1900);
        mutableDateTime18.addDays(24358552);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime18.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfDay" + "'", str26, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 1970, dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localDate8.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 1970, dateTimeZone12);
        int int14 = localDate13.getDayOfWeek();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.Days days16 = period15.toStandardDays();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadablePeriod) days16);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay18.plusMonths(600100);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(32770);
        java.lang.Object obj29 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34, periodType35);
        int int37 = dateMidnight33.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight33.getZone();
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(obj29, dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter26.withZone(dateTimeZone38);
        org.joda.time.Interval interval43 = yearMonthDay18.toInterval(dateTimeZone38);
        boolean boolean44 = interval17.isAfter((org.joda.time.ReadableInterval) interval43);
        java.lang.Class<?> wildcardClass45 = interval17.getClass();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8380800000L + "'", long5 == 8380800000L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        int int3 = timeZone1.getOffset(28927206000L);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        calendar4.setFirstDayOfWeek(13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514166515,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=13,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=6,MILLISECOND=515,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        org.joda.time.DateMidnight dateMidnight23 = property19.withMinimumValue();
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withWeekyear((int) '#');
        int int27 = dateMidnight26.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusMonths(23);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = property5.addToCopy(1922);
        int int10 = property5.get();
        org.joda.time.TimeOfDay timeOfDay11 = property5.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay12 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = timeOfDay12.getFieldType(26147141);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26147141");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        boolean boolean8 = localDate6.equals((java.lang.Object) 8);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekyear(25720043);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime9.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        long long5 = dateTimeZone1.nextTransition(2022L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone9);
        int int12 = localDateTime11.getMillisOfSecond();
        int int13 = localDateTime11.getMonthOfYear();
        java.util.Date date14 = localDateTime11.toDate();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((-1));
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) '4');
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.minus((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withWeekyear((-292275054));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusYears(0);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        boolean boolean32 = localDateTime21.equals((java.lang.Object) mutableDateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.Period period43 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period45 = period43.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(1L, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plusDays((int) 'a');
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period43, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology52);
        long long57 = chronology52.add(0L, 1970L, (int) (short) 0);
        boolean boolean58 = dateTimeFieldType34.isSupported(chronology52);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(315532800086L, chronology52);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod59, 9);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime21.minusMillis(32772);
        boolean boolean64 = dateTimeZone1.isLocalDateTimeGap(localDateTime63);
        int int65 = localDateTime63.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundHalfCeilingCopy();
        org.joda.time.Interval interval68 = property66.toInterval();
        long long69 = interval68.getEndMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2022L + "'", long5 == 2022L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3147328 + "'", int65 == 3147328);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 86400000L + "'", long69 == 86400000L);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(0);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime13.getZone();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(8380800000L, chronology1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        int int4 = localTime2.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime2.plusSeconds((int) (byte) -1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTime dateTime14 = localTime7.toDateTimeToday(dateTimeZone13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514166700,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=6,MILLISECOND=700,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight12 = localDate2.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1970, dateTimeZone14);
        int int16 = localDate15.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate15.plusYears(1970);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate25 = localDate2.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.Chronology chronology26 = localDate2.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology26);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514166721,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=6,MILLISECOND=721,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3940" + "'", str22, "3940");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 4, chronology1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withMinuteOfHour(7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusSeconds(59);
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.Period period21 = period18.minusSeconds(551);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 957);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusSeconds(58);
        java.lang.Object obj26 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31, periodType32);
        int int34 = dateMidnight30.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight30.getZone();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj26, dateTimeZone35);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((int) '#');
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime45 = localTime43.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.millis();
        boolean boolean47 = localTime43.isSupported(durationFieldType46);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 0);
        int int50 = localTime49.getMinuteOfHour();
        boolean boolean51 = localTime43.equals((java.lang.Object) localTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean53 = localTime43.isSupported(dateTimeFieldType52);
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType52.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType52.getRangeDurationType();
        boolean boolean56 = dateTime41.isSupported(dateTimeFieldType52);
        org.joda.time.TimeOfDay.Property property57 = timeOfDay23.property(dateTimeFieldType52);
        int int58 = property57.getMaximumValue();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 999 + "'", int58 == 999);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(100);
        org.joda.time.Period period21 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = dateTime24.toLocalDateTime();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear(11);
        org.joda.time.Duration duration28 = period21.toDurationFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        java.lang.String str38 = periodType37.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateMidnight33, periodType37);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMillis(100);
        org.joda.time.Period period47 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = dateTime50.toLocalDateTime();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear(11);
        org.joda.time.Duration duration54 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime43.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime43.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.yearOfCentury();
        boolean boolean59 = duration28.equals((java.lang.Object) localDateTime57);
        long long60 = duration28.getMillis();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration28, 6);
        int int63 = localDateTime62.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withMonthOfYear((-1399));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1399 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1965, 9, 1, 100]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "YearWeekDayNoWeeks" + "'", str38, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1965 + "'", int63 == 1965);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        org.joda.time.Period period11 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period13 = period11.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.plusDays((int) 'a');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period11, (org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology20);
        long long25 = chronology20.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.DurationField durationField27 = chronology20.months();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.millisOfSecond();
        org.joda.time.MonthDay monthDay29 = new org.joda.time.MonthDay(0L, chronology20);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 86399999, (long) 1970, chronology20);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.copy();
        int int32 = mutablePeriod31.getMillis();
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-29) + "'", int32 == (-29));
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean47 = dateTimeZone46.isFixed();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str52 = dateTimeFieldType51.getName();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withField(dateTimeFieldType51, (int) (short) 10);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        int int58 = dateTimeZone56.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime59 = localDateTime48.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter2.withZone(dateTimeZone56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withDefaultYear(985);
        java.lang.Appendable appendable64 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean67 = dateTimeZone66.isFixed();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone66);
        int int69 = localDateTime68.getMillisOfSecond();
        int int70 = localDateTime68.getMonthOfYear();
        java.util.Date date71 = localDateTime68.toDate();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMinutes(200);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withWeekyear(19);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusMillis(71);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime81.withYearOfEra(1946);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable64, (org.joda.time.ReadablePartial) localDateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "minuteOfDay" + "'", str52, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 100 + "'", int69 == 100);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        int int12 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (byte) 0);
        org.joda.time.Period period17 = period15.minusSeconds((int) '#');
        org.joda.time.Period period18 = period15.toPeriod();
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period15, (int) (short) 1);
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime9.getRoundingField();
        org.joda.time.Period period32 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period34 = period32.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(1L, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.plusDays((int) 'a');
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period32, (org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology41);
        long long46 = chronology41.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.dayOfWeek();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 14, chronology41);
        org.joda.time.Chronology chronology49 = chronology41.withUTC();
        org.joda.time.Period period50 = new org.joda.time.Period((-61851599998030L), chronology41);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime9.toMutableDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime9.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNull(dateTimeField21);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        java.lang.Character[] charArray6 = new java.lang.Character[] { 'x', ' ', 'x', ' ', '4', 'x' };
        java.util.LinkedHashSet<java.lang.Character> charSet7 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet7, charArray6);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        boolean boolean16 = charSet12.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14);
        boolean boolean17 = charSet12.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator18 = charSet12.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        boolean boolean23 = charSet12.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        boolean boolean24 = charSet7.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray41 = new java.lang.String[] { "1", "2022", "YearWeekDayNoWeeks", "3940", "japonais (Japon)", "\u30d5\u30e9\u30f3\u30b9\u8a9e", "January", "\u30d5\u30e9\u30f3\u30b9\u8a9e", "\u30d5\u30e9\u30f3\u30b9\u8a9e", "2022-02-22", "\u30d5\u30e9\u30f3\u30b9\u8a9e", "January", "fra" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = charSet7.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26);
        boolean boolean47 = charSet7.add((java.lang.Character) 'u');
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (France)" + "'", str11, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(charSpliterator18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(13, 252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayLanguage();
        int int11 = property7.getMaximumShortTextLength(locale9);
        java.lang.String str12 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u5fb7\u6587" + "'", str10, "\u5fb7\u6587");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str3 = monthDay0.toString("32");
        org.joda.time.MonthDay monthDay5 = monthDay0.minusMonths(53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = monthDay0.toString("0570-01-01T00:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "32" + "'", str3, "32");
        org.junit.Assert.assertNotNull(monthDay5);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear((int) '4');
        int int11 = localDateTime8.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMonths((int) 'a');
        boolean boolean21 = localDateTime8.equals((java.lang.Object) localDateTime18);
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = localDateTime18.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        java.lang.String str12 = property7.getAsString();
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        org.joda.time.TimeOfDay timeOfDay14 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(946684800000L);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        int int6 = dateTimeZone4.getStandardOffset((long) 5);
        java.lang.String str8 = dateTimeZone4.getShortName(100L);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str12 = dateTimeZone4.getName((long) (short) 0, locale11);
        int int14 = dateTimeZone4.getStandardOffset((long) 292278994);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(9223371986371200000L, dateTimeZone4);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(dateTimeZone4);
        org.joda.time.DateTime dateTime17 = timeOfDay1.toDateTimeToday(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.Period period14 = period12.plusMonths((int) ' ');
        org.joda.time.Period period16 = period12.plusSeconds((-21));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((long) 4, chronology1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withMinuteOfHour(7);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusMinutes((int) '#');
        int int9 = timeOfDay8.size();
        org.joda.time.LocalTime localTime10 = timeOfDay8.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11, periodType12);
        mutablePeriod13.addMillis((int) '4');
        int int16 = mutablePeriod13.size();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        int int21 = dateTime19.getYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = property29.setCopy(180);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology37);
        org.joda.time.Interval interval39 = interval38.toInterval();
        long long40 = interval38.getEndMillis();
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval38);
        long long42 = interval38.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 11L + "'", long42 == 11L);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(dateTimeZone0);
        int int2 = timeOfDay1.getMinuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Period period10 = interval3.toPeriod(periodType8);
        org.joda.time.Duration duration11 = interval3.toDuration();
        org.joda.time.Interval interval13 = interval3.withStartMillis(0L);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        java.lang.String str17 = periodType16.getName();
        org.joda.time.PeriodType periodType18 = periodType16.withDaysRemoved();
        int int19 = periodType16.size();
        org.joda.time.PeriodType periodType20 = periodType16.withDaysRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now(chronology39);
        long long44 = chronology39.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology39);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) 570, chronology39);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1970, periodType20, chronology39);
        org.joda.time.DurationField durationField49 = chronology39.weekyears();
        org.joda.time.Period period50 = new org.joda.time.Period((java.lang.Object) interval13, chronology39);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.hourOfHalfday();
        int int53 = dateTimeField51.get(227208238650575000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str5, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "YearWeekDayNoWeeks" + "'", str17, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.monthOfYear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfCeilingCopy();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("de_DE");
        java.lang.String str28 = property24.getAsShortText(locale27);
        java.lang.String str29 = locale27.getDisplayScript();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Feb" + "'", str28, "Feb");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusHours(26);
        org.joda.time.LocalDateTime.Property property48 = localDateTime43.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52, periodType53);
        int int55 = dateMidnight52.getYear();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight52.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str62 = dateTimeFieldType61.getName();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.property(dateTimeFieldType61);
        org.joda.time.Period period65 = new org.joda.time.Period(1640995200010L);
        mutableDateTime60.add((org.joda.time.ReadablePeriod) period65, 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime43.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.LocalDateTime.Property property69 = localDateTime43.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "minuteOfDay" + "'", str62, "minuteOfDay");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod2.setMinutes(11);
        java.lang.String str5 = mutablePeriod2.toString();
        mutablePeriod2.setPeriod(569, 0, (int) (short) 1, (int) (short) 100, 31, (int) ' ', (int) (byte) -1, 985);
        mutablePeriod2.setMinutes(24358552);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT11M0.101S" + "'", str5, "PT11M0.101S");
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period2.minusSeconds((int) (byte) 0);
        org.joda.time.LocalTime localTime5 = localTime1.plus((org.joda.time.ReadablePeriod) period2);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        org.joda.time.Chronology chronology13 = null;
        mutablePeriod11.setPeriod(1L, chronology13);
        mutablePeriod11.add(100L);
        int int17 = mutablePeriod11.getYears();
        org.joda.time.LocalTime localTime18 = localTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(9);
        org.joda.time.LocalTime localTime22 = localTime20.plusMinutes((-26987479));
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfDay();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        int int3 = timeZone0.getRawOffset();
        boolean boolean4 = timeZone0.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.minusMillis(100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100L, dateTimeZone6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(dateTimeZone6);
        int int10 = dateTimeZone6.getOffsetFromLocal((long) 570);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) "2022", dateTimeZone6);
        org.joda.time.DateTime dateTime12 = dateTime1.withZoneRetainFields(dateTimeZone6);
        org.joda.time.Period period21 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period23 = period21.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusDays((int) 'a');
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology30);
        long long35 = chronology30.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology30);
        org.joda.time.DurationField durationField37 = chronology30.months();
        org.joda.time.DurationField durationField38 = chronology30.seconds();
        org.joda.time.DurationField durationField39 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology30.yearOfCentury();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology30);
        boolean boolean42 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime2 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay1.year();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = property4.getAsText(locale5);
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime9 = yearMonthDay8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay8.year();
        java.util.Locale locale12 = java.util.Locale.US;
        int int13 = property11.getMaximumShortTextLength(locale12);
        java.lang.String str14 = property4.getAsText(locale12);
        java.lang.String str15 = locale12.getLanguage();
        java.lang.String str16 = locale0.getDisplayVariant(locale12);
        java.lang.String str18 = locale0.getExtension('x');
        java.lang.Object obj19 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "de");
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(22089888000000L);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(1L, dateTimeZone6);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration4, (org.joda.time.ReadableInstant) dateMidnight7, periodType8);
        int int10 = dateMidnight7.getYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime13.copy();
        mutableDateTime13.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.dayOfMonth();
        mutableDateTime13.addSeconds(180);
        mutableDateTime13.setSecondOfMinute(12);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime13.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime13.dayOfYear();
        int int25 = mutableDateTime13.getMinuteOfDay();
        boolean boolean26 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minus((long) (short) 0);
        java.lang.Character[] charArray34 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet35 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet35, charArray34);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, dateTimeZone38);
        boolean boolean40 = dateTimeZone38.isFixed();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone38);
        boolean boolean42 = charSet35.contains((java.lang.Object) dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.plus((long) 19);
        org.joda.time.Period period47 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(100L, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime51 = dateTime50.toLocalDateTime();
        org.joda.time.DateTime dateTime53 = dateTime50.withMonthOfYear(11);
        org.joda.time.Duration duration54 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight43.withDurationAdded((org.joda.time.ReadableDuration) duration54, 59);
        org.joda.time.Duration duration57 = duration54.toDuration();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration59 = duration54.toDuration();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight3.withDurationAdded((org.joda.time.ReadableDuration) duration59, 0);
        org.joda.time.Duration duration62 = duration59.toDuration();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.MonthDay monthDay24 = new org.joda.time.MonthDay(chronology17);
        org.joda.time.DurationField durationField25 = chronology17.months();
        long long28 = durationField25.getValueAsLong(0L, (long) 292271115);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        java.lang.String str31 = periodType30.getName();
        int int32 = periodType30.size();
        org.joda.time.PeriodType periodType33 = periodType30.withMillisRemoved();
        org.joda.time.PeriodType periodType34 = periodType30.withHoursRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = new org.joda.time.Period((java.lang.Object) durationField25, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "YearWeekDayNoWeeks" + "'", str31, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        boolean boolean7 = dateTimeField6.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField6.getType();
        int int9 = dateTimeField6.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds((int) '#');
        org.joda.time.Period period5 = period2.toPeriod();
        org.joda.time.Period period6 = period5.normalizedStandard();
        int int7 = period5.getHours();
        int int8 = period5.getMinutes();
        org.joda.time.Period period10 = period5.multipliedBy(5);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = period10.getMillis();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(97372833741L);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime3 = dateTime1.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfMonth(428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 428 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset((long) 5);
        java.lang.String str5 = dateTimeZone1.getShortName(100L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        int int8 = dateTimeZone1.getOffset((-263001599986L));
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime9.addWeekyears(537);
        java.lang.Object obj12 = mutableDateTime9.clone();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2559-02-20T07:16:07.681Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2559-02-20T07:16:07.681Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2559-02-20T07:16:07.681Z");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate3, (org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate13 = localDate9.plusYears(200);
        org.joda.time.LocalDate localDate15 = localDate9.withYearOfCentury(13);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(19, (int) (byte) 1);
        long long22 = dateTimeZone19.adjustOffset((long) 2765, false);
        java.lang.String str23 = dateTimeZone19.toString();
        org.joda.time.DateTime dateTime24 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.LocalDate.Property property25 = localDate15.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514167790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=7,MILLISECOND=790,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2765L + "'", long22 == 2765L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+19:01" + "'", str23, "+19:01");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        java.util.Date date1 = new java.util.Date(75897099187200000L);
        date1.setDate(50);
        java.lang.String str4 = date1.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Jun 19 00:00:00 GMT 2407053");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "19 Jun 2407053 00:00:00 GMT" + "'", str4, "19 Jun 2407053 00:00:00 GMT");
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6, periodType7);
        int int9 = dateMidnight6.getYear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight11.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = dateMidnight17.toDateTime(dateTimeZone19);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (byte) 0);
        boolean boolean25 = dateTimeZone19.equals((java.lang.Object) period24);
        org.joda.time.PeriodType periodType26 = period24.getPeriodType();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        org.joda.time.Hours hours33 = period32.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period36 = period32.withFieldAdded(durationFieldType34, 100);
        org.joda.time.Period period45 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period47 = period45.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plusDays((int) 'a');
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period45, (org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology54);
        org.joda.time.DateTime dateTime56 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DurationField durationField57 = durationFieldType34.getField(chronology54);
        org.joda.time.DurationField durationField58 = chronology54.centuries();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(856569600000L, periodType26, chronology54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 2, (long) 32772, periodType26, chronology61);
        org.joda.time.PeriodType periodType63 = periodType26.withMonthsRemoved();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(hours33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.year();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        int int19 = dateMidnight16.getYear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight16.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        boolean boolean31 = dateMidnight16.isBefore((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = property32.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight35 = property32.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight36 = property32.roundFloorCopy();
        boolean boolean37 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime12.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = mutableDateTime12.get(dateTimeFieldType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = timeZone0.observesDaylightTime();
        timeZone0.setID("1970-01-01T06:00:00.022Z");
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        int int6 = calendar5.getWeekYear();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields(calendar8);
        calendar8.roll(0, (int) 'a');
        calendar8.clear();
        org.joda.time.YearMonthDay yearMonthDay14 = org.joda.time.YearMonthDay.fromCalendarFields(calendar8);
        int int15 = calendar5.compareTo(calendar8);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514167904,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01T06:00:00.022Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=7,MILLISECOND=904,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(260, 200, 46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 200 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.setDayOfMonth(25986977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25986977 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.secondOfDay();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology17);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology17);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(366, (int) '#', 30, 8, (int) 'u', (int) 'x', 1200000, 6, periodType8);
        int[] intArray10 = mutablePeriod9.getValues();
        mutablePeriod9.setMillis(533);
        int int13 = mutablePeriod9.getMillis();
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[366, 35, 30, 8, 117, 120, 1200000, 6]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 533 + "'", int13 == 533);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime17.withField(dateTimeFieldType20, (int) 'u');
        java.lang.String str24 = dateTimeFieldType20.toString();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        boolean boolean44 = dateTimeFieldType20.isSupported(chronology42);
        boolean boolean45 = localDate7.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate.Property property46 = localDate7.weekyear();
        int int47 = localDate7.getDayOfYear();
        org.joda.time.DateTime dateTime48 = localDate7.toDateTimeAtStartOfDay();
        int int49 = localDate7.getYearOfEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfDay" + "'", str21, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minuteOfDay" + "'", str24, "minuteOfDay");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) 100, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusYears(0);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths(2765);
        java.lang.Character[] charArray9 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet10 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet10, charArray9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        boolean boolean15 = dateTimeZone13.isFixed();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone13);
        boolean boolean17 = charSet10.contains((java.lang.Object) dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((long) 19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(100L, dateTimeZone22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone22);
        int int26 = dateTimeZone22.getOffsetFromLocal((long) 570);
        org.joda.time.DateTime dateTime27 = dateMidnight18.toDateTime(dateTimeZone22);
        org.joda.time.Interval interval28 = yearMonthDay2.toInterval(dateTimeZone22);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 10);
        int int2 = localTime1.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(32770);
        java.lang.Object obj7 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        int int15 = dateMidnight11.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj7, dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter4.withZone(dateTimeZone16);
        java.util.Locale locale21 = dateTimeFormatter20.getLocale();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withPivotYear(366);
        java.lang.StringBuffer stringBuffer25 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        int int35 = dateMidnight32.getYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight37, readableDuration38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, readableDuration40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight37.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47, periodType48);
        int int50 = dateMidnight46.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = dateMidnight46.getZone();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight43.withZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 1, dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (-15994), dateTimeZone51);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone57);
        calendar59.clear();
        java.util.Date date61 = calendar59.getTime();
        java.time.Instant instant62 = calendar59.toInstant();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(1L, dateTimeZone65);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableDuration63, (org.joda.time.ReadableInstant) dateMidnight66, periodType67);
        int int69 = dateMidnight66.getYear();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight66.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight71.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime72.copy();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime72.dayOfMonth();
        boolean boolean76 = calendar59.before((java.lang.Object) property75);
        org.joda.time.MutableDateTime mutableDateTime78 = property75.add((int) (byte) 100);
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone82 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean83 = timeZone80.hasSameRules(timeZone82);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone82);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) (byte) 1, dateTimeZone85);
        mutableDateTime78.setZone(dateTimeZone85);
        mutableDateTime54.setZone(dateTimeZone85);
        java.lang.String str90 = dateTimeZone85.getNameKey(962487036000L);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime(0L, dateTimeZone85);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter24.printTo(stringBuffer25, (org.joda.time.ReadableInstant) dateTime91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(timeZone80);
// flaky:         org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1645514168111,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=111,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str6 = dateTimeFieldType5.getName();
        org.joda.time.DateTime dateTime8 = dateTime2.withField(dateTimeFieldType5, (int) 'u');
        java.lang.String str9 = dateTimeFieldType5.toString();
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        boolean boolean29 = dateTimeFieldType5.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        org.joda.time.DurationField durationField31 = dateTimeField30.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType32 = durationField31.getType();
        org.joda.time.Period period41 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period43 = period41.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.plusDays((int) 'a');
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period41, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology50);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology50.getZone();
        org.joda.time.DurationField durationField54 = durationFieldType32.getField(chronology50);
        long long57 = durationField54.getDifferenceAsLong((long) 863, (long) 2016);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "minuteOfDay" + "'", str6, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder2.setWeekDate(292278994, (int) (byte) 1, (-292275054));
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean13 = timeZone9.observesDaylightTime();
        java.util.Calendar.Builder builder14 = builder2.setTimeZone(timeZone9);
        java.util.Calendar.Builder builder18 = builder14.setTimeOfDay(1970, 6, 100);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.time.ZoneId zoneId21 = timeZone19.toZoneId();
        java.util.Calendar.Builder builder22 = builder18.setTimeZone(timeZone19);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.time.ZoneId zoneId25 = timeZone23.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        boolean boolean27 = timeZone19.hasSameRules(timeZone23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime29 = yearMonthDay28.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay28.year();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = property31.getAsText(locale32);
        org.joda.time.YearMonthDay yearMonthDay35 = property31.setCopy(2);
        org.joda.time.DateTimeField dateTimeField36 = property31.getField();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41, periodType42);
        int int44 = dateMidnight41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(1L, dateTimeZone49);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableDuration47, (org.joda.time.ReadableInstant) dateMidnight50, periodType51);
        int int53 = dateMidnight50.getYear();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withDayOfMonth((int) (byte) 10);
        boolean boolean56 = dateMidnight41.isBefore((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight55.monthOfYear();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        int int59 = property57.getMaximumShortTextLength(locale58);
        java.lang.String str60 = property57.getAsString();
        java.lang.String str61 = property57.getAsText();
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period(readableDuration65, (org.joda.time.ReadableInstant) dateMidnight68, periodType69);
        int int71 = dateMidnight68.getYear();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight68.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(1L, dateTimeZone76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77, periodType78);
        int int80 = dateMidnight77.getYear();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight77.withDayOfMonth((int) (byte) 10);
        boolean boolean83 = dateMidnight68.isBefore((org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.DateMidnight.Property property84 = dateMidnight82.monthOfYear();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        int int86 = property84.getMaximumShortTextLength(locale85);
        java.lang.String str87 = locale63.getDisplayLanguage(locale85);
        java.util.Locale.setDefault(locale63);
        int int89 = property57.getMaximumTextLength(locale63);
        java.lang.String str90 = dateTimeField36.getAsText((long) 32769, locale63);
        java.lang.String str91 = locale63.getISO3Language();
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone23, locale63);
        org.joda.time.YearMonthDay yearMonthDay93 = org.joda.time.YearMonthDay.fromCalendarFields(calendar92);
        int int94 = calendar92.getFirstDayOfWeek();
        calendar92.setLenient(true);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514168181,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=181,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(zoneId25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e00\u6708" + "'", str61, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fran\347ais (France)" + "'", str64, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str87, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1970" + "'", str90, "1970");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "fra" + "'", str91, "fra");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1645514168181,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=181,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfDay();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.weeks();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.minutes();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = dateTimeField8.getAsShortText((int) ' ', locale10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        boolean boolean15 = dateTimeZone13.isFixed();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.Locale locale17 = java.util.Locale.US;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate16, locale17);
        java.lang.String str20 = locale17.getScript();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale17.getDisplayCountry(locale21);
        java.util.Locale locale23 = locale17.stripExtensions();
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale17.getDisplayScript(locale24);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "32" + "'", str11, "32");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514168251,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=251,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str22, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        int int45 = dateTimeFormatter44.getDefaultYear();
        boolean boolean46 = dateTimeFormatter44.isParser();
        java.io.Writer writer47 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str55 = dateTimeFieldType54.getName();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withField(dateTimeFieldType54, (int) (short) 10);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        int int61 = dateTimeZone59.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime62 = localDateTime51.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter44.printTo(writer47, (org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2000 + "'", int45 == 2000);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "minuteOfDay" + "'", str55, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 37746, chronology20);
        mutableDateTime21.addDays(1970);
        int int24 = mutableDateTime21.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime21.add(readablePeriod25);
        int int27 = mutableDateTime21.getMinuteOfHour();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37 + "'", int24 == 37);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date8);
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) '4');
        org.joda.time.DateMidnight dateMidnight13 = localDate10.toDateMidnight();
        int int14 = dateMidnight13.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        int int10 = localTime5.get(dateTimeFieldType8);
        int int11 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime13 = localTime5.minusMillis(600100);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514168380,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=380,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 436 + "'", int10 == 436);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26168380 + "'", int11 == 26168380);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        java.util.Locale locale15 = java.util.Locale.US;
        int int16 = property14.getMaximumShortTextLength(locale15);
        java.lang.String str17 = property7.getAsText(locale15);
        java.lang.String str18 = locale15.getLanguage();
        java.lang.String str19 = locale3.getDisplayVariant(locale15);
        java.lang.String str20 = locale1.getDisplayLanguage(locale3);
        java.lang.String str21 = locale0.getDisplayCountry(locale3);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration33);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod37.setMinutes(11);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTime dateTime41 = interval40.getStart();
        org.joda.time.Duration duration42 = interval40.toDuration();
        org.joda.time.Chronology chronology43 = interval40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) locale3, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514168401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en" + "'", str18, "en");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Franz\366sisch" + "'", str20, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime8 = yearMonthDay7.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay7.year();
        java.util.Locale locale11 = java.util.Locale.US;
        int int12 = property10.getMaximumShortTextLength(locale11);
        java.lang.String str13 = property3.getAsText(locale11);
        int int14 = property3.get();
        org.joda.time.DateTimeField dateTimeField15 = property3.getField();
        long long17 = dateTimeField15.remainder(1645513852968L);
        long long20 = dateTimeField15.getDifferenceAsLong((-31535999988L), 1645514163845L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4518652968L + "'", long17 == 4518652968L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-53L) + "'", long20 == (-53L));
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.millis();
        boolean boolean5 = localTime1.isSupported(durationFieldType4);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0);
        int int8 = localTime7.getMinuteOfHour();
        boolean boolean9 = localTime1.equals((java.lang.Object) localTime7);
        org.joda.time.LocalTime localTime11 = localTime1.withMinuteOfHour(0);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (-1), dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localTime11.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(25720043);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(570);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (byte) 0);
        org.joda.time.Period period30 = period27.toPeriod();
        org.joda.time.Period period32 = period30.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime25.plus((org.joda.time.ReadablePeriod) period30);
        java.lang.String str35 = dateTime33.toString("26");
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514168453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=453,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "26" + "'", str35, "26");
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-78888), 36, 26038009, (-19045), 2775, 86390032);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableDuration2, readableInstant3);
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period16 = period14.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) 'a');
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period14, (org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology23);
        long long28 = chronology23.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology23);
        org.joda.time.DurationField durationField31 = chronology23.minutes();
        org.joda.time.DurationField durationField32 = chronology23.millis();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 26, chronology23);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((java.lang.Object) readableInstant3, chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(266, 47, chronology23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 266 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        int int22 = dateMidnight19.getYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight19.withDayOfMonth((int) (byte) 10);
        boolean boolean25 = dateMidnight10.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateTime dateTime26 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime3.withMillisOfSecond((int) 'x');
        java.lang.String str29 = localDateTime3.toString();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33, periodType34);
        int int36 = dateMidnight32.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight32.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight32.withField(dateTimeFieldType38, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.plus((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withMillis((long) 1);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight40.withWeekyear(570);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean48 = dateMidnight46.isSupported(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime3.withField(dateTimeFieldType47, 8);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType47.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.100" + "'", str29, "1970-01-01T00:00:00.100");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(durationFieldType51);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone7);
        int int10 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.millisOfDay();
        boolean boolean13 = periodType4.equals((java.lang.Object) localDateTime9);
        java.lang.Object obj14 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period25 = period23.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusDays((int) 'a');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period23, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology32);
        long long37 = chronology32.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DurationField durationField38 = chronology32.years();
        org.joda.time.DurationField durationField39 = chronology32.minutes();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(obj14, chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period41 = new org.joda.time.Period((-60526223999999L), (long) 86390, periodType4, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 60526224086");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology17);
        org.joda.time.DateTime dateTime19 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes((int) '4');
        int int24 = localDateTime23.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withSecondOfMinute(50);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.year();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusMillis(699);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        java.lang.String str8 = calendar4.getCalendarType();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate10 = property8.addToCopy((-292275054));
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.LocalDate localDate12 = property11.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfMonth(10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        java.io.IOException iOException1 = new java.io.IOException("Sat Dec 22 00:00:00 UTC 1900");
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(100L, dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withCenturyOfEra(5);
        org.joda.time.Instant instant6 = dateTime5.toInstant();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((java.lang.Object) instant6);
        org.joda.time.MutableDateTime mutableDateTime8 = instant6.toMutableDateTime();
        org.joda.time.Chronology chronology9 = instant6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 86390569, chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("\u30d5\u30e9\u30f3\u30b9\u8a9e", throwable3);
        java.io.IOException iOException5 = new java.io.IOException("minuteOfDay", (java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("\u30d5\u30e9\u30f3\u30b9\u8a9e", throwable9);
        java.io.IOException iOException11 = new java.io.IOException("minuteOfDay", (java.lang.Throwable) iOException10);
        iOException4.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException15 = new java.io.IOException("22 Feb 2022 07:14:59 GMT", (java.lang.Throwable) iOException4);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        java.lang.String str8 = timeOfDay6.toString();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.withMillisOfSecond(22);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean13 = dateTimeZone12.isFixed();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone12);
        int int15 = localDateTime14.getYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(1970);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withYear(25720043);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = timeOfDay10.compareTo((org.joda.time.ReadablePartial) localDateTime19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T00:00:00.001" + "'", str8, "T00:00:00.001");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 14, chronology18);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime27 = yearMonthDay26.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay26.year();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = property29.getAsText(locale30);
        org.joda.time.YearMonthDay yearMonthDay33 = property29.setCopy(2);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.minusMonths(570);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay33.minusYears(1922);
        boolean boolean38 = localDate25.isAfter((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 1970, dateTimeZone40);
        int int42 = localDate41.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean44 = localDate41.isSupported(dateTimeFieldType43);
        java.lang.String str45 = dateTimeFieldType43.toString();
        org.joda.time.LocalDate.Property property46 = localDate25.property(dateTimeFieldType43);
        org.joda.time.DateTime dateTime47 = localDate25.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022" + "'", str31, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "centuryOfEra" + "'", str45, "centuryOfEra");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 100, (int) '#', 0, 0, 1970, (int) '#', (int) (byte) 100, periodType8);
        org.joda.time.Period period11 = period9.withMillis(8);
        org.joda.time.Period period13 = period11.minusWeeks((int) 'x');
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMillis(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str23 = dateTimeFieldType22.getName();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withField(dateTimeFieldType22, (int) (short) 10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = localDateTime19.getFieldTypes();
        int int27 = localDateTime19.getHourOfDay();
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime19.withFieldAdded(durationFieldType28, 12);
        int int31 = mutablePeriod15.indexOf(durationFieldType28);
        boolean boolean32 = period13.isSupported(durationFieldType28);
        java.lang.String str33 = durationFieldType28.toString();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minuteOfDay" + "'", str23, "minuteOfDay");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "days" + "'", str33, "days");
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withPivotYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withDefaultYear(266);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 1970);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = dateTime4.minusYears(0);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMonths(3940);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1970, dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekyear((-1));
        boolean boolean10 = localDate8.equals((java.lang.Object) 8);
        int int11 = localDate8.getYear();
        boolean boolean12 = yearMonthDay0.equals((java.lang.Object) localDate8);
        org.joda.time.LocalDate.Property property13 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(8);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate19 = localDate15.withFieldAdded(durationFieldType17, (int) (byte) 10);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfMonth(20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str35 = dateTimeFieldType34.getName();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.property(dateTimeFieldType34);
        boolean boolean37 = localDate19.isSupported(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = localDate19.withDayOfWeek((-1331));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1331 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "minuteOfDay" + "'", str35, "minuteOfDay");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis(26);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.hourOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay9.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromCalendarFields(calendar20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate15, (org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate.Property property23 = localDate15.weekyear();
        org.joda.time.LocalDate localDate24 = property23.withMaximumValue();
        org.joda.time.LocalDate.Property property25 = localDate24.yearOfEra();
        org.joda.time.LocalDate localDate27 = localDate24.minusDays(0);
        org.joda.time.LocalDate localDate29 = localDate27.plusMonths((-101));
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33, periodType34);
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod35.setPeriod(1L, chronology37);
        mutablePeriod35.add(100L);
        int int41 = mutablePeriod35.getYears();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.millis();
        mutablePeriod35.add(durationFieldType42, 6);
        org.joda.time.PeriodType periodType45 = mutablePeriod35.getPeriodType();
        org.joda.time.PeriodType periodType46 = periodType45.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType48 = periodType46.getFieldType((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay9, (org.joda.time.ReadablePartial) localDate27, periodType46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514168966,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=8,MILLISECOND=966,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType48);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        org.joda.time.Hours hours6 = period5.toStandardHours();
        org.joda.time.Period period8 = period5.multipliedBy((int) (short) 100);
        org.joda.time.Period period9 = period8.negated();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property14.addCopy((int) 'u');
        org.joda.time.LocalTime localTime18 = property14.addCopy((long) 292278993);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        boolean boolean20 = period9.equals((java.lang.Object) property19);
        org.joda.time.LocalTime localTime21 = property19.withMinimumValue();
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Weeks weeks1 = period0.toStandardWeeks();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        int int7 = dateMidnight3.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight3.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight3.withField(dateTimeFieldType9, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight3.withCenturyOfEra(26);
        int int14 = dateMidnight13.getCenturyOfEra();
        org.joda.time.DateMidnight.Property property15 = dateMidnight13.dayOfYear();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.dayOfYear();
        org.joda.time.Chronology chronology17 = dateMidnight13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((-15994L), chronology17);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26 + "'", int14 == 26);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str2 = property1.getName();
        int int3 = property1.getMaximumValueOverall();
        org.joda.time.DurationField durationField4 = property1.getRangeDurationField();
        org.joda.time.MonthDay monthDay6 = property1.addWrapFieldToCopy(12);
        org.joda.time.MonthDay monthDay7 = property1.getMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = monthDay7.getFieldTypes();
        java.lang.String str9 = monthDay7.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfMonth" + "'", str2, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(monthDay6);
        org.junit.Assert.assertNotNull(monthDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "--02-22" + "'", str9, "--02-22");
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMonths(292278993);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(16);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.secondOfMinute();
        int int11 = localDateTime7.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.MonthDay monthDay1 = new org.joda.time.MonthDay((-1104573599990L));
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, readableDuration9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        long long15 = dateTimeZone13.nextTransition(379987200000L);
        org.joda.time.DateTime dateTime16 = dateTime8.toDateTime(dateTimeZone13);
        org.joda.time.DateTime.Property property17 = dateTime8.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 379987200000L + "'", long15 == 379987200000L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfSecond();
        org.joda.time.Chronology chronology26 = chronology17.withUTC();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime37.copy();
        mutableDateTime37.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime45 = localTime43.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.millis();
        boolean boolean47 = localTime43.isSupported(durationFieldType46);
        mutableDateTime37.add(durationFieldType46, (-1));
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        mutableDateTime37.setZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(dateTimeZone51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) chronology26, dateTimeZone51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 26017869);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property4.roundCeilingCopy();
        java.lang.String str7 = property4.getAsString();
        org.joda.time.LocalTime localTime8 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime9 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        boolean boolean46 = dateTimeFormatter2.isParser();
        java.util.Locale locale47 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withDefaultYear(52);
        org.joda.time.MonthDay monthDay51 = new org.joda.time.MonthDay((-1813157425000L));
        org.joda.time.MonthDay monthDay53 = monthDay51.plusMonths(71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTimeFormatter49.print((org.joda.time.ReadablePartial) monthDay53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(monthDay53);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property4.addCopy((int) 'u');
        org.joda.time.LocalTime localTime8 = property4.addCopy((long) 292278993);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime26 = localTime24.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        boolean boolean28 = localTime24.isSupported(durationFieldType27);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0);
        int int31 = localTime30.getMinuteOfHour();
        boolean boolean32 = localTime24.equals((java.lang.Object) localTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean34 = localTime24.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getRangeDurationType();
        mutableDateTime18.add(durationFieldType35, 180);
        org.joda.time.LocalTime localTime39 = localTime8.withFieldAdded(durationFieldType35, 0);
        int[] intArray40 = localTime8.getValues();
        org.joda.time.Chronology chronology41 = localTime8.getChronology();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[9, 11, 8, 993]");
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(600100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(0);
        int[] intArray8 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis(71);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusWeeks(37746);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMinutes(625);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-598130, 1, 1, 100]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.Period period12 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period14 = period12.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.plusDays((int) 'a');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(chronology21);
        long long26 = chronology21.add(0L, 1970L, (int) (short) 0);
        boolean boolean27 = dateTimeFieldType3.isSupported(chronology21);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(315532800086L, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.yearOfEra();
        org.joda.time.MonthDay monthDay30 = org.joda.time.MonthDay.now(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.millisOfSecond();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) 86, (long) 17040662, chronology21);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36, periodType37);
        int int39 = dateMidnight36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime42.year();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.year();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        int int47 = mutableDateTime46.getDayOfWeek();
        boolean boolean48 = interval32.contains((org.joda.time.ReadableInstant) mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(monthDay30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod5 = period2.toMutablePeriod();
        mutablePeriod5.setPeriod((long) 100);
        mutablePeriod5.addSeconds(0);
        mutablePeriod5.setMinutes(25926723);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(mutablePeriod5);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType4 = periodType3.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.Period period15 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period17 = period15.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period15, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology24);
        long long29 = chronology24.add(0L, 1970L, (int) (short) 0);
        boolean boolean30 = dateTimeFieldType6.isSupported(chronology24);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(315532800086L, chronology24);
        org.joda.time.DurationField durationField32 = chronology24.centuries();
        org.joda.time.DurationField durationField33 = chronology24.days();
        org.joda.time.DurationField durationField34 = chronology24.days();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 11, 11L, periodType3, chronology24);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) 438, chronology24);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = localTime36.getValue(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight12 = localDate2.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1970, dateTimeZone14);
        int int16 = localDate15.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate15.plusYears(1970);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate25 = localDate2.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1970, dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localDate28.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1970, dateTimeZone32);
        int int34 = localDate33.getDayOfWeek();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate28, (org.joda.time.ReadablePartial) localDate33);
        org.joda.time.Days days36 = period35.toStandardDays();
        int int37 = period35.getWeeks();
        org.joda.time.LocalDate localDate38 = localDate2.minus((org.joda.time.ReadablePeriod) period35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514169471,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=9,MILLISECOND=471,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3940" + "'", str22, "3940");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(days36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear(0);
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withSecondOfMinute(0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate10 = localDate7.plusWeeks(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate10.toString("java.util.GregorianCalendar[time=1645513854605,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=54,MILLISECOND=605,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval9.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Period period12 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period18.withFieldAdded(durationFieldType20, 100);
        org.joda.time.Period period24 = period12.withFieldAdded(durationFieldType20, (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime1.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime27 = dateTime1.minusDays(86);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight21 = property19.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight22 = property19.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology17.weeks();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.plusMillis(5000);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(1645513750512L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(100L, dateTimeZone33);
        boolean boolean35 = dateTimeZone33.isFixed();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((java.lang.Object) localTime31, dateTimeZone33);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.plusHours((int) (short) 0);
        int int42 = timeOfDay41.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property43 = timeOfDay41.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay44 = property43.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusMinutes(1);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod51.addHours(0);
        mutablePeriod51.addMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(1L, dateTimeZone58);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration56, (org.joda.time.ReadableInstant) dateMidnight59, periodType60);
        int int62 = dateMidnight59.getYear();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight59.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight64.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        org.joda.time.DateTime dateTime68 = mutableDateTime65.toDateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight(1L, dateTimeZone71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration69, (org.joda.time.ReadableInstant) dateMidnight72, periodType73);
        int int75 = dateMidnight72.getYear();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight72.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime78 = dateMidnight77.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone80 = dateTimeZone79.toTimeZone();
        org.joda.time.DateTime dateTime81 = mutableDateTime78.toDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime81.toDateTime();
        mutablePeriod51.setPeriod((org.joda.time.ReadableInstant) mutableDateTime65, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property85 = dateTime81.property(dateTimeFieldType84);
        int int86 = timeOfDay44.get(dateTimeFieldType84);
        org.joda.time.Chronology chronology87 = null;
        boolean boolean88 = dateTimeFieldType84.isSupported(chronology87);
        int int89 = localTime31.get(dateTimeFieldType84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay91 = timeOfDay27.withField(dateTimeFieldType84, (-19045));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1970 + "'", int75 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        org.joda.time.DateTime dateTime23 = dateTime17.withField(dateTimeFieldType20, (int) 'u');
        java.lang.String str24 = dateTimeFieldType20.toString();
        org.joda.time.Period period33 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period35 = period33.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.plusDays((int) 'a');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology42);
        boolean boolean44 = dateTimeFieldType20.isSupported(chronology42);
        boolean boolean45 = localDate7.isSupported(dateTimeFieldType20);
        org.joda.time.LocalDate.Property property46 = localDate7.weekyear();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        org.joda.time.LocalDate localDate48 = property46.withMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfDay" + "'", str21, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minuteOfDay" + "'", str24, "minuteOfDay");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-22T07:14:16.897", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight15, readableDuration16);
        boolean boolean18 = localDate6.equals((java.lang.Object) readableDuration16);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime28.copy();
        mutableDateTime28.setMillis((long) (byte) 10);
        int int33 = mutableDateTime28.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        boolean boolean37 = dateTimeZone35.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone35);
        long long42 = dateTimeZone35.convertLocalToUTC((long) (short) 0, false, (long) 3);
        org.joda.time.DateTime dateTime43 = localDate6.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.Chronology chronology44 = localDate6.getChronology();
        org.joda.time.LocalDate localDate46 = localDate6.minusWeeks(103);
        org.joda.time.LocalDate.Property property47 = localDate46.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("months");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder6 = builder3.setExtension('u', "0120-01-01");
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(1L, dateTimeZone9);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration7, (org.joda.time.ReadableInstant) dateMidnight10, periodType11);
        int int13 = dateMidnight10.getYear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime16.copy();
        int int19 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.add((long) 12);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        int int30 = dateMidnight27.getYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, readableDuration35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = dateMidnight38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime42, chronology43);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withSecondOfMinute(53);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("YearMonthDayTime");
        java.lang.String str50 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) timeOfDay46, (int) (short) 0, locale49);
        java.util.Locale.Builder builder51 = builder3.setLocale(locale49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder53 = builder3.addUnicodeLocaleAttribute("3");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 3 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime3 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.Date date4 = dateTime3.toDate();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = dateTime3.withZone(dateTimeZone5);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = dateTimeZone5.getShortName((long) 4, locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) 3, (long) 20, dateTimeZone5);
        java.lang.String str12 = dateTimeZone5.getNameKey((long) 147);
        boolean boolean14 = dateTimeZone5.isStandardOffset(1645513883833L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime6 = property4.withMaximumValue();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period18 = period16.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.plusDays((int) 'a');
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period16, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology25);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(347155199899L, chronology25);
        org.joda.time.LocalTime localTime32 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod30, 26038009);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        int int5 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.millisOfDay();
        java.lang.String str7 = property6.getName();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "millisOfDay" + "'", str7, "millisOfDay");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.joda.time.Period period1 = org.joda.time.Period.months(344);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusYears(30);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.withYear((int) (short) 0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(1969);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        int int16 = localDateTime15.getMillisOfSecond();
        int int17 = localDateTime15.getMonthOfYear();
        java.util.Date date18 = localDateTime15.toDate();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        boolean boolean37 = dateMidnight22.isBefore((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateTime dateTime38 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime15.withMillisOfSecond((int) 'x');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        int int43 = localDateTime40.getValue(1);
        int int44 = localDateTime40.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withWeekyear(30);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = localDate9.compareTo((org.joda.time.ReadablePartial) localDateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.US;
        int int5 = property3.getMaximumShortTextLength(locale4);
        int int6 = property3.getMaximumValueOverall();
        java.lang.String str7 = property3.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay9 = property3.setCopy(86);
        org.joda.time.Interval interval10 = yearMonthDay9.toInterval();
        int int11 = yearMonthDay9.getYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone13);
        int int16 = localDateTime15.getMillisOfSecond();
        int int17 = localDateTime15.getMonthOfYear();
        java.util.Date date18 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMinutes(200);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.year();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        int int30 = localDateTime29.getYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusDays(1970);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(1L, dateTimeZone35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration33, (org.joda.time.ReadableInstant) dateMidnight36, periodType37);
        int int39 = dateMidnight36.getYear();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime42.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str46 = dateTimeFieldType45.getName();
        mutableDateTime44.set(dateTimeFieldType45, 5);
        org.joda.time.LocalDateTime.Property property49 = localDateTime29.property(dateTimeFieldType45);
        int int50 = localDateTime22.get(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay9.withField(dateTimeFieldType45, (-90));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022" + "'", str7, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86 + "'", int11 == 86);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "minuteOfDay" + "'", str46, "minuteOfDay");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        mutablePeriod10.addSeconds(5);
        mutablePeriod10.setPeriod((long) 70);
        org.joda.time.format.PeriodFormatter periodFormatter15 = null;
        java.lang.String str16 = mutablePeriod10.toString(periodFormatter15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Interval interval22 = interval20.withDurationBeforeEnd(readableDuration21);
        mutablePeriod10.add((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Interval interval25 = interval20.withEndMillis(32769L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 1970, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight32, readableDuration33, periodType34);
        int int36 = dateMidnight32.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = dateMidnight32.getZone();
        org.joda.time.DateMidnight dateMidnight38 = org.joda.time.DateMidnight.now(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone37);
        org.joda.time.Interval interval40 = localDate28.toInterval(dateTimeZone37);
        boolean boolean42 = interval40.contains((long) 10);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        java.lang.String str45 = periodType44.getName();
        org.joda.time.PeriodType periodType46 = periodType44.withDaysRemoved();
        org.joda.time.Period period47 = interval40.toPeriod(periodType44);
        org.joda.time.Interval interval48 = interval20.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(100L, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property56 = dateTime53.minuteOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundHalfCeilingCopy();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType61 = periodType60.withWeeksRemoved();
        java.lang.String str62 = periodType61.getName();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(131487300000L, periodType61);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, readableInstant58, periodType61);
        org.joda.time.Interval interval65 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.070S" + "'", str16, "PT0.070S");
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "YearWeekDayNoWeeks" + "'", str45, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "YearWeekDayNoWeeks" + "'", str62, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(interval65);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.parse("T07:15:54.010");
        org.junit.Assert.assertNotNull(dateMidnight1);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond(70);
        int int8 = localDateTime7.getHourOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.centuryOfEra();
        int int10 = property9.get();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMaximumValue();
        java.util.Date date12 = localDateTime11.toDate();
        int int13 = localDateTime11.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Jan 01 00:00:00 GMT 292278970");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond(70);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusDays(25834);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusWeeks(25986);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTime dateTime10 = property7.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) (-1));
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded(readableDuration23, 1970);
        int int26 = property14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean27 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property28 = dateTime10.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        int int35 = dateMidnight32.getYear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime38.copy();
        int int41 = mutableDateTime38.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.weekyear();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add((long) 12);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfCentury();
        long long46 = property45.remainder();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime49 = property45.add(26);
        long long50 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.DateTime dateTime52 = property28.addWrapFieldToCopy((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1296000000L + "'", long46 == 1296000000L);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-756335508L) + "'", long50 == (-756335508L));
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.LocalTime localTime7 = dateTime4.toLocalTime();
        int int8 = dateTime4.getMonthOfYear();
        org.joda.time.LocalTime localTime9 = dateTime4.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        int int6 = localDateTime5.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDateTime5.getValue(17);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 17");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 200 + "'", int6 == 200);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.DateTime dateTime16 = dateTime10.withField(dateTimeFieldType13, (int) 'u');
        java.lang.String str17 = dateTimeFieldType13.toString();
        org.joda.time.LocalTime.Property property18 = localTime7.property(dateTimeFieldType13);
        org.joda.time.LocalTime localTime20 = localTime7.minusMinutes((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localTime7.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514170374,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=10,MILLISECOND=374,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfDay" + "'", str14, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "minuteOfDay" + "'", str17, "minuteOfDay");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(chronology0);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withHourOfDay(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DurationField durationField26 = chronology18.minutes();
        org.joda.time.DurationField durationField27 = chronology18.millis();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 26, chronology18);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(100L, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(5);
        org.joda.time.Period period37 = new org.joda.time.Period(31536000000L, 1640995200010L);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(1L, dateTimeZone41);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration39, (org.joda.time.ReadableInstant) dateMidnight42, periodType43);
        org.joda.time.Hours hours45 = period44.toStandardHours();
        org.joda.time.Period period47 = period44.multipliedBy((int) (short) 100);
        org.joda.time.Period period48 = period37.withFields((org.joda.time.ReadablePeriod) period47);
        int[] intArray51 = chronology18.get((org.joda.time.ReadablePeriod) period48, (long) 59, (-1813157425000L));
        org.joda.time.Period period53 = period48.withMillis(86340);
        org.joda.time.Period period55 = period53.plusMinutes(600100);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-57, -5, -1, -6, -14, -50, -25, -59]");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.time.Instant instant6 = calendar4.toInstant();
        int int8 = calendar4.getActualMaximum((int) (short) 1);
        calendar4.setFirstDayOfWeek(0);
        calendar4.set(15, 765, (-292275054), 26, 428);
        calendar4.set(569, 533, (int) (short) 0, 736, 0, 25926723);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.add(181812118, 438);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-42780982077000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=4,ERA=1,YEAR=614,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=26,DAY_OF_YEAR=116,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=52,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278994 + "'", int8 == 292278994);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = localDate14.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        boolean boolean30 = localDate18.equals((java.lang.Object) readableDuration28);
        int int31 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate33 = localDate18.minusYears(9);
        org.joda.time.LocalDate.Property property34 = localDate33.yearOfCentury();
        org.joda.time.LocalDate localDate36 = property34.addToCopy(25833);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.JAPAN;
        int int21 = property19.getMaximumShortTextLength(locale20);
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        long long24 = durationField22.getValueAsLong((long) ' ');
        long long27 = durationField22.subtract((long) (short) 1, 5);
        long long29 = durationField22.getValueAsLong((long) (short) 1);
        long long30 = durationField22.getUnitMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-13219199999L) + "'", long27 == (-13219199999L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2629746000L + "'", long30 == 2629746000L);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((-1331));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod2.setMinutes(11);
        java.lang.String str5 = mutablePeriod2.toString();
        mutablePeriod2.setPeriod(569, 0, (int) (short) 1, (int) (short) 100, 31, (int) ' ', (int) (byte) -1, 985);
        mutablePeriod2.setPeriod(68256000000L, (long) 1922);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.plusDays((int) 'a');
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfYear(96);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.minus((long) (short) 0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateMidnight29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundFloorCopy();
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadableInstant) dateMidnight32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT11M0.101S" + "'", str5, "PT11M0.101S");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Thursday");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay4.year();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = property7.getAsText(locale8);
        org.joda.time.YearMonthDay yearMonthDay11 = property7.setCopy(2);
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        org.joda.time.YearMonthDay yearMonthDay14 = property7.addWrapFieldToCopy((int) (short) 10);
        int int15 = property7.get();
        boolean boolean16 = languageRange1.equals((java.lang.Object) property7);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfEven();
        boolean boolean13 = mutableDateTime12.isEqualNow();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear((int) (byte) -1);
        java.lang.String str23 = localDateTime21.toString("-0001-01-10");
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.era();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-0001-01-10" + "'", str23, "-0001-01-10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(chronology18);
        org.joda.time.DurationField durationField25 = chronology18.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.millisOfSecond();
        org.joda.time.Chronology chronology27 = chronology18.withUTC();
        org.joda.time.DurationField durationField28 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.year();
        org.joda.time.MonthDay monthDay30 = new org.joda.time.MonthDay(1645513750512L, chronology18);
        org.joda.time.MonthDay.Property property31 = monthDay30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        java.lang.String str2 = property1.getName();
        org.joda.time.MonthDay monthDay4 = property1.addWrapFieldToCopy(971);
        org.joda.time.DateTimeField dateTimeField5 = property1.getField();
        int int6 = property1.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfMonth" + "'", str2, "dayOfMonth");
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12, periodType13);
        mutablePeriod14.addMillis((int) '4');
        int int17 = mutablePeriod14.size();
        java.util.Locale locale18 = java.util.Locale.US;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        boolean boolean20 = mutablePeriod14.equals((java.lang.Object) calendar19);
        org.joda.time.MonthDay monthDay22 = monthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 570);
        int[] intArray26 = monthDay25.getValues();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514170728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=10,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2, 22]");
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.Instant instant27 = instant0.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology30);
        long long32 = interval31.getEndMillis();
        java.lang.String str33 = interval31.toString();
        org.joda.time.MutableInterval mutableInterval34 = interval31.toMutableInterval();
        org.joda.time.Period period35 = interval31.toPeriod();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = interval31.toPeriod(periodType36);
        org.joda.time.Duration duration39 = interval31.toDuration();
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (short) 10);
        org.joda.time.Instant instant43 = instant27.withMillis((long) 292278994);
        org.joda.time.Instant instant45 = instant43.minus((long) 570);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49, periodType50);
        int int52 = dateMidnight49.getYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight54.toMutableDateTime();
        mutableDateTime55.setMillis((long) (byte) 0);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(100L, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property66 = dateTime63.minuteOfDay();
        org.joda.time.DateTime dateTime67 = property66.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime67, readableDuration68);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean72 = dateTimeZone71.isFixed();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusMillis(100);
        org.joda.time.Period period77 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(100L, dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime81 = dateTime80.toLocalDateTime();
        org.joda.time.DateTime dateTime83 = dateTime80.withMonthOfYear(11);
        org.joda.time.Duration duration84 = period77.toDurationFrom((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime73.minus((org.joda.time.ReadableDuration) duration84);
        mutablePeriod69.setPeriod((org.joda.time.ReadableDuration) duration84);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration84, (int) (byte) 1);
        org.joda.time.Instant instant89 = instant45.plus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateTime dateTime90 = instant45.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearWeekDayNoWeeks" + "'", str25, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str33, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = property4.roundHalfEvenCopy();
        int int9 = localTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86390000 + "'", int9 == 86390000);
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(53);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        int int15 = localDate13.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 39 + "'", int15 == 39);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight14.toYearMonthDay();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        int int19 = dateTimeZone17.getStandardOffset((long) 5);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        long long28 = dateTimeZone17.getMillisKeepLocal(dateTimeZone25, (long) 100);
        java.lang.String str30 = dateTimeZone17.getName((long) 2);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay15.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514170890,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=10,MILLISECOND=890,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("months");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("en-US");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.setExtension('u', "Standard");
        java.util.Locale.Builder builder11 = builder4.setExtension('x', "gregory");
        java.util.Locale.Builder builder13 = builder4.addUnicodeLocaleAttribute("China");
        java.util.Locale.Builder builder15 = builder13.addUnicodeLocaleAttribute("February");
        java.util.Locale.Builder builder16 = builder13.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setScript("Jan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Jan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withMillisOfSecond(625);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime3.getValue(25755533);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25755533");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withWeekyear((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone23);
        int int26 = localDateTime25.getMillisOfSecond();
        int int27 = localDateTime25.getMonthOfYear();
        java.util.Date date28 = localDateTime25.toDate();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMonths(59);
        boolean boolean37 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime34);
        int int38 = localDateTime21.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime21.withYearOfEra(17);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("YearWeekDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearWeekDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.millis();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0);
        int int12 = localTime11.getMinuteOfHour();
        boolean boolean13 = localTime5.equals((java.lang.Object) localTime11);
        org.joda.time.LocalTime localTime15 = localTime5.withMinuteOfHour(0);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (-1), dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localTime15.toDateTimeToday(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(25720043);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMonths(570);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute(53);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) -1, 0, 25834, 1925, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645514171038,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=11,MILLISECOND=38,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(0, 0, (-7198030), 70, 58, 365, 25834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy(31);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property7.getFieldType();
        java.lang.String str12 = property7.getAsString();
        int int13 = property7.get();
        org.joda.time.TimeOfDay timeOfDay15 = property7.addWrapFieldToCopy(1970);
        int int16 = property7.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusHours((int) (short) 0);
        int int4 = timeOfDay3.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = property5.getTimeOfDay();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay6.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = property7.addNoWrapToCopy((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay((int) (byte) 10);
        org.joda.time.LocalTime localTime9 = localTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalTime localTime11 = localTime9.withHourOfDay(0);
        org.joda.time.LocalTime localTime13 = localTime9.plusHours((int) (byte) -1);
        int int14 = localTime9.getSecondOfMinute();
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        int int23 = dateMidnight19.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj15, dateTimeZone24);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime30 = property28.addToCopy((int) '#');
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury((int) (short) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury(0);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis(26038009);
        org.joda.time.DateTime dateTime37 = localTime9.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime5 = dateTime2.toLocalTime();
        org.joda.time.DateTime dateTime6 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime2.minusMinutes(0);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        boolean boolean16 = charSet12.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14);
        int int17 = charSet12.size();
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(1L, dateTimeZone42);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration40, (org.joda.time.ReadableInstant) dateMidnight43, periodType44);
        int int46 = dateMidnight43.getYear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight43.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight48, readableDuration49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight39.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, 2);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(100L, dateTimeZone54);
        org.joda.time.DateTime dateTime57 = dateTime55.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property60 = dateTime57.minuteOfDay();
        org.joda.time.DateTime dateTime61 = property60.roundCeilingCopy();
        org.joda.time.DateTime dateTime63 = dateTime61.minusDays(35);
        org.joda.time.Duration duration64 = mutablePeriod50.toDurationTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration65 = duration64.toDuration();
        boolean boolean66 = charSet12.equals((java.lang.Object) duration65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(100L, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime73 = dateTime71.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property74 = dateTime71.minuteOfDay();
        java.lang.String str75 = property74.getAsString();
        org.joda.time.DateTime dateTime76 = property74.roundFloorCopy();
        org.joda.time.DateTime dateTime78 = dateTime76.withWeekyear(0);
        int int79 = dateTime76.getMillisOfSecond();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime81 = dateTime8.minus((org.joda.time.ReadableDuration) duration65);
        int int82 = dateTime81.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (France)" + "'", str11, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0" + "'", str75, "0");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 19 + "'", int82 == 19);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean1 = dateTimeZone0.isFixed();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime2.setMillisOfDay(2765);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(1L, dateTimeZone7);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateMidnight8, periodType9);
        int int11 = dateMidnight8.getYear();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight13, readableDuration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, readableDuration16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight13.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight22, readableDuration23, periodType24);
        int int26 = dateMidnight22.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight22.getZone();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight19.withZoneRetainFields(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType34 = periodType33.withHoursRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, (org.joda.time.ReadableInstant) dateTime32, periodType34);
        org.joda.time.DateTime dateTime38 = dateTime32.withMillisOfDay(16799);
        int int39 = dateTime38.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Period period10 = interval3.toPeriod(periodType8);
        org.joda.time.Duration duration11 = interval3.toDuration();
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMillis(100);
        org.joda.time.Period period21 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = dateTime24.toLocalDateTime();
        org.joda.time.DateTime dateTime27 = dateTime24.withMonthOfYear(11);
        org.joda.time.Duration duration28 = period21.toDurationFrom((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime17.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1L, dateTimeZone32);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration30, (org.joda.time.ReadableInstant) dateMidnight33, periodType34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        java.lang.String str38 = periodType37.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateMidnight33, periodType37);
        org.joda.time.Instant instant40 = instant13.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology43);
        long long45 = interval44.getEndMillis();
        java.lang.String str46 = interval44.toString();
        org.joda.time.MutableInterval mutableInterval47 = interval44.toMutableInterval();
        org.joda.time.Period period48 = interval44.toPeriod();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.Period period51 = interval44.toPeriod(periodType49);
        org.joda.time.Duration duration52 = interval44.toDuration();
        org.joda.time.Instant instant54 = instant40.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) (short) 10);
        org.joda.time.Instant instant56 = instant40.withMillis((long) 292278994);
        org.joda.time.Instant instant58 = instant56.minus((long) 570);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period(readableDuration59, (org.joda.time.ReadableInstant) dateMidnight62, periodType63);
        int int65 = dateMidnight62.getYear();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight62.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight62, readableDuration68);
        org.joda.time.Period period71 = period69.withMillis(0);
        org.joda.time.Duration duration72 = period71.toStandardDuration();
        org.joda.time.Instant instant73 = instant56.plus((org.joda.time.ReadableDuration) duration72);
        boolean boolean74 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period75 = duration72.toPeriod();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str5, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "YearWeekDayNoWeeks" + "'", str38, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str46, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.LocalTime.Property property7 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property7.addNoWrapToCopy(55);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(5000);
        org.joda.time.LocalTime localTime13 = localTime9.plusSeconds(699);
        org.joda.time.Period period22 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period24 = period22.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plusDays((int) 'a');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period22, (org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology31);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(chronology31);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.minuteOfHour();
        org.joda.time.DurationField durationField38 = chronology31.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) localTime13, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        org.joda.time.Interval interval6 = interval3.withEndMillis((long) 11);
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 1970, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15, periodType16);
        int int18 = dateMidnight14.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight14.getZone();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone19);
        org.joda.time.Interval interval22 = localDate10.toInterval(dateTimeZone19);
        boolean boolean24 = interval22.contains((long) 10);
        boolean boolean25 = interval6.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29, periodType30);
        int int32 = dateMidnight29.getYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight34, readableDuration37, periodType38);
        org.joda.time.Interval interval40 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod39);
        long long41 = interval6.toDurationMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        java.lang.String str46 = periodType45.getName();
        int int47 = periodType45.size();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(10L, (long) (byte) 100, periodType45, chronology48);
        int int50 = mutablePeriod49.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray51 = mutablePeriod49.getFieldTypes();
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod49.toMutablePeriod();
        org.joda.time.Interval interval53 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod52);
        java.lang.Object obj54 = mutablePeriod52.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod52.setPeriod(47, 292278993, 38090, 42, (-52), 25976549, 13, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 12L + "'", long41 == 12L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "YearWeekDayNoWeeks" + "'", str46, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "P0D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "P0D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "P0D");
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusYears(6);
        org.joda.time.DateMidnight.Property property10 = dateMidnight7.year();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withMonthOfYear(11);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded((long) 17, 292278993);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays(1922);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = property21.getAsText(locale22);
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField24.getType();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight15.withField(dateTimeFieldType26, 2765);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusYears(86399999);
        org.joda.time.DateMidnight.Property property31 = dateMidnight28.dayOfWeek();
        int int32 = dateMidnight28.getMillisOfSecond();
        org.joda.time.DateMidnight.Property property33 = dateMidnight28.weekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8380800000L + "'", long5 == 8380800000L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        org.joda.time.Period period8 = new org.joda.time.Period(1900, 25976549, 25854993, 430, 61, 292278993, 0, (int) 'x');
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears(569);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (byte) 100, chronology1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusYears(0);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (byte) 0);
        org.joda.time.Weeks weeks8 = period7.toStandardWeeks();
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay2.minus((org.joda.time.ReadablePeriod) weeks8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusMonths(569);
        org.joda.time.Period period21 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period23 = period21.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(1L, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plusDays((int) 'a');
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology30);
        long long35 = chronology30.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology30);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) 570, chronology30);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.util.Calendar calendar40 = dateMidnight38.toCalendar(locale39);
        org.joda.time.YearMonthDay yearMonthDay41 = org.joda.time.YearMonthDay.fromCalendarFields(calendar40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = yearMonthDay41.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(100L, dateTimeZone44);
        boolean boolean46 = dateTimeZone44.isFixed();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = yearMonthDay41.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime49 = yearMonthDay9.toDateTimeAtMidnight(dateTimeZone44);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(weeks8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.weekyear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((long) 4, chronology28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.withMinuteOfHour(7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = timeOfDay31.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.minusSeconds(59);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withSecondOfMinute(7);
        java.lang.String str37 = timeOfDay36.toString();
        int int38 = timeOfDay36.getHourOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay36.getFieldTypes();
        long long41 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay36, 113L);
        org.joda.time.DateTimeField dateTimeField42 = chronology17.dayOfWeek();
        org.joda.time.Chronology chronology43 = chronology17.withUTC();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology17);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "T00:06:07.004" + "'", str37, "T00:06:07.004");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 367004L + "'", long41 == 367004L);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        int int20 = dateMidnight17.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) dateMidnight17, dateTimeZone21);
        org.joda.time.LocalTime localTime24 = localTime22.withMinuteOfHour((int) ' ');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (-1), (long) 1970, chronology27);
        int int29 = mutablePeriod28.getDays();
        org.joda.time.LocalTime localTime30 = localTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        int int31 = mutablePeriod28.getMonths();
        mutablePeriod28.setPeriod((-59042995199900L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((java.lang.Object) instant5);
        org.joda.time.MutableDateTime mutableDateTime7 = instant5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekOfWeekyear();
        int int9 = property8.get();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("janvier");
        int int22 = property19.getMaximumTextLength(locale21);
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Set<java.lang.Character> charSet27 = locale24.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        boolean boolean31 = charSet27.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean32 = charSet23.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        int int33 = charSet23.size();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 1970, dateTimeZone35);
        int int37 = localDate36.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean39 = localDate36.isSupported(dateTimeFieldType38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateMidnight dateMidnight46 = localDate36.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 1970, dateTimeZone48);
        int int50 = localDate49.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean52 = localDate49.isSupported(dateTimeFieldType51);
        org.joda.time.LocalDate localDate54 = localDate49.plusYears(1970);
        org.joda.time.LocalDate.Property property55 = localDate54.yearOfEra();
        java.lang.String str56 = property55.getAsShortText();
        org.joda.time.LocalDate localDate57 = property55.roundFloorCopy();
        org.joda.time.LocalDate localDate58 = property55.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate59 = localDate36.withFields((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate.Property property60 = localDate59.era();
        org.joda.time.Chronology chronology61 = localDate59.getChronology();
        boolean boolean62 = charSet23.equals((java.lang.Object) localDate59);
        charSet23.clear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "janvier");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fran\347ais (France)" + "'", str26, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514171753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=11,MILLISECOND=753,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "3940" + "'", str56, "3940");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        boolean boolean19 = localTime15.isSupported(durationFieldType18);
        mutableDateTime9.add(durationFieldType18, (-1));
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime9.setZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone23);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(dateTimeZone23);
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        org.joda.time.DateTime dateTime28 = timeOfDay26.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay26.withHourOfDay((int) (short) 10);
        java.lang.String str31 = timeOfDay26.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "T07:16:11.798" + "'", str31, "T07:16:11.798");
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.roundHalfEven();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((-1L), chronology20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusWeeks(26);
        boolean boolean24 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withMillis((-44179689599900L));
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        int int31 = dateTimeZone29.getStandardOffset((long) 5);
        java.lang.String str33 = dateTimeZone29.getShortName(100L);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("fran\347ais (France)");
        java.lang.String str37 = dateTimeZone29.getName((long) (short) 0, locale36);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 61, dateTimeZone29);
        mutableDateTime38.setWeekyear(113);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration49, (org.joda.time.ReadableInstant) dateMidnight52, periodType53);
        org.joda.time.Hours hours55 = period54.toStandardHours();
        org.joda.time.Period period57 = period54.multipliedBy((int) (short) 100);
        org.joda.time.Period period58 = period57.negated();
        org.joda.time.Period period60 = period57.withMonths(292278993);
        org.joda.time.PeriodType periodType61 = period57.getPeriodType();
        org.joda.time.PeriodType periodType62 = periodType61.withYearsRemoved();
        java.lang.String str63 = periodType61.toString();
        org.joda.time.Period period64 = new org.joda.time.Period((int) '4', 1922, 200, 86390000, 31, 999, (-292275054), 2, periodType61);
        org.joda.time.PeriodType periodType65 = periodType61.withWeeksRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableInstant) mutableDateTime38, periodType65);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PeriodType[Standard]" + "'", str63, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.Instant instant5 = instant3.toInstant();
        org.joda.time.DateTime dateTime6 = instant3.toDateTimeISO();
        org.joda.time.Instant instant9 = instant3.withDurationAdded((long) 4, 292271115);
        org.joda.time.Instant instant11 = instant9.minus((long) 32770);
        org.joda.time.Instant instant14 = instant9.withDurationAdded(1L, 1);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTime dateTime10 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property11 = localDate2.era();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15, periodType16);
        org.joda.time.Chronology chronology19 = null;
        mutablePeriod17.setPeriod(1L, chronology19);
        mutablePeriod17.add(100L);
        org.joda.time.LocalDate localDate23 = localDate2.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1978);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusMillis(25728415);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withWeekyear(432);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(1L, dateTimeZone53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableDuration51, (org.joda.time.ReadableInstant) dateMidnight54, periodType55);
        int int57 = dateMidnight54.getYear();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(1L, dateTimeZone62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration60, (org.joda.time.ReadableInstant) dateMidnight63, periodType64);
        int int66 = dateMidnight63.getYear();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight63.withDayOfMonth((int) (byte) 10);
        boolean boolean69 = dateMidnight54.isBefore((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight.Property property70 = dateMidnight68.monthOfYear();
        org.joda.time.DateMidnight dateMidnight71 = property70.roundFloorCopy();
        org.joda.time.DateTime dateTime72 = dateMidnight71.toDateTimeISO();
        org.joda.time.DateTime.Property property73 = dateTime72.dayOfMonth();
        org.joda.time.DateTime dateTime75 = dateTime72.minusWeeks(8);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(1L, dateTimeZone78);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration76, (org.joda.time.ReadableInstant) dateMidnight79, periodType80);
        int int82 = dateMidnight79.getYear();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight79.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight84, readableDuration85);
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight84, readableDuration87);
        org.joda.time.Period period90 = period88.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime91 = dateTime75.plus((org.joda.time.ReadablePeriod) period90);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean93 = dateTime75.isSupported(dateTimeFieldType92);
        int int94 = localDateTime48.get(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1970 + "'", int82 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 25728 + "'", int94 == 25728);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setSecondOfDay((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime11 = property7.setCopy(180);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(4);
        org.joda.time.DateTime dateTime15 = dateTime11.withYearOfCentury(53);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(32770);
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronolgy();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period19 = period17.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.plusDays((int) 'a');
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period17, (org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Period period34 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period36 = period34.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(1L, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.plusDays((int) 'a');
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyear();
        org.joda.time.Interval interval46 = interval25.withChronology(chronology43);
        org.joda.time.DateTime dateTime47 = interval46.getStart();
        org.joda.time.DateTime dateTime48 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property49 = dateTime47.year();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer8, (org.joda.time.ReadableInstant) dateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.Period period4 = period2.minusSeconds(100);
        org.joda.time.Period period6 = period2.withDays(8);
        org.joda.time.Seconds seconds7 = period2.toStandardSeconds();
        org.joda.time.Period period9 = period2.plusWeeks(0);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 1970);
        int int11 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime dateTime13 = dateTime4.plusMonths(600100);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(1L, dateTimeZone16);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration14, (org.joda.time.ReadableInstant) dateMidnight17, periodType18);
        int int20 = dateMidnight17.getYear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTime(dateTimeZone24);
        mutableDateTime23.addWeeks((int) (byte) 1);
        boolean boolean29 = dateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 100, 1L);
        org.joda.time.DateTime dateTime34 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period32, 30);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime37 = dateTime34.minusDays(971);
        int int38 = dateTime34.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 57 + "'", int38 == 57);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTime dateTime10 = property7.addWrapFieldToCopy(11);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(48);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(693, 54, (-3147), 86390032, 625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86390032 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime5 = dateTime2.toLocalTime();
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime8 = property6.addWrapFieldToCopy(366);
        org.joda.time.LocalTime localTime9 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        org.joda.time.DateTime dateTime5 = dateTime2.withMonthOfYear(11);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(985);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean10 = dateTimeZone9.isFixed();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(100);
        org.joda.time.Period period15 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime21 = dateTime18.withMonthOfYear(11);
        org.joda.time.Duration duration22 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(1L, dateTimeZone26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateMidnight27, periodType28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        java.lang.String str32 = periodType31.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight27, periodType31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusMillis(100);
        org.joda.time.Period period41 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(100L, dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = dateTime44.toLocalDateTime();
        org.joda.time.DateTime dateTime47 = dateTime44.withMonthOfYear(11);
        org.joda.time.Duration duration48 = period41.toDurationFrom((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.minus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime37.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.yearOfCentury();
        boolean boolean53 = duration22.equals((java.lang.Object) localDateTime51);
        org.joda.time.DateTime dateTime54 = dateTime5.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime56 = dateTime5.minusSeconds(5);
        org.joda.time.DateTime.Property property57 = dateTime56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean60 = dateTimeZone59.isFixed();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone59);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone59);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime62);
        long long64 = interval63.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(100L, dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property72 = dateTime69.minuteOfDay();
        org.joda.time.DateTime dateTime73 = property72.withMaximumValue();
        org.joda.time.DateTime dateTime74 = property72.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime76 = dateTime74.plusYears(0);
        org.joda.time.DateTime dateTime78 = dateTime74.plusYears(10);
        org.joda.time.DateTime dateTime80 = dateTime78.plusWeeks(3940);
        boolean boolean81 = interval63.contains((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "YearWeekDayNoWeeks" + "'", str32, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514172371L + "'", long64 == 1645514172371L);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(863, 25750512, 147, (-26987479), 75, 26037256, 366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -26987479 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = dateTimeField20.getAsShortText(569, locale22);
        org.joda.time.DurationField durationField25 = dateTimeField20.getRangeDurationField();
        java.lang.String str26 = dateTimeField20.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField20.add((long) 87, 88359465600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 88359465600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514172465,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=12,MILLISECOND=465,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "569" + "'", str24, "569");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfCentury" + "'", str26, "yearOfCentury");
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(3147328);
        org.joda.time.Instant instant12 = dateTime9.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.LocalDateTime localDateTime20 = property17.addWrapFieldToCopy(260);
        org.joda.time.LocalDateTime localDateTime22 = property17.addWrapFieldToCopy(292278994);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "69" + "'", str18, "69");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration16, (org.joda.time.ReadableInstant) dateMidnight19, periodType20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        java.lang.String str24 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight19, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(100);
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = dateTime36.toLocalDateTime();
        org.joda.time.DateTime dateTime39 = dateTime36.withMonthOfYear(11);
        org.joda.time.Duration duration40 = period33.toDurationFrom((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.yearOfCentury();
        boolean boolean45 = duration14.equals((java.lang.Object) localDateTime43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusHours(26);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusYears(17);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = property52.setCopy(82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "YearWeekDayNoWeeks" + "'", str24, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11, periodType12);
        mutablePeriod13.addMillis((int) '4');
        int int16 = mutablePeriod13.size();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100L, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = dateTime19.toLocalDateTime();
        int int21 = dateTime19.getYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        java.lang.String str30 = property29.getAsString();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = property29.setCopy(180);
        mutablePeriod13.setPeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property35 = dateTime33.millisOfSecond();
        org.joda.time.DateTime dateTime36 = property35.roundCeilingCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.secondOfDay();
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = property37.getAsText(locale39);
        org.joda.time.DateTime dateTime42 = property37.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField43 = property37.getField();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "chinois (Taiwan)" + "'", str40, "chinois (Taiwan)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "10800" + "'", str41, "10800");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        java.lang.Object obj1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(obj1);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate localDate11 = localDate7.withWeekyear((-1));
        boolean boolean13 = localDate11.equals((java.lang.Object) 8);
        int int14 = localDate11.getYear();
        boolean boolean15 = yearMonthDay3.equals((java.lang.Object) localDate11);
        int int16 = localDate11.size();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#', periodType19, chronology20);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay2, (org.joda.time.ReadablePartial) localDate11, periodType19);
        org.joda.time.PeriodType periodType23 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType24 = periodType19.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 993, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withSecondsRemoved();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        int int8 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.fromCalendarFields(calendar4);
        long long10 = calendar4.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = calendar4.isSet(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Instant instant5 = instant3.minus((long) 32769);
        org.joda.time.Instant instant7 = instant5.withMillis((long) 'x');
        org.joda.time.Instant instant9 = instant5.plus((-16799L));
        org.joda.time.MutableDateTime mutableDateTime10 = instant5.toMutableDateTime();
        mutableDateTime10.setDate((long) 61);
        org.joda.time.Instant instant13 = mutableDateTime10.toInstant();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (byte) -1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology4);
        long long6 = interval5.getEndMillis();
        java.lang.String str7 = interval5.toString();
        org.joda.time.MutableInterval mutableInterval8 = interval5.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1970, dateTimeZone10);
        int int12 = localDate11.getDayOfWeek();
        org.joda.time.LocalDate localDate14 = localDate11.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval15 = localDate11.toInterval();
        boolean boolean16 = interval5.contains((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Interval interval22 = interval20.withDurationBeforeEnd(readableDuration21);
        org.joda.time.Period period23 = interval20.toPeriod();
        org.joda.time.Interval interval24 = interval5.gap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology27);
        long long29 = interval28.getEndMillis();
        java.lang.String str30 = interval28.toString();
        org.joda.time.MutableInterval mutableInterval31 = interval28.toMutableInterval();
        org.joda.time.Period period32 = interval28.toPeriod();
        org.joda.time.Interval interval33 = interval20.overlap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology36);
        long long38 = interval37.getEndMillis();
        java.lang.String str39 = interval37.toString();
        org.joda.time.MutableInterval mutableInterval40 = interval37.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 1970, dateTimeZone42);
        int int44 = localDate43.getDayOfWeek();
        org.joda.time.LocalDate localDate46 = localDate43.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval47 = localDate43.toInterval();
        boolean boolean48 = interval37.contains((org.joda.time.ReadableInterval) interval47);
        boolean boolean49 = interval28.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(1L, dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53, periodType54);
        int int56 = dateMidnight52.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = dateMidnight52.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight52.withField(dateTimeFieldType58, (int) (short) 1);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plus((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withMillis((long) 1);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight60.plusMonths((int) (byte) 1);
        org.joda.time.Interval interval67 = interval28.withStart((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period70 = interval67.toPeriod(periodType69);
        org.joda.time.Period period71 = period1.normalizedStandard(periodType69);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str7, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str30, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10L + "'", long38 == 10L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str39, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.addMonths((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property21 = dateTime18.minuteOfDay();
        java.lang.String str22 = property21.getAsString();
        org.joda.time.DateTime dateTime23 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime25 = property21.setCopy(180);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(4);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfCentury(53);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology30);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.weeks();
        org.joda.time.Period period33 = new org.joda.time.Period((java.lang.Object) chronology30, periodType32);
        org.joda.time.PeriodType periodType34 = periodType32.withSecondsRemoved();
        java.lang.String str35 = periodType34.getName();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateTime25, periodType34);
        int int37 = mutableDateTime9.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Weeks" + "'", str35, "Weeks");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 78 + "'", int37 == 78);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(100L, dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str8 = dateTimeFieldType7.getName();
        org.joda.time.DateTime dateTime10 = dateTime4.withField(dateTimeFieldType7, (int) 'u');
        java.lang.String str11 = dateTimeFieldType7.toString();
        org.joda.time.Period period20 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period22 = period20.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plusDays((int) 'a');
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period20, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.DateMidnight dateMidnight30 = org.joda.time.DateMidnight.now(chronology29);
        boolean boolean31 = dateTimeFieldType7.isSupported(chronology29);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 53, (-5270399989L), chronology29);
        org.joda.time.DurationField durationField33 = chronology29.centuries();
        org.joda.time.DurationField durationField34 = chronology29.millis();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "minuteOfDay" + "'", str8, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "minuteOfDay" + "'", str11, "minuteOfDay");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod3.setMinutes(11);
        org.joda.time.Period period6 = mutablePeriod3.toPeriod();
        mutablePeriod3.setMillis(23448);
        mutablePeriod3.setPeriod(1645513699391L);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (byte) 0);
        org.joda.time.Period period17 = period15.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod18 = period15.toMutablePeriod();
        org.joda.time.Period period29 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period31 = period29.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(1L, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plusDays((int) 'a');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period29, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology38);
        mutablePeriod18.setPeriod(0L, (long) 0, chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.era();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 100, chronology38);
        mutablePeriod3.add(28861000L, chronology38);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(30L, chronology38);
        int int45 = mutableDateTime44.getMinuteOfHour();
        java.lang.String str46 = mutableDateTime44.toString();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.030Z" + "'", str46, "1970-01-01T00:00:00.030Z");
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        java.lang.String str25 = periodType24.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight20, periodType24);
        org.joda.time.Instant instant27 = instant0.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology30);
        long long32 = interval31.getEndMillis();
        java.lang.String str33 = interval31.toString();
        org.joda.time.MutableInterval mutableInterval34 = interval31.toMutableInterval();
        org.joda.time.Period period35 = interval31.toPeriod();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = interval31.toPeriod(periodType36);
        org.joda.time.Duration duration39 = interval31.toDuration();
        org.joda.time.Instant instant41 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) (short) 10);
        org.joda.time.Instant instant43 = instant27.plus((long) 'u');
        org.joda.time.DateTime dateTime44 = instant27.toDateTimeISO();
        org.joda.time.DateTime.Property property45 = dateTime44.year();
        int int46 = property45.get();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "YearWeekDayNoWeeks" + "'", str25, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str33, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        int int17 = property16.get();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = property16.addToCopy((-691754750985060000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -691754750985060000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.minusDays(0);
        int int10 = localDate9.getDayOfWeek();
        java.lang.Character[] charArray13 = new java.lang.Character[] { '4', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet14 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet14, charArray13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(100L, dateTimeZone17);
        boolean boolean19 = dateTimeZone17.isFixed();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        boolean boolean21 = charSet14.contains((java.lang.Object) dateTimeZone17);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) 7);
        org.joda.time.Interval interval24 = localDate9.toInterval(dateTimeZone17);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology27);
        long long29 = interval28.getEndMillis();
        org.joda.time.Interval interval31 = interval28.withEndMillis((long) 11);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval35.withDurationBeforeEnd(readableDuration36);
        long long38 = interval35.toDurationMillis();
        boolean boolean40 = interval35.isAfter(1645513699391L);
        boolean boolean41 = interval31.overlaps((org.joda.time.ReadableInterval) interval35);
        boolean boolean42 = interval24.contains((org.joda.time.ReadableInterval) interval35);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514172911,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=12,MILLISECOND=911,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 11L + "'", long38 == 11L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period28 = period26.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.plusDays((int) 'a');
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period26, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.weekyear();
        org.joda.time.Interval interval38 = interval17.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.weekyearOfCentury();
        org.joda.time.Period period42 = new org.joda.time.Period(31536000000L, 1640995200010L);
        int[] intArray45 = chronology35.get((org.joda.time.ReadablePeriod) period42, (long) 32769, (long) 10);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-15994), chronology35);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusSeconds(13);
        int int49 = localDateTime46.getMillisOfDay();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, -32, -759]");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 86384006 + "'", int49 == 86384006);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        calendar1.roll(0, (int) 'a');
        calendar1.clear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.joda.time.Period period9 = org.joda.time.Period.millis(32772);
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.Period period12 = period9.plusHours(17);
        org.joda.time.PeriodType periodType13 = period9.getPeriodType();
        boolean boolean14 = calendar1.after((java.lang.Object) periodType13);
        java.lang.String str15 = calendar1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str15, "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(100L, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        org.joda.time.DateTime dateTime11 = dateTime5.withField(dateTimeFieldType8, (int) 'u');
        int int12 = dateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property13 = dateTime1.era();
        org.joda.time.DateTime.Property property14 = dateTime1.yearOfCentury();
        org.joda.time.DateTime.Property property15 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime2 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay0.year();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = property3.getAsText(locale4);
        org.joda.time.YearMonthDay yearMonthDay7 = property3.setCopy(2);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        int int16 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        boolean boolean28 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight27.monthOfYear();
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        int int31 = property29.getMaximumShortTextLength(locale30);
        java.lang.String str32 = property29.getAsString();
        java.lang.String str33 = property29.getAsText();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40, periodType41);
        int int43 = dateMidnight40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableDuration46, (org.joda.time.ReadableInstant) dateMidnight49, periodType50);
        int int52 = dateMidnight49.getYear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.withDayOfMonth((int) (byte) 10);
        boolean boolean55 = dateMidnight40.isBefore((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight54.monthOfYear();
        java.util.Locale locale57 = java.util.Locale.JAPAN;
        int int58 = property56.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale35.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(locale35);
        int int61 = property29.getMaximumTextLength(locale35);
        java.lang.String str62 = dateTimeField8.getAsText((long) 32769, locale35);
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime64 = yearMonthDay63.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay63.year();
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.lang.String str68 = property66.getAsText(locale67);
        org.joda.time.YearMonthDay yearMonthDay70 = property66.setCopy(2);
        org.joda.time.DateTimeField dateTimeField71 = property66.getField();
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = dateTimeField71.getAsShortText((int) ' ', locale73);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(100L, dateTimeZone76);
        boolean boolean78 = dateTimeZone76.isFixed();
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now(dateTimeZone76);
        java.util.Locale locale80 = java.util.Locale.US;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale80);
        java.lang.String str82 = dateTimeField71.getAsText((org.joda.time.ReadablePartial) localDate79, locale80);
        int int83 = dateTimeField8.getMaximumTextLength(locale80);
        java.lang.String str84 = locale80.getScript();
        java.lang.String str85 = locale80.toString();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "janvier" + "'", str33, "janvier");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais (France)" + "'", str36, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str59, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022" + "'", str68, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "32" + "'", str74, "32");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645514173024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022" + "'", str82, "2022");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "en_US" + "'", str85, "en_US");
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period16 = duration14.toPeriod();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        int int23 = dateMidnight20.getYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(1L, dateTimeZone28);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration26, (org.joda.time.ReadableInstant) dateMidnight29, periodType30);
        int int32 = dateMidnight29.getYear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withDayOfMonth((int) (byte) 10);
        boolean boolean35 = dateMidnight20.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight34.monthOfYear();
        org.joda.time.DateMidnight dateMidnight37 = property36.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight39 = property36.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight40 = property36.roundFloorCopy();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology43);
        long long45 = interval44.getEndMillis();
        java.lang.String str46 = interval44.toString();
        org.joda.time.MutableInterval mutableInterval47 = interval44.toMutableInterval();
        org.joda.time.Period period48 = interval44.toPeriod();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType50 = periodType49.withWeeksRemoved();
        org.joda.time.Period period51 = interval44.toPeriod(periodType49);
        org.joda.time.Duration duration52 = interval44.toDuration();
        java.lang.Object obj53 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(1L, dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58, periodType59);
        int int61 = dateMidnight57.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = dateMidnight57.getZone();
        org.joda.time.DateMidnight dateMidnight63 = org.joda.time.DateMidnight.now(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone62);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(obj53, dateTimeZone62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight(1L, dateTimeZone68);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableDuration66, (org.joda.time.ReadableInstant) dateMidnight69, periodType70);
        int int72 = dateMidnight69.getYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight69.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight74, readableDuration75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight74, readableDuration77, periodType78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) dateTime65, periodType78);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateMidnight40, periodType78);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(100L, dateTimeZone83);
        boolean boolean85 = dateTimeZone83.isFixed();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone83);
        mutableDateTime86.addHours(20);
        mutableDateTime86.setTime(0, 12, 20, 0);
        org.joda.time.DateTime dateTime94 = mutableDateTime86.toDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.DurationFieldType[] durationFieldTypeArray96 = mutablePeriod95.getFieldTypes();
        org.joda.time.format.PeriodFormatter periodFormatter97 = null;
        java.lang.String str98 = mutablePeriod95.toString(periodFormatter97);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str46, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1970 + "'", int72 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(durationFieldTypeArray96);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "PT0S" + "'", str98, "PT0S");
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod15.setMinutes(11);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        boolean boolean37 = dateMidnight22.isBefore((org.joda.time.ReadableInstant) dateMidnight36);
        int int38 = dateMidnight22.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight22.withDurationAdded(readableDuration39, (int) '#');
        boolean boolean42 = interval18.contains((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(1L, dateTimeZone45);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration43, (org.joda.time.ReadableInstant) dateMidnight46, periodType47);
        int int49 = dateMidnight46.getYear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight46.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight51.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        org.joda.time.DateTime dateTime55 = mutableDateTime52.toDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTime();
        org.joda.time.Period period65 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period67 = period65.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.plusDays((int) 'a');
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period65, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.DateMidnight dateMidnight75 = org.joda.time.DateMidnight.now(chronology74);
        long long79 = chronology74.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight80 = org.joda.time.DateMidnight.now(chronology74);
        org.joda.time.DateMidnight dateMidnight81 = org.joda.time.DateMidnight.now(chronology74);
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime55, chronology74);
        org.joda.time.Interval interval83 = yearMonthDay82.toInterval();
        long long84 = interval83.toDurationMillis();
        org.joda.time.Period period85 = interval83.toPeriod();
        boolean boolean86 = interval18.isBefore((org.joda.time.ReadableInterval) interval83);
        long long87 = interval83.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 86400000L + "'", long84 == 86400000L);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 86400000L + "'", long87 == 86400000L);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusDays(15);
        int int15 = localDateTime14.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMillis(25720043);
        int int19 = localDateTime18.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        boolean boolean18 = dateMidnight3.isBefore((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight17.monthOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = dateMidnight20.toDateTimeISO();
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks(8);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight28, periodType29);
        int int31 = dateMidnight28.getYear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight28.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight33, readableDuration34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, readableDuration36);
        org.joda.time.Period period39 = period37.plusMonths((int) ' ');
        org.joda.time.DateTime dateTime40 = dateTime24.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime42 = dateTime24.minusMonths(292278993);
        org.joda.time.DateTime dateTime43 = dateTime24.toDateTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        int int9 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minusMonths((int) '4');
        int[] intArray12 = localDateTime11.getValues();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMinuteOfHour(0);
        int int16 = localDateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfYear();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1965, 9, 1, 100]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 1970, dateTimeZone6);
        int int8 = localDate7.getDayOfWeek();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((java.lang.Object) localDate7);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears((int) '4');
        org.joda.time.LocalDate localDate14 = localDate7.plusYears((int) '#');
        org.joda.time.DateTime dateTime15 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay17.year();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = property20.getAsText(locale21);
        org.joda.time.YearMonthDay yearMonthDay24 = property20.setCopy(2);
        org.joda.time.DateTimeField dateTimeField25 = property20.getField();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = dateTimeField25.getAsShortText((int) ' ', locale27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(100L, dateTimeZone30);
        boolean boolean32 = dateTimeZone30.isFixed();
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(dateTimeZone30);
        java.util.Locale locale34 = java.util.Locale.US;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        java.lang.String str36 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDate33, locale34);
        java.lang.String str37 = locale34.getScript();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale34.getDisplayCountry(locale38);
        java.lang.String str40 = localDate7.toString("2022-03-01", locale34);
        org.joda.time.LocalDate localDate42 = localDate7.plusYears(6);
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "32" + "'", str28, "32");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514173312,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022" + "'", str36, "2022");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Vereinigte Staaten von Amerika" + "'", str39, "Vereinigte Staaten von Amerika");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-03-01" + "'", str40, "2022-03-01");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMillis(100);
        org.joda.time.Period period12 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(100L, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = dateTime15.toLocalDateTime();
        org.joda.time.DateTime dateTime18 = dateTime15.withMonthOfYear(11);
        org.joda.time.Duration duration19 = period12.toDurationFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime8.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(1L, dateTimeZone23);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration21, (org.joda.time.ReadableInstant) dateMidnight24, periodType25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType28 = periodType27.withWeeksRemoved();
        java.lang.String str29 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateMidnight24, periodType28);
        org.joda.time.Period period40 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period42 = period40.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(1L, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plusDays((int) 'a');
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period40, (org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(chronology49);
        long long54 = chronology49.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(chronology49);
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(chronology49);
        mutablePeriod30.add((long) 180, chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        org.joda.time.DurationField durationField59 = chronology49.days();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 86390, periodType4, chronology49);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.Period period62 = new org.joda.time.Period((long) 12, chronology49);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(100L, (long) (short) -1);
        mutablePeriod65.setMinutes(11);
        java.lang.String str68 = mutablePeriod65.toString();
        long long71 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 12, 0);
        int int72 = mutablePeriod65.getMinutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "YearWeekDayNoWeeks" + "'", str29, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT11M0.101S" + "'", str68, "PT11M0.101S");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 12L + "'", long71 == 12L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(50, 1011, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        java.util.Locale locale1 = new java.util.Locale("1978-05-10T00:00:00.000Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((java.lang.Object) locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "1978-05-10t00:00:00.000z");
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate localDate18 = localDate14.withWeekyear((-1));
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(1L, dateTimeZone21);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration19, (org.joda.time.ReadableInstant) dateMidnight22, periodType23);
        int int25 = dateMidnight22.getYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight22.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28);
        boolean boolean30 = localDate18.equals((java.lang.Object) readableDuration28);
        int int31 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate localDate33 = localDate18.minusYears(9);
        int int34 = localDate33.getCenturyOfEra();
        int int35 = localDate33.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.util.Set<java.lang.Character> charSet6 = locale3.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        boolean boolean10 = charSet6.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) strMap11);
        boolean boolean14 = calendar1.after((java.lang.Object) mutableDateTime13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.time.ZoneId zoneId17 = timeZone15.toZoneId();
        java.time.ZoneId zoneId18 = timeZone15.toZoneId();
        calendar1.setTimeZone(timeZone15);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar1.getActualMaximum(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514173529,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=529,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fran\347ais (France)" + "'", str5, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertNotNull(zoneId18);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(600100);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears(600100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(22);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusHours(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusHours((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(100L, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.withMonthOfYear(2);
        org.joda.time.DateTime dateTime24 = dateTime22.minusYears((-1331));
        int int25 = dateTime22.getCenturyOfEra();
        org.joda.time.DateTime dateTime26 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate5 = dateTime4.toLocalDate();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.Interval interval9 = localDate2.toInterval(dateTimeZone7);
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.Period period30 = org.joda.time.Period.seconds(100);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadablePeriod) period30);
        boolean boolean33 = interval9.isAfter((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight.Property property34 = dateMidnight28.era();
        long long35 = dateMidnight28.getMillis();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645488000000L + "'", long35 == 1645488000000L);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.centuryOfEra();
        int int14 = localDateTime12.getMinuteOfHour();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMillis(100);
        org.joda.time.Period period23 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.DateTime dateTime29 = dateTime26.withMonthOfYear(11);
        org.joda.time.Duration duration30 = period23.toDurationFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime19.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateMidnight35, periodType36);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType39 = periodType38.withWeeksRemoved();
        java.lang.String str40 = periodType39.getName();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateMidnight35, periodType39);
        org.joda.time.Instant instant42 = instant15.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology45);
        long long47 = interval46.getEndMillis();
        java.lang.String str48 = interval46.toString();
        org.joda.time.MutableInterval mutableInterval49 = interval46.toMutableInterval();
        org.joda.time.Period period50 = interval46.toPeriod();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType52 = periodType51.withWeeksRemoved();
        org.joda.time.Period period53 = interval46.toPeriod(periodType51);
        org.joda.time.Duration duration54 = interval46.toDuration();
        org.joda.time.Instant instant56 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 10);
        org.joda.time.Instant instant58 = instant42.withMillis((long) 292278994);
        org.joda.time.Instant instant60 = instant58.minus((long) 570);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(1L, dateTimeZone63);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableDuration61, (org.joda.time.ReadableInstant) dateMidnight64, periodType65);
        int int67 = dateMidnight64.getYear();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight64.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, readableDuration70);
        org.joda.time.Period period73 = period71.withMillis(0);
        org.joda.time.Duration duration74 = period73.toStandardDuration();
        org.joda.time.Instant instant75 = instant58.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration74, 431);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean81 = dateTimeZone80.isFixed();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone80);
        int int83 = localDateTime82.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property84 = localDateTime82.yearOfEra();
        org.joda.time.LocalDateTime.Property property85 = localDateTime82.millisOfDay();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.plusYears((int) 'a');
        org.joda.time.LocalDateTime localDateTime88 = localDateTime77.withFields((org.joda.time.ReadablePartial) localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "YearWeekDayNoWeeks" + "'", str40, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str48, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime88);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime13.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property8 = localTime5.millisOfDay();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514173766,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=766,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("months");
        java.util.Locale.Builder builder4 = builder0.setLanguageTag("en-US");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Locale.Builder builder8 = builder4.setLocale(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        org.joda.time.Period period18 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period20 = period18.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.plusDays((int) 'a');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology27);
        long long32 = chronology27.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology27);
        org.joda.time.MonthDay monthDay34 = new org.joda.time.MonthDay(chronology27);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType37);
        org.joda.time.MonthDay monthDay39 = monthDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        boolean boolean40 = locale6.equals((java.lang.Object) monthDay39);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "allemand" + "'", str7, "allemand");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(monthDay39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        boolean boolean5 = dateTimeZone1.isFixed();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 366);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period15 = period13.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plusDays((int) 'a');
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period13, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period30 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period32 = period30.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(1L, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.plusDays((int) 'a');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period30, (org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyear();
        org.joda.time.Interval interval42 = interval21.withChronology(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withPivotYear((int) ' ');
        org.joda.time.Chronology chronology48 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Period period57 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period59 = period57.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(1L, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.plusDays((int) 'a');
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period57, (org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.DateMidnight dateMidnight67 = org.joda.time.DateMidnight.now(chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withChronology(chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter69.withOffsetParsed();
        org.joda.time.Chronology chronology71 = dateTimeFormatter70.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long73 = dateTimeFormatter70.parseMillis("T00:00:00.180");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(chronology48);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12, periodType13);
        mutablePeriod14.addMillis((int) '4');
        int int17 = mutablePeriod14.size();
        java.util.Locale locale18 = java.util.Locale.US;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        boolean boolean20 = mutablePeriod14.equals((java.lang.Object) calendar19);
        org.joda.time.MonthDay monthDay22 = monthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 570);
        org.joda.time.MonthDay.Property property26 = monthDay22.monthOfYear();
        org.joda.time.MonthDay monthDay27 = property26.getMonthDay();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int29 = property26.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514173875,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=13,MILLISECOND=875,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        long long22 = chronology17.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology17.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology17.getZone();
        long long30 = dateTimeZone26.convertLocalToUTC((long) 86384006, false, (long) 266);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86384006L + "'", long30 == 86384006L);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate11 = property8.addWrapFieldToCopy(625);
        java.lang.String str12 = property8.getName();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1970, dateTimeZone15);
        int int17 = localDate16.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate localDate21 = localDate16.plusYears(1970);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfEra();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        java.util.Locale locale27 = new java.util.Locale("7", "japonais (Japon)", "fra");
        java.lang.String str28 = property22.getAsText(locale27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = property8.setCopy("ko_KR", locale27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ko_KR\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfEra" + "'", str12, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals(locale27.toString(), "7_JAPONAIS (JAPON)_fra");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3940" + "'", str28, "3940");
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 1970);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int14 = dateTimeZone12.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime15 = dateTime4.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime4.plus((long) 600100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(99);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology2);
        long long4 = interval3.getEndMillis();
        java.lang.String str5 = interval3.toString();
        org.joda.time.MutableInterval mutableInterval6 = interval3.toMutableInterval();
        org.joda.time.Period period7 = interval3.toPeriod();
        boolean boolean9 = interval3.contains(347126472000L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 1970, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(1L, dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19, periodType20);
        int int22 = dateMidnight18.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight18.getZone();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone23);
        org.joda.time.Interval interval26 = localDate14.toInterval(dateTimeZone23);
        boolean boolean28 = interval26.contains((long) 10);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod33.addHours(0);
        mutablePeriod33.addMinutes((int) (short) 10);
        org.joda.time.Interval interval38 = interval26.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod33.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, (int) (byte) 1);
        org.joda.time.Interval interval42 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 1970, dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = null;
        boolean boolean47 = localDate45.isSupported(dateTimeFieldType46);
        org.joda.time.LocalDate localDate49 = localDate45.withWeekyear((-1));
        org.joda.time.LocalDate.Property property50 = localDate45.dayOfWeek();
        org.joda.time.LocalDate localDate52 = property50.addToCopy(3);
        org.joda.time.Interval interval53 = property50.toInterval();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(100L, dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillis((long) (byte) 100);
        org.joda.time.DateTime dateTime59 = dateTime58.toDateTimeISO();
        int int60 = dateTime58.getYear();
        boolean boolean61 = interval53.isBefore((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean62 = interval53.containsNow();
        boolean boolean64 = interval53.isBefore(1970L);
        boolean boolean65 = interval42.isBefore((org.joda.time.ReadableInterval) interval53);
        boolean boolean66 = interval42.isBeforeNow();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 10L + "'", long4 == 10L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str5, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(12, (int) 'u', (int) (short) -1);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        int int7 = timeZone5.getRawOffset();
        java.util.Calendar.Builder builder8 = builder0.setTimeZone(timeZone5);
        java.util.Calendar calendar9 = builder0.build();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Calendar.Builder builder14 = builder0.setTimeZone(timeZone10);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay17.year();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = property20.getAsText(locale21);
        org.joda.time.DateTimeField dateTimeField23 = property20.getField();
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40, periodType41);
        int int43 = dateMidnight40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDayOfMonth((int) (byte) 10);
        boolean boolean46 = dateMidnight31.isBefore((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.monthOfYear();
        java.util.Locale locale48 = java.util.Locale.JAPAN;
        int int49 = property47.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale26.getDisplayLanguage(locale48);
        boolean boolean51 = locale48.hasExtensions();
        java.lang.String str52 = locale48.getVariant();
        java.lang.String str53 = dateTimeField23.getAsText((long) 53, locale48);
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str56 = locale55.getLanguage();
        java.lang.String str57 = dateTimeField23.getAsText((int) (byte) 1, locale55);
        java.util.Locale locale58 = locale55.stripExtensions();
        java.util.Calendar.Builder builder59 = builder14.setLocale(locale58);
        java.util.Calendar.Builder builder63 = builder14.setDate(2000, 6, 985);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder65 = builder63.setInstant((long) 25973286);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-61481203200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=21,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=272,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022" + "'", str22, "2022");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fran\347ais (France)" + "'", str27, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str50, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr" + "'", str56, "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(5, (int) (byte) -1);
        java.util.Calendar.Builder builder5 = builder3.setLenient(true);
        java.util.Calendar calendar6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder8 = builder5.setCalendarType("-292273657");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: -292273657");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-172800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        calendar4.clear();
        java.util.Date date6 = calendar4.getTime();
        java.time.Instant instant7 = calendar4.toInstant();
        int int8 = calendar4.getMinimalDaysInFirstWeek();
        org.joda.time.MonthDay monthDay9 = org.joda.time.MonthDay.fromCalendarFields(calendar4);
        org.joda.time.MonthDay monthDay11 = monthDay9.plusMonths(54);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(monthDay9);
        org.junit.Assert.assertNotNull(monthDay11);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(570, 25918548, 723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 570 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("T00:06:07.004");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(1L, dateTimeZone4);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration2, (org.joda.time.ReadableInstant) dateMidnight5, periodType6);
        int int8 = dateMidnight5.getYear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.withDayOfWeek(4);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        int int23 = dateMidnight19.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight16.withZoneRetainFields(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone24);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        java.lang.String str32 = dateTimeZone31.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 2922789, dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(100L, dateTimeZone35);
        boolean boolean37 = dateTimeZone35.isFixed();
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(dateTimeZone35);
        long long40 = dateTimeZone31.getMillisKeepLocal(dateTimeZone35, 0L);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime27.toMutableDateTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone31);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(1L, dateTimeZone3);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration1, (org.joda.time.ReadableInstant) dateMidnight4, periodType5);
        int int7 = dateMidnight4.getYear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight9, readableDuration12, periodType13);
        mutablePeriod14.addMillis((int) '4');
        int int17 = mutablePeriod14.size();
        java.util.Locale locale18 = java.util.Locale.US;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        boolean boolean20 = mutablePeriod14.equals((java.lang.Object) calendar19);
        org.joda.time.MonthDay monthDay22 = monthDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.MonthDay monthDay25 = monthDay22.withPeriodAdded(readablePeriod23, 570);
        org.joda.time.MonthDay.Property property26 = monthDay22.monthOfYear();
        org.joda.time.MonthDay monthDay27 = property26.getMonthDay();
        int int28 = property26.getMinimumValueOverall();
        org.joda.time.MonthDay monthDay30 = property26.addWrapFieldToCopy((-71391));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MonthDay monthDay32 = property26.setCopy(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514174333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=14,MILLISECOND=333,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(monthDay22);
        org.junit.Assert.assertNotNull(monthDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(monthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(monthDay30);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        mutableDateTime19.addWeekyears(1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.DateTime dateTime32 = property29.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime34 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay33.year();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime43 = dateTime41.plus((long) (-1));
        org.joda.time.DateTime dateTime44 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded(readableDuration45, 1970);
        int int48 = property36.compareTo((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean49 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology50 = dateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime19.toMutableDateTime(chronology50);
        boolean boolean52 = charSet3.contains((java.lang.Object) mutableDateTime51);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        boolean boolean60 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58);
        boolean boolean61 = charSet56.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator62 = charSet56.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList64, strMap65);
        boolean boolean67 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        boolean boolean68 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        java.lang.Character[] charArray74 = new java.lang.Character[] { '#', 'u', 'a', 'x', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet75 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet75, charArray74);
        int int77 = charSet75.size();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap80);
        boolean boolean82 = charSet75.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81);
        boolean boolean83 = charSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais (France)" + "'", str55, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charSpliterator62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(languageRangeList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(570);
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusHours(551);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        java.lang.String str14 = dateTimeFieldType12.toString();
        boolean boolean15 = localDateTime11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "yearOfCentury" + "'", str14, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 1970);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusHours((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withTime(257264, 46, 86390000, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 257264 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(61);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval9.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Period period12 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period18.withFieldAdded(durationFieldType20, 100);
        org.joda.time.Period period24 = period12.withFieldAdded(durationFieldType20, (int) (byte) 10);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        mutablePeriod31.set(durationFieldType32, 5);
        org.joda.time.Period period36 = period26.withField(durationFieldType32, 1);
        boolean boolean37 = period24.isSupported(durationFieldType32);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(1L, dateTimeZone40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateMidnight41, periodType42);
        int int44 = dateMidnight41.getYear();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight41.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime47.copy();
        mutableDateTime47.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime55 = localTime53.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.millis();
        boolean boolean57 = localTime53.isSupported(durationFieldType56);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 0);
        int int60 = localTime59.getMinuteOfHour();
        boolean boolean61 = localTime53.equals((java.lang.Object) localTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean63 = localTime53.isSupported(dateTimeFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType62.getRangeDurationType();
        mutableDateTime47.add(durationFieldType64, 180);
        int int67 = period24.get(durationFieldType64);
        int int68 = periodType5.indexOf(durationFieldType64);
        org.joda.time.Period period70 = org.joda.time.Period.hours(32769);
        org.joda.time.Period period72 = period70.plusYears(2022);
        org.joda.time.Hours hours73 = period70.toStandardHours();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(1L, dateTimeZone76);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableDuration74, (org.joda.time.ReadableInstant) dateMidnight77, periodType78);
        int int80 = dateMidnight77.getYear();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight77.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime83 = dateMidnight82.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime83.copy();
        mutableDateTime83.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime91 = localTime89.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType92 = org.joda.time.DurationFieldType.millis();
        boolean boolean93 = localTime89.isSupported(durationFieldType92);
        mutableDateTime83.add(durationFieldType92, (-1));
        boolean boolean96 = period70.isSupported(durationFieldType92);
        boolean boolean97 = periodType5.isSupported(durationFieldType92);
        org.joda.time.Period period98 = new org.joda.time.Period((long) 6, 1645513699391L, periodType5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period99 = period1.withPeriodType(periodType5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(hours73);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1970 + "'", int80 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.copy();
        mutableDateTime18.setMillis((long) (byte) 10);
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(100L, dateTimeZone25);
        boolean boolean27 = dateTimeZone25.isFixed();
        mutableDateTime18.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime4.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        boolean boolean32 = dateTime30.isAfter((long) 6);
        org.joda.time.DateTime dateTime33 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears(22);
        org.joda.time.DateTime dateTime37 = dateTime35.minusHours(648);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod4.addHours(0);
        mutablePeriod4.addMinutes((int) (short) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1L, dateTimeZone11);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateMidnight12, periodType13);
        int int15 = dateMidnight12.getYear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(1L, dateTimeZone24);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration22, (org.joda.time.ReadableInstant) dateMidnight25, periodType26);
        int int28 = dateMidnight25.getYear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight25.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTime();
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property37 = dateTime34.year();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(100L, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property45 = dateTime42.minuteOfDay();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime46, readableDuration47);
        org.joda.time.DateTime.Property property49 = dateTime46.dayOfMonth();
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (byte) 0);
        org.joda.time.Period period54 = period52.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod55 = period52.toMutablePeriod();
        mutablePeriod55.setPeriod((long) 100);
        org.joda.time.DateTime dateTime59 = dateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, 8);
        mutablePeriod55.addMillis((-292275054));
        org.joda.time.DateTime dateTime62 = dateTime34.minus((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((long) 1970, dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(1L, dateTimeZone70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight71, readableDuration72, periodType73);
        int int75 = dateMidnight71.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = dateMidnight71.getZone();
        org.joda.time.DateMidnight dateMidnight77 = org.joda.time.DateMidnight.now(dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone76);
        org.joda.time.Interval interval79 = localDate67.toInterval(dateTimeZone76);
        boolean boolean81 = interval79.contains((long) 10);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod86.addHours(0);
        mutablePeriod86.addMinutes((int) (short) 10);
        org.joda.time.Interval interval91 = interval79.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod86);
        org.joda.time.MutablePeriod mutablePeriod92 = mutablePeriod86.toMutablePeriod();
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight64.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod92, (int) (byte) 1);
        org.joda.time.Duration duration95 = mutablePeriod55.toDurationTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateMidnight.Property property96 = dateMidnight64.centuryOfEra();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        int int8 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight2, readableDuration3, periodType4);
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod5.setPeriod(1L, chronology7);
        mutablePeriod5.add(100L);
        int int11 = mutablePeriod5.getYears();
        org.joda.time.ReadableInterval readableInterval12 = null;
        mutablePeriod5.add(readableInterval12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(100L, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) (-1));
        org.joda.time.DateTime dateTime21 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded(readableDuration22, 1970);
        int int25 = dateTime18.getSecondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime18.plusMonths(600100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(1L, dateTimeZone30);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration28, (org.joda.time.ReadableInstant) dateMidnight31, periodType32);
        int int34 = dateMidnight31.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTime(dateTimeZone38);
        mutableDateTime37.addWeeks((int) (byte) 1);
        boolean boolean43 = dateTime18.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.Object obj44 = mutableDateTime37.clone();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean48 = dateTimeZone47.isFixed();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMillis(100);
        org.joda.time.Period period53 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(100L, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = dateTime56.toLocalDateTime();
        org.joda.time.DateTime dateTime59 = dateTime56.withMonthOfYear(11);
        org.joda.time.Duration duration60 = period53.toDurationFrom((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime49.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(1L, dateTimeZone64);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period(readableDuration62, (org.joda.time.ReadableInstant) dateMidnight65, periodType66);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType69 = periodType68.withWeeksRemoved();
        java.lang.String str70 = periodType69.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateMidnight65, periodType69);
        org.joda.time.Instant instant72 = instant45.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration73 = duration60.toDuration();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableDuration) duration60);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration60);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-17T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-17T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-17T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "YearWeekDayNoWeeks" + "'", str70, "YearWeekDayNoWeeks");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.withDayOfWeek(4);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = property15.addToCopy((int) 'u');
        org.joda.time.DateMidnight dateMidnight18 = property15.roundHalfFloorCopy();
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        org.joda.time.Period period21 = org.joda.time.Period.hours(26);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plus((long) (-1));
        org.joda.time.DateTime dateTime30 = dateTime28.minusYears((int) '#');
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology33);
        long long35 = interval34.getEndMillis();
        java.lang.String str36 = interval34.toString();
        org.joda.time.MutableInterval mutableInterval37 = interval34.toMutableInterval();
        org.joda.time.Period period38 = interval34.toPeriod();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.Period period41 = interval34.toPeriod(periodType39);
        org.joda.time.Period period42 = interval34.toPeriod();
        org.joda.time.DateTime dateTime43 = dateTime28.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime28.toMutableDateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period21, (org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology48);
        long long50 = interval49.getEndMillis();
        java.lang.String str51 = interval49.toString();
        org.joda.time.MutableInterval mutableInterval52 = interval49.toMutableInterval();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 1970, dateTimeZone54);
        int int56 = localDate55.getDayOfWeek();
        org.joda.time.LocalDate localDate58 = localDate55.minusWeeks((int) (short) 10);
        org.joda.time.Interval interval59 = localDate55.toInterval();
        boolean boolean60 = interval49.contains((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval64.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Period period67 = interval64.toPeriod();
        org.joda.time.Interval interval68 = interval49.gap((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology71);
        long long73 = interval72.getEndMillis();
        java.lang.String str74 = interval72.toString();
        org.joda.time.MutableInterval mutableInterval75 = interval72.toMutableInterval();
        org.joda.time.Period period76 = interval72.toPeriod();
        org.joda.time.Interval interval77 = interval64.overlap((org.joda.time.ReadableInterval) interval72);
        boolean boolean78 = interval45.isAfter((org.joda.time.ReadableInterval) interval77);
        boolean boolean79 = interval19.isBefore((org.joda.time.ReadableInterval) interval45);
        long long80 = interval45.getStartMillis();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 10L + "'", long35 == 10L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str36, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str51, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNull(interval68);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 10L + "'", long73 == 10L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str74, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-44179783199901L) + "'", long80 == (-44179783199901L));
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1970);
        org.joda.time.LocalDate.Property property8 = localDate7.yearOfEra();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        int int11 = property8.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.LocalDate localDate13 = property8.roundHalfFloorCopy();
        int int14 = property8.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "3940" + "'", str9, "3940");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        org.joda.time.Period period8 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period10 = period8.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(1L, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays((int) 'a');
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period8, (org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfDay();
        org.joda.time.MonthDay monthDay20 = new org.joda.time.MonthDay(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = monthDay20.getField(0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime8 = dateTime6.minusYears((int) '#');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology11);
        long long13 = interval12.getEndMillis();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = interval12.toMutableInterval();
        org.joda.time.Period period16 = interval12.toPeriod();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType18 = periodType17.withWeeksRemoved();
        org.joda.time.Period period19 = interval12.toPeriod(periodType17);
        org.joda.time.Period period20 = interval12.toPeriod();
        org.joda.time.DateTime dateTime21 = dateTime6.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime6.toMutableDateTime();
        org.joda.time.DateTime.Property property23 = dateTime6.monthOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateTime6.toDateMidnight();
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str14, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        java.util.Date date1 = new java.util.Date((long) 97);
        int int2 = date1.getDay();
        int int3 = date1.getDate();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        int int6 = calendar4.getGreatestMinimum(11);
        java.util.TimeZone timeZone7 = calendar4.getTimeZone();
        calendar4.setLenient(false);
        java.util.Date date10 = calendar4.getTime();
        org.joda.time.MonthDay monthDay11 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property12 = monthDay11.dayOfMonth();
        java.lang.String str14 = monthDay11.toString("32");
        org.joda.time.Period period16 = org.joda.time.Period.years(19);
        org.joda.time.MonthDay monthDay18 = monthDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 70);
        int int19 = monthDay11.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1L, dateTimeZone22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration20, (org.joda.time.ReadableInstant) dateMidnight23, periodType24);
        int int26 = dateMidnight23.getYear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight23.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight28, readableDuration31, periodType32);
        org.joda.time.MonthDay monthDay34 = monthDay11.minus((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Period period44 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period46 = period44.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(1L, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.plusDays((int) 'a');
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = org.joda.time.DateMidnight.now(chronology53);
        long long58 = chronology53.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight59 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(chronology53);
        org.joda.time.DurationField durationField61 = chronology53.minutes();
        org.joda.time.DateTimeField dateTimeField62 = chronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField64 = chronology53.yearOfEra();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) 428, chronology53);
        org.joda.time.DurationField durationField66 = chronology53.years();
        org.joda.time.MonthDay monthDay67 = monthDay11.withChronologyRetainFields(chronology53);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((java.lang.Object) date10, chronology53);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514174888,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=14,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 07:16:14 GMT 2022");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "32" + "'", str14, "32");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(monthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(monthDay34);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(monthDay67);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.plusMonths(600100);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear((java.lang.Integer) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withPivotYear(32770);
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        int int23 = dateMidnight19.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj15, dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter12.withZone(dateTimeZone24);
        org.joda.time.Interval interval29 = yearMonthDay4.toInterval(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight30 = localDate3.toDateMidnight(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(741, (-1402), 87, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1402 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.plusDays((int) 'a');
        long long5 = dateMidnight4.getMillis();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusYears(6);
        org.joda.time.DateMidnight.Property property10 = dateMidnight7.year();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withMonthOfYear(11);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded((long) 17, 292278993);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plusDays(1922);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime19 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property21 = yearMonthDay18.year();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = property21.getAsText(locale22);
        org.joda.time.DateTimeField dateTimeField24 = property21.getField();
        boolean boolean25 = dateTimeField24.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField24.getType();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight15.withField(dateTimeFieldType26, 2765);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(1L, dateTimeZone31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateMidnight32, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(1L, dateTimeZone37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration35, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        int int41 = dateMidnight38.getYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight38.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight43, readableDuration44);
        mutablePeriod45.addSeconds(5);
        mutablePeriod45.setPeriod((long) 70);
        mutablePeriod45.addSeconds(0);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight32.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, 664);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight15.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        int int55 = mutablePeriod45.getDays();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8380800000L + "'", long5 == 8380800000L);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        boolean boolean7 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime17.copy();
        mutableDateTime19.addWeekyears(1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(100L, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.DateTime dateTime32 = property29.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime34 = yearMonthDay33.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay33.year();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(100L, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime43 = dateTime41.plus((long) (-1));
        org.joda.time.DateTime dateTime44 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded(readableDuration45, 1970);
        int int48 = property36.compareTo((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean49 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology50 = dateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime19.toMutableDateTime(chronology50);
        boolean boolean52 = charSet3.contains((java.lang.Object) mutableDateTime51);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Set<java.lang.Character> charSet56 = locale53.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        boolean boolean60 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58);
        boolean boolean61 = charSet56.isEmpty();
        java.util.Spliterator<java.lang.Character> charSpliterator62 = charSet56.spliterator();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList64, strMap65);
        boolean boolean67 = charSet56.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        boolean boolean68 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.parse("de");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList70, strMap71);
        boolean boolean73 = charSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72);
        int int74 = charSet3.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais (France)" + "'", str2, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fran\347ais (France)" + "'", str55, "fran\347ais (France)");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(charSpliterator62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int4 = localDateTime3.getMillisOfSecond();
        int int5 = localDateTime3.getMonthOfYear();
        java.util.Date date6 = localDateTime3.toDate();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusSeconds(15);
        int int9 = localDateTime3.getCenturyOfEra();
        int int10 = localDateTime3.getMonthOfYear();
        int int11 = localDateTime3.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.minusHours(16799);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = timeOfDay1.getFieldTypes();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) '4', 8380800000L, periodType5);
        int int7 = mutablePeriod6.getMinutes();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.minusHours(32772);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusSeconds((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.Period period23 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period25 = period23.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(1L, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plusDays((int) 'a');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period23, (org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = org.joda.time.DateMidnight.now(chronology32);
        long long37 = chronology32.add(0L, 1970L, (int) (short) 0);
        boolean boolean38 = dateTimeFieldType14.isSupported(chronology32);
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 100, chronology32);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay12.withChronologyRetainFields(chronology32);
        org.joda.time.DurationField durationField41 = chronology32.days();
        org.joda.time.DurationField durationField42 = chronology32.months();
        long long44 = durationField42.getMillis(28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 73632888000L + "'", long44 == 73632888000L);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMillis(100);
        org.joda.time.Period period7 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = dateTime10.toLocalDateTime();
        org.joda.time.DateTime dateTime13 = dateTime10.withMonthOfYear(11);
        org.joda.time.Duration duration14 = period7.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withYearOfCentury((int) '4');
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime27.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        mutableDateTime29.set(dateTimeFieldType30, 5);
        boolean boolean34 = localDateTime17.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime17.minusMinutes(86399999);
        org.joda.time.LocalDateTime.Property property37 = localDateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "minuteOfDay" + "'", str31, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("months");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        boolean boolean7 = locale4.equals((java.lang.Object) 67660042093259000L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(1L, dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7, periodType8);
        int int10 = dateMidnight6.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight6.getZone();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone11);
        org.joda.time.Interval interval14 = localDate2.toInterval(dateTimeZone11);
        boolean boolean16 = interval14.contains((long) 10);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0, (int) (byte) 0, (int) (byte) 10, 1);
        mutablePeriod21.addHours(0);
        mutablePeriod21.addMinutes((int) (short) 10);
        org.joda.time.Interval interval26 = interval14.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Interval interval27 = interval14.toInterval();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusDays((int) 'a');
        long long33 = dateMidnight32.getMillis();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.plus((long) (-1));
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusYears(6);
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.year();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight35.withMonthOfYear(11);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withDurationAdded((long) 17, 292278993);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withEra(0);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight40.withDayOfYear(6);
        boolean boolean48 = interval27.contains((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight40.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 8380800000L + "'", long33 == 8380800000L);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.MonthDay monthDay0 = new org.joda.time.MonthDay();
        org.joda.time.MonthDay.Property property1 = monthDay0.dayOfMonth();
        org.joda.time.MonthDay monthDay2 = property1.getMonthDay();
        org.joda.time.MonthDay monthDay4 = property1.addToCopy(200);
        org.joda.time.MonthDay monthDay6 = property1.addWrapFieldToCopy(37746);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(monthDay2);
        org.junit.Assert.assertNotNull(monthDay4);
        org.junit.Assert.assertNotNull(monthDay6);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        int int4 = period2.get(durationFieldType3);
        org.joda.time.Period period6 = period2.minusWeeks(9);
        org.joda.time.Period period7 = period2.toPeriod();
        org.joda.time.Period period9 = period2.minusYears(1471);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.joda.time.Period period9 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period11 = period9.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(1L, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusDays((int) 'a');
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period9, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(chronology18);
        long long23 = chronology18.add(0L, 1970L, (int) (short) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology18.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) 570, chronology18);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Calendar calendar28 = dateMidnight26.toCalendar(locale27);
        org.joda.time.YearMonthDay yearMonthDay29 = org.joda.time.YearMonthDay.fromCalendarFields(calendar28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = yearMonthDay29.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(100L, dateTimeZone32);
        boolean boolean34 = dateTimeZone32.isFixed();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.DateTime dateTime36 = yearMonthDay29.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay29.withDayOfMonth(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        java.lang.String str40 = dateTimeFieldType39.toString();
        boolean boolean41 = yearMonthDay29.isSupported(dateTimeFieldType39);
        int int42 = yearMonthDay29.getMonthOfYear();
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfDay" + "'", str40, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(100L, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        org.joda.time.DateTime dateTime16 = dateTime10.withField(dateTimeFieldType13, (int) 'u');
        java.lang.String str17 = dateTimeFieldType13.toString();
        org.joda.time.LocalTime.Property property18 = localTime7.property(dateTimeFieldType13);
        int int19 = localTime7.getMinuteOfHour();
        org.joda.time.LocalTime localTime21 = localTime7.plusMinutes(14);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514175368,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=15,MILLISECOND=368,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfDay" + "'", str14, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "minuteOfDay" + "'", str17, "minuteOfDay");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean3 = timeZone0.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone2);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        java.util.Date date7 = calendar4.getTime();
        java.util.Date date8 = calendar4.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.set(2053, 699);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2053");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514175396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=15,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:16:15 GMT 2022");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:16:15 GMT 2022");
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 1970);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = dateTime12.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime4.withZoneRetainFields(dateTimeZone15);
        int int18 = dateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(21600, 2022, 365, 86390000, 25926723, 82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86390000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1970, dateTimeZone1);
        int int3 = localDate2.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean5 = localDate2.isSupported(dateTimeFieldType4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight12 = localDate2.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 1970, dateTimeZone14);
        int int16 = localDate15.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate localDate20 = localDate15.plusYears(1970);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfEra();
        java.lang.String str22 = property21.getAsShortText();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate25 = localDate2.withFields((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalDate.Property property26 = localDate25.era();
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514175479,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=15,MILLISECOND=479,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "3940" + "'", str22, "3940");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 0);
        int int2 = localTime1.getMinuteOfHour();
        int int3 = localTime1.getHourOfDay();
        org.joda.time.LocalTime localTime5 = localTime1.withMinuteOfHour(19);
        org.joda.time.LocalTime localTime7 = localTime1.withHourOfDay(5);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = localTime7.withMinuteOfHour(59);
        org.joda.time.LocalTime localTime12 = localTime7.plusMinutes(0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(100);
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(100L, dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime14 = dateTime11.withMonthOfYear(11);
        org.joda.time.Duration duration15 = period8.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(1L, dateTimeZone20);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration18, (org.joda.time.ReadableInstant) dateMidnight21, periodType22);
        int int24 = dateMidnight21.getYear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(1L, dateTimeZone29);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateMidnight30, periodType31);
        int int33 = dateMidnight30.getYear();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.withDayOfMonth((int) (byte) 10);
        boolean boolean36 = dateMidnight21.isBefore((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight35.monthOfYear();
        org.joda.time.DateMidnight dateMidnight38 = property37.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight40 = property37.setCopy((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight41 = property37.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology44);
        long long46 = interval45.getEndMillis();
        java.lang.String str47 = interval45.toString();
        org.joda.time.MutableInterval mutableInterval48 = interval45.toMutableInterval();
        org.joda.time.Period period49 = interval45.toPeriod();
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.Period period52 = interval45.toPeriod(periodType50);
        org.joda.time.Duration duration53 = interval45.toDuration();
        java.lang.Object obj54 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1L, dateTimeZone57);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight58, readableDuration59, periodType60);
        int int62 = dateMidnight58.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight58.getZone();
        org.joda.time.DateMidnight dateMidnight64 = org.joda.time.DateMidnight.now(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(obj54, dateTimeZone63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(1L, dateTimeZone69);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period(readableDuration67, (org.joda.time.ReadableInstant) dateMidnight70, periodType71);
        int int73 = dateMidnight70.getYear();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight70.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight75, readableDuration76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight75, readableDuration78, periodType79);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime66, periodType79);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight41, periodType79);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((long) 52, periodType79);
        mutablePeriod83.setYears(36000000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10L + "'", long46 == 10L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z" + "'", str47, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(mutableInterval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        org.joda.time.Period period1 = org.joda.time.Period.hours((int) ' ');
        org.joda.time.Period period3 = period1.minusYears((int) ' ');
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 20);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(1L, dateTimeZone10);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateMidnight11, periodType12);
        int int14 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withDayOfMonth((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(1L, dateTimeZone19);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration17, (org.joda.time.ReadableInstant) dateMidnight20, periodType21);
        int int23 = dateMidnight20.getYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDayOfMonth((int) (byte) 10);
        boolean boolean26 = dateMidnight11.isBefore((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight25.monthOfYear();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        int int29 = property27.getMaximumShortTextLength(locale28);
        org.joda.time.DurationField durationField30 = property27.getDurationField();
        org.joda.time.DateMidnight dateMidnight31 = property27.withMinimumValue();
        int int32 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((int) (short) -1, (int) (byte) 100, (int) '#', 0, 0, 1970, (int) '#', (int) (byte) 100, periodType41);
        org.joda.time.Period period44 = period42.withMillis(8);
        org.joda.time.Period period46 = period44.minusWeeks((int) 'x');
        int int47 = period44.getSeconds();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period50 = period44.withFieldAdded(durationFieldType48, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight31.withFieldAdded(durationFieldType48, 11);
        org.joda.time.Period period54 = period3.withFieldAdded(durationFieldType48, 200);
        org.joda.time.Period period56 = period54.minusHours(19);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1200000 + "'", int32 == 1200000);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = dateTime2.toLocalDateTime();
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYear(0);
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusYears(664);
        int int10 = localDateTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 70 + "'", int7 == 70);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.DateTime dateTime9 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.minusDays(122);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), (long) (short) 10, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Interval interval11 = interval9.withDurationBeforeEnd(readableDuration10);
        org.joda.time.Period period12 = interval9.toPeriod();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1L, dateTimeZone15);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration13, (org.joda.time.ReadableInstant) dateMidnight16, periodType17);
        org.joda.time.Hours hours19 = period18.toStandardHours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period18.withFieldAdded(durationFieldType20, 100);
        org.joda.time.Period period24 = period12.withFieldAdded(durationFieldType20, (int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime1.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime27 = dateTime1.plusYears(32772);
        org.joda.time.DateTime dateTime29 = dateTime1.plusHours(2000);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(426);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        java.lang.String str6 = periodType5.getName();
        int int7 = periodType5.size();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(10L, (long) (byte) 100, periodType5, chronology8);
        int int10 = mutablePeriod9.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray11 = mutablePeriod9.getFieldTypes();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.forFields(durationFieldTypeArray11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) (byte) 10);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime19 = localTime16.plusHours(0);
        org.joda.time.LocalTime localTime21 = localTime16.withMinuteOfHour(30);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalTime localTime24 = localTime16.withFieldAdded(durationFieldType22, (int) (byte) 1);
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.minusSeconds((int) (byte) 0);
        org.joda.time.Period period29 = period27.minusSeconds((int) '#');
        org.joda.time.MutablePeriod mutablePeriod30 = period27.toMutablePeriod();
        mutablePeriod30.setPeriod((long) 100);
        mutablePeriod30.setMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((long) 1);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.plusHours((int) (short) 0);
        int int41 = timeOfDay40.getHourOfDay();
        org.joda.time.TimeOfDay.Property property42 = timeOfDay40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.TimeOfDay timeOfDay44 = property42.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay46 = property42.addToCopy(26);
        org.joda.time.Period period55 = new org.joda.time.Period((int) (short) -1, (int) (byte) 10, (int) (byte) 0, 100, (int) (byte) -1, (int) (byte) -1, (int) (short) 100, (-1));
        org.joda.time.Period period57 = period55.withMinutes(10);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(1L, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.plusDays((int) 'a');
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period55, (org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.DateMidnight dateMidnight65 = org.joda.time.DateMidnight.now(chronology64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight68, readableDuration69, periodType70);
        org.joda.time.Chronology chronology73 = null;
        mutablePeriod71.setPeriod(1L, chronology73);
        long long77 = chronology64.add((org.joda.time.ReadablePeriod) mutablePeriod71, (long) (short) 0, 32769);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay46.withChronologyRetainFields(chronology64);
        mutablePeriod30.setPeriod((long) 53, 28861000L, chronology64);
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.Chronology chronology81 = dateMidnight80.getChronology();
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DurationField durationField83 = durationFieldType22.getField(chronology81);
        boolean boolean84 = periodType12.isSupported(durationFieldType22);
        org.joda.time.PeriodType periodType85 = periodType12.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod(periodType85);
        org.joda.time.PeriodType periodType87 = periodType85.withSecondsRemoved();
        org.joda.time.Period period88 = new org.joda.time.Period((-700L), (long) 25755533, periodType85);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "YearWeekDayNoWeeks" + "'", str6, "YearWeekDayNoWeeks");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 32769L + "'", long77 == 32769L);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded(readableDuration8, 1970);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(100L, dateTimeZone12);
        boolean boolean14 = dateTimeZone12.isFixed();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(1L, dateTimeZone18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        int int23 = dateMidnight19.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight19.getZone();
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) ' ', dateTimeZone24);
        mutableDateTime15.setZone(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime10.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(1L, dateTimeZone2);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight3, periodType4);
        int int6 = dateMidnight3.getYear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight3.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime9.copy();
        mutableDateTime9.setMillis((long) (byte) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0);
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        boolean boolean19 = localTime15.isSupported(durationFieldType18);
        mutableDateTime9.add(durationFieldType18, (-1));
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime9.setZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone23);
        org.joda.time.LocalTime localTime27 = localTime25.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(100L, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) (-1));
        org.joda.time.DateTime dateTime35 = dateTime32.withTimeAtStartOfDay();
        java.util.Date date36 = dateTime32.toDate();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(1L, dateTimeZone39);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration37, (org.joda.time.ReadableInstant) dateMidnight40, periodType41);
        int int43 = dateMidnight40.getYear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight40.withDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime46.copy();
        mutableDateTime46.setMillis((long) (byte) 10);
        int int51 = mutableDateTime46.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(100L, dateTimeZone53);
        boolean boolean55 = dateTimeZone53.isFixed();
        mutableDateTime46.setZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime57 = dateTime32.toDateTime(dateTimeZone53);
        boolean boolean58 = localTime25.equals((java.lang.Object) dateTime32);
        org.joda.time.LocalTime localTime60 = localTime25.plusMillis(0);
        org.joda.time.LocalTime.Property property61 = localTime60.minuteOfHour();
        int int62 = property61.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis((int) (short) 0);
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTime dateTime10 = property7.addWrapFieldToCopy(11);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay11.year();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(100L, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) (-1));
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.withDurationAdded(readableDuration23, 1970);
        int int26 = property14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean27 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property28 = dateTime19.dayOfWeek();
        int int29 = dateTime19.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) (-1));
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        java.util.Date date8 = dateTime4.toDate();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Calendar calendar11 = dateTime4.toCalendar(locale10);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar11.getMinimum(200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 30 00:00:00 GMT 569");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-44179689599900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=569,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(100L, dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withCenturyOfEra(5);
        org.joda.time.LocalTime localTime5 = dateTime2.toLocalTime();
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property6.setCopy("DurationField[years]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[years]\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
    }
}

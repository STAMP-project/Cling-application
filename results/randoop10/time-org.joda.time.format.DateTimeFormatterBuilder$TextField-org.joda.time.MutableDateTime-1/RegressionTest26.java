import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest26 {

    public static boolean debug = false;

    @Test
    public void test13001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        boolean boolean5 = property3.isLeap();
        boolean boolean6 = property3.isLeap();
        java.util.Locale locale8 = new java.util.Locale("java.io.IOException: 2022-02-11T09:40:30.403Z");
        int int9 = property3.getMaximumTextLength(locale8);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "java.io.ioexception: 2022-02-11t09:40:30.403z");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test13002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13002");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        boolean boolean12 = mutableDateTime10.isAfter((long) 35651);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        boolean boolean19 = mutableDateTime14.isSupported(dateTimeFieldType18);
        mutableDateTime14.setSecondOfDay((int) '#');
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime14.getRoundingField();
        mutableDateTime14.addHours((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime14.getZone();
        int int26 = mutableDateTime14.getMillisOfSecond();
        boolean boolean27 = mutableDateTime10.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime10.setMillisOfDay(53);
        long long30 = mutableDateTime10.getMillis();
        java.lang.String str31 = mutableDateTime10.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 502 + "'", int6 == 502);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 502 + "'", int26 == 502);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644710399375L + "'", long30 == 1644710399375L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-13T00:00:00.053+00:00:00.678" + "'", str31, "2022-02-13T00:00:00.053+00:00:00.678");
    }

    @Test
    public void test13003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13003");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setDate((long) 715);
        org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T09:40:11.930Z" + "'", str2, "2022-02-11T09:40:11.930Z");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test13004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13004");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis(true);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime1.toMutableDateTime(chronology34);
        mutableDateTime37.addSeconds(74420121);
        mutableDateTime37.addMonths(33);
        int int42 = mutableDateTime37.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-678L) + "'", long33 == (-678L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 841 + "'", int42 == 841);
    }

    @Test
    public void test13005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13005");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        int int12 = mutableDateTime11.getSecondOfDay();
        int int13 = mutableDateTime11.getSecondOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        mutableDateTime24.setZoneRetainFields(dateTimeZone36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        boolean boolean44 = mutableDateTime39.isSupported(dateTimeFieldType43);
        int int45 = mutableDateTime24.get(dateTimeFieldType43);
        boolean boolean46 = mutableDateTime15.isSupported(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime15.add(durationFieldType47, 388);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.minuteOfHour();
        org.joda.time.Chronology chronology63 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = chronology57.millisOfDay();
        org.joda.time.DurationField durationField65 = durationFieldType47.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField66 = chronology57.centuryOfEra();
        mutableDateTime11.setRounding(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572891853,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=12,MILLISECOND=531,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test13006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13006");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = mutableDateTime3.get(dateTimeFieldType10);
        org.joda.time.Instant instant12 = mutableDateTime3.toInstant();
        mutableDateTime3.addDays((int) ' ');
        java.util.Date date15 = mutableDateTime3.toDate();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType16.isSupported(chronology17);
        mutableDateTime3.add(durationFieldType16, 902);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField35 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology29.minutes();
        boolean boolean38 = durationFieldType16.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 854, chronology29);
        java.util.Locale locale41 = java.util.Locale.UK;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        mutableDateTime50.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        mutableDateTime50.setRounding(dateTimeField58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField58.getAsShortText((int) (byte) 1, locale62);
        java.lang.String str64 = property44.getAsShortText(locale62);
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale65.getScript();
        java.lang.String str67 = locale62.getDisplayScript(locale65);
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale62.getDisplayLanguage(locale68);
        java.lang.String str70 = locale41.getDisplayCountry(locale68);
        boolean boolean71 = locale68.hasExtensions();
        java.lang.String str72 = locale68.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(1644572532521L, chronology29, locale68);
        org.joda.time.DateTimeField dateTimeField74 = chronology29.era();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeField74.set((long) 225, "2022-02-11T09:48:12.503+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:12.503+00:01:14.456\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Mar 15 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Friday" + "'", str46, "Friday");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ven." + "'", str64, "ven.");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "French" + "'", str69, "French");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "English (United States)" + "'", str72, "English (United States)");
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test13007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = mutableDateTime5.toString(dateTimeFormatter8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = mutableDateTime5.getChronology();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addMinutes((int) 'u');
        int int15 = mutableDateTime5.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime5.isAfter(readableInstant16);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:48:12.586+00:00:00.678" + "'", str9, "2022-02-11T09:48:12.586+00:00:00.678");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 12 + "'", int15 == 12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test13008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13008");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:43:47.242Z", (double) 1644537697137L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644537697137E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13009");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime50.toMutableDateTimeISO();
        java.lang.String str52 = mutableDateTime50.toString();
        boolean boolean54 = mutableDateTime50.isEqual(0L);
        int int55 = mutableDateTime50.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime50.minuteOfDay();
        long long57 = property56.remainder();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572891967,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=12,MILLISECOND=645,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.678" + "'", str42, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-673L) + "'", long46 == (-673L));
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.678" + "'", str47, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-03-21T18:32:00.322+00:00:00.678" + "'", str52, "2022-03-21T18:32:00.322+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 322 + "'", int55 == 322);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 322L + "'", long57 == 322L);
    }

    @Test
    public void test13010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13010");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime43.getZone();
        long long52 = dateTimeZone50.nextTransition((long) 59);
        java.lang.String str54 = dateTimeZone50.getName((long) (short) 0);
        java.lang.String str55 = dateTimeZone50.getID();
        long long57 = dateTimeZone50.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getMinuteOfHour();
        mutableDateTime64.addDays(831);
        boolean boolean74 = mutableDateTime60.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Calendar calendar76 = mutableDateTime64.toCalendar(locale75);
        java.lang.String str77 = dateTimeZone50.getShortName((-41907196800000L), locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter20.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter20.withDefaultYear(97608);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter20.withOffsetParsed();
        int int82 = dateTimeFormatter81.getDefaultYear();
        boolean boolean83 = dateTimeFormatter81.isParser();
        org.joda.time.Chronology chronology84 = dateTimeFormatter81.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone85 = dateTimeFormatter81.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-678L) + "'", long31 == (-678L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.678" + "'", str38, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 59L + "'", long52 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.678" + "'", str55, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 48 + "'", int71 == 48);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1716583692015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=12,MILLISECOND=693,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.678" + "'", str77, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2000 + "'", int82 == 2000);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNull(dateTimeZone85);
    }

    @Test
    public void test13011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13011");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        mutableDateTime1.addMonths((int) '4');
        mutableDateTime1.setMillis((-1479L));
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime1.yearOfEra();
        int int36 = property35.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfFloor();
        org.joda.time.DurationField durationField38 = property35.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 714 + "'", int7 == 714);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697036,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=714,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test13012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13012");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        java.lang.String str19 = mutableDateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.addWrapField(0);
        int int24 = property21.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime26 = property21.add(74457592);
        int int27 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime18.dayOfWeek();
        java.lang.String str29 = property28.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:12.727+00:00:00.678" + "'", str6, "2022-02-11T09:48:12.727+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.678" + "'", str14, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:12.727+00:00:00.678" + "'", str19, "2022-02-11T09:48:12.727+00:00:00.678");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfWeek" + "'", str29, "dayOfWeek");
    }

    @Test
    public void test13013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13013");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.format.DateTimePrinter dateTimePrinter75 = null;
        org.joda.time.format.DateTimeParser dateTimeParser76 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter75, dateTimeParser76);
        org.joda.time.DateTimeZone dateTimeZone78 = dateTimeFormatter77.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser79 = dateTimeFormatter77.getParser();
        boolean boolean80 = dateTimeFormatter77.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter77.withOffsetParsed();
        org.joda.time.Chronology chronology82 = dateTimeFormatter77.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter83 = dateTimeFormatter77.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter77.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter77.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter77.withPivotYear((java.lang.Integer) 809);
        org.joda.time.Chronology chronology89 = dateTimeFormatter88.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = mutableDateTime51.toString(dateTimeFormatter88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572892060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=12,MILLISECOND=738,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=738,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:12.739+00:00:00.678" + "'", str37, "2022-02-11T09:48:12.739+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(dateTimeZone78);
        org.junit.Assert.assertNull(dateTimeParser79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNull(chronology82);
        org.junit.Assert.assertNull(dateTimePrinter83);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertNull(chronology89);
    }

    @Test
    public void test13014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13014");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        int int24 = mutableDateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.addWrapField(0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.yearOfCentury();
        mutableDateTime30.setMillisOfDay(7);
        long long35 = property26.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime30);
        mutableDateTime30.setMillisOfDay(10);
        org.joda.time.Chronology chronology38 = mutableDateTime30.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) int24, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 678 + "'", int21 == 678);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test13015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology30);
        int int34 = mutableDateTime33.getMillisOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime36.yearOfCentury();
        int int39 = mutableDateTime36.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime36.add(readablePeriod40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime36.add(readableDuration42);
        mutableDateTime36.addMonths(74416);
        int int46 = mutableDateTime36.getWeekyear();
        boolean boolean47 = mutableDateTime33.isEqual((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime33.getZone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime50.getZone();
        long long59 = dateTimeZone57.nextTransition((long) 59);
        java.lang.String str61 = dateTimeZone57.getName((long) (short) 0);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        mutableDateTime63.addHours(59);
        org.joda.time.Chronology chronology68 = mutableDateTime63.getChronology();
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime63.toMutableDateTime();
        int int70 = mutableDateTime63.getYear();
        int int71 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) mutableDateTime63);
        long long73 = dateTimeZone48.getMillisKeepLocal(dateTimeZone57, 1757L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 678 + "'", int22 == 678);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:48:12.781+00:00:00.678" + "'", str28, "2022-02-11T09:48:12.781+00:00:00.678");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35292781 + "'", int34 == 35292781);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8223 + "'", int46 == 8223);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 59L + "'", long59 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.678" + "'", str61, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 678 + "'", int71 == 678);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1757L + "'", long73 == 1757L);
    }

    @Test
    public void test13016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13016");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(35067, 447);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 447");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime18.add(readableDuration26);
        java.lang.Object obj28 = mutableDateTime18.clone();
        mutableDateTime18.setMillis(0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:12.807+00:00:00.678" + "'", str5, "2022-02-11T09:48:12.807+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "0672-02-09T09:48:12.807+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "0672-02-09T09:48:12.807+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "0672-02-09T09:48:12.807+00:00:00.678");
    }

    @Test
    public void test13018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(100);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(10);
        int int17 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime19.add(readablePeriod21, (int) 'u');
        boolean boolean24 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.hourOfDay();
        mutableDateTime19.add((long) 479);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test13019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13019");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:41:22.238-00:00:00.001");
        java.lang.String str3 = locale1.getExtension('x');
        java.lang.Object obj4 = locale1.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "");
    }

    @Test
    public void test13020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13020");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(74415232);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime1.add(durationFieldType11, 13);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.setMillisOfSecond((int) 'a');
        int int20 = mutableDateTime15.getYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime1.getZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35292894 + "'", int4 == 35292894);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test13021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13021");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        mutableDateTime1.addWeeks(40);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        boolean boolean21 = dateTimeField19.isLeap(1644785274126L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test13022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        mutableDateTime12.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = mutableDateTime17.toCalendar(locale27);
        mutableDateTime17.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime17.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        mutableDateTime17.add(readablePeriod32, 730);
        int int35 = mutableDateTime17.getRoundingMode();
        mutableDateTime17.addWeeks(749);
        int int38 = mutableDateTime17.getSecondOfDay();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = mutableDateTime40.toDateTime();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        mutableDateTime51.addYears(0);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime40.addMillis((int) (byte) 0);
        int int60 = mutableDateTime40.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime40.property(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getRangeDurationType();
        mutableDateTime17.set(dateTimeFieldType61, 875);
        boolean boolean66 = mutableDateTime12.isSupported(dateTimeFieldType61);
        int int67 = mutableDateTime1.get(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType61.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=924,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97924 + "'", int67 == 97924);
        org.junit.Assert.assertNotNull(durationFieldType68);
    }

    @Test
    public void test13023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13023");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DurationField durationField25 = chronology19.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone38.isLocalDateTimeGap(localDateTime42);
        long long45 = dateTimeZone38.previousTransition((long) 518);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone38.isLocalDateTimeGap(localDateTime46);
        org.joda.time.Chronology chronology48 = chronology19.withZone(dateTimeZone38);
        long long50 = dateTimeZone38.nextTransition(1644578530482L);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField52 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addWeekyears(115);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableDateTime1.add(readablePeriod55, 48);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74892 + "'", int7 == 74892);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:48:12.946+00:00:00.678" + "'", str31, "2022-02-11T09:48:12.946+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 518L + "'", long45 == 518L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644578530482L + "'", long50 == 1644578530482L);
        org.junit.Assert.assertNull(dateTimeField52);
    }

    @Test
    public void test13024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.addHours((int) (short) 0);
        mutableDateTime4.addWeekyears((int) 'a');
        java.lang.String str10 = mutableDateTime4.toString("0");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        mutableDateTime4.set(dateTimeFieldType19, 5);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.minuteOfHour();
        long long40 = chronology31.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField41 = chronology31.weeks();
        long long45 = chronology31.add((long) 34838827, (long) 161, 178);
        org.joda.time.DurationField durationField46 = chronology31.weekyears();
        boolean boolean47 = dateTimeFieldType19.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField48 = chronology31.hourOfDay();
        long long50 = dateTimeField48.remainder((long) 97625);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 7218525L + "'", long40 == 7218525L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 34867485L + "'", long45 == 34867485L);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 97625L + "'", long50 == 97625L);
    }

    @Test
    public void test13025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13025");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.minuteOfHour();
        org.joda.time.Chronology chronology43 = chronology37.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology43);
        mutableDateTime1.setChronology(chronology43);
        java.lang.String str46 = mutableDateTime1.toString();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime1.add(readableDuration47, 35145958);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 973 + "'", int7 == 973);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697295,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=973,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T00:01:37.295Z" + "'", str46, "2022-02-11T00:01:37.295Z");
    }

    @Test
    public void test13026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13026");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        int int7 = mutableDateTime1.getRoundingMode();
        int int8 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfMonth();
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale23);
        org.joda.time.DateTimeField dateTimeField25 = chronology18.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology18.centuryOfEra();
        mutableDateTime1.setChronology(chronology18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(34835);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34835 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35292988 + "'", int4 == 35292988);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13027");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = dateTimeField14.getAsShortText(0L, locale17);
        boolean boolean20 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar37 = mutableDateTime34.toCalendar(locale36);
        java.util.Calendar calendar38 = mutableDateTime24.toCalendar(locale36);
        java.lang.String str39 = dateTimeField14.getAsShortText(readablePartial21, (int) ' ', locale36);
        int int40 = property11.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime41 = property11.roundCeiling();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        int int51 = mutableDateTime41.get(dateTimeFieldType48);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime41.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime41.yearOfCentury();
        java.util.Locale locale55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime56 = property53.set("2022-02-11T09:47:52.812+00:01:14.456", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:52.812+00:01:14.456\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572892323,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=1,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644537696323,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=1,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35294 + "'", int51 == 35294);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test13028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13028");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology16 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology17 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTimeFormatter2.parseDateTime("2022-02-27T15:57:52.097+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test13029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        int int31 = dateTimeField27.getDifference((long) 10, (long) 'a');
        int int33 = dateTimeField27.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray41 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int42 = dateTimeField27.getMinimumValue(readablePartial34, intArray41);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray44 = dateTimeField22.addWrapField(readablePartial23, 97625, intArray41, 74416135);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97625");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696350,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=28,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test13030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13030");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTimeFormatter11.print((long) 1117597);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test13031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13031");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.Chronology chronology16 = null;
        mutableDateTime15.setChronology(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime15.getZone();
        org.joda.time.Chronology chronology20 = chronology7.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology7.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime22.add(readablePeriod23);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test13032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13032");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(74942);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(100);
        mutableDateTime1.setMillisOfDay(74410);
        int int17 = mutableDateTime1.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test13034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13034");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.year();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfCeiling();
        int int21 = mutableDateTime20.getEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:13.102+00:00:00.678" + "'", str6, "2022-02-11T09:48:13.102+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.678" + "'", str14, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test13035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13035");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(211);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter23.getParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeParser24);
    }

    @Test
    public void test13036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13036");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str13 = dateTimeZone8.getID();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone8.isLocalDateTimeGap(localDateTime14);
        int int17 = dateTimeZone8.getOffsetFromLocal(1644572537832L);
        long long19 = dateTimeZone8.convertUTCToLocal(34890855L);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 678 + "'", int17 == 678);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 34891533L + "'", long19 == 34891533L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test13037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        long long18 = dateTimeZone12.adjustOffset((long) 34816672, false);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.add(41);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        int int33 = mutableDateTime28.getMillisOfSecond();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = mutableDateTime35.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (byte) 0);
        mutableDateTime35.setZoneRetainFields(dateTimeZone46);
        mutableDateTime28.setZone(dateTimeZone46);
        long long52 = dateTimeZone46.previousTransition((long) 852);
        mutableDateTime26.setZone(dateTimeZone46);
        int int54 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime26);
        boolean boolean55 = mutableDateTime26.isAfterNow();
        int int56 = mutableDateTime26.getSecondOfMinute();
        mutableDateTime26.addHours(874);
        boolean boolean60 = mutableDateTime26.isEqual((long) 878);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime26.copy();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:13.158+00:00:00.678" + "'", str5, "2022-02-11T09:48:13.158+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 34816672L + "'", long18 == 34816672L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 158 + "'", int33 == 158);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:48:13.158+00:00:00.678" + "'", str39, "2022-02-11T09:48:13.158+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 852L + "'", long52 == 852L);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 678 + "'", int54 == 678);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test13038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        mutableDateTime1.addMonths((int) '4');
        mutableDateTime1.setMillis((-1479L));
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime1.yearOfEra();
        int int36 = property35.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfFloor();
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime37.setHourOfDay(35144922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35144922 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 175 + "'", int7 == 175);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537696497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=175,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test13039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13039");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.yearOfEra();
        int int38 = mutableDateTime36.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime36.set(dateTimeFieldType39, 0);
        boolean boolean42 = dateTimeParserBucket35.restoreState((java.lang.Object) dateTimeFieldType39);
        java.lang.String str43 = dateTimeFieldType39.getName();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType39.getRangeDurationType();
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Friday" + "'", str13, "Friday");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minuteOfDay" + "'", str43, "minuteOfDay");
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test13040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13040");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        int int4 = mutableDateTime0.getMillisOfDay();
        boolean boolean5 = mutableDateTime0.isEqualNow();
        int int6 = mutableDateTime0.getSecondOfMinute();
        mutableDateTime0.addMonths(354);
        int int9 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = mutableDateTime0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(787);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 787 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572892555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=233,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35293233 + "'", int4 == 35293233);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 233 + "'", int9 == 233);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test13041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekyear();
        int int13 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.addWeekyears(154);
        mutableDateTime1.setMillisOfSecond(768);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime1.getZone();
        int int20 = dateTimeZone18.getOffsetFromLocal(271L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 678 + "'", int20 == 678);
    }

    @Test
    public void test13042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13042");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.yearOfCentury();
        int int18 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime20.getZone();
        org.joda.time.Chronology chronology28 = mutableDateTime20.getChronology();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        long long37 = dateTimeParserBucket34.computeMillis(true);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket34.getChronology();
        org.joda.time.Chronology chronology39 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.hourOfHalfday();
        boolean boolean42 = mutableDateTime20.equals((java.lang.Object) chronology38);
        org.joda.time.DurationField durationField43 = chronology38.weeks();
        org.joda.time.DateTime dateTime44 = mutableDateTime1.toDateTime(chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        org.joda.time.DurationField durationField48 = dateTimeField47.getDurationField();
        boolean boolean50 = dateTimeField47.isLeap((long) (short) -1);
        java.lang.String str51 = dateTimeField47.getName();
        long long54 = dateTimeField47.getDifferenceAsLong((long) 74416, 0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField47.getType();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = mutableDateTime57.toString(dateTimeFormatter60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime57.weekOfWeekyear();
        org.joda.time.Chronology chronology63 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType55.getField(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime44.toDateTime(chronology63);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-678L) + "'", long37 == (-678L));
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "secondOfMinute" + "'", str51, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 74L + "'", long54 == 74L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-11T09:48:13.255+00:00:00.678" + "'", str61, "2022-02-11T09:48:13.255+00:00:00.678");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test13043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addMonths(105);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 281 + "'", int6 == 281);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(dateTimeField10);
    }

    @Test
    public void test13044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13044");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.setMillisOfDay(7);
        long long10 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.Chronology chronology13 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        org.joda.time.DurationField durationField16 = dateTimeField14.getDurationField();
        java.lang.String str17 = dateTimeField14.toString();
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter22.getParser();
        boolean boolean25 = dateTimeFormatter22.isParser();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology33.add(readablePeriod35, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter22.withChronology(chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        boolean boolean41 = dateTimeFormatter40.isOffsetParsed();
        org.joda.time.Chronology chronology42 = dateTimeFormatter40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = dateTimeField43.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        int int65 = dateTimeField61.getDifference((long) 10, (long) 'a');
        int int67 = dateTimeField61.getLeapAmount((-1L));
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = dateTimeField61.getAsText((long) 340, locale69);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int75 = dateTimeField74.getMaximumValue();
        int int78 = dateTimeField74.getDifference((long) 10, (long) 'a');
        int int80 = dateTimeField74.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial81 = null;
        int[] intArray88 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int89 = dateTimeField74.getMinimumValue(readablePartial81, intArray88);
        int int90 = dateTimeField61.getMinimumValue(readablePartial71, intArray88);
        int int91 = dateTimeField57.getMaximumValue(readablePartial58, intArray88);
        int int92 = dateTimeField43.getMinimumValue(readablePartial45, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField14.addWrapPartial(readablePartial18, 340, intArray88, 67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[monthOfYear]" + "'", str17, "DateTimeField[monthOfYear]");
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 59 + "'", int80 == 59);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 99 + "'", int91 == 99);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test13045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13045");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.setVariant("2022");
        java.util.Locale locale17 = builder16.build();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = locale31.getDisplayScript();
        java.lang.String str34 = locale31.getISO3Country();
        java.lang.String str35 = locale17.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter10.withLocale(locale31);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter36.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = dateTimeFormatter38.print((long) 97838);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test13046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13046");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        long long15 = dateTimeField13.roundFloor((long) 140);
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 496);
        int int19 = dateTimeField13.getMinimumValue((long) 34839065);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-259200000L) + "'", long15 == (-259200000L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-292275054) + "'", int19 == (-292275054));
    }

    @Test
    public void test13047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13047");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        int int4 = mutableDateTime0.getMillisOfDay();
        boolean boolean5 = mutableDateTime0.isEqualNow();
        int int6 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime0.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572892667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=345,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35293345 + "'", int4 == 35293345);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
        org.junit.Assert.assertNull(dateTimeField7);
    }

    @Test
    public void test13048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13048");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        java.lang.String str10 = dateTimeField8.getAsText((long) 40);
        int int13 = dateTimeField8.getDifference((long) 355, (long) 598);
        org.joda.time.DurationField durationField14 = dateTimeField8.getLeapDurationField();
        java.lang.String str16 = dateTimeField8.getAsText((-1368779100L));
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = mutableDateTime20.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        mutableDateTime20.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        int int38 = mutableDateTime20.getEra();
        int int39 = mutableDateTime20.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime20.hourOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime20.dayOfMonth();
        int int42 = property41.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime44 = property41.add((long) 262);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar48 = mutableDateTime45.toCalendar(locale47);
        mutableDateTime45.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime45.weekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTime();
        int int57 = mutableDateTime55.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        int int65 = dateTimeField61.getDifference((long) 10, (long) 'a');
        int int67 = dateTimeField61.getLeapAmount((-1L));
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = dateTimeField61.getAsText((long) 340, locale69);
        java.util.Locale locale72 = java.util.Locale.UK;
        java.lang.String str73 = dateTimeField61.getAsShortText((int) '4', locale72);
        org.joda.time.ReadablePartial readablePartial74 = null;
        java.util.Locale locale76 = java.util.Locale.UK;
        java.lang.String str77 = dateTimeField61.getAsText(readablePartial74, 292278993, locale76);
        java.lang.String str78 = locale76.getISO3Country();
        java.lang.String str79 = locale76.getDisplayScript();
        int int80 = property58.getMaximumTextLength(locale76);
        java.lang.String str81 = property41.getAsShortText(locale76);
        java.lang.String str82 = dateTimeField8.getAsShortText(readablePartial17, 536324, locale76);
        int int84 = dateTimeField8.getMaximumValue((long) 274);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 28 + "'", int42 == 28);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572892679,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=357,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "52" + "'", str73, "52");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "292278993" + "'", str77, "292278993");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GBR" + "'", str78, "GBR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "31" + "'", str81, "31");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "536324" + "'", str82, "536324");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 11 + "'", int84 == 11);
    }

    @Test
    public void test13049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13049");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        java.lang.String str19 = mutableDateTime18.toString();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.centuryOfEra();
        int int21 = mutableDateTime18.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:13.410+00:00:00.678" + "'", str6, "2022-02-11T09:48:13.410+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.678" + "'", str14, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:13.410+00:00:00.678" + "'", str19, "2022-02-11T09:48:13.410+00:00:00.678");
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
    }

    @Test
    public void test13050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13050");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = new java.util.Locale("");
        java.lang.String str17 = locale13.getDisplayScript(locale16);
        java.lang.String str18 = locale10.getDisplayLanguage(locale16);
        java.lang.String str19 = locale10.getISO3Country();
        java.lang.String str20 = locale10.toLanguageTag();
        java.lang.String str21 = locale10.getDisplayLanguage();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str14, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CHN" + "'", str19, "CHN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh-CN" + "'", str20, "zh-CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
    }

    @Test
    public void test13051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13051");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:43:12.714Z", (double) 468);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=468.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13052");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.minuteOfHour();
        org.joda.time.Chronology chronology21 = chronology15.withUTC();
        org.joda.time.DurationField durationField22 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.dayOfYear();
        dateTimeParserBucket5.saveField(dateTimeField24, 35042543);
        java.lang.Object obj27 = dateTimeParserBucket5.saveState();
        java.util.Locale locale28 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "2022-02-11t09:40:20.145z");
    }

    @Test
    public void test13053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        int int11 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        boolean boolean18 = mutableDateTime13.isSupported(dateTimeFieldType17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime13.add(readableDuration19, 5);
        mutableDateTime13.setYear(74430747);
        int int24 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.era();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) 862);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime27.add(readablePeriod28, 255);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long32 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 509 + "'", int7 == 509);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test13054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, (long) 656, 912);
        org.joda.time.DurationField durationField17 = chronology10.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology27, locale29, (java.lang.Integer) 2022);
        java.util.Locale locale33 = locale29.stripExtensions();
        java.lang.String str34 = locale29.getDisplayScript();
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale29.getDisplayCountry(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(1644788769802L, chronology10, locale29);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 656L + "'", long16 == 656L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test13055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        boolean boolean19 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setMinuteOfDay(993);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getMonthOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        int int33 = mutableDateTime28.getMillisOfSecond();
        mutableDateTime28.setMillisOfDay(10);
        boolean boolean36 = mutableDateTime23.isEqual((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.millis();
        mutableDateTime23.add(durationFieldType37, 0);
        mutableDateTime15.add(durationFieldType37, 821);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime15.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundCeiling();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 584 + "'", int33 == 584);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test13056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13056");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale.Builder builder5 = builder3.setLanguage("days");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("2022-02-11T09:48:08.979+00:00:00.678");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:48:08.979+00:00:00.678 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test13057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getDayOfYear();
        mutableDateTime1.setTime(1644784833557L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        java.util.Date date21 = mutableDateTime12.toDate();
        mutableDateTime12.addDays((int) (byte) -1);
        mutableDateTime12.addMillis(2);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = mutableDateTime27.toDateTime();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        mutableDateTime38.addYears(0);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        boolean boolean45 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        int int46 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime1.addMonths(74484);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 602 + "'", int6 == 602);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test13058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13058");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        int int8 = mutableDateTime5.getDayOfYear();
        mutableDateTime5.setMinuteOfDay(350);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology24.dayOfYear();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int int32 = dateTimeField30.getMinimumValue(readablePartial31);
        mutableDateTime12.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime12.minuteOfHour();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime12.weekyear();
        java.lang.Object obj36 = mutableDateTime12.clone();
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setDayOfYear(64);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setTime(367, 35106664, 74588, 360);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 367 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "2022-02-13T00:00:00.678+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-13T00:00:00.678+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-13T00:00:00.678+00:00:00.678");
    }

    @Test
    public void test13059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13059");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.clockhourOfDay();
        boolean boolean12 = dateTimeField10.isLeap(54L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test13060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        mutableDateTime1.addMonths((int) '4');
        mutableDateTime1.setMillis((-1479L));
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime1.yearOfEra();
        int int36 = property35.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfFloor();
        mutableDateTime37.setMillisOfDay(760);
        int int40 = mutableDateTime37.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 635 + "'", int7 == 635);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537696958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=636,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test13061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        java.util.Date date12 = mutableDateTime1.toDate();
        boolean boolean14 = mutableDateTime1.isBefore((long) 180);
        boolean boolean15 = mutableDateTime1.isEqualNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74893 + "'", int7 == 74893);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Feb 12 23:59:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.monthOfYear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime12.year();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test13063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13063");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        dateTimeParserBucket5.setOffset(678);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket5.getZone();
        int int12 = dateTimeZone10.getOffset((long) 74439);
        java.lang.String str14 = dateTimeZone10.getNameKey((long) 74758);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 678 + "'", int12 == 678);
// flaky:         org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test13064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13064");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        int int7 = mutableDateTime2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean9 = mutableDateTime2.isSupported(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar23 = mutableDateTime20.toCalendar(locale22);
        mutableDateTime20.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.millisOfDay();
        int int27 = mutableDateTime20.getDayOfWeek();
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime20);
        mutableDateTime20.setMillisOfDay(0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        mutableDateTime32.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean39 = mutableDateTime32.isSupported(dateTimeFieldType38);
        int int40 = mutableDateTime32.getCenturyOfEra();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        mutableDateTime32.setZone(dateTimeZone47);
        mutableDateTime20.setZoneRetainFields(dateTimeZone47);
        long long52 = dateTimeZone47.adjustOffset(1644784905354L, true);
        org.joda.time.Chronology chronology53 = chronology11.withZone(dateTimeZone47);
        org.joda.time.Chronology chronology56 = null;
        java.util.Locale locale57 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(0L, chronology56, locale57, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeParserBucket60.getZone();
        org.joda.time.Chronology chronology62 = dateTimeParserBucket60.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.days();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology62.add(readablePeriod64, 0L, 166);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) 783, chronology62);
        org.joda.time.DateTimeField dateTimeField69 = chronology62.hourOfHalfday();
        java.util.Locale locale71 = new java.util.Locale("2022-02-11T09:40:46.771Z");
        int int72 = dateTimeField69.getMaximumTextLength(locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(1644572657274L, chronology11, locale71, (java.lang.Integer) 95, 57506492);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 675 + "'", int7 == 675);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572892997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=675,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644784905354L + "'", long52 == 1644784905354L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertEquals(locale71.toString(), "2022-02-11t09:40:46.771z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
    }

    @Test
    public void test13065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13065");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.addHours((int) (short) 0);
        mutableDateTime12.addWeekyears((int) 'a');
        java.lang.String str18 = mutableDateTime12.toString("0");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        mutableDateTime12.set(dateTimeFieldType27, 5);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.minuteOfHour();
        org.joda.time.DurationField durationField44 = chronology39.hours();
        java.lang.String str45 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType27.getField(chronology39);
        org.joda.time.DateTimeField dateTimeField48 = chronology39.dayOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74893 + "'", int7 == 74893);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test13066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13066");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setDate((long) 715);
        org.joda.time.DateTime dateTime5 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        int int13 = mutableDateTime7.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime7.weekyear();
        int int15 = mutableDateTime7.getMonthOfYear();
        long long16 = mutableDateTime7.getMillis();
        int int17 = mutableDateTime7.getSecondOfDay();
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        int int19 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.addWrapField(0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.setMillisOfDay(7);
        long long30 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.setMillisOfDay(10);
        org.joda.time.Chronology chronology33 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.monthOfYear();
        long long39 = chronology33.getDateTimeMillis(0, (int) (short) 10, 22, 161);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int45 = dateTimeField43.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.dayOfWeek();
        java.util.Locale locale50 = null;
        java.lang.String str51 = property49.getAsText(locale50);
        java.util.Locale locale52 = null;
        int int53 = property49.getMaximumTextLength(locale52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        mutableDateTime55.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int64 = dateTimeField63.getMaximumValue();
        mutableDateTime55.setRounding(dateTimeField63);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = dateTimeField63.getAsShortText((int) (byte) 1, locale67);
        java.lang.String str69 = property49.getAsShortText(locale67);
        java.lang.String str70 = dateTimeField43.getAsShortText(1L, locale67);
        java.lang.String str71 = locale67.getISO3Country();
        boolean boolean72 = locale67.hasExtensions();
        java.lang.String str73 = locale67.getDisplayLanguage();
        java.lang.String str74 = locale67.getDisplayScript();
        java.lang.String str75 = locale67.getScript();
        java.lang.String str76 = locale67.getCountry();
        int int77 = dateTimeField40.getMaximumShortTextLength(locale67);
        int int79 = dateTimeField40.getMinimumValue((long) 74618);
        org.joda.time.ReadablePartial readablePartial80 = null;
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeField40.getAsShortText(readablePartial80, 74454, locale82);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField40, 754);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 754");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T09:40:11.930Z" + "'", str2, "2022-02-11T09:40:11.930Z");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 807 + "'", int13 == 807);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572893129L + "'", long16 == 1644572893129L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35293 + "'", int17 == 35293);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62141731200517L) + "'", long39 == (-62141731200517L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Friday" + "'", str51, "Friday");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ven." + "'", str69, "ven.");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "French" + "'", str73, "French");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "74454" + "'", str83, "74454");
    }

    @Test
    public void test13067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology41, locale43, (java.lang.Integer) 2022);
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = dateTimeField30.getAsText(readablePartial31, 842, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology16, locale47, (java.lang.Integer) 237);
        int int52 = property2.getMaximumShortTextLength(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property2.getFieldType();
        java.lang.String str54 = dateTimeFieldType53.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Friday" + "'", str4, "Friday");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "842" + "'", str49, "842");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "dayOfWeek" + "'", str54, "dayOfWeek");
    }

    @Test
    public void test13068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13068");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:46:11.944Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:46:11.944z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        int int10 = mutableDateTime1.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfCeiling();
        mutableDateTime12.setMillisOfSecond(17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 862 + "'", int6 == 862);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test13070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        mutableDateTime6.addDays(0);
        long long12 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime6);
        int int13 = mutableDateTime6.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime6.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.minuteOfHour();
        int int17 = mutableDateTime14.getDayOfYear();
        int int18 = mutableDateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35293 + "'", int13 == 35293);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 42 + "'", int17 == 42);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
    }

    @Test
    public void test13071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13071");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.add(6L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.setSecondOfDay((int) (byte) 0);
        mutableDateTime11.setHourOfDay(0);
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        long long23 = mutableDateTime11.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfMonth(284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 284 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572893242,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=13,MILLISECOND=920,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74893 + "'", int17 == 74893);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644710400242L + "'", long23 == 1644710400242L);
    }

    @Test
    public void test13072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13072");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.secondOfMinute();
        java.lang.String str18 = chronology8.toString();
        org.joda.time.DurationField durationField19 = chronology8.days();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = mutableDateTime14.toDateTime(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter9.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withZoneUTC();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.util.Locale locale57 = java.util.Locale.TAIWAN;
        java.lang.String str58 = locale57.getScript();
        java.lang.String str59 = locale54.getDisplayScript(locale57);
        java.util.Locale locale60 = java.util.Locale.US;
        java.lang.String str61 = locale54.getDisplayLanguage(locale60);
        java.lang.String str62 = locale54.getDisplayScript();
        java.lang.String str64 = locale54.getExtension('a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter33.withLocale(locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter65.withZoneUTC();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        int int71 = mutableDateTime68.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime68.set(dateTimeFieldType72, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        int int76 = mutableDateTime68.get(dateTimeFieldType75);
        int int77 = mutableDateTime68.getWeekOfWeekyear();
        org.joda.time.Instant instant78 = mutableDateTime68.toInstant();
        int int79 = mutableDateTime68.getMinuteOfHour();
        int int80 = mutableDateTime68.getWeekyear();
        org.joda.time.DateTime dateTime81 = mutableDateTime68.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = dateTimeFormatter66.print((org.joda.time.ReadableInstant) dateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.678" + "'", str30, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Friday" + "'", str38, "Friday");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ven." + "'", str56, "ven.");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "French" + "'", str61, "French");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test13074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13074");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology9.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology9.getDateTimeMillis(35932, 74919928, 0, 35149474);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74919928 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.678" + "'", str15, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test13075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13075");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:47:56.280+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:47:56.280+00:01:14.456' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        mutableDateTime1.addSeconds(0);
        int int13 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test13077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        mutableDateTime1.addMonths((int) 'a');
        boolean boolean14 = mutableDateTime1.isAfter((long) 13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.year();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 809);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronolgy();
        boolean boolean15 = dateTimeFormatter13.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withOffsetParsed();
        java.io.Writer writer17 = null;
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer17, readablePartial18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test13079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13079");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addWeekyears(178);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = mutableDateTime1.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        mutableDateTime14.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        int int23 = dateTimeField22.getMaximumValue();
        mutableDateTime14.setRounding(dateTimeField22);
        int int25 = mutableDateTime14.getMonthOfYear();
        mutableDateTime14.addWeekyears(11);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfHalfday();
        org.joda.time.DurationField durationField39 = chronology37.days();
        boolean boolean40 = durationFieldType29.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 292278993, chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekyearOfCentury();
        mutableDateTime14.setChronology(chronology37);
        boolean boolean45 = dateTimeFieldType9.isSupported(chronology37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = mutableDateTime47.toString(dateTimeFormatter50);
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket57.getZone();
        java.lang.String str60 = dateTimeZone58.getNameKey((long) (byte) 0);
        mutableDateTime47.setZoneRetainFields(dateTimeZone58);
        org.joda.time.Chronology chronology62 = mutableDateTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.monthOfYear();
        boolean boolean64 = dateTimeFieldType9.isSupported(chronology62);
        org.joda.time.DurationField durationField65 = chronology62.months();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField67 = chronology62.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572893366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=44,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:48:14.044+00:00:00.678" + "'", str51, "2022-02-11T09:48:14.044+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test13080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13080");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology8.add(readablePeriod16, (long) 41142, 968);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 41142L + "'", long19 == 41142L);
    }

    @Test
    public void test13081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        mutableDateTime21.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int30 = mutableDateTime21.getDayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        org.joda.time.Chronology chronology37 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        mutableDateTime21.setZone(dateTimeZone38);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.secondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572893396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=74,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test13082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime1.add(readableDuration19, 842);
        mutableDateTime1.setSecondOfDay(320);
        boolean boolean24 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime();
        mutableDateTime25.addHours(0);
        int int28 = mutableDateTime25.getSecondOfMinute();
        int int29 = mutableDateTime25.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696410,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=88,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test13083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13083");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("chinois");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfMonth();
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology21, locale26);
        java.util.Locale locale28 = dateTimeParserBucket27.getLocale();
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet29);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("chinois");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfEra();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar53 = mutableDateTime50.toCalendar(locale52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale49, locale52, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = null;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strMap64);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap69);
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.yearOfEra();
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar75 = mutableDateTime72.toCalendar(locale74);
        java.util.Locale locale76 = java.util.Locale.TAIWAN;
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getISO3Country();
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale71, locale74, locale76, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale.FilteringMode filteringMode83 = null;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList70, (java.util.Collection<java.util.Locale>) localeList81, filteringMode83);
        java.util.Set<java.lang.String> strSet85 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList70, (java.util.Collection<java.lang.String>) strSet85);
        java.lang.String str87 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList86);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList36, (java.util.Collection<java.lang.String>) strList86);
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList86);
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList89);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "2022-02-11t09:40:20.145z");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572893436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=114,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644572893436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=114,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(strList90);
    }

    @Test
    public void test13084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13084");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology14.hours();
        org.joda.time.DurationField durationField17 = chronology14.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(577, (int) (short) -1, 40, 0, 26, 74749093, 269, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74749093 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test13085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        long long3 = mutableDateTime2.getMillis();
        int int4 = mutableDateTime2.getSecondOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean13 = mutableDateTime6.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.dayOfMonth();
        org.joda.time.Chronology chronology15 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(chronology15);
        java.util.Locale locale19 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 350, chronology15, locale19, (java.lang.Integer) 810, 781);
        dateTimeParserBucket23.setOffset(736);
        long long26 = dateTimeParserBucket23.computeMillis();
        dateTimeParserBucket23.setOffset(2063);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1644572893526L + "'", long3 == 1644572893526L);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35294 + "'", int4 == 35294);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 204 + "'", int11 == 204);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertEquals(locale19.toString(), "yearofera");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-386L) + "'", long26 == (-386L));
    }

    @Test
    public void test13086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        int int7 = mutableDateTime1.getRoundingMode();
        int int8 = mutableDateTime1.getWeekOfWeekyear();
        boolean boolean9 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.copy();
        int int11 = mutableDateTime10.getHourOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime10.add(readableDuration12, 400);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.secondOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35294217 + "'", int4 == 35294217);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        int int9 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        mutableDateTime13.addDays(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        java.util.Date date29 = mutableDateTime20.toDate();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime20.secondOfDay();
        org.joda.time.DateTime dateTime32 = mutableDateTime20.toDateTime();
        boolean boolean33 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getDayOfYear();
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DurationField durationField36 = property11.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572893555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=233,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test13088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13088");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        int int4 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.minuteOfHour();
        int int15 = mutableDateTime9.getSecondOfDay();
        mutableDateTime9.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology18 = mutableDateTime9.getChronology();
        int int19 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        int int28 = mutableDateTime23.getMillisOfSecond();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = mutableDateTime30.toString(dateTimeFormatter33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str43 = dateTimeZone41.getNameKey((long) (byte) 0);
        mutableDateTime30.setZoneRetainFields(dateTimeZone41);
        mutableDateTime23.setZone(dateTimeZone41);
        java.lang.String str46 = dateTimeZone41.toString();
        org.joda.time.DateTime dateTime47 = mutableDateTime9.toDateTime(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter7.withZone(dateTimeZone41);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74894 + "'", int15 == 74894);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 247 + "'", int28 == 247);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:48:14.247+00:00:00.678" + "'", str34, "2022-02-11T09:48:14.247+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertNull(str43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.678" + "'", str46, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
    }

    @Test
    public void test13089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13089");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "twn" + "'", str5, "twn");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test13090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13090");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        boolean boolean23 = dateTimeParserBucket17.restoreState((java.lang.Object) property22);
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        boolean boolean34 = mutableDateTime26.isEqualNow();
        int int35 = property22.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime26.yearOfCentury();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime11.copy();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = mutableDateTime41.toString(dateTimeFormatter44);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        java.lang.String str54 = dateTimeZone52.getNameKey((long) (byte) 0);
        mutableDateTime41.setZoneRetainFields(dateTimeZone52);
        org.joda.time.Chronology chronology56 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType39.getField(chronology56);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType39.getRangeDurationType();
        java.lang.String str60 = dateTimeFieldType39.getName();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime38.property(dateTimeFieldType39);
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        mutableDateTime62.addSeconds(572);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 269 + "'", int7 == 269);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572893591L + "'", long10 == 1644572893591L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-678L) + "'", long20 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:48:14.269+00:00:00.678" + "'", str45, "2022-02-11T09:48:14.269+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekOfWeekyear" + "'", str60, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test13091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13091");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(34875356);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test13092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13092");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 167, chronology8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        boolean boolean19 = mutableDateTime14.isSupported(dateTimeFieldType18);
        int int20 = mutableDateTime14.getYearOfEra();
        mutableDateTime14.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = dateTimeField27.getAsShortText(0L, locale30);
        boolean boolean33 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        int int46 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfEra();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar50 = mutableDateTime47.toCalendar(locale49);
        java.util.Calendar calendar51 = mutableDateTime37.toCalendar(locale49);
        java.lang.String str52 = dateTimeField27.getAsShortText(readablePartial34, (int) ' ', locale49);
        int int53 = property24.getMaximumShortTextLength(locale49);
        org.joda.time.MutableDateTime mutableDateTime54 = property24.roundCeiling();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean56 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime12.weekOfWeekyear();
        java.lang.String str58 = property57.getAsShortText();
        org.joda.time.DurationField durationField59 = property57.getLeapDurationField();
        java.lang.String str60 = property57.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572893622,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=300,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644537696622,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=300,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "32" + "'", str52, "32");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
    }

    @Test
    public void test13093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13093");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(124);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test13094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.addWrapField(148);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfEra();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar11 = mutableDateTime8.toCalendar(locale10);
        mutableDateTime8.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime8.weekyear();
        mutableDateTime8.addHours(930);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology27.centuries();
        mutableDateTime8.setChronology(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.years();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime7.toMutableDateTime(chronology27);
        java.lang.String str36 = mutableDateTime35.toString();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.weekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35294370 + "'", int4 == 35294370);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572893692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=370,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2170-02-09T09:48:13.692Z" + "'", str36, "2170-02-09T09:48:13.692Z");
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test13095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        boolean boolean25 = dateTimeField19.isLenient();
        mutableDateTime1.setRounding(dateTimeField19);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime29.yearOfCentury();
        org.joda.time.DurationField durationField32 = property31.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.roundHalfEven();
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        int int36 = property31.getMinimumValue();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology45, locale47, (java.lang.Integer) 2022);
        java.lang.String str51 = locale47.getDisplayLanguage();
        java.lang.String str52 = property31.getAsText(locale47);
        java.lang.String str53 = dateTimeField19.getAsShortText(74582727, locale47);
        org.joda.time.DurationField durationField54 = dateTimeField19.getRangeDurationField();
        java.lang.Class<?> wildcardClass55 = durationField54.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "French" + "'", str51, "French");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22" + "'", str52, "22");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "74582727" + "'", str53, "74582727");
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test13096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar19 = mutableDateTime16.toCalendar(locale18);
        mutableDateTime16.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime16.weekyear();
        mutableDateTime16.addHours(930);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology35.centuries();
        mutableDateTime16.setChronology(chronology35);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology48.getZone();
        mutableDateTime16.setZoneRetainFields(dateTimeZone49);
        long long52 = dateTimeZone49.previousTransition((long) '#');
        long long54 = dateTimeZone14.getMillisKeepLocal(dateTimeZone49, (long) 158);
        java.lang.String str56 = dateTimeZone14.getName(34817000L);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket64.getZone();
        boolean boolean67 = dateTimeZone66.isFixed();
        long long69 = dateTimeZone58.getMillisKeepLocal(dateTimeZone66, 0L);
        long long71 = dateTimeZone14.getMillisKeepLocal(dateTimeZone58, (long) 166);
        org.joda.time.LocalDateTime localDateTime72 = null;
        boolean boolean73 = dateTimeZone58.isLocalDateTimeGap(localDateTime72);
        long long77 = dateTimeZone58.convertLocalToUTC(1644572773648L, false, 900L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=402,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572893724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=14,MILLISECOND=402,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 158L + "'", long54 == 158L);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.678" + "'", str56, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 166L + "'", long71 == 166L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1644572772970L + "'", long77 == 1644572772970L);
    }

    @Test
    public void test13097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13097");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:41:13.460Z");
        java.lang.String str2 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:41:13.460z");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test13098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        java.lang.Object obj10 = mutableDateTime1.clone();
        mutableDateTime1.addHours(74418645);
        int int13 = mutableDateTime1.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        mutableDateTime1.addYears(74583);
        mutableDateTime1.setMillis((long) 10655383);
        int int19 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 469 + "'", int6 == 469);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "2022-02-13T20:48:14.469+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "2022-02-13T20:48:14.469+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "2022-02-13T20:48:14.469+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test13099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13099");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime24.getZone();
        long long33 = dateTimeZone31.nextTransition((long) 59);
        java.lang.String str35 = dateTimeZone31.getName((long) (short) 0);
        java.lang.String str36 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime43.toMutableDateTime();
        int int50 = mutableDateTime43.getMinuteOfHour();
        mutableDateTime43.addDays(831);
        boolean boolean53 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Calendar calendar55 = mutableDateTime43.toCalendar(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        int int62 = dateTimeField58.getDifference((long) 10, (long) 'a');
        int int64 = dateTimeField58.getLeapAmount((-1L));
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = dateTimeField58.getAsText((long) 340, locale66);
        java.lang.String str68 = locale54.getDisplayVariant(locale66);
        java.lang.String str69 = dateTimeZone31.getShortName((long) 74427617, locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter20.withLocale(locale66);
        java.lang.String str71 = locale66.getVariant();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 59L + "'", long33 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.678" + "'", str35, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.678" + "'", str36, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1716583693831,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=14,MILLISECOND=509,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.678" + "'", str69, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test13100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13100");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getMinimumValue((long) (short) 10);
        long long6 = dateTimeField2.roundHalfFloor(0L);
        long long9 = dateTimeField2.getDifferenceAsLong(1644572749043L, (long) 259);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 322L + "'", long6 == 322L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572748L + "'", long9 == 1644572748L);
    }

    @Test
    public void test13101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13101");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        int int5 = dateTimeField3.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property9.getMaximumTextLength(locale12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        mutableDateTime15.setRounding(dateTimeField23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = dateTimeField23.getAsShortText((int) (byte) 1, locale27);
        java.lang.String str29 = property9.getAsShortText(locale27);
        java.lang.String str30 = dateTimeField3.getAsShortText(1L, locale27);
        int int31 = dateTimeField3.getMaximumValue();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = dateTimeField44.getAsText(readablePartial45, 842, locale61);
        int int64 = dateTimeField3.getMaximumShortTextLength(locale61);
        java.util.Locale.setDefault(category0, locale61);
        java.lang.String str66 = locale61.getScript();
        java.lang.String str67 = locale61.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Friday" + "'", str11, "Friday");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ven." + "'", str29, "ven.");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "842" + "'", str63, "842");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test13102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13102");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        long long8 = dateTimeParserBucket5.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        int int18 = mutableDateTime10.getMonthOfYear();
        mutableDateTime10.addDays(5);
        boolean boolean22 = mutableDateTime10.isAfter((long) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime24.getZone();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        mutableDateTime10.setZoneRetainFields(dateTimeZone44);
        dateTimeParserBucket5.setZone(dateTimeZone44);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.DurationField durationField58 = chronology56.centuries();
        org.joda.time.DateTimeZone dateTimeZone59 = chronology56.getZone();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.secondOfDay();
        dateTimeParserBucket5.saveField(dateTimeField60, 35651);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 977);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        mutableDateTime66.addHours(59);
        org.joda.time.Chronology chronology71 = mutableDateTime66.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime66.toMutableDateTime();
        mutableDateTime72.setTime((long) 381);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        int int79 = mutableDateTime76.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime76.set(dateTimeFieldType80, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone83 = mutableDateTime76.getZone();
        org.joda.time.LocalDateTime localDateTime84 = null;
        boolean boolean85 = dateTimeZone83.isLocalDateTimeGap(localDateTime84);
        mutableDateTime72.setZone(dateTimeZone83);
        java.lang.String str88 = dateTimeZone83.getNameKey((long) 218);
        java.lang.String str90 = dateTimeZone83.getShortName((long) 34848733);
        boolean boolean92 = dateTimeZone83.equals((java.lang.Object) 1644784987206L);
        dateTimeParserBucket5.setZone(dateTimeZone83);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 568 + "'", int16 == 568);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644537696891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=569,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertNull(str88);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00:00.678" + "'", str90, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test13103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13103");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.DurationField durationField20 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.weekyear();
        long long24 = dateTimeField22.remainder((long) 74539);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        org.joda.time.Chronology chronology37 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime32.toMutableDateTime();
        int int39 = mutableDateTime32.getMinuteOfHour();
        mutableDateTime32.addDays(831);
        boolean boolean42 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Calendar calendar44 = mutableDateTime32.toCalendar(locale43);
        java.lang.String str45 = locale43.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = dateTimeField22.set((long) 34846890, "2022-02-11T00:01:37.550Z", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T00:01:37.550Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 259274539L + "'", long24 == 259274539L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1716583693934,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=14,MILLISECOND=612,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en-CA" + "'", str45, "en-CA");
    }

    @Test
    public void test13104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13104");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test13105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13105");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray30 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int31 = dateTimeField16.getMinimumValue(readablePartial23, intArray30);
        org.joda.time.DurationField durationField32 = dateTimeField16.getRangeDurationField();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology41, locale43, (java.lang.Integer) 2022);
        java.util.Locale locale47 = locale43.stripExtensions();
        int int48 = dateTimeField16.getMaximumShortTextLength(locale43);
        java.lang.String str49 = locale10.getDisplayCountry(locale43);
        java.lang.String str50 = locale10.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fra" + "'", str50, "fra");
    }

    @Test
    public void test13106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        int int22 = mutableDateTime15.getEra();
        mutableDateTime15.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        int int27 = mutableDateTime15.get(dateTimeFieldType25);
        mutableDateTime1.set(dateTimeFieldType25, 74440);
        int int30 = mutableDateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74894 + "'", int7 == 74894);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
    }

    @Test
    public void test13107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int12 = mutableDateTime10.get(dateTimeFieldType11);
        int int13 = mutableDateTime10.getEra();
        int int14 = mutableDateTime10.getWeekOfWeekyear();
        mutableDateTime10.addMonths(57);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 661 + "'", int6 == 661);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
    }

    @Test
    public void test13108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13108");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.minuteOfHour();
        mutableDateTime5.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.addWrapField(0);
        boolean boolean17 = mutableDateTime5.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime19.set(dateTimeFieldType23, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime19.getZone();
        long long28 = dateTimeZone26.nextTransition((long) 59);
        java.util.TimeZone timeZone29 = dateTimeZone26.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime5, dateTimeZone26);
        long long32 = dateTimeZone1.getMillisKeepLocal(dateTimeZone26, (long) 645);
        org.joda.time.LocalDateTime localDateTime33 = null;
        boolean boolean34 = dateTimeZone26.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime36.yearOfCentury();
        mutableDateTime36.setMillisOfDay(7);
        mutableDateTime36.setDate(1000L);
        int int43 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) mutableDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setMillisOfSecond(35152781);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35152781 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 59L + "'", long28 == 59L);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-34L) + "'", long32 == (-34L));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 678 + "'", int43 == 678);
    }

    @Test
    public void test13109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13109");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.millisOfSecond();
        long long17 = dateTimeField15.roundCeiling((-1404779304L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1404779304L) + "'", long17 == (-1404779304L));
    }

    @Test
    public void test13110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str7 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        mutableDateTime9.addDays(0);
        int int15 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.DateTime dateTime16 = mutableDateTime9.toDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.Instant instant27 = mutableDateTime18.toInstant();
        mutableDateTime18.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.millis();
        java.lang.String str31 = durationFieldType30.toString();
        java.lang.String str32 = durationFieldType30.getName();
        mutableDateTime18.add(durationFieldType30, 20);
        mutableDateTime9.add(durationFieldType30, 34812903);
        mutableDateTime1.add(durationFieldType30, 34837044);
        int int39 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfCeiling();
        int int45 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:14.697+00:00:00.678" + "'", str5, "2022-02-11T09:48:14.697+00:00:00.678");
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:48:14.697+00:00:00.678" + "'", str7, "2022-02-11T09:48:14.697+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millis" + "'", str31, "millis");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millis" + "'", str32, "millis");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test13111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13111");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("214");
        java.util.Locale.Builder builder8 = builder4.setRegion("AM");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setLanguage("924");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 924 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13112");
        java.util.Locale locale3 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.lang.String str7 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:40:08.213Z" + "'", str6, "2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:40:08.213Z" + "'", str7, "2022-02-11T09:40:08.213Z");
    }

    @Test
    public void test13113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13113");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:41:34.856-00:00:00.001");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13114");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay(7);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        java.util.Locale locale9 = new java.util.Locale("\u4e2d\u56fd\u8a9e");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale9, (java.lang.Integer) 57493860, 754);
        long long14 = dateTimeParserBucket12.computeMillis(false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals(locale9.toString(), "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-678L) + "'", long14 == (-678L));
    }

    @Test
    public void test13115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13115");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = mutableDateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone22);
        mutableDateTime4.setZone(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.lang.String str57 = dateTimeField30.getAsShortText(1L, locale54);
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.lang.String str59 = dateTimeZone22.getShortName((long) 6, locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        mutableDateTime0.setMillisOfDay(2000);
        int int63 = mutableDateTime0.getDayOfMonth();
        boolean boolean65 = mutableDateTime0.isEqual(3715200417L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 762 + "'", int9 == 762);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:48:14.762+00:00:00.678" + "'", str15, "2022-02-11T09:48:14.762+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Friday" + "'", str38, "Friday");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ven." + "'", str56, "ven.");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(charSet58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.678" + "'", str59, "+00:00:00.678");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test13116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13116");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:48:15.274+00:01:14.456");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:48:15.274+00:01:14.456");
    }

    @Test
    public void test13117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        int int14 = mutableDateTime1.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        mutableDateTime1.setMillis(readableInstant15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35294789 + "'", int4 == 35294789);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
    }

    @Test
    public void test13118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13118");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        int int8 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter11.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 421);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("2022-02-11T09:46:01.985Z", dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test13119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime12.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test13120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime1.isEqual(readableInstant9);
        mutableDateTime1.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime1.add(durationFieldType14, (int) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        boolean boolean24 = durationFieldType14.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfDay();
        int int29 = dateTimeField26.getDifference(1644784842000L, (long) 475);
        int int31 = dateTimeField26.get((long) 863);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField26.getMinimumValue(readablePartial32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1644784841 + "'", int29 == 1644784841);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test13121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType7, 1736);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType7.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.year();
        org.joda.time.DurationField durationField22 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType11.getField(chronology19);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.yearOfCentury();
        java.util.Locale locale41 = java.util.Locale.UK;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        mutableDateTime50.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        mutableDateTime50.setRounding(dateTimeField58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField58.getAsShortText((int) (byte) 1, locale62);
        java.lang.String str64 = property44.getAsShortText(locale62);
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale65.getScript();
        java.lang.String str67 = locale62.getDisplayScript(locale65);
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale62.getDisplayLanguage(locale68);
        java.lang.String str70 = locale41.getDisplayCountry(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology33, locale68);
        boolean boolean72 = dateTimeFieldType11.isSupported(chronology33);
        org.joda.time.DurationField durationField73 = chronology33.millis();
        boolean boolean74 = durationFieldType10.isSupported(chronology33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:14.890+00:00:00.678" + "'", str5, "2022-02-11T09:48:14.890+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Friday" + "'", str46, "Friday");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ven." + "'", str64, "ven.");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "French" + "'", str69, "French");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United Kingdom" + "'", str70, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test13122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMillis((int) (byte) 0);
        int int21 = mutableDateTime1.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology33, locale38);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField41 = durationFieldType24.getField(chronology33);
        org.joda.time.DateTimeField dateTimeField42 = chronology33.hourOfHalfday();
        boolean boolean44 = dateTimeField42.isLeap((long) 543);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test13123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13123");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(1);
        org.joda.time.MutableDateTime mutableDateTime19 = property16.roundHalfFloor();
        org.joda.time.ReadablePartial readablePartial20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int21 = property16.compareTo(readablePartial20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=934,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test13124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.Interval interval5 = property2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.minuteOfHour();
        int int16 = mutableDateTime10.getSecondOfDay();
        mutableDateTime10.setSecondOfDay((int) (byte) 0);
        boolean boolean19 = property7.equals((java.lang.Object) mutableDateTime10);
        long long20 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        int int27 = dateTimeField23.getDifference((long) 10, (long) 'a');
        int int29 = dateTimeField23.getLeapAmount((-1L));
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = dateTimeField23.getAsText((long) 340, locale31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = dateTimeField23.getAsShortText((int) '4', locale34);
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String str39 = dateTimeField23.getAsText(readablePartial36, 292278993, locale38);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfWeek();
        java.util.Locale locale45 = null;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = null;
        int int48 = property44.getMaximumTextLength(locale47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        mutableDateTime50.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        mutableDateTime50.setRounding(dateTimeField58);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = dateTimeField58.getAsShortText((int) (byte) 1, locale62);
        java.lang.String str64 = property44.getAsShortText(locale62);
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale65.getScript();
        java.lang.String str67 = locale62.getDisplayScript(locale65);
        java.util.Locale locale68 = java.util.Locale.US;
        java.lang.String str69 = locale62.getDisplayLanguage(locale68);
        java.util.Locale.setDefault(locale62);
        java.lang.String str71 = dateTimeField23.getAsText(readablePartial40, 74411, locale62);
        int int72 = property2.getMaximumShortTextLength(locale62);
        java.lang.String str73 = locale62.getDisplayCountry();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74894 + "'", int16 == 74894);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52" + "'", str35, "52");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "292278993" + "'", str39, "292278993");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Friday" + "'", str46, "Friday");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ven." + "'", str64, "ven.");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "French" + "'", str69, "French");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "74411" + "'", str71, "74411");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test13125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13125");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        boolean boolean12 = dateTimeFormatter11.isPrinter();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeFormatter11.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(chronology13);
    }

    @Test
    public void test13126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13126");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        int int4 = dateTimeField3.getMaximumValue();
        long long6 = dateTimeField3.roundHalfCeiling((long) 1);
        long long8 = dateTimeField3.roundHalfFloor((long) 34808947);
        org.joda.time.ReadablePartial readablePartial9 = null;
        java.util.Locale locale13 = new java.util.Locale("2022-02-11T09:40:39.222Z", "2022-02-11T09:40:38.001Z");
        java.util.Locale locale14 = java.util.Locale.UK;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = locale35.getDisplayScript(locale38);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale35.getDisplayLanguage(locale41);
        java.lang.String str43 = locale14.getDisplayCountry(locale41);
        boolean boolean44 = locale41.hasExtensions();
        java.lang.String str45 = locale13.getDisplayScript(locale41);
        java.lang.String str46 = dateTimeField3.getAsShortText(readablePartial9, 34946334, locale13);
        java.util.Set<java.lang.String> strSet47 = locale13.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 322L + "'", long6 == 322L);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 34809322L + "'", long8 == 34809322L);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-11t09:40:39.222z_2022-02-11T09:40:38.001Z");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "French" + "'", str42, "French");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "United Kingdom" + "'", str43, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "34946334" + "'", str46, "34946334");
        org.junit.Assert.assertNotNull(strSet47);
    }

    @Test
    public void test13127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13127");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField13.getAsShortText(readablePartial14, (int) (short) -1, locale36);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = mutableDateTime53.toCalendar(locale55);
        java.util.Calendar calendar57 = mutableDateTime43.toCalendar(locale55);
        java.lang.String str58 = dateTimeField13.getAsText(readablePartial40, 306, locale55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale55.getDisplayName(locale59);
        java.util.Locale.Builder builder62 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder64 = builder62.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder62.setVariant("2063-01-01T00:00:00.000+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2063-01-01T00:00:00.000+00:01:14.456 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572894326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=15,MILLISECOND=4,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644537696326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=4,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "306" + "'", str58, "306");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "chinois (Taiwan)" + "'", str61, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test13128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13128");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        int int4 = mutableDateTime1.getSecondOfDay();
        int int5 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 34811 + "'", int4 == 34811);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test13129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        boolean boolean23 = dateTimeParserBucket17.restoreState((java.lang.Object) property22);
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        boolean boolean34 = mutableDateTime26.isEqualNow();
        int int35 = property22.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime26.yearOfCentury();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTime dateTime38 = mutableDateTime11.toDateTime();
        int int39 = mutableDateTime11.getYearOfCentury();
        org.joda.time.Instant instant40 = mutableDateTime11.toInstant();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        boolean boolean47 = mutableDateTime42.isSupported(dateTimeFieldType46);
        int int48 = instant40.get(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572894354L + "'", long10 == 1644572894354L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-678L) + "'", long20 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
    }

    @Test
    public void test13130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13130");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(395);
        java.lang.Integer int27 = dateTimeFormatter24.getPivotYear();
        java.util.Locale locale28 = dateTimeFormatter24.getLocale();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(int27);
        org.junit.Assert.assertNull(locale28);
    }

    @Test
    public void test13131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13131");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        mutableDateTime7.addHours(59);
        int int12 = mutableDateTime7.getMillisOfSecond();
        mutableDateTime7.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        int int19 = dateTimeField18.getMaximumValue();
        int int22 = dateTimeField18.getDifference((long) 10, (long) 'a');
        int int24 = dateTimeField18.getLeapAmount((-1L));
        java.util.Locale locale26 = java.util.Locale.ITALY;
        java.lang.String str27 = dateTimeField18.getAsText((long) 340, locale26);
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = dateTimeField18.getAsShortText((int) '4', locale29);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.UK;
        java.lang.String str34 = dateTimeField18.getAsText(readablePartial31, 292278993, locale33);
        java.lang.String str35 = mutableDateTime7.toString("237", locale33);
        java.util.Locale.Builder builder36 = builder5.setLocale(locale33);
        java.util.Set<java.lang.Character> charSet37 = locale33.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 35570, chronology1, locale33, (java.lang.Integer) 287, 327);
        java.util.Locale.setDefault(locale33);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.hourOfHalfday();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology51, locale53, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.clockhourOfHalfday();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime59.set(dateTimeFieldType63, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        int int67 = mutableDateTime59.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime68 = mutableDateTime59.toDateTime();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        boolean boolean72 = mutableDateTime70.isEqual(readableInstant71);
        int int73 = mutableDateTime70.getHourOfDay();
        mutableDateTime70.addYears(0);
        mutableDateTime59.setDate((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime59.hourOfDay();
        java.util.Locale locale78 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.util.Locale locale82 = new java.util.Locale("");
        java.lang.String str83 = locale79.getDisplayScript(locale82);
        java.lang.String str84 = property77.getAsShortText(locale82);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket((long) 286, chronology51, locale82, (java.lang.Integer) 74414, 34857505);
        java.lang.String str88 = locale33.getDisplayLanguage(locale82);
        java.lang.String str89 = locale33.getDisplayName();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 81 + "'", int12 == 81);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "52" + "'", str30, "52");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "292278993" + "'", str34, "292278993");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "237" + "'", str35, "237");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str80, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "English" + "'", str88, "English");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English (United Kingdom)" + "'", str89, "English (United Kingdom)");
    }

    @Test
    public void test13132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13132");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addHours(0);
        long long12 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology13 = mutableDateTime1.getChronology();
        boolean boolean15 = mutableDateTime1.isEqual((long) 516);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(329);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 329 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644785294472L + "'", long12 == 1644785294472L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13133");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException8);
        java.io.IOException iOException11 = new java.io.IOException("2022-02-11T09:40:13.388Z");
        iOException8.addSuppressed((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test13134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13134");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withZone(dateTimeZone7);
        boolean boolean10 = dateTimeFormatter5.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket18.getZone();
        boolean boolean21 = dateTimeZone20.isFixed();
        long long23 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, 0L);
        java.lang.String str24 = dateTimeZone12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter5.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology26 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withOffsetParsed();
        boolean boolean28 = dateTimeFormatter5.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.678" + "'", str24, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test13135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13135");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.months();
        java.lang.String str2 = durationFieldType1.getName();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        int int7 = mutableDateTime4.getHourOfDay();
        mutableDateTime4.addDays(0);
        int int10 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime4.weekyear();
        mutableDateTime4.add((long) 993);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.toMutableDateTimeISO();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime4.addYears(280);
        mutableDateTime4.add((long) 362);
        int int24 = mutableDateTime4.getYearOfEra();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfWeek();
        java.lang.String str35 = chronology33.toString();
        org.joda.time.DurationField durationField36 = chronology33.millis();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket42.getZone();
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        mutableDateTime48.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        mutableDateTime48.setRounding(dateTimeField56);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = dateTimeField56.getAsShortText((int) (byte) 1, locale60);
        java.lang.String str62 = dateTimeZone44.getName(10930L, locale60);
        org.joda.time.Chronology chronology63 = chronology33.withZone(dateTimeZone44);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        boolean boolean67 = mutableDateTime65.isEqual(readableInstant66);
        int int68 = mutableDateTime65.getHourOfDay();
        mutableDateTime65.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        int int74 = dateTimeField73.getMaximumValue();
        mutableDateTime65.setRounding(dateTimeField73);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.lang.String str78 = dateTimeField73.getAsShortText((int) (byte) 1, locale77);
        java.util.Locale locale79 = locale77.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 74460488, chronology63, locale77, (java.lang.Integer) 12);
        org.joda.time.DateTime dateTime82 = mutableDateTime4.toDateTime(chronology63);
        boolean boolean83 = durationFieldType1.isSupported(chronology63);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 34994709, chronology63);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "months" + "'", str2, "months");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 174 + "'", int10 == 174);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2302 + "'", int24 == 2302);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.678" + "'", str62, "+00:00:00.678");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test13136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.setMillisOfDay(7);
        mutableDateTime1.setDate(1000L);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfMinute();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar13 = mutableDateTime10.toCalendar(locale12);
        mutableDateTime10.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime10.weekyear();
        int int20 = property19.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfFloor();
        org.joda.time.DurationField durationField22 = property19.getDurationField();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        org.joda.time.Chronology chronology29 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime24.copy();
        mutableDateTime24.addMonths(866);
        mutableDateTime24.setYear(264);
        long long35 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        int int36 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.setMillis((long) 81852);
        org.joda.time.Instant instant39 = mutableDateTime24.toInstant();
        mutableDateTime24.setSecondOfDay(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572894520,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=15,MILLISECOND=198,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-292275054) + "'", int20 == (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1757L + "'", long35 == 1757L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(instant39);
    }

    @Test
    public void test13137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13137");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setSecondOfDay(784);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.Chronology chronology22 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime1.setZoneRetainFields(dateTimeZone23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = mutableDateTime34.toString(dateTimeFormatter37);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (byte) 0);
        mutableDateTime34.setZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology49 = mutableDateTime34.getChronology();
        int int50 = mutableDateTime34.getMillisOfDay();
        int int51 = mutableDateTime28.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        int int52 = mutableDateTime34.getMinuteOfHour();
        int int53 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.678" + "'", str24, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35295213 + "'", int31 == 35295213);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:48:15.213+00:00:00.678" + "'", str38, "2022-02-11T09:48:15.213+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone45);
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35295213 + "'", int50 == 35295213);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 48 + "'", int52 == 48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test13138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13138");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 2922789);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology20, locale22, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField26 = chronology20.halfdays();
        org.joda.time.DurationField durationField27 = chronology20.millis();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.weekyear();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("9");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 74427617, chronology20, locale30);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.centuryOfEra();
        dateTimeParserBucket5.saveField(dateTimeField32, 724);
        org.joda.time.Chronology chronology35 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket5.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
    }

    @Test
    public void test13139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13139");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime0.add(readableDuration35, 582);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime0.add(readableDuration38, 829);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.minuteOfHour();
        org.joda.time.Chronology chronology54 = chronology48.withUTC();
        org.joda.time.DurationField durationField55 = chronology48.seconds();
        mutableDateTime0.setChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField57 = chronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField58 = chronology48.year();
        org.joda.time.DateTimeField dateTimeField59 = chronology48.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572894570,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=15,MILLISECOND=248,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test13140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13140");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addWeeks(34855006);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        int int16 = mutableDateTime9.getEra();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime9.dayOfMonth();
        mutableDateTime9.setMinuteOfDay(5);
        int int20 = mutableDateTime9.getWeekyear();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean23 = mutableDateTime1.isSupported(dateTimeFieldType22);
        mutableDateTime1.setMillis((long) 250);
        int int26 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test13141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13141");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(34850849);
        java.util.Locale locale40 = new java.util.Locale("2022-02-11T09:40:20.163Z", "2022-02-11T09:40:22.820Z");
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = mutableDateTime36.toString("+00:00:00.094", locale40);
        java.lang.String str43 = locale40.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = locale40.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 2022-02-11t09:40:20.163z");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35295301 + "'", int28 == 35295301);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-11t09:40:20.163z_2022-02-11T09:40:22.820Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.094" + "'", str42, "+00:00:00.094");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11t09:40:20.163z" + "'", str43, "2022-02-11t09:40:20.163z");
    }

    @Test
    public void test13142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13142");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology16 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology9.add(readablePeriod18, 580L, 74472694);
        org.joda.time.ReadablePartial readablePartial22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray24 = chronology9.get(readablePartial22, (long) 579);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+390:13" + "'", str13, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 580L + "'", long21 == 580L);
    }

    @Test
    public void test13143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13143");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = chronology7.years();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test13144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13144");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int[] intArray16 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int17 = dateTimeField9.getMinimumValue(readablePartial10, intArray16);
        boolean boolean19 = dateTimeField9.isLeap((long) 74415);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        int int34 = dateTimeField31.getMaximumTextLength(locale32);
        java.lang.String str35 = dateTimeField9.getAsShortText((long) 34816672, locale32);
        int int36 = dateTimeField9.getMinimumValue();
        long long39 = dateTimeField9.addWrapField((long) 287, 0);
        boolean boolean40 = dateTimeField9.isSupported();
        org.joda.time.ReadablePartial readablePartial41 = null;
        int int42 = dateTimeField9.getMinimumValue(readablePartial41);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 287L + "'", long39 == 287L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test13145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13145");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("694");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        java.util.Locale locale37 = new java.util.Locale("2022-02-11T09:41:40.868-00:00:00.001");
        java.lang.String str38 = locale29.getDisplayVariant(locale37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int43 = dateTimeField41.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property47.getAsText(locale48);
        java.util.Locale locale50 = null;
        int int51 = property47.getMaximumTextLength(locale50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        mutableDateTime53.setRounding(dateTimeField61);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = dateTimeField61.getAsShortText((int) (byte) 1, locale65);
        java.lang.String str67 = property47.getAsShortText(locale65);
        java.lang.String str68 = dateTimeField41.getAsShortText(1L, locale65);
        java.lang.String str69 = locale65.getISO3Country();
        boolean boolean70 = locale65.hasExtensions();
        java.lang.String str71 = locale65.getDisplayLanguage();
        java.lang.String str72 = locale65.getDisplayScript();
        java.lang.String str73 = locale65.toLanguageTag();
        java.lang.String str74 = locale37.getDisplayScript(locale65);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Friday" + "'", str13, "Friday");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale37.toString(), "2022-02-11t09:41:40.868-00:00:00.001");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Friday" + "'", str49, "Friday");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ven." + "'", str67, "ven.");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French" + "'", str71, "French");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fr" + "'", str73, "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test13147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13147");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644537697249L);
        int int2 = mutableDateTime1.getWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
    }

    @Test
    public void test13148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13148");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.Chronology chronology9 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = null;
        int int17 = property13.getMaximumTextLength(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = property13.getAsShortText(locale31);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale31.getDisplayScript(locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale31);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 74415232, chronology9);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = mutableDateTime40.toDateTime();
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = mutableDateTime40.toCalendar(locale50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime40.toDateTime(dateTimeZone53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        mutableDateTime56.addHours(59);
        int int61 = mutableDateTime56.getMillisOfSecond();
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology63, locale64, (java.lang.Integer) 9, 59);
        java.lang.Object obj68 = dateTimeParserBucket67.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket67.saveField(dateTimeFieldType69, 59);
        boolean boolean72 = mutableDateTime56.isSupported(dateTimeFieldType69);
        boolean boolean73 = dateTime54.isSupported(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime38.isSupported(dateTimeFieldType69);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale77 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(0L, chronology76, locale77, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone81 = dateTimeParserBucket80.getZone();
        org.joda.time.Chronology chronology82 = dateTimeParserBucket80.getChronology();
        java.lang.Integer int83 = dateTimeParserBucket80.getOffsetInteger();
        org.joda.time.Chronology chronology84 = dateTimeParserBucket80.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.secondOfMinute();
        boolean boolean86 = dateTimeFieldType69.isSupported(chronology84);
        org.joda.time.DurationField durationField87 = chronology84.millis();
        org.joda.time.DateTimeField dateTimeField88 = chronology84.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime((long) 901, chronology84);
        int int90 = mutableDateTime89.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Friday" + "'", str15, "Friday");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ven." + "'", str33, "ven.");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644537696728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=406,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 406 + "'", int61 == 406);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNull(int83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test13149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.monthOfYear();
        org.joda.time.Chronology chronology20 = mutableDateTime12.getChronology();
        long long24 = chronology20.add((long) 74882, (long) 74777, 74637105);
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology20.getDateTimeMillis((long) 908, 35323808, 81857331, 35100329, 34916286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35323808 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 5581138875467L + "'", long24 == 5581138875467L);
    }

    @Test
    public void test13150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        int int10 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        int int21 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.Instant instant22 = mutableDateTime12.toInstant();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.addWeekyears(796);
        int int26 = mutableDateTime12.getYearOfEra();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime12.monthOfYear();
        org.joda.time.Chronology chronology28 = mutableDateTime12.getChronology();
        int int29 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:21.217Z");
        java.lang.String str32 = mutableDateTime31.toString();
        int int33 = mutableDateTime31.getYear();
        boolean boolean34 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(74533667);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74533667 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2818 + "'", int26 == 2818);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:40:21.217Z" + "'", str32, "2022-02-11T09:40:21.217Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test13151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.dayOfYear();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField30 = property27.getField();
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.getDefault(category32);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale39 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str40 = locale35.getDisplayLanguage(locale39);
        java.lang.String str41 = locale33.getDisplayCountry(locale35);
        java.lang.String str42 = dateTimeField30.getAsText((-47934633599741L), locale35);
        java.lang.String str43 = property24.getAsText(locale35);
        int int44 = property24.get();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 483 + "'", int6 == 483);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:48:15.483+00:00:00.678" + "'", str12, "2022-02-11T09:48:15.483+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-11t09:40:20.163z_2022-02-11T09:40:22.820Z");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals(locale39.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T09:40:22.820Z" + "'", str41, "2022-02-11T09:40:22.820Z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "451" + "'", str42, "451");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "44" + "'", str43, "44");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 44 + "'", int44 == 44);
    }

    @Test
    public void test13152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13152");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable3);
        java.io.IOException iOException5 = new java.io.IOException("hi!", (java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException6);
        java.lang.String str8 = iOException7.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.io.IOException: 2022-02-11T00:01:37.883Z" + "'", str8, "java.io.IOException: 2022-02-11T00:01:37.883Z");
    }

    @Test
    public void test13153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13153");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime1.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(1301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1301 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test13154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13154");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology21, locale23, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.yearOfCentury();
        int int31 = dateTimeField28.getDifference(0L, (long) 135);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        java.lang.String str40 = dateTimeField35.getAsShortText(0L, locale38);
        java.lang.String str41 = locale38.getDisplayVariant();
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleKeys();
        java.lang.String str43 = dateTimeField28.getAsText(34882, locale38);
        java.lang.String str44 = dateTimeField11.getAsText(1058, locale38);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "34882" + "'", str43, "34882");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1058" + "'", str44, "1058");
    }

    @Test
    public void test13155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13155");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime12.getZone();
        int int20 = mutableDateTime12.getMonthOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = mutableDateTime22.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean33 = mutableDateTime22.isSupported(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        boolean boolean35 = mutableDateTime12.equals((java.lang.Object) dateTimeFieldType32);
        mutableDateTime1.set(dateTimeFieldType32, 10679);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType32.getDurationType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74895 + "'", int7 == 74895);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(durationFieldType38);
    }

    @Test
    public void test13156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13156");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getLeapAmount((-1L));
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = dateTimeField2.getAsText((long) 340, locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = dateTimeField2.getAsShortText((int) '4', locale13);
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = dateTimeField2.getAsText(readablePartial15, 292278993, locale17);
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property23.getAsText(locale24);
        java.util.Locale locale26 = null;
        int int27 = property23.getMaximumTextLength(locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        mutableDateTime29.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        mutableDateTime29.setRounding(dateTimeField37);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = dateTimeField37.getAsShortText((int) (byte) 1, locale41);
        java.lang.String str43 = property23.getAsShortText(locale41);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.lang.String str45 = locale44.getScript();
        java.lang.String str46 = locale41.getDisplayScript(locale44);
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale41.getDisplayLanguage(locale47);
        java.util.Locale.setDefault(locale41);
        java.lang.String str50 = dateTimeField2.getAsText(readablePartial19, 74411, locale41);
        org.joda.time.DurationField durationField51 = dateTimeField2.getDurationField();
        long long53 = dateTimeField2.roundHalfEven((long) 74516);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        long long63 = dateTimeParserBucket61.computeMillis();
        java.util.Locale locale64 = dateTimeParserBucket61.getLocale();
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.lang.String str67 = dateTimeField2.getAsShortText(readablePartial54, 74489, locale64);
        java.util.Locale locale73 = new java.util.Locale("306", "34858868", "1970-01-01T00:00:00.232Z");
        // The following exception was thrown during execution in test generation
        try {
            long long74 = dateTimeField2.set(43200000L, "2022-02-11T09:48:37.811+00:01:14.456", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:37.811+00:01:14.456\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52" + "'", str14, "52");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "292278993" + "'", str18, "292278993");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Friday" + "'", str25, "Friday");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ven." + "'", str43, "ven.");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "French" + "'", str48, "French");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "74411" + "'", str50, "74411");
        org.junit.Assert.assertNotNull(durationField51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 74322L + "'", long53 == 74322L);
        org.junit.Assert.assertNotNull(dateTimeZone62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-678L) + "'", long63 == (-678L));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "74489" + "'", str67, "74489");
        org.junit.Assert.assertEquals(locale73.toString(), "306_34858868_1970-01-01T00:00:00.232Z");
    }

    @Test
    public void test13157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13157");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, 40);
        mutableDateTime1.addMillis(34873735);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add(100);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.addWrapField(10);
        mutableDateTime25.setMillis((long) 779);
        long long28 = mutableDateTime25.getMillis();
        mutableDateTime25.addDays(35651);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology38);
        int int41 = mutableDateTime40.getYear();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfWeek();
        java.lang.String str51 = chronology49.toString();
        org.joda.time.DurationField durationField52 = chronology49.millis();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket58.getZone();
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        mutableDateTime64.setRounding(dateTimeField72);
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = dateTimeField72.getAsShortText((int) (byte) 1, locale76);
        java.lang.String str78 = dateTimeZone60.getName(10930L, locale76);
        org.joda.time.Chronology chronology79 = chronology49.withZone(dateTimeZone60);
        mutableDateTime40.setZoneRetainFields(dateTimeZone60);
        mutableDateTime25.setZoneRetainFields(dateTimeZone60);
        boolean boolean82 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime1.dayOfWeek();
        boolean boolean84 = mutableDateTime1.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(10651);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10651 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 779L + "'", long28 == 779L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.678" + "'", str78, "+00:00:00.678");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13158");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName(778L, locale17);
        long long20 = dateTimeZone12.nextTransition((long) 74458);
        long long22 = dateTimeZone12.previousTransition((long) 35303942);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:15.607+00:00:00.678" + "'", str5, "2022-02-11T09:48:15.607+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertNull(str14);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.678" + "'", str18, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 74458L + "'", long20 == 74458L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 35303942L + "'", long22 == 35303942L);
    }

    @Test
    public void test13159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13159");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str9 = dateTimeZone7.getShortName((long) 6);
        java.lang.String str11 = dateTimeZone7.getNameKey((long) 617);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withDefaultYear(199);
        java.lang.Integer int15 = dateTimeFormatter14.getPivotYear();
        boolean boolean16 = dateTimeFormatter14.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.678" + "'", str9, "+00:00:00.678");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13160");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        long long9 = dateTimeParserBucket6.computeMillis(true, "ven.");
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket6.getZone();
        long long12 = dateTimeZone10.previousTransition((long) 778);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(1644572465553L, dateTimeZone10);
        mutableDateTime13.setMillisOfSecond(712);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-678L) + "'", long9 == (-678L));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 778L + "'", long12 == 778L);
    }

    @Test
    public void test13161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13161");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test13162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.roundCeiling();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 644 + "'", int6 == 644);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test13163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13163");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        boolean boolean12 = dateTimeFormatter10.isParser();
        boolean boolean13 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter10.getPrinter();
        boolean boolean15 = dateTimeFormatter10.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13164");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(288, 587, 940, 74549, 74520, 708, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74549 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13165");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        int int14 = mutableDateTime8.getSecondOfDay();
        mutableDateTime8.setSecondOfDay((int) (byte) 0);
        mutableDateTime8.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.addHours((int) (short) 0);
        mutableDateTime19.addWeekyears((int) 'a');
        java.lang.String str25 = mutableDateTime19.toString("0");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        mutableDateTime19.set(dateTimeFieldType34, 5);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime8.property(dateTimeFieldType34);
        mutableDateTime8.addYears(796);
        int int41 = mutableDateTime8.getMinuteOfHour();
        int int42 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime8.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) 994);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(1005, 814, 74904, 74628948, 35299, 74482419, 41274, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74628948 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 74895 + "'", int14 == 74895);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test13166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.DurationField durationField14 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.halfdayOfDay();
        long long17 = dateTimeField15.roundHalfFloor((long) 74533667);
        long long20 = dateTimeField15.add(1644572857721L, 35371);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74895 + "'", int7 == 74895);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86399322L + "'", long17 == 86399322L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3172600057721L + "'", long20 == 3172600057721L);
    }

    @Test
    public void test13167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int12 = mutableDateTime10.get(dateTimeFieldType11);
        int int13 = mutableDateTime10.getEra();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.era();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology21.getZone();
        mutableDateTime10.setZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDate(1244, 34991235, 81857331);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34991235 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 691 + "'", int6 == 691);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test13168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13168");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        mutableDateTime9.setRounding(dateTimeField13);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        org.joda.time.DurationField durationField32 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.year();
        java.util.Locale locale34 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology28, locale34);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.addHours((int) (short) 0);
        mutableDateTime36.addWeekyears((int) 'a');
        java.lang.String str42 = mutableDateTime36.toString("0");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        int int52 = mutableDateTime44.get(dateTimeFieldType51);
        mutableDateTime36.set(dateTimeFieldType51, 5);
        dateTimeParserBucket35.saveField(dateTimeFieldType51, 86399);
        boolean boolean57 = mutableDateTime9.isSupported(dateTimeFieldType51);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime9.weekyear();
        org.joda.time.DurationField durationField59 = property58.getLeapDurationField();
        int int60 = property58.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-292275054) + "'", int60 == (-292275054));
    }

    @Test
    public void test13169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13169");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addWeekyears(796);
        int int23 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime9.set(dateTimeFieldType24, 9);
        dateTimeParserBucket5.saveField(dateTimeFieldType24, 34839065);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.hours();
        org.joda.time.DurationField durationField39 = chronology37.centuries();
        org.joda.time.DurationField durationField40 = chronology37.centuries();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 167, chronology37);
        boolean boolean42 = dateTimeFieldType24.isSupported(chronology37);
        org.joda.time.DurationField durationField43 = chronology37.millis();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test13170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        int int10 = mutableDateTime1.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(2045);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2045 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 588 + "'", int10 == 588);
    }

    @Test
    public void test13171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13171");
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.weekyear();
        mutableDateTime7.addHours(930);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology26.centuries();
        mutableDateTime7.setChronology(chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        org.joda.time.Chronology chronology39 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.String str49 = dateTimeZone48.getID();
        long long53 = dateTimeZone48.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str54 = dateTimeZone48.getID();
        java.util.TimeZone timeZone55 = dateTimeZone48.toTimeZone();
        mutableDateTime7.setZone(dateTimeZone48);
        java.lang.String str58 = dateTimeZone48.getName((long) 778);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(352, 10653, 307, 34929396, 34923644, 513, 97644, dateTimeZone48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34929396 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572895142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=15,MILLISECOND=820,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.678" + "'", str49, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-673L) + "'", long53 == (-673L));
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.678" + "'", str58, "+00:00:00.678");
    }

    @Test
    public void test13172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13172");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        long long8 = dateTimeParserBucket5.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        int int18 = mutableDateTime10.getMonthOfYear();
        mutableDateTime10.addDays(5);
        boolean boolean22 = mutableDateTime10.isAfter((long) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime24.getZone();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        mutableDateTime10.setZoneRetainFields(dateTimeZone44);
        dateTimeParserBucket5.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone44);
        java.util.Date date50 = mutableDateTime49.toDate();
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 837 + "'", int16 == 837);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644537697159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=837,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Fri Feb 11 09:48:15 UTC 2022");
    }

    @Test
    public void test13173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13173");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int12 = mutableDateTime10.get(dateTimeFieldType11);
        int int13 = mutableDateTime10.getEra();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 893 + "'", int6 == 893);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test13174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13174");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getLeapAmount((-1L));
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = dateTimeField2.getAsText((long) 340, locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = dateTimeField2.getAsShortText((int) '4', locale13);
        long long16 = dateTimeField2.roundFloor((long) 434);
        org.joda.time.DurationField durationField17 = dateTimeField2.getDurationField();
        int int19 = dateTimeField2.get((long) 74468);
        java.lang.String str20 = dateTimeField2.getName();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale23.getScript();
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str26 = dateTimeField2.getAsShortText(152, locale23);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField2.set((long) 97973, "2022-02-11T09:42:07.339Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:42:07.339Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52" + "'", str14, "52");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 322L + "'", long16 == 322L);
        org.junit.Assert.assertNotNull(durationField17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 15 + "'", int19 == 15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "secondOfMinute" + "'", str20, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "152" + "'", str26, "152");
    }

    @Test
    public void test13175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13175");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        boolean boolean3 = mutableDateTime0.isEqual((long) 601);
        mutableDateTime0.addSeconds(0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfCeiling();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime8.add(readablePeriod9, 990);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "35295926" + "'", str7, "35295926");
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test13176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13176");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (byte) 0);
        mutableDateTime19.setZoneRetainFields(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone30.isLocalDateTimeGap(localDateTime34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter17.withZone(dateTimeZone30);
        boolean boolean37 = dateTimeZone30.isFixed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:48:15.936+00:00:00.678" + "'", str23, "2022-02-11T09:48:15.936+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test13177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13177");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(352);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 314);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTimeFormatter13.print((long) 249);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test13178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13178");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        java.util.Locale locale14 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology8, locale14);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.addHours((int) (short) 0);
        mutableDateTime16.addWeekyears((int) 'a');
        java.lang.String str22 = mutableDateTime16.toString("0");
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        mutableDateTime16.set(dateTimeFieldType31, 5);
        dateTimeParserBucket15.saveField(dateTimeFieldType31, 86399);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeFormatter39.getZone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        mutableDateTime42.addHours(59);
        org.joda.time.Chronology chronology47 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology47.getZone();
        java.lang.String str49 = dateTimeZone48.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter39.withZone(dateTimeZone48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime52.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter39.withZone(dateTimeZone59);
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket66.getZone();
        org.joda.time.Chronology chronology68 = dateTimeParserBucket66.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter60.withChronology(chronology68);
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType31.getField(chronology68);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        org.joda.time.Chronology chronology80 = dateTimeParserBucket78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfHalfday();
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = locale82.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology80, locale82, (java.lang.Integer) 2022);
        java.util.Locale locale86 = locale82.stripExtensions();
        java.lang.String str87 = locale82.getDisplayScript();
        java.util.Locale locale88 = null;
        java.lang.String str89 = locale82.getDisplayCountry(locale88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = dateTimeField70.getAsShortText(readablePartial71, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.678" + "'", str49, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test13179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13179");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter2.getPrinter();
        boolean boolean8 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        java.lang.Integer int18 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withChronology(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        boolean boolean27 = mutableDateTime22.isSupported(dateTimeFieldType26);
        mutableDateTime22.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = mutableDateTime31.toDateTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = mutableDateTime31.toCalendar(locale41);
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime31.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone43);
        java.lang.String str46 = dateTimeZone43.getNameKey((long) 705);
        long long48 = dateTimeZone43.nextTransition(1644572474616L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter9.withZone(dateTimeZone43);
        org.joda.time.Chronology chronology50 = dateTimeFormatter49.getChronolgy();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNull(int18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644537697318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=996,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644572474616L + "'", long48 == 1644572474616L);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(chronology50);
    }

    @Test
    public void test13180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13180");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        java.lang.String str4 = property1.getName();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.getMutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime8.add(readablePeriod14);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTime();
        int int18 = dateTime17.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime17.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime5.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology22 = mutableDateTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setDate(74792432, 704, 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 704 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test13181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13181");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("2022-02-11T09:43:02.815Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:43:02.815Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test13182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13182");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable4);
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable7);
        iOException5.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("French", (java.lang.Throwable) iOException5);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException12 = new java.io.IOException("617", (java.lang.Throwable) iOException5);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable16);
        java.lang.Throwable throwable19 = null;
        java.io.IOException iOException20 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable19);
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException("French", (java.lang.Throwable) iOException17);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException24 = new java.io.IOException("617", (java.lang.Throwable) iOException17);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        iOException12.addSuppressed((java.lang.Throwable) iOException25);
        java.lang.Throwable throwable32 = null;
        java.io.IOException iOException33 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable32);
        java.io.IOException iOException34 = new java.io.IOException("hi!", (java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException("2022-02-11T00:01:37.078Z", (java.lang.Throwable) iOException37);
        iOException12.addSuppressed((java.lang.Throwable) iOException38);
        java.io.IOException iOException40 = new java.io.IOException("2022-02-11T09:46:16.817Z", (java.lang.Throwable) iOException38);
        java.lang.String str41 = iOException40.toString();
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "java.io.IOException: 2022-02-11T09:46:16.817Z" + "'", str41, "java.io.IOException: 2022-02-11T09:46:16.817Z");
    }

    @Test
    public void test13183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13183");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 277);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withZone(dateTimeZone15);
        boolean boolean17 = dateTimeFormatter16.isOffsetParsed();
        java.lang.Appendable appendable18 = null;
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        int int29 = mutableDateTime28.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField32.getAsShortText(0L, locale35);
        mutableDateTime28.setRounding(dateTimeField32);
        mutableDateTime28.addDays(627);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(appendable18, (org.joda.time.ReadableInstant) mutableDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
    }

    @Test
    public void test13184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13184");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test13185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(34880240);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        mutableDateTime19.add((long) 993);
        long long29 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addSeconds(34891936);
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime19.getRoundingField();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime19.era();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DateTimeField dateTimeField35 = property33.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = property33.add(11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 135 + "'", int14 == 135);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 62 + "'", int25 == 62);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-689217L) + "'", long29 == (-689217L));
        org.junit.Assert.assertNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test13186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13186");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.setVariant("2022");
        java.util.Locale locale17 = builder16.build();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = locale31.getDisplayScript();
        java.lang.String str34 = locale31.getISO3Country();
        java.lang.String str35 = locale17.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter10.withLocale(locale31);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = mutableDateTime38.toDateTime();
        java.util.Locale locale48 = null;
        java.util.Calendar calendar49 = mutableDateTime38.toCalendar(locale48);
        mutableDateTime38.addDays((int) (byte) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addDays(0);
        int int59 = mutableDateTime53.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime53.weekyear();
        mutableDateTime53.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime63.yearOfEra();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar66 = mutableDateTime63.toCalendar(locale65);
        mutableDateTime63.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int72 = mutableDateTime63.getDayOfMonth();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = mutableDateTime74.isEqual(readableInstant75);
        mutableDateTime74.addHours(59);
        org.joda.time.Chronology chronology79 = mutableDateTime74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = chronology79.getZone();
        mutableDateTime63.setZone(dateTimeZone80);
        mutableDateTime53.setZone(dateTimeZone80);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime38.toMutableDateTime(dateTimeZone80);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime83.weekyear();
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime83.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = dateTimeFormatter36.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime83, "2022-02-11T09:41:16.761Z", 10693);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644537696396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=74,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 74 + "'", int59 == 74);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572895396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=74,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 11 + "'", int72 == 11);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property85);
    }

    @Test
    public void test13187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyear();
        org.joda.time.DurationField durationField33 = chronology30.halfdays();
        org.joda.time.DurationField durationField34 = chronology30.days();
        mutableDateTime9.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 678 + "'", int21 == 678);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test13188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13188");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfWeek();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property25.getAsText(locale26);
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        mutableDateTime31.setRounding(dateTimeField39);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = dateTimeField39.getAsShortText((int) (byte) 1, locale43);
        java.lang.String str45 = property25.getAsShortText(locale43);
        java.lang.String str46 = dateTimeField20.getAsShortText(readablePartial21, (int) (short) -1, locale43);
        org.joda.time.ReadablePartial readablePartial47 = null;
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale locale50 = builder49.build();
        java.util.Locale locale51 = builder49.build();
        java.util.Locale.Builder builder53 = builder49.setVariant("2022");
        java.util.Locale locale54 = builder53.build();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int65 = dateTimeField64.getMaximumValue();
        mutableDateTime56.setRounding(dateTimeField64);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = dateTimeField64.getAsShortText((int) (byte) 1, locale68);
        java.lang.String str70 = locale68.getDisplayScript();
        java.lang.String str71 = locale68.getISO3Country();
        java.lang.String str72 = locale54.getDisplayVariant(locale68);
        java.lang.String str73 = dateTimeField20.getAsShortText(readablePartial47, 124, locale68);
        mutableDateTime11.setRounding(dateTimeField20);
        mutableDateTime11.addSeconds(81853904);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "vendredi" + "'", str27, "vendredi");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ven." + "'", str45, "ven.");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022" + "'", str72, "2022");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "124" + "'", str73, "124");
    }

    @Test
    public void test13189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13189");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.lang.String str5 = property2.getAsText();
        java.lang.String str6 = property2.toString();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundCeiling();
        int int8 = property2.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.roundHalfCeiling();
        org.joda.time.Instant instant10 = mutableDateTime9.toInstant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vendredi" + "'", str5, "vendredi");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfWeek]" + "'", str6, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test13190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        long long18 = dateTimeParserBucket15.computeMillis(true);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket15.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        boolean boolean23 = mutableDateTime1.equals((java.lang.Object) chronology19);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology32, locale34, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField38 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.weekyearOfCentury();
        org.joda.time.DurationField durationField40 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology32.weekyear();
        org.joda.time.DateTime dateTime42 = mutableDateTime1.toDateTime(chronology32);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str46 = dateTimeZone44.getShortName((long) 6);
        mutableDateTime1.setZoneRetainFields(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-678L) + "'", long18 == (-678L));
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.678" + "'", str46, "+00:00:00.678");
    }

    @Test
    public void test13191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        java.util.Locale locale10 = null;
        java.util.Calendar calendar11 = mutableDateTime6.toCalendar(locale10);
        mutableDateTime6.addMinutes(135);
        int int14 = mutableDateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime15 = mutableDateTime6.toDateTimeISO();
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        boolean boolean17 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology26.centuries();
        org.joda.time.DurationField durationField29 = chronology26.weeks();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale35 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale31, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField39 = chronology26.yearOfCentury();
        mutableDateTime1.setChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField41 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology26.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572895519,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=197,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals(locale35.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test13192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13192");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyearOfCentury();
        long long16 = dateTimeField14.roundHalfFloor((long) 74455);
        int int17 = dateTimeField14.getMinimumValue();
        int int19 = dateTimeField14.get(1644784888019L);
        long long22 = dateTimeField14.add((long) 57465, 74640);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2355410880057465L + "'", long22 == 2355410880057465L);
    }

    @Test
    public void test13193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13193");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:42:33.403Z", "", "2022-02-11T09:48:10.844+00:01:14.456");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:42:33.403z__2022-02-11T09:48:10.844+00:01:14.456");
    }

    @Test
    public void test13194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13194");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        int int5 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime4.add(readableDuration6, 74434287);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.yearOfEra();
        int int10 = property9.get();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfDay(35290422);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35290422 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2023 + "'", int10 == 2023);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test13195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13195");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        int int10 = mutableDateTime0.getMonthOfYear();
        int int11 = mutableDateTime0.getYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.setMillisOfDay(7);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        java.lang.String str19 = mutableDateTime13.toString();
        int int20 = mutableDateTime13.getDayOfWeek();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime13);
        int int22 = mutableDateTime13.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572895576,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=254,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T00:00:00.007+00:00:00.678" + "'", str19, "2022-02-11T00:00:00.007+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test13196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13196");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale17 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str18 = locale13.getDisplayLanguage(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale13, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField21 = chronology8.weeks();
        org.joda.time.DurationField durationField22 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology8.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13197");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology7.weekyears();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test13198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = dateTimeField9.getAsShortText((int) (byte) 1, locale13);
        boolean boolean16 = dateTimeField9.isLeap((long) 66);
        java.lang.String str17 = dateTimeField9.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str17, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test13199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13199");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.weekyear();
        mutableDateTime7.addHours(930);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology26.centuries();
        mutableDateTime7.setChronology(chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        org.joda.time.Chronology chronology39 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.String str49 = dateTimeZone48.getID();
        long long53 = dateTimeZone48.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str54 = dateTimeZone48.getID();
        java.util.TimeZone timeZone55 = dateTimeZone48.toTimeZone();
        mutableDateTime7.setZone(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime7.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime57.toMutableDateTimeISO();
        int int59 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime57.add(readableDuration60);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "20" + "'", str6, "20");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572895629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=307,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.678" + "'", str49, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-673L) + "'", long53 == (-673L));
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test13200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13200");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.minuteOfHour();
        org.joda.time.Chronology chronology21 = chronology15.withUTC();
        org.joda.time.DurationField durationField22 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.dayOfYear();
        dateTimeParserBucket5.saveField(dateTimeField24, 35042543);
        java.lang.Object obj27 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket5.getZone();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test13201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.setDayOfYear(7);
        org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime();
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime1.toGregorianCalendar();
        mutableDateTime1.setSecondOfDay(74420);
        mutableDateTime1.setDate((long) 35164154);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572895667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=345,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
    }

    @Test
    public void test13202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13202");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.hourOfDay();
        int int11 = property10.getMinimumValue();
        int int12 = property10.get();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundHalfFloor();
        boolean boolean14 = mutableDateTime13.isEqualNow();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime31 = null;
        boolean boolean32 = dateTimeZone27.isLocalDateTimeGap(localDateTime31);
        java.lang.String str34 = dateTimeZone27.getName((long) 'a');
        org.joda.time.DateTime dateTime35 = mutableDateTime13.toDateTime(dateTimeZone27);
        int int36 = mutableDateTime13.getEra();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("2022-02-11T09:40:33.422Z");
        java.lang.String str40 = locale39.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = mutableDateTime13.toString("2022-02-27T15:58:19.488+390:13", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:16.356+00:00:00.678" + "'", str20, "2022-02-11T09:48:16.356+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.678" + "'", str34, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test13203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13203");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:41:05.182Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:41:05.182z");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test13204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13204");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DurationField durationField13 = chronology7.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.clockhourOfDay();
        int int16 = dateTimeField14.getMinimumValue((-1644578840L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test13205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        int int15 = mutableDateTime8.getYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        java.util.Locale locale27 = null;
        java.util.Calendar calendar28 = mutableDateTime17.toCalendar(locale27);
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime17.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = mutableDateTime17.toDateTimeISO();
        int int33 = dateTime32.getWeekyear();
        boolean boolean34 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime8.centuryOfEra();
        int int36 = property35.getMaximumValueOverall();
        int int37 = property35.getMinimumValue();
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder41 = builder38.setLocale(locale40);
        java.util.Locale.Builder builder42 = builder38.clear();
        java.util.Locale.Builder builder43 = builder38.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfWeek();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime50.yearOfCentury();
        org.joda.time.DurationField durationField53 = property52.getDurationField();
        int int54 = property52.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int58 = dateTimeField57.getMaximumValue();
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = locale60.getISO3Country();
        java.lang.String str62 = dateTimeField57.getAsShortText(0L, locale60);
        int int63 = property52.getMaximumTextLength(locale60);
        java.lang.String str64 = dateTimeField46.getAsShortText(0L, locale60);
        java.lang.String str65 = locale60.getDisplayName();
        java.lang.String str66 = locale60.getCountry();
        java.util.Locale.Builder builder67 = builder43.setLocale(locale60);
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("DateTimeField[minuteOfHour]");
        java.util.Locale.Builder builder70 = builder43.setLocale(locale69);
        int int71 = property35.getMaximumShortTextLength(locale69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:16.406+00:00:00.678" + "'", str5, "2022-02-11T09:48:16.406+00:00:00.678");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537696728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=406,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2922789 + "'", int36 == 2922789);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u6cd5\u6587" + "'", str65, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
    }

    @Test
    public void test13206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13206");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology7.getZone();
        java.lang.String str15 = dateTimeZone13.getName(74409L);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int21 = dateTimeField19.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfWeek();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property25.getAsText(locale26);
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        mutableDateTime31.setRounding(dateTimeField39);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = dateTimeField39.getAsShortText((int) (byte) 1, locale43);
        java.lang.String str45 = property25.getAsShortText(locale43);
        java.lang.String str46 = dateTimeField19.getAsShortText(1L, locale43);
        java.lang.String str47 = locale43.getCountry();
        java.util.Locale.setDefault(locale43);
        java.util.Set<java.lang.String> strSet49 = locale43.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet50 = locale43.getExtensionKeys();
        java.lang.String str51 = dateTimeZone13.getName(1117822L, locale43);
        long long54 = dateTimeZone13.adjustOffset((long) 34903, true);
        java.lang.String str56 = dateTimeZone13.getName((long) (-6160));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "vendredi" + "'", str27, "vendredi");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ven." + "'", str45, "ven.");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00" + "'", str51, "+00:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 34903L + "'", long54 == 34903L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test13207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13207");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(395);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = dateTimeFormatter26.parseMutableDateTime("2022-02-11t00:01:37.378z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test13208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13208");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DurationField durationField11 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.setYear((int) 'x');
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(0);
        mutableDateTime17.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime();
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.setMillisOfDay(7);
        mutableDateTime23.setDate(1000L);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime23.secondOfMinute();
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        int int32 = mutableDateTime23.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74896 + "'", int7 == 74896);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test13210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13210");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekyear();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundHalfCeiling();
        int int8 = property4.getMinimumValue();
        int int9 = property4.getMinimumValue();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-292275054) + "'", int8 == (-292275054));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
    }

    @Test
    public void test13211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13211");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        mutableDateTime7.setTime((long) 381);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundCeiling();
        int int12 = mutableDateTime11.getMinuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        int int8 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.getMutableDateTime();
        mutableDateTime9.addDays(185);
        java.util.Date date12 = mutableDateTime9.toDate();
        mutableDateTime9.addDays(887);
        mutableDateTime9.setWeekyear(74767);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        long long22 = dateTimeField19.roundHalfCeiling((long) 1);
        long long24 = dateTimeField19.roundHalfFloor((long) 34808947);
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        int int33 = mutableDateTime28.getMillisOfSecond();
        mutableDateTime28.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        int int43 = dateTimeField39.getDifference((long) 10, (long) 'a');
        int int45 = dateTimeField39.getLeapAmount((-1L));
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = dateTimeField39.getAsText((long) 340, locale47);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField39.getAsShortText((int) '4', locale50);
        org.joda.time.ReadablePartial readablePartial52 = null;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.lang.String str55 = dateTimeField39.getAsText(readablePartial52, 292278993, locale54);
        java.lang.String str56 = mutableDateTime28.toString("237", locale54);
        java.lang.String str57 = locale54.getCountry();
        java.lang.String str58 = locale54.getDisplayVariant();
        java.lang.String str59 = dateTimeField19.getAsText(readablePartial25, 740, locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField19.getType();
        java.lang.String str61 = dateTimeFieldType60.toString();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime9.property(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Aug 15 09:48:15 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 322L + "'", long22 == 322L);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 34809322L + "'", long24 == 34809322L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 545 + "'", int33 == 545);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "52" + "'", str51, "52");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "292278993" + "'", str55, "292278993");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "237" + "'", str56, "237");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "GB" + "'", str57, "GB");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "740" + "'", str59, "740");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "secondOfMinute" + "'", str61, "secondOfMinute");
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test13213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        mutableDateTime2.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        int int18 = dateTimeField14.getDifference((long) 10, (long) 'a');
        int int20 = dateTimeField14.getMaximumValue((long) (byte) 1);
        java.lang.String str22 = dateTimeField14.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray40 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int41 = dateTimeField33.getMinimumValue(readablePartial34, intArray40);
        int int42 = dateTimeField14.getMaximumValue(readablePartial23, intArray40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = dateTimeField46.getAsShortText(0L, locale49);
        boolean boolean52 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        int int64 = mutableDateTime56.get(dateTimeFieldType63);
        int int65 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.yearOfEra();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar69 = mutableDateTime66.toCalendar(locale68);
        java.util.Calendar calendar70 = mutableDateTime56.toCalendar(locale68);
        java.lang.String str71 = dateTimeField46.getAsShortText(readablePartial53, (int) ' ', locale68);
        java.lang.String str72 = dateTimeField14.getAsShortText(1644788463784L, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology11, locale68);
        org.joda.time.DurationField durationField74 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField75 = chronology11.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField76 = chronology11.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74896 + "'", int8 == 74896);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1644572895887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=16,MILLISECOND=565,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644537696887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=565,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "32" + "'", str71, "32");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "4" + "'", str72, "4");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test13214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13214");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField13.getMinimumValue(readablePartial14);
        long long17 = dateTimeField13.remainder((long) 74874);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 74874L + "'", long17 == 74874L);
    }

    @Test
    public void test13215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        mutableDateTime17.setDate((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime17.addMillis((int) (byte) 0);
        int int37 = mutableDateTime17.getEra();
        boolean boolean38 = dateTime15.isEqual((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime15.toMutableDateTime();
        int int40 = mutableDateTime39.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696922,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=600,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test13216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.DurationField durationField36 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField37 = chronology7.millisOfSecond();
        org.joda.time.DurationField durationField38 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology7.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test13217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology8.add(readablePeriod9, (long) 210, 74410);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DurationField durationField15 = chronology14.weekyears();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 210L + "'", long12 == 210L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test13218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13218");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13219");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        mutableDateTime1.addMonths(281);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        mutableDateTime19.setChronology(chronology27);
        java.util.Locale locale31 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale32 = locale31.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology27, locale31);
        mutableDateTime1.setChronology(chronology27);
        java.lang.Object obj35 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addSeconds(10656);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=736,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "2045-07-11T00:01:37.736+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "2045-07-11T00:01:37.736+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "2045-07-11T00:01:37.736+00:00:00.678");
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test13220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = mutableDateTime9.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.Chronology chronology16 = null;
        mutableDateTime15.setChronology(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime19.toString(dateTimeFormatter22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = mutableDateTime19.getChronology();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime19.add(readableDuration27);
        int int29 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime19);
        boolean boolean30 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = mutableDateTime32.toString(dateTimeFormatter35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (byte) 0);
        mutableDateTime32.setZoneRetainFields(dateTimeZone43);
        long long49 = dateTimeZone43.adjustOffset((long) 34816672, false);
        boolean boolean51 = dateTimeZone43.isStandardOffset((long) 34839691);
        long long53 = dateTimeZone43.nextTransition((long) 74409);
        mutableDateTime1.setZone(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 759 + "'", int7 == 759);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:48:16.759+00:00:00.678" + "'", str13, "2022-02-11T09:48:16.759+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:48:16.759+00:00:00.678" + "'", str23, "2022-02-11T09:48:16.759+00:00:00.678");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:48:16.759+00:00:00.678" + "'", str36, "2022-02-11T09:48:16.759+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 34816672L + "'", long49 == 34816672L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 74409L + "'", long53 == 74409L);
    }

    @Test
    public void test13221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13221");
        java.util.Locale locale3 = new java.util.Locale("97474", "2022-02-11T00:01:37.012Z", "2022-02-11T09:46:05.510Z");
        org.junit.Assert.assertEquals(locale3.toString(), "97474_2022-02-11T00:01:37.012Z_2022-02-11T09:46:05.510Z");
    }

    @Test
    public void test13222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13222");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(true);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.lang.String str27 = dateTimeZone24.getName((long) 2);
        java.util.TimeZone timeZone28 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology29 = chronology21.withZone(dateTimeZone24);
        org.joda.time.Chronology chronology30 = chronology7.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-678L) + "'", long20 == (-678L));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.678" + "'", str27, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test13223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.DurationField durationField36 = chronology7.centuries();
        java.lang.String str37 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology7.monthOfYear();
        java.lang.String str41 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField42 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology7.centuryOfEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(durationField36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+00:00:00.678]" + "'", str37, "ISOChronology[+00:00:00.678]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+00:00:00.678]" + "'", str41, "ISOChronology[+00:00:00.678]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test13224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setMillisOfDay(781);
        org.joda.time.Instant instant15 = mutableDateTime1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(74543670);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74543670 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test13225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        mutableDateTime1.add((long) 765);
        mutableDateTime1.addSeconds(0);
        mutableDateTime1.addMonths(178);
        int int53 = mutableDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 50 + "'", int53 == 50);
    }

    @Test
    public void test13226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13226");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        java.lang.String str19 = mutableDateTime18.toString();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.centuryOfEra();
        org.joda.time.Interval interval21 = property20.toInterval();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:16.854+00:00:00.678" + "'", str6, "2022-02-11T09:48:16.854+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.678" + "'", str14, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:16.854+00:00:00.678" + "'", str19, "2022-02-11T09:48:16.854+00:00:00.678");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test13227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13227");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addMinutes(100);
        java.util.Date date11 = mutableDateTime1.toDate();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime1.copy();
        int int13 = mutableDateTime1.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 13 22:28:16 UTC 2022");
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1348 + "'", int13 == 1348);
    }

    @Test
    public void test13228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.year();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime11.getZone();
        int int19 = mutableDateTime11.getMonthOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime30 = mutableDateTime21.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean32 = mutableDateTime21.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getDurationType();
        boolean boolean34 = mutableDateTime11.equals((java.lang.Object) dateTimeFieldType31);
        mutableDateTime1.set(dateTimeFieldType31, 34971);
        mutableDateTime1.add((long) 35021254);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test13229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13229");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime43.getZone();
        long long52 = dateTimeZone50.nextTransition((long) 59);
        java.lang.String str54 = dateTimeZone50.getName((long) (short) 0);
        java.lang.String str55 = dateTimeZone50.getID();
        long long57 = dateTimeZone50.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getMinuteOfHour();
        mutableDateTime64.addDays(831);
        boolean boolean74 = mutableDateTime60.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Calendar calendar76 = mutableDateTime64.toCalendar(locale75);
        java.lang.String str77 = dateTimeZone50.getShortName((-41907196800000L), locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter20.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter20.withDefaultYear(97608);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter20.withOffsetParsed();
        boolean boolean82 = dateTimeFormatter20.isPrinter();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-678L) + "'", long31 == (-678L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.678" + "'", str38, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 59L + "'", long52 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.678" + "'", str55, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 48 + "'", int71 == 48);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1716583696222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=16,MILLISECOND=900,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.678" + "'", str77, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test13230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test13231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13231");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DurationField durationField17 = chronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test13232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13232");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField(74478);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test13233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.addWrapField(462);
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfEven();
        mutableDateTime9.addWeekyears(338);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "20" + "'", str6, "20");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test13234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime28.toMutableDateTime();
        int int35 = mutableDateTime28.getYear();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime28.getZone();
        boolean boolean38 = dateTimeZone36.isStandardOffset((long) 25);
        mutableDateTime18.setZone(dateTimeZone36);
        int int41 = dateTimeZone36.getStandardOffset(74586L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:16.961+00:00:00.678" + "'", str5, "2022-02-11T09:48:16.961+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 678 + "'", int41 == 678);
    }

    @Test
    public void test13235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13235");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long20 = dateTimeParserBucket17.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        boolean boolean23 = dateTimeParserBucket17.restoreState((java.lang.Object) property22);
        int int24 = property22.getMinimumValueOverall();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        boolean boolean34 = mutableDateTime26.isEqualNow();
        int int35 = property22.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime26.yearOfCentury();
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.addMillis(530);
        int int40 = mutableDateTime26.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 975 + "'", int7 == 975);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572896297L + "'", long10 == 1644572896297L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-678L) + "'", long20 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
    }

    @Test
    public void test13236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13236");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        boolean boolean12 = dateTimeFormatter10.isParser();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.setMinuteOfHour((int) (short) 1);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.weekyear();
        int int21 = mutableDateTime14.getDayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime14.setZone(dateTimeZone23);
        java.lang.String str26 = dateTimeZone23.getShortName((long) 2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter10.withZone(dateTimeZone23);
        org.joda.time.ReadablePartial readablePartial28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = dateTimeFormatter27.print(readablePartial28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 993 + "'", int19 == 993);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.678" + "'", str26, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test13237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13237");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(612);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.era();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:17.008+00:00:00.678" + "'", str5, "2022-02-11T09:48:17.008+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test13238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13238");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.weekOfWeekyear();
        int int21 = mutableDateTime1.get(dateTimeField20);
        mutableDateTime1.setYear(34919199);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 17 + "'", int6 == 17);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test13239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getDayOfWeek();
        int int17 = mutableDateTime7.getDayOfMonth();
        java.util.Date date18 = mutableDateTime7.toDate();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        boolean boolean25 = mutableDateTime20.isSupported(dateTimeFieldType24);
        mutableDateTime20.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = mutableDateTime29.toDateTime();
        java.util.Locale locale39 = null;
        java.util.Calendar calendar40 = mutableDateTime29.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime29.getZone();
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        mutableDateTime44.setMillis(5L);
        int int53 = mutableDateTime44.getWeekOfWeekyear();
        mutableDateTime44.addYears(34830);
        int int56 = mutableDateTime44.getMinuteOfHour();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology58, locale59, (java.lang.Integer) 9, 59);
        java.lang.Object obj63 = dateTimeParserBucket62.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket62.saveField(dateTimeFieldType64, 59);
        java.lang.String str67 = dateTimeFieldType64.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter70.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatter70.getParser();
        boolean boolean73 = dateTimeFormatter70.isParser();
        org.joda.time.Chronology chronology75 = null;
        java.util.Locale locale76 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(0L, chronology75, locale76, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone80 = dateTimeParserBucket79.getZone();
        org.joda.time.Chronology chronology81 = dateTimeParserBucket79.getChronology();
        org.joda.time.DurationField durationField82 = chronology81.days();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        long long86 = chronology81.add(readablePeriod83, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter70.withChronology(chronology81);
        org.joda.time.DurationField durationField88 = chronology81.seconds();
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType64.getField(chronology81);
        boolean boolean90 = mutableDateTime44.isSupported(dateTimeFieldType64);
        org.joda.time.MutableDateTime mutableDateTime92 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.DateTime dateTime93 = mutableDateTime92.toDateTime();
        boolean boolean94 = mutableDateTime44.isEqual((org.joda.time.ReadableInstant) mutableDateTime92);
        boolean boolean95 = mutableDateTime20.isAfter((org.joda.time.ReadableInstant) mutableDateTime92);
        int int96 = mutableDateTime92.getDayOfWeek();
        boolean boolean97 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572896349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=27,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 11:28:16 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644537696349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=27,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "yearOfEra" + "'", str67, "yearOfEra");
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNull(dateTimeParser72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 5 + "'", int96 == 5);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test13240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        boolean boolean26 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.year();
        mutableDateTime1.addMonths(74781471);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology38.centuries();
        java.lang.String str44 = chronology38.toString();
        org.joda.time.DurationField durationField45 = chronology38.halfdays();
        boolean boolean46 = dateTimeFieldType30.isSupported(chronology38);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType30.getRangeDurationType();
        boolean boolean48 = mutableDateTime1.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.072+00:00:00.678" + "'", str22, "2022-02-11T00:01:37.072+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test13241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        long long2 = mutableDateTime1.getMillis();
        int int3 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addYears(728);
        mutableDateTime1.addSeconds(820);
        mutableDateTime1.addSeconds(63462);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572896413L + "'", long2 == 1644572896413L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35297 + "'", int3 == 35297);
    }

    @Test
    public void test13242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13242");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfDay();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial28 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = mutableDateTime31.toDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime31.centuryOfEra();
        int int42 = property41.getLeapAmount();
        java.lang.String str43 = property41.getAsShortText();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("2022-02-11T09:42:35.209Z");
        int int46 = property41.getMaximumTextLength(locale45);
        java.lang.String str47 = locale45.getISO3Country();
        java.lang.String str48 = dateTimeField26.getAsShortText(readablePartial28, 713, locale45);
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.days();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.dayOfMonth();
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale62);
        org.joda.time.DurationField durationField64 = chronology57.halfdays();
        org.joda.time.DateTimeField dateTimeField65 = chronology57.millisOfDay();
        org.joda.time.ReadablePartial readablePartial66 = null;
        int int67 = dateTimeField65.getMinimumValue(readablePartial66);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale71 = new java.util.Locale("\u4e2d\u56fd\u8a9e");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 287, chronology69, locale71, (java.lang.Integer) 34811, 481);
        int int75 = dateTimeField65.getMaximumShortTextLength(locale71);
        java.lang.String str76 = locale45.getDisplayVariant(locale71);
        java.lang.String str77 = dateTimeField12.getAsShortText(3715125998L, locale45);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 24 + "'", int27 == 24);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "20" + "'", str43, "20");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 7 + "'", int46 == 7);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "713" + "'", str48, "713");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertEquals(locale71.toString(), "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "12" + "'", str77, "12");
    }

    @Test
    public void test13243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13243");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:40:11.519Z");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:40:11.519z");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:40:11.519z");
    }

    @Test
    public void test13244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime1.copy();
        mutableDateTime1.addYears(257);
        java.lang.String str8 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35297263 + "'", int4 == 35297263);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2279-02-11T09:48:17.263+00:00:00.678" + "'", str8, "2279-02-11T09:48:17.263+00:00:00.678");
    }

    @Test
    public void test13245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13245");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = mutableDateTime5.toString(dateTimeFormatter8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = mutableDateTime5.getChronology();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addMinutes((int) 'u');
        org.joda.time.Chronology chronology15 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor((long) 12);
        int int19 = dateTimeField16.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:48:17.271+00:00:00.678" + "'", str9, "2022-02-11T09:48:17.271+00:00:00.678");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-678L) + "'", long18 == (-678L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test13246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime18.millisOfDay();
        java.lang.String str25 = property24.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:17.282+00:00:00.678" + "'", str5, "2022-02-11T09:48:17.282+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[millisOfDay]" + "'", str25, "Property[millisOfDay]");
    }

    @Test
    public void test13247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13247");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        int int14 = mutableDateTime12.getDayOfMonth();
        long long15 = mutableDateTime12.getMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime12.add(readablePeriod16, (int) 'a');
        int int19 = mutableDateTime12.getWeekOfWeekyear();
        boolean boolean20 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setYear(81);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572896616L + "'", long15 == 1644572896616L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test13248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.setMinuteOfDay(5);
        int int12 = mutableDateTime1.getWeekyear();
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.Chronology chronology21 = mutableDateTime16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime16.toMutableDateTime();
        int int23 = mutableDateTime16.getMinuteOfHour();
        int int24 = mutableDateTime16.getMonthOfYear();
        mutableDateTime16.addHours(0);
        int int27 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime1.add(1644537674453L);
        int int30 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 48 + "'", int23 == 48);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 83 + "'", int30 == 83);
    }

    @Test
    public void test13249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13249");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(34880240);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        mutableDateTime19.add((long) 993);
        long long29 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addSeconds(34891936);
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime19.getRoundingField();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime19.era();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 135 + "'", int14 == 135);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 327 + "'", int25 == 327);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-689217L) + "'", long29 == (-689217L));
        org.junit.Assert.assertNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test13250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField8 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime9.add(readablePeriod10);
        mutableDateTime9.addYears(2067);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test13251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfWeek();
        java.util.Locale locale15 = null;
        java.lang.String str16 = property14.getAsText(locale15);
        java.util.Locale locale17 = null;
        int int18 = property14.getMaximumTextLength(locale17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        mutableDateTime20.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int29 = dateTimeField28.getMaximumValue();
        mutableDateTime20.setRounding(dateTimeField28);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = dateTimeField28.getAsShortText((int) (byte) 1, locale32);
        java.lang.String str34 = property14.getAsShortText(locale32);
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale32.getDisplayScript(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale32);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        int int41 = mutableDateTime39.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime39.set(dateTimeFieldType42, 0);
        boolean boolean45 = dateTimeParserBucket38.restoreState((java.lang.Object) dateTimeFieldType42);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyear();
        dateTimeParserBucket38.saveField(dateTimeField55, 642);
        long long59 = dateTimeParserBucket38.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfMinute();
        dateTimeParserBucket38.saveField(dateTimeFieldType60, 34822499);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.set(dateTimeFieldType60, (-1433299));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1433299 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "vendredi" + "'", str16, "vendredi");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ven." + "'", str34, "ven.");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-41907196800678L) + "'", long59 == (-41907196800678L));
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test13252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13252");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        boolean boolean3 = mutableDateTime0.isEqual((long) 601);
        mutableDateTime0.addSeconds(0);
        int int6 = mutableDateTime0.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfEra();
        mutableDateTime7.setMillisOfDay(34808947);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter15.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatter15.getParser();
        boolean boolean18 = dateTimeFormatter15.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter15.withOffsetParsed();
        int int20 = dateTimeFormatter15.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter15.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withZoneUTC();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter22.withLocale(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        java.lang.String str43 = dateTimeZone42.toString();
        org.joda.time.DateTime dateTime44 = mutableDateTime27.toDateTime(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter22.withZone(dateTimeZone42);
        int int47 = dateTimeZone42.getOffset((long) 135);
        mutableDateTime7.setZoneRetainFields(dateTimeZone42);
        java.lang.String str50 = mutableDateTime7.toString("5");
        boolean boolean51 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(dateTimeZone16);
        org.junit.Assert.assertNull(dateTimeParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.678" + "'", str43, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 678 + "'", int47 == 678);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "5" + "'", str50, "5");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test13253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfEven();
        int int19 = mutableDateTime18.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.weekOfWeekyear();
        mutableDateTime18.addWeeks(34841148);
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Chronology chronology24 = mutableDateTime18.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696714,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=392,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 588 + "'", int19 == 588);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-243888036L) + "'", long23 == (-243888036L));
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test13254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13254");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str13 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime15.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime15.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        long long33 = dateTimeZone26.previousTransition((long) 518);
        long long35 = dateTimeZone8.getMillisKeepLocal(dateTimeZone26, (long) 441);
        long long38 = dateTimeZone8.convertLocalToUTC((long) 34855006, true);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = mutableDateTime40.toString(dateTimeFormatter43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket50.getZone();
        java.lang.String str52 = dateTimeZone51.getID();
        java.lang.String str54 = dateTimeZone51.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime40.toMutableDateTime(dateTimeZone51);
        boolean boolean57 = dateTimeZone51.isStandardOffset((long) 298);
        int int59 = dateTimeZone51.getOffsetFromLocal(1644788510077L);
        long long61 = dateTimeZone51.convertUTCToLocal((long) 115);
        long long65 = dateTimeZone51.convertLocalToUTC(46864L, false, (long) 560);
        int int67 = dateTimeZone51.getStandardOffset(3660L);
        long long69 = dateTimeZone8.getMillisKeepLocal(dateTimeZone51, (long) 74594);
        int int71 = dateTimeZone51.getStandardOffset((long) 240);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:17.410+00:00:00.678" + "'", str19, "2022-02-11T09:48:17.410+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 518L + "'", long33 == 518L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 441L + "'", long35 == 441L);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 34854328L + "'", long38 == 34854328L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:48:17.410+00:00:00.678" + "'", str44, "2022-02-11T09:48:17.410+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.678" + "'", str52, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 678 + "'", int59 == 678);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 793L + "'", long61 == 793L);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 46186L + "'", long65 == 46186L);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 678 + "'", int67 == 678);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 74594L + "'", long69 == 74594L);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 678 + "'", int71 == 678);
    }

    @Test
    public void test13255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13255");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology7.add(readablePeriod16, (long) 166, 34824770);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime21.getZone();
        long long30 = dateTimeZone28.nextTransition((long) 59);
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0);
        java.lang.String str33 = dateTimeZone28.getID();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.yearOfCentury();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime43 = property39.add(41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.addHours(59);
        int int50 = mutableDateTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = mutableDateTime52.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) (byte) 0);
        mutableDateTime52.setZoneRetainFields(dateTimeZone63);
        mutableDateTime45.setZone(dateTimeZone63);
        long long69 = dateTimeZone63.previousTransition((long) 852);
        mutableDateTime43.setZone(dateTimeZone63);
        mutableDateTime43.addDays(74411);
        int int73 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Chronology chronology74 = chronology7.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField75 = chronology74.weekyears();
        org.joda.time.DurationField durationField76 = chronology74.millis();
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.Chronology chronology78 = chronology74.withZone(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 166L + "'", long19 == 166L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 59L + "'", long30 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.678" + "'", str32, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.678" + "'", str33, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 467 + "'", int50 == 467);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:48:17.467+00:00:00.678" + "'", str56, "2022-02-11T09:48:17.467+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 852L + "'", long69 == 852L);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 678 + "'", int73 == 678);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(chronology78);
    }

    @Test
    public void test13256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add(100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekyear();
        boolean boolean14 = mutableDateTime1.equals((java.lang.Object) mutableDateTime12);
        int int15 = mutableDateTime12.getWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime17.getZone();
        long long26 = dateTimeZone24.nextTransition((long) 59);
        java.lang.String str28 = dateTimeZone24.getName((long) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        org.joda.time.Chronology chronology35 = mutableDateTime30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime30.toMutableDateTime();
        int int37 = mutableDateTime30.getYear();
        int int38 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone24);
        long long42 = dateTimeZone24.nextTransition(0L);
        boolean boolean44 = dateTimeZone24.equals((java.lang.Object) 395);
        org.joda.time.DateTime dateTime45 = mutableDateTime12.toDateTime(dateTimeZone24);
        java.lang.String str46 = dateTime45.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2122 + "'", int15 == 2122);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 59L + "'", long26 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.678" + "'", str28, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 678 + "'", int38 == 678);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2122-02-11T09:48:17.508+00:00:00.678" + "'", str46, "2122-02-11T09:48:17.508+00:00:00.678");
    }

    @Test
    public void test13257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        java.lang.Integer int33 = dateTimeParserBucket30.getOffsetInteger();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.DateTime dateTime36 = mutableDateTime1.toDateTime(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            long long41 = chronology34.getDateTimeMillis(0, 35144922, 34928021, 41312432);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35144922 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 527 + "'", int6 == 527);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:48:17.527+00:00:00.678" + "'", str12, "2022-02-11T09:48:17.527+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test13258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13258");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime1.getChronology();
        mutableDateTime1.addMinutes(214);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = mutableDateTime1.toString("2022-02-11T09:41:52.515-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572896862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=540,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test13259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13259");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        java.util.Locale locale14 = java.util.Locale.FRENCH;
        java.lang.String str15 = locale14.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology12, locale14, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField18 = chronology12.halfdays();
        org.joda.time.DurationField durationField19 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.minuteOfDay();
        mutableDateTime3.setChronology(chronology12);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter25.getZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone34);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter25.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter25.withZoneUTC();
        org.joda.time.Chronology chronology39 = dateTimeFormatter25.getChronolgy();
        org.joda.time.Chronology chronology40 = dateTimeFormatter25.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 970);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = mutableDateTime3.toString(dateTimeFormatter25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.678" + "'", str35, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test13260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13260");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(0L);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = mutableDateTime28.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime37 = mutableDateTime28.toDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        mutableDateTime39.addYears(0);
        mutableDateTime28.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        int int46 = mutableDateTime28.getEra();
        int int47 = mutableDateTime28.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime28.hourOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.Chronology chronology51 = null;
        mutableDateTime50.setChronology(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = null;
        java.lang.String str58 = mutableDateTime54.toString(dateTimeFormatter57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime54.weekOfWeekyear();
        org.joda.time.Chronology chronology60 = mutableDateTime54.getChronology();
        mutableDateTime50.setMillis((org.joda.time.ReadableInstant) mutableDateTime54);
        mutableDateTime54.addMinutes((int) 'u');
        org.joda.time.Chronology chronology64 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfHalfday();
        org.joda.time.DateTime dateTime66 = mutableDateTime28.toDateTime(chronology64);
        org.joda.time.DurationField durationField67 = chronology64.hours();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.year();
        mutableDateTime26.setChronology(chronology64);
        int int70 = mutableDateTime26.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11T09:48:17.565+00:00:00.678" + "'", str58, "2022-02-11T09:48:17.565+00:00:00.678");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
    }

    @Test
    public void test13261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime17 = null;
        boolean boolean18 = dateTimeZone12.isLocalDateTimeGap(localDateTime17);
        java.lang.String str20 = dateTimeZone12.getShortName((long) 185);
        java.lang.String str21 = dateTimeZone12.toString();
        java.lang.String str22 = dateTimeZone12.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:17.593+00:00:00.678" + "'", str5, "2022-02-11T09:48:17.593+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.678" + "'", str13, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.678" + "'", str20, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.678" + "'", str21, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.678" + "'", str22, "+00:00:00.678");
    }

    @Test
    public void test13262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13262");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:45:44.465+00:00:00.100");
    }

    @Test
    public void test13263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13263");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        int int8 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withPivotYear(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int16 = dateTimeField15.getMaximumValue();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = dateTimeField15.getAsShortText(0L, locale18);
        boolean boolean21 = dateTimeField15.isLenient();
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime25.set(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = mutableDateTime25.get(dateTimeFieldType32);
        int int34 = mutableDateTime25.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.yearOfEra();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar38 = mutableDateTime35.toCalendar(locale37);
        java.util.Calendar calendar39 = mutableDateTime25.toCalendar(locale37);
        java.lang.String str40 = dateTimeField15.getAsShortText(readablePartial22, (int) ' ', locale37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter12.withLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:40.613Z", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644572896930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=608,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644537696930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=608,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "32" + "'", str40, "32");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test13264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13264");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getMinuteOfDay();
        mutableDateTime0.addMonths(562);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572896948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=626,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
    }

    @Test
    public void test13265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13265");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(381);
        int int26 = dateTimeFormatter25.getDefaultYear();
        boolean boolean27 = dateTimeFormatter25.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter25.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = dateTimeFormatter25.parseLocalDate("2022-02-11T09:41:20.687-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 381 + "'", int26 == 381);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test13266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13266");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        mutableDateTime1.add(readablePeriod8, 0);
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime1.add(readablePeriod12, 74584717);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74897 + "'", int7 == 74897);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test13267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13267");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        long long19 = dateTimeField16.addWrapField(35168L, 34953961);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=660,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 34989129L + "'", long19 == 34989129L);
    }

    @Test
    public void test13268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology30.halfdays();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 678 + "'", int22 == 678);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:48:17.672+00:00:00.678" + "'", str28, "2022-02-11T09:48:17.672+00:00:00.678");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test13269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13269");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone38 = mutableDateTime31.getZone();
        long long40 = dateTimeZone38.nextTransition((long) 59);
        java.lang.String str42 = dateTimeZone38.getName((long) (short) 0);
        java.lang.String str43 = dateTimeZone38.getID();
        long long45 = dateTimeZone38.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        mutableDateTime52.addHours(59);
        org.joda.time.Chronology chronology57 = mutableDateTime52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime52.toMutableDateTime();
        int int59 = mutableDateTime52.getMinuteOfHour();
        mutableDateTime52.addDays(831);
        boolean boolean62 = mutableDateTime48.isBefore((org.joda.time.ReadableInstant) mutableDateTime52);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Calendar calendar64 = mutableDateTime52.toCalendar(locale63);
        java.lang.String str65 = dateTimeZone38.getShortName((-41907196800000L), locale63);
        java.util.TimeZone timeZone66 = dateTimeZone38.toTimeZone();
        mutableDateTime5.setZone(dateTimeZone38);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        int int72 = mutableDateTime69.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime69.set(dateTimeFieldType73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.year();
        int int77 = mutableDateTime69.get(dateTimeFieldType76);
        org.joda.time.DateTime dateTime78 = mutableDateTime69.toDateTime();
        java.util.Locale locale79 = null;
        java.util.Calendar calendar80 = mutableDateTime69.toCalendar(locale79);
        mutableDateTime69.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime69.centuryOfEra();
        mutableDateTime69.setTime((long) 74430747);
        long long86 = mutableDateTime69.getMillis();
        boolean boolean87 = mutableDateTime5.equals((java.lang.Object) long86);
        org.joda.time.MutableDateTime mutableDateTime88 = mutableDateTime5.toMutableDateTime();
        org.joda.time.Instant instant89 = mutableDateTime5.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572897011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=17,MILLISECOND=689,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 59L + "'", long40 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.678" + "'", str42, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.678" + "'", str43, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 48 + "'", int59 == 48);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1716583697011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=17,MILLISECOND=689,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.678" + "'", str65, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1644537697011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=689,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property83);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1644612030069L + "'", long86 == 1644612030069L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test13270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getDayOfMonth();
        mutableDateTime4.addYears(2922789);
        mutableDateTime4.addHours((int) '4');
        int int27 = mutableDateTime4.getYearOfCentury();
        mutableDateTime4.setYear(857);
        org.joda.time.Instant instant30 = mutableDateTime4.toInstant();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("chinois");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList32, strMap35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList36, strMap37);
        boolean boolean39 = instant30.equals((java.lang.Object) languageRangeList36);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 737 + "'", int9 == 737);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test13271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13271");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getMinimumValue((long) (short) 10);
        int int6 = dateTimeField2.getMaximumValue((long) 9);
        boolean boolean7 = dateTimeField2.isLenient();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        mutableDateTime11.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        mutableDateTime11.setRounding(dateTimeField19);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = dateTimeField19.getAsShortText((int) (byte) 1, locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str26 = dateTimeField2.getAsShortText(readablePartial8, 74454, locale25);
        java.lang.String str27 = locale25.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "74454" + "'", str26, "74454");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test13272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13272");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(232);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 74598);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.232" + "'", str3, "+00:00:00.232");
    }

    @Test
    public void test13273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13273");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        long long11 = dateTimeParserBucket8.computeMillis(true);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket8.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        boolean boolean14 = durationFieldType1.isSupported(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setDayOfYear(35315);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35315 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "seconds" + "'", str2, "seconds");
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-678L) + "'", long11 == (-678L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test13274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.lang.String str12 = property9.getAsText();
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) str12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 258 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "vendredi" + "'", str11, "vendredi");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vendredi" + "'", str12, "vendredi");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test13275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property2.getFieldType();
        java.lang.String str6 = property2.getAsText();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundCeiling();
        long long8 = property2.remainder();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        int int13 = dateTimeField11.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.lang.String str38 = dateTimeField11.getAsShortText(1L, locale35);
        java.lang.String str39 = locale35.getCountry();
        java.util.Locale.setDefault(locale35);
        java.lang.String str41 = property2.getAsShortText(locale35);
        org.joda.time.MutableDateTime mutableDateTime42 = property2.roundHalfEven();
        int int43 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vendredi" + "'", str6, "vendredi");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "sam." + "'", str41, "sam.");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
    }

    @Test
    public void test13276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        mutableDateTime1.addMonths((int) '4');
        int int33 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfWeek();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property51.getAsText(locale52);
        java.util.Locale locale54 = null;
        int int55 = property51.getMaximumTextLength(locale54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        mutableDateTime57.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        int int66 = dateTimeField65.getMaximumValue();
        mutableDateTime57.setRounding(dateTimeField65);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = dateTimeField65.getAsShortText((int) (byte) 1, locale69);
        java.lang.String str71 = property51.getAsShortText(locale69);
        java.lang.String str72 = dateTimeField46.getAsText(readablePartial47, 237, locale69);
        int int73 = mutableDateTime1.get(dateTimeField46);
        mutableDateTime1.addMillis(74464784);
        mutableDateTime1.add(97503L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 849 + "'", int7 == 849);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697171,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=849,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "vendredi" + "'", str53, "vendredi");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ven." + "'", str71, "ven.");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "237" + "'", str72, "237");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test13277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13277");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        int int3 = property1.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.DurationField durationField17 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType6.getField(chronology14);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMinimumValue(readablePartial19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int[] intArray34 = null;
        int int35 = dateTimeField32.getMinimumValue(readablePartial33, intArray34);
        long long37 = dateTimeField32.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getMaximumValue((long) (byte) 1);
        java.lang.String str49 = dateTimeField41.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray67 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int68 = dateTimeField60.getMinimumValue(readablePartial61, intArray67);
        int int69 = dateTimeField41.getMaximumValue(readablePartial50, intArray67);
        int int70 = dateTimeField32.getMinimumValue(readablePartial38, intArray67);
        int int71 = dateTimeField18.getMaximumValue(readablePartial21, intArray67);
        int int72 = dateTimeField4.getMinimumValue(readablePartial5, intArray67);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField4.getType();
        org.joda.time.ReadablePartial readablePartial74 = null;
        int[] intArray75 = null;
        int int76 = dateTimeField4.getMaximumValue(readablePartial74, intArray75);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278993 + "'", int3 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 865L + "'", long37 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 292278993 + "'", int76 == 292278993);
    }

    @Test
    public void test13278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        mutableDateTime1.add((long) 6);
        int int6 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(340);
        mutableDateTime1.setZone(dateTimeZone8);
        int int10 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.setYear(74411);
        int int16 = mutableDateTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        boolean boolean38 = mutableDateTime33.isSupported(dateTimeFieldType37);
        int int39 = mutableDateTime18.get(dateTimeFieldType37);
        mutableDateTime18.setWeekyear(74419);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        long long50 = dateTimeParserBucket47.computeMillis(true);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField53 = chronology51.years();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime18.toMutableDateTime(chronology51);
        boolean boolean55 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        boolean boolean57 = mutableDateTime18.isAfter(779L);
        mutableDateTime18.setMillisOfSecond(912);
        boolean boolean60 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime18.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 56 + "'", int10 == 56);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-678L) + "'", long50 == (-678L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test13279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13279");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        long long12 = chronology7.add((long) 35300030, 902L, 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35300030L + "'", long12 == 35300030L);
    }

    @Test
    public void test13280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13280");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = property2.set(35326);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35326 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test13281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addMonths(97840);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime1.secondOfMinute();
        int int61 = property60.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test13282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13282");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        int int11 = dateTimeField10.getMinimumValue();
        boolean boolean12 = dateTimeField10.isSupported();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int18 = dateTimeField17.getMaximumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.yearOfCentury();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        int int25 = property23.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int29 = dateTimeField28.getMaximumValue();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = dateTimeField28.getAsShortText(0L, locale31);
        int int34 = property23.getMaximumTextLength(locale31);
        java.lang.String str35 = dateTimeField17.getAsShortText(0L, locale31);
        org.joda.time.DurationField durationField36 = dateTimeField17.getDurationField();
        long long39 = dateTimeField17.getDifferenceAsLong((long) 211, (long) 186);
        int int41 = dateTimeField17.getMinimumValue((-539L));
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        int int49 = dateTimeField45.getDifference((long) 10, (long) 'a');
        int int51 = dateTimeField45.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial52 = null;
        int[] intArray59 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int60 = dateTimeField45.getMinimumValue(readablePartial52, intArray59);
        int int61 = dateTimeField17.getMinimumValue(readablePartial42, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray63 = dateTimeField10.set(readablePartial13, 784, intArray59, 57451);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57451 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test13283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13283");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = dateTimeField22.getAsText(readablePartial23, 842, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale39, (java.lang.Integer) 237);
        org.joda.time.DurationField durationField44 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField45 = chronology8.weekyear();
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale49 = new java.util.Locale("2022-02-11T09:43:00.321Z");
        java.lang.String str50 = dateTimeField45.getAsShortText(readablePartial46, 242, locale49);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "842" + "'", str41, "842");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals(locale49.toString(), "2022-02-11t09:43:00.321z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "242" + "'", str50, "242");
    }

    @Test
    public void test13284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        int int9 = mutableDateTime1.getMillisOfDay();
        int int10 = mutableDateTime1.getDayOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.year();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35004 + "'", int9 == 35004);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 42 + "'", int10 == 42);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test13285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13285");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        java.lang.String str10 = dateTimeField8.getAsText((long) 40);
        int int13 = dateTimeField8.getDifference((long) 355, (long) 598);
        org.joda.time.DurationField durationField14 = dateTimeField8.getLeapDurationField();
        java.lang.String str16 = dateTimeField8.getAsText((-1368779100L));
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = mutableDateTime20.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        mutableDateTime20.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        int int38 = mutableDateTime20.getEra();
        int int39 = mutableDateTime20.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime20.hourOfDay();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime20.dayOfMonth();
        int int42 = property41.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime44 = property41.add((long) 262);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar48 = mutableDateTime45.toCalendar(locale47);
        mutableDateTime45.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime45.weekyear();
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
        org.joda.time.DateTime dateTime56 = mutableDateTime55.toDateTime();
        int int57 = mutableDateTime55.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        int int65 = dateTimeField61.getDifference((long) 10, (long) 'a');
        int int67 = dateTimeField61.getLeapAmount((-1L));
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = dateTimeField61.getAsText((long) 340, locale69);
        java.util.Locale locale72 = java.util.Locale.UK;
        java.lang.String str73 = dateTimeField61.getAsShortText((int) '4', locale72);
        org.joda.time.ReadablePartial readablePartial74 = null;
        java.util.Locale locale76 = java.util.Locale.UK;
        java.lang.String str77 = dateTimeField61.getAsText(readablePartial74, 292278993, locale76);
        java.lang.String str78 = locale76.getISO3Country();
        java.lang.String str79 = locale76.getDisplayScript();
        int int80 = property58.getMaximumTextLength(locale76);
        java.lang.String str81 = property41.getAsShortText(locale76);
        java.lang.String str82 = dateTimeField8.getAsShortText(readablePartial17, 536324, locale76);
        long long84 = dateTimeField8.roundCeiling((long) 74523);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "3" + "'", str16, "3");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 28 + "'", int42 == 28);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572897335,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=13,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "52" + "'", str73, "52");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "292278993" + "'", str77, "292278993");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "GBR" + "'", str78, "GBR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "31" + "'", str81, "31");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "536324" + "'", str82, "536324");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 3600000L + "'", long84 == 3600000L);
    }

    @Test
    public void test13286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13286");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        java.lang.String str4 = property1.getName();
        org.joda.time.DurationField durationField5 = property1.getRangeDurationField();
        int int6 = property1.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
    }

    @Test
    public void test13287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13287");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        boolean boolean8 = dateTimeZone7.isFixed();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        mutableDateTime11.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        mutableDateTime11.setRounding(dateTimeField19);
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = dateTimeField19.getAsShortText((int) (byte) 1, locale23);
        java.lang.String str25 = dateTimeZone7.getName(10930L, locale23);
        long long29 = dateTimeZone7.convertLocalToUTC((long) 74438, false, (long) 857);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.678" + "'", str25, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 73760L + "'", long29 == 73760L);
    }

    @Test
    public void test13288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13288");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        int int14 = mutableDateTime6.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = mutableDateTime6.toDateTime();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = mutableDateTime6.toCalendar(locale16);
        mutableDateTime6.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime6.millisOfDay();
        mutableDateTime6.setMillisOfDay(457);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime6.add(readablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.year();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime26);
        boolean boolean36 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime6);
        mutableDateTime6.addMonths(0);
        mutableDateTime6.setWeekyear(974);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644537696387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=65,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test13289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13289");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.hourOfDay();
        long long31 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.hourOfDay();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.hourOfDay();
        org.joda.time.DurationField durationField34 = property33.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.add(57463079);
        mutableDateTime36.setWeekyear(404);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime36.getZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 78 + "'", int6 == 78);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:48:18.078+00:00:00.678" + "'", str12, "2022-02-11T09:48:18.078+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
    }

    @Test
    public void test13290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = property16.isLeap();
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) property16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.lang.String str22 = property21.getName();
        org.joda.time.DurationField durationField23 = property21.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        java.lang.String str25 = property21.getAsText();
        org.joda.time.MutableDateTime mutableDateTime26 = property21.roundCeiling();
        int int27 = mutableDateTime26.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.year();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(74518);
        int int31 = mutableDateTime30.getDayOfWeek();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime30);
        java.lang.String str33 = mutableDateTime30.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "dayOfWeek" + "'", str22, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "vendredi" + "'", str25, "vendredi");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "74518-02-12T00:00:00.000+00:00:00.678" + "'", str33, "74518-02-12T00:00:00.000+00:00:00.678");
    }

    @Test
    public void test13291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13291");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        boolean boolean13 = dateTimeField12.isSupported();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfWeek();
        java.lang.String str25 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfMinute();
        java.lang.String str27 = dateTimeField26.getName();
        long long30 = dateTimeField26.addWrapField(74L, 895);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.secondOfDay();
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.days();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfYear();
        org.joda.time.ReadablePartial readablePartial56 = null;
        int[] intArray62 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int63 = dateTimeField55.getMinimumValue(readablePartial56, intArray62);
        int[] intArray65 = dateTimeField43.addWrapPartial(readablePartial44, 6, intArray62, 0);
        int int66 = dateTimeField26.getMinimumValue(readablePartial31, intArray62);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray68 = dateTimeField12.addWrapPartial(readablePartial14, 551, intArray62, 74904);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "secondOfMinute" + "'", str27, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 55074L + "'", long30 == 55074L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test13292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13292");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter20.getPrinter();
        org.joda.time.Chronology chronology43 = dateTimeFormatter20.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.DurationField durationField45 = chronology43.days();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-678L) + "'", long31 == (-678L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.678" + "'", str38, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
    }

    @Test
    public void test13293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMillis((int) (byte) 0);
        int int21 = mutableDateTime1.getEra();
        mutableDateTime1.addHours(920);
        int int24 = mutableDateTime1.getCenturyOfEra();
        int int25 = mutableDateTime1.getEra();
        mutableDateTime1.addWeekyears(74447);
        org.joda.time.Chronology chronology28 = mutableDateTime1.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test13294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfMonth();
        java.lang.String str12 = property11.getAsShortText();
        java.lang.String str13 = property11.getAsShortText();
        org.joda.time.Interval interval14 = property11.toInterval();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeFormatter17.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter17.getParser();
        boolean boolean20 = dateTimeFormatter17.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter17.withOffsetParsed();
        int int22 = dateTimeFormatter17.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter17.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withZoneUTC();
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter24.withLocale(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.Chronology chronology36 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology36, locale38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter27.withLocale(locale38);
        java.lang.String str41 = property11.getAsText(locale38);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 141 + "'", int9 == 141);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11" + "'", str12, "11");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11" + "'", str13, "11");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNull(dateTimeZone18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "11" + "'", str41, "11");
    }

    @Test
    public void test13295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime19 = property16.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar23 = mutableDateTime20.toCalendar(locale22);
        mutableDateTime20.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int27 = mutableDateTime20.get(dateTimeFieldType26);
        mutableDateTime19.setDate((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology37, locale42);
        mutableDateTime20.setChronology(chronology37);
        mutableDateTime20.addMinutes(680);
        int int47 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        long long48 = mutableDateTime20.getMillis();
        mutableDateTime20.addDays(143);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74898 + "'", int7 == 74898);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572897478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=156,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 42 + "'", int27 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644619697478L + "'", long48 == 1644619697478L);
    }

    @Test
    public void test13296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13296");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:41:01.049Z");
        int int2 = mutableDateTime1.getCenturyOfEra();
        boolean boolean3 = mutableDateTime1.isEqualNow();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test13297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13297");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        int int9 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        mutableDateTime13.addDays(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        java.util.Date date29 = mutableDateTime20.toDate();
        org.joda.time.DateTimeZone dateTimeZone30 = mutableDateTime20.getZone();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime20.secondOfDay();
        org.joda.time.DateTime dateTime32 = mutableDateTime20.toDateTime();
        boolean boolean33 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getDayOfYear();
        int int35 = property11.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime46 = mutableDateTime37.toDateTime();
        java.util.Locale locale47 = null;
        java.util.Calendar calendar48 = mutableDateTime37.toCalendar(locale47);
        mutableDateTime37.addDays((int) (byte) 0);
        mutableDateTime37.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime37.centuryOfEra();
        int int54 = mutableDateTime37.getYearOfCentury();
        long long55 = mutableDateTime37.getMillis();
        boolean boolean56 = dateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572897503,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=181,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 42 + "'", int34 == 42);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644537696503,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=181,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1644537699503L + "'", long55 == 1644537699503L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test13298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13298");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DurationField durationField25 = chronology19.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology19.dayOfMonth();
        boolean boolean27 = dateTimeField26.isSupported();
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        boolean boolean30 = locale29.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTimeField26.getAsShortText(readablePartial28, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test13299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar14 = mutableDateTime11.toCalendar(locale13);
        mutableDateTime11.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime11.weekyear();
        mutableDateTime11.addHours(930);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology30.centuries();
        mutableDateTime11.setChronology(chronology30);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        org.joda.time.Chronology chronology43 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        mutableDateTime11.setZoneRetainFields(dateTimeZone44);
        mutableDateTime11.setYear(74418645);
        boolean boolean48 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.setMillis((long) 74628948);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572897538,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=216,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test13300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime1.add(readableDuration8);
        mutableDateTime1.addWeekyears(712);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = mutableDateTime1.toString("2022-02-11T00:01:37.556Z", locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35298231 + "'", int4 == 35298231);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test13301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        java.util.Date date12 = mutableDateTime1.toDate();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.addHours((int) (short) 0);
        mutableDateTime14.addWeekyears((int) 'a');
        java.lang.String str20 = mutableDateTime14.toString("0");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        int int31 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.Instant instant32 = mutableDateTime22.toInstant();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime22.dayOfWeek();
        boolean boolean34 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        int int35 = mutableDateTime22.getDayOfWeek();
        mutableDateTime22.setSecondOfMinute(23);
        boolean boolean38 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setMillis(3577468159L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74898 + "'", int7 == 74898);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Feb 12 23:59:59 UTC 2022");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test13302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        long long5 = property3.remainder();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundHalfCeiling();
        int int7 = property3.getLeapAmount();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3577698272L + "'", long5 == 3577698272L);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test13303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13303");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.millisOfSecond();
        java.lang.String str14 = dateTimeField12.getAsText((long) 10707);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "707" + "'", str14, "707");
    }

    @Test
    public void test13304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13304");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray29 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int30 = dateTimeField22.getMinimumValue(readablePartial23, intArray29);
        int int31 = dateTimeField11.getMaximumValue(readablePartial12, intArray29);
        java.lang.String str33 = dateTimeField11.getAsText(59L);
        int int35 = dateTimeField11.getLeapAmount(74736559L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2922789 + "'", int31 == 2922789);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "19" + "'", str33, "19");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test13305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13305");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeFormatter15.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter15.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        java.util.Locale locale31 = new java.util.Locale("2022-02-11T00:01:37.524Z", "ISOChronology[UTC]");
        java.lang.String str32 = dateTimeZone24.getShortName((long) 35837, locale31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfYear();
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfWeek();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        mutableDateTime52.setRounding(dateTimeField60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = dateTimeField60.getAsShortText((int) (byte) 1, locale64);
        java.lang.String str66 = property46.getAsShortText(locale64);
        java.lang.String str67 = dateTimeField41.getAsShortText(readablePartial42, (int) (short) -1, locale64);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        boolean boolean73 = mutableDateTime71.isEqual(readableInstant72);
        int int74 = mutableDateTime71.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime71.set(dateTimeFieldType75, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        int int79 = mutableDateTime71.get(dateTimeFieldType78);
        int int80 = mutableDateTime71.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.yearOfEra();
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar84 = mutableDateTime81.toCalendar(locale83);
        java.util.Calendar calendar85 = mutableDateTime71.toCalendar(locale83);
        java.lang.String str86 = dateTimeField41.getAsText(readablePartial68, 306, locale83);
        java.util.Locale locale87 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale87);
        java.lang.String str89 = locale83.getDisplayName(locale87);
        java.lang.String str90 = locale31.getDisplayName(locale83);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket(74409L, chronology8, locale83, (java.lang.Integer) 868, 269);
        java.util.Set<java.lang.String> strSet94 = locale83.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.678" + "'", str25, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-11t00:01:37.524z_ISOCHRONOLOGY[UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.678" + "'", str32, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "vendredi" + "'", str48, "vendredi");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ven." + "'", str66, "ven.");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1" + "'", str67, "-1");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644572897633,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=311,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1644537696633,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=311,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "306" + "'", str86, "306");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "chinois (Taiwan)" + "'", str89, "chinois (Taiwan)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-11t00:01:37.524z (ISOCHRONOLOGY[UTC])" + "'", str90, "2022-02-11t00:01:37.524z (ISOCHRONOLOGY[UTC])");
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test13306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13306");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        long long18 = dateTimeField16.roundHalfEven((long) 545);
        org.joda.time.ReadablePartial readablePartial19 = null;
        java.util.Locale locale22 = new java.util.Locale("yearOfEra");
        java.lang.String str23 = dateTimeField16.getAsText(readablePartial19, 74932, locale22);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 545L + "'", long18 == 545L);
        org.junit.Assert.assertEquals(locale22.toString(), "yearofera");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "74932" + "'", str23, "74932");
    }

    @Test
    public void test13307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13307");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.secondOfDay();
        long long17 = dateTimeField15.roundFloor((long) 238);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology26.centuries();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        org.joda.time.DurationField durationField30 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.year();
        java.util.Locale locale34 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        int int35 = dateTimeField31.getMaximumTextLength(locale34);
        java.lang.String str36 = dateTimeField15.getAsText((int) (short) 1, locale34);
        java.lang.String str37 = dateTimeField15.getName();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale34.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "secondOfDay" + "'", str37, "secondOfDay");
    }

    @Test
    public void test13308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13308");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean5 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(424);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withZoneUTC();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-11T09:43:55.919Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withLocale(locale12);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter13.getParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeParser14);
    }

    @Test
    public void test13309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        mutableDateTime1.addDays(222);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.addWrapField(0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.yearOfCentury();
        mutableDateTime37.setMillisOfDay(7);
        long long42 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setMillisOfDay(10);
        org.joda.time.Chronology chronology45 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.monthOfYear();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 319, chronology45, locale47, (java.lang.Integer) 74419, 766);
        org.joda.time.DurationField durationField51 = chronology45.millis();
        org.joda.time.DurationField durationField52 = chronology45.minutes();
        org.joda.time.DurationField durationField53 = chronology45.weeks();
        java.util.Locale locale54 = java.util.Locale.UK;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.dayOfWeek();
        java.util.Locale locale58 = null;
        java.lang.String str59 = property57.getAsText(locale58);
        java.util.Locale locale60 = null;
        int int61 = property57.getMaximumTextLength(locale60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        int int66 = mutableDateTime63.getHourOfDay();
        mutableDateTime63.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        int int72 = dateTimeField71.getMaximumValue();
        mutableDateTime63.setRounding(dateTimeField71);
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.lang.String str76 = dateTimeField71.getAsShortText((int) (byte) 1, locale75);
        java.lang.String str77 = property57.getAsShortText(locale75);
        java.util.Locale locale78 = java.util.Locale.TAIWAN;
        java.lang.String str79 = locale78.getScript();
        java.lang.String str80 = locale75.getDisplayScript(locale78);
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = locale75.getDisplayLanguage(locale81);
        java.lang.String str83 = locale54.getDisplayCountry(locale81);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 74442, chronology45, locale54, (java.lang.Integer) 74468);
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now();
        mutableDateTime86.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime86.yearOfEra();
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime86.yearOfEra();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime86.millisOfSecond();
        boolean boolean92 = dateTimeParserBucket85.restoreState((java.lang.Object) mutableDateTime86);
        org.joda.time.Chronology chronology93 = dateTimeParserBucket85.getChronology();
        org.joda.time.Chronology chronology94 = chronology93.withUTC();
        org.joda.time.DateTime dateTime95 = mutableDateTime1.toDateTime(chronology94);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.401+00:00:00.678" + "'", str22, "2022-02-11T00:01:37.401+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "vendredi" + "'", str59, "vendredi");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 59 + "'", int72 == 59);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ven." + "'", str77, "ven.");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "French" + "'", str82, "French");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "United Kingdom" + "'", str83, "United Kingdom");
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test13310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13310");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.addSeconds(74508);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology13.getZone();
        org.joda.time.DurationField durationField17 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.year();
        java.util.Locale locale19 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology13, locale19);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.addHours((int) (short) 0);
        mutableDateTime21.addWeekyears((int) 'a');
        java.lang.String str27 = mutableDateTime21.toString("0");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        mutableDateTime21.set(dateTimeFieldType36, 5);
        dateTimeParserBucket20.saveField(dateTimeFieldType36, 86399);
        org.joda.time.Chronology chronology42 = null;
        boolean boolean43 = dateTimeFieldType36.isSupported(chronology42);
        mutableDateTime1.set(dateTimeFieldType36, 34862029);
        mutableDateTime1.addSeconds(74422);
        java.util.Locale locale51 = new java.util.Locale("2022-02-11T09:40:20.163Z", "2022-02-11T09:40:22.820Z");
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = mutableDateTime1.toString("885", locale51);
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleAttributes();
        java.lang.String str55 = locale51.getDisplayName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T09:40:11.930Z" + "'", str2, "2022-02-11T09:40:11.930Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals(locale51.toString(), "2022-02-11t09:40:20.163z_2022-02-11T09:40:22.820Z");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "2022-02-11t09:40:20.163z_2022-02-11T09:40:22.820Z");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "885" + "'", str53, "885");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11t09:40:20.163z (2022-02-11T09:40:22.820Z)" + "'", str55, "2022-02-11t09:40:20.163z (2022-02-11T09:40:22.820Z)");
    }

    @Test
    public void test13311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(97);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        int int14 = property13.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test13312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13312");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfEra();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar19 = mutableDateTime16.toCalendar(locale18);
        mutableDateTime16.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.millisOfDay();
        int int23 = mutableDateTime16.getDayOfWeek();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) mutableDateTime16);
        int int25 = mutableDateTime16.getRoundingMode();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology34.days();
        boolean boolean37 = durationFieldType26.isSupported(chronology34);
        mutableDateTime16.setChronology(chronology34);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addWeekyears(225);
        int int42 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime43 = mutableDateTime16.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setHourOfDay(486);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 486 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572897826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=504,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 678 + "'", int42 == 678);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test13313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        mutableDateTime7.setTime((long) 381);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundCeiling();
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13314");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        int int7 = mutableDateTime2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean9 = mutableDateTime2.isSupported(dateTimeFieldType8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.dayOfMonth();
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology11);
        boolean boolean13 = durationFieldType0.isSupported(chronology11);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 525 + "'", int7 == 525);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test13315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13315");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology30.add(readablePeriod33, (long) 6700, 292);
        org.joda.time.DurationField durationField37 = chronology30.seconds();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 678 + "'", int22 == 678);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:48:18.532+00:00:00.678" + "'", str28, "2022-02-11T09:48:18.532+00:00:00.678");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 6700L + "'", long36 == 6700L);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test13316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13316");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfDay();
        int int13 = property12.getMaximumValueOverall();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getDurationType();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfHalfday();
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology40, locale42, (java.lang.Integer) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        int int52 = dateTimeField48.getDifference((long) 10, (long) 'a');
        int int54 = dateTimeField48.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial55 = null;
        int[] intArray62 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int63 = dateTimeField48.getMinimumValue(readablePartial55, intArray62);
        org.joda.time.DurationField durationField64 = dateTimeField48.getRangeDurationField();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.lang.String str76 = locale75.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology73, locale75, (java.lang.Integer) 2022);
        java.util.Locale locale79 = locale75.stripExtensions();
        int int80 = dateTimeField48.getMaximumShortTextLength(locale75);
        java.lang.String str81 = locale42.getDisplayCountry(locale75);
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale75);
        java.lang.String str83 = locale75.getDisplayName();
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType84.getField(chronology85);
        int int87 = dateTimeField86.getMaximumValue();
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.lang.String str90 = locale89.getISO3Country();
        java.lang.String str91 = dateTimeField86.getAsShortText(0L, locale89);
        java.lang.String str92 = locale89.getDisplayVariant();
        java.lang.String str93 = locale89.getISO3Language();
        java.lang.String str94 = locale75.getDisplayLanguage(locale89);
        java.lang.String str95 = property12.getAsShortText(locale89);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399 + "'", int13 == 86399);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "fran\347ais" + "'", str83, "fran\347ais");
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 59 + "'", int87 == 59);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fra" + "'", str93, "fra");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "fran\347ais" + "'", str94, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "97" + "'", str95, "97");
    }

    @Test
    public void test13317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13317");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology16 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology9.weekyears();
        org.joda.time.DurationField durationField19 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.year();
        java.lang.String str22 = dateTimeField20.getAsText(593691547200209L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+390:13" + "'", str13, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "20783" + "'", str22, "20783");
    }

    @Test
    public void test13318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13318");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        java.lang.Integer int4 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        java.io.Writer writer6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        org.joda.time.DurationField durationField11 = property10.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime14 = property10.add(41);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        mutableDateTime16.setZone(dateTimeZone34);
        long long40 = dateTimeZone34.previousTransition((long) 852);
        mutableDateTime14.setZone(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer6, (org.joda.time.ReadableInstant) mutableDateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(int4);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 596 + "'", int21 == 596);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T09:48:18.596+00:00:00.678" + "'", str27, "2022-02-11T09:48:18.596+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 852L + "'", long40 == 852L);
    }

    @Test
    public void test13319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        mutableDateTime1.add((long) 6);
        int int6 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(340);
        mutableDateTime1.setZone(dateTimeZone8);
        int int10 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.setYear(74411);
        int int16 = mutableDateTime12.getMinuteOfHour();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        boolean boolean38 = mutableDateTime33.isSupported(dateTimeFieldType37);
        int int39 = mutableDateTime18.get(dateTimeFieldType37);
        mutableDateTime18.setWeekyear(74419);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        long long50 = dateTimeParserBucket47.computeMillis(true);
        org.joda.time.Chronology chronology51 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField53 = chronology51.years();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime18.toMutableDateTime(chronology51);
        boolean boolean55 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        boolean boolean57 = mutableDateTime18.isAfter(779L);
        mutableDateTime18.setMillisOfSecond(912);
        boolean boolean60 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime1.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime61.setMonthOfYear(857);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 857 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 56 + "'", int10 == 56);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-678L) + "'", long50 == (-678L));
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test13320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13320");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        mutableDateTime0.setYear(74418645);
        mutableDateTime0.addSeconds(215);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime0.isBefore(readableInstant39);
        int int41 = mutableDateTime0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572897957,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=635,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
    }

    @Test
    public void test13321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13321");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getCenturyOfEra();
        int int11 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setTime(1644572521484L);
        int int14 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.DateTimeField dateTimeField16 = null;
        mutableDateTime1.setRounding(dateTimeField16, 35169);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test13322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.yearOfEra();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar24 = mutableDateTime21.toCalendar(locale23);
        mutableDateTime21.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int30 = mutableDateTime21.getDayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        org.joda.time.Chronology chronology37 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology37.getZone();
        mutableDateTime21.setZone(dateTimeZone38);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.millisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        long long50 = dateTimeParserBucket47.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.yearOfEra();
        boolean boolean53 = dateTimeParserBucket47.restoreState((java.lang.Object) property52);
        org.joda.time.DurationField durationField54 = property52.getDurationField();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        mutableDateTime56.addHours(59);
        org.joda.time.Chronology chronology61 = mutableDateTime56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime56.toMutableDateTime();
        mutableDateTime62.setTime((long) 381);
        long long65 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime62.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime68 = property66.add(0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property66.getFieldType();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime1.property(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572897986,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=664,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-678L) + "'", long50 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test13323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13323");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder3.setUnicodeLocaleKeyword("2022-02-11T09:45:31.425+00:00:00.100", "2022-02-11T09:41:27.250-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:45:31.425+00:00:00.100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 688 + "'", int10 == 688);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test13324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13324");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        long long16 = property15.remainder();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        mutableDateTime17.addMillis(210);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=700,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test13325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13325");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(938);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(282);
        org.joda.time.MutableDateTime mutableDateTime11 = property6.roundHalfCeiling();
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        int int13 = property6.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
    }

    @Test
    public void test13326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13326");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.yearOfCentury();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        int int6 = property4.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = dateTimeField9.getAsShortText(0L, locale12);
        int int15 = property4.getMaximumTextLength(locale12);
        java.lang.String str16 = locale0.getDisplayVariant(locale12);
        java.lang.String str17 = locale12.getDisplayCountry();
        java.lang.String str18 = locale12.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
    }

    @Test
    public void test13327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13327");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        int int3 = property1.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.ReadablePartial readablePartial5 = null;
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        int int13 = dateTimeField11.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.lang.String str38 = dateTimeField11.getAsShortText(1L, locale35);
        int int39 = dateTimeField11.getMaximumValue();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.hourOfHalfday();
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = locale65.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology63, locale65, (java.lang.Integer) 2022);
        java.util.Locale locale69 = locale65.stripExtensions();
        java.lang.String str70 = locale69.getISO3Language();
        java.lang.String str71 = dateTimeField52.getAsText(readablePartial53, 842, locale69);
        int int72 = dateTimeField11.getMaximumShortTextLength(locale69);
        java.util.Locale.setDefault(category7, locale69);
        java.lang.String str74 = dateTimeField4.getAsText(readablePartial5, 74440, locale69);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = dateTimeField4.getType();
        int int78 = dateTimeField4.getDifference((long) 74789, 34764609L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278993 + "'", int3 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "fra" + "'", str70, "fra");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "842" + "'", str71, "842");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "74440" + "'", str74, "74440");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test13328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13328");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale.setDefault(locale0);
        java.lang.String str3 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test13329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = mutableDateTime2.toDateTime();
        java.util.Locale locale12 = null;
        java.util.Calendar calendar13 = mutableDateTime2.toCalendar(locale12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime2.toDateTime(dateTimeZone15);
        java.lang.String str17 = dateTimeZone15.getID();
        long long20 = dateTimeZone15.adjustOffset((long) 158, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(27320L, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.toMutableDateTimeISO();
        int int24 = mutableDateTime22.getDayOfYear();
        mutableDateTime22.setMillisOfDay(35178);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644537697083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=761,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.678" + "'", str17, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 158L + "'", long20 == 158L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test13330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13330");
        java.io.IOException iOException1 = new java.io.IOException("chinois");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test13331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13331");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyear();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.dayOfYear();
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfWeek();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Locale locale29 = null;
        int int30 = property26.getMaximumTextLength(locale29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        mutableDateTime32.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        mutableDateTime32.setRounding(dateTimeField40);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = dateTimeField40.getAsShortText((int) (byte) 1, locale44);
        java.lang.String str46 = property26.getAsShortText(locale44);
        java.lang.String str47 = dateTimeField21.getAsShortText(readablePartial22, (int) (short) -1, locale44);
        org.joda.time.ReadablePartial readablePartial48 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        int int60 = mutableDateTime51.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.yearOfEra();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar64 = mutableDateTime61.toCalendar(locale63);
        java.util.Calendar calendar65 = mutableDateTime51.toCalendar(locale63);
        java.lang.String str66 = dateTimeField21.getAsText(readablePartial48, 306, locale63);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale67);
        java.lang.String str69 = locale63.getDisplayName(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 74624303, chronology8, locale67, (java.lang.Integer) 201);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u661f\u671f\u4e94" + "'", str28, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ven." + "'", str46, "ven.");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1" + "'", str47, "-1");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644572898135,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=813,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644537697135,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=813,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "306" + "'", str66, "306");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "chinois (Taiwan)" + "'", str69, "chinois (Taiwan)");
    }

    @Test
    public void test13332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13332");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField16 = chronology8.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology8.getDateTimeMillis(850, 50, 1117597, 938, 980, 254, 1117597);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 938 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13333");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.dayOfMonth();
        java.lang.String str13 = property12.toString();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        int int16 = mutableDateTime14.getDayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        int int23 = mutableDateTime18.getMillisOfSecond();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime25.toString(dateTimeFormatter28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        java.lang.String str38 = dateTimeZone36.getNameKey((long) (byte) 0);
        mutableDateTime25.setZoneRetainFields(dateTimeZone36);
        mutableDateTime18.setZone(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int46 = dateTimeField44.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfWeek();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property50.getAsText(locale51);
        java.util.Locale locale53 = null;
        int int54 = property50.getMaximumTextLength(locale53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int65 = dateTimeField64.getMaximumValue();
        mutableDateTime56.setRounding(dateTimeField64);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = dateTimeField64.getAsShortText((int) (byte) 1, locale68);
        java.lang.String str70 = property50.getAsShortText(locale68);
        java.lang.String str71 = dateTimeField44.getAsShortText(1L, locale68);
        java.util.Set<java.lang.Character> charSet72 = locale68.getExtensionKeys();
        java.lang.String str73 = dateTimeZone36.getShortName((long) 6, locale68);
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime14.toMutableDateTime(dateTimeZone36);
        mutableDateTime74.addDays(324);
        org.joda.time.ReadableDuration readableDuration77 = null;
        mutableDateTime74.add(readableDuration77, 35005388);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime74.hourOfDay();
        int int81 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:18.860+00:00:00.678" + "'", str5, "2022-02-11T09:48:18.860+00:00:00.678");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[dayOfMonth]" + "'", str13, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 860 + "'", int23 == 860);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T09:48:18.860+00:00:00.678" + "'", str29, "2022-02-11T09:48:18.860+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone36);
// flaky:         org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "vendredi" + "'", str52, "vendredi");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ven." + "'", str70, "ven.");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(charSet72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.678" + "'", str73, "+00:00:00.678");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test13334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13335");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar22 = mutableDateTime19.toCalendar(locale21);
        mutableDateTime19.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.weekyear();
        mutableDateTime19.addHours(930);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology38.centuries();
        mutableDateTime19.setChronology(chronology38);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        mutableDateTime46.addHours(59);
        org.joda.time.Chronology chronology51 = mutableDateTime46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology51.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        java.lang.String str61 = dateTimeZone60.getID();
        long long65 = dateTimeZone60.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str66 = dateTimeZone60.getID();
        java.util.TimeZone timeZone67 = dateTimeZone60.toTimeZone();
        mutableDateTime19.setZone(dateTimeZone60);
        java.lang.String str70 = dateTimeZone60.getName((long) 778);
        org.joda.time.Chronology chronology71 = chronology17.withZone(dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = chronology71.add(readablePeriod72, (long) 590, 772);
        org.joda.time.DurationField durationField76 = chronology71.millis();
        java.lang.String str77 = chronology71.toString();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.678" + "'", str15, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572898237,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=915,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.678" + "'", str61, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-673L) + "'", long65 == (-673L));
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.678" + "'", str66, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.678" + "'", str70, "+00:00:00.678");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 590L + "'", long75 == 590L);
        org.junit.Assert.assertNotNull(durationField76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ISOChronology[+00:00:00.678]" + "'", str77, "ISOChronology[+00:00:00.678]");
    }

    @Test
    public void test13336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13336");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology32, locale34, (java.lang.Integer) 2022);
        java.util.Locale locale38 = locale34.stripExtensions();
        int int39 = property10.getMaximumTextLength(locale38);
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology48, locale50, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int60 = dateTimeField59.getMaximumValue();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = dateTimeField59.getAsShortText(0L, locale62);
        boolean boolean65 = dateTimeField59.isLenient();
        org.joda.time.ReadablePartial readablePartial66 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        int int72 = mutableDateTime69.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime69.set(dateTimeFieldType73, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.year();
        int int77 = mutableDateTime69.get(dateTimeFieldType76);
        int int78 = mutableDateTime69.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.yearOfEra();
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar82 = mutableDateTime79.toCalendar(locale81);
        java.util.Calendar calendar83 = mutableDateTime69.toCalendar(locale81);
        java.lang.String str84 = dateTimeField59.getAsShortText(readablePartial66, (int) ' ', locale81);
        java.lang.String str85 = dateTimeField55.getAsText(224, locale81);
        int int86 = property10.getMaximumTextLength(locale81);
        int int87 = property10.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime88 = property10.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1644572898257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=18,MILLISECOND=935,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1644537697257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=935,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "32" + "'", str84, "32");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "224" + "'", str85, "224");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime88);
    }

    @Test
    public void test13337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13337");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("214");
        java.util.Locale.Builder builder7 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("2022-02-27T15:58:27.068+390:13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-27T15:58:27.068+390:13 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13338");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale10.getDisplayScript();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale10.getDisplayCountry(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        mutableDateTime19.setMinuteOfHour((int) (short) 1);
        int int24 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.weekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add((long) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        org.joda.time.Chronology chronology35 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology35, locale37);
        java.lang.String str39 = property25.getAsShortText(locale37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        mutableDateTime42.addHours(59);
        org.joda.time.Chronology chronology47 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = chronology47.getZone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.dayOfWeek();
        java.util.Locale locale52 = null;
        java.lang.String str53 = property51.getAsText(locale52);
        java.util.Locale locale54 = null;
        int int55 = property51.getMaximumTextLength(locale54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        mutableDateTime57.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        int int66 = dateTimeField65.getMaximumValue();
        mutableDateTime57.setRounding(dateTimeField65);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.lang.String str70 = dateTimeField65.getAsShortText((int) (byte) 1, locale69);
        java.lang.String str71 = property51.getAsShortText(locale69);
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = locale72.getScript();
        java.lang.String str74 = locale69.getDisplayScript(locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale69);
        java.util.Locale.setDefault(locale69);
        java.lang.String str77 = locale37.getDisplayLanguage(locale69);
        java.lang.String str78 = locale10.getDisplayVariant(locale69);
        java.lang.String str79 = locale69.getDisplayVariant();
        java.lang.String str80 = locale69.getISO3Country();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 972 + "'", int24 == 972);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2032" + "'", str39, "2032");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "vendredi" + "'", str53, "vendredi");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 59 + "'", int66 == 59);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ven." + "'", str71, "ven.");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fran\347ais" + "'", str77, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test13339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(100);
        mutableDateTime1.setMillisOfDay(74410);
        mutableDateTime1.setYear(943);
        mutableDateTime1.setMillisOfDay(1736);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13340");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        int int34 = mutableDateTime16.getEra();
        int int35 = mutableDateTime16.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime16.toString(dateTimeFormatter36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.minuteOfHour();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = dateTimeParserBucket45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.dayOfYear();
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfWeek();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property53.getAsText(locale54);
        java.util.Locale locale56 = null;
        int int57 = property53.getMaximumTextLength(locale56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        mutableDateTime59.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int68 = dateTimeField67.getMaximumValue();
        mutableDateTime59.setRounding(dateTimeField67);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = dateTimeField67.getAsShortText((int) (byte) 1, locale71);
        java.lang.String str73 = property53.getAsShortText(locale71);
        java.lang.String str74 = dateTimeField48.getAsShortText(readablePartial49, (int) (short) -1, locale71);
        org.joda.time.ReadablePartial readablePartial75 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology77);
        org.joda.time.ReadableInstant readableInstant79 = null;
        boolean boolean80 = mutableDateTime78.isEqual(readableInstant79);
        int int81 = mutableDateTime78.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime78.set(dateTimeFieldType82, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = org.joda.time.DateTimeFieldType.year();
        int int86 = mutableDateTime78.get(dateTimeFieldType85);
        int int87 = mutableDateTime78.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime88 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime88.yearOfEra();
        java.util.Locale locale90 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar91 = mutableDateTime88.toCalendar(locale90);
        java.util.Calendar calendar92 = mutableDateTime78.toCalendar(locale90);
        java.lang.String str93 = dateTimeField48.getAsText(readablePartial75, 306, locale90);
        int int94 = property38.getMaximumShortTextLength(locale90);
        java.util.Set<java.lang.String> strSet95 = locale90.getUnicodeLocaleKeys();
        java.lang.String str96 = dateTimeField13.getAsText(1644578527626L, locale90);
        java.lang.String str97 = locale90.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785298324L + "'", long9 == 1644785298324L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785298324L + "'", long10 == 1644785298324L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T00:01:37.002+00:00:00.678" + "'", str37, "2022-02-11T00:01:37.002+00:00:00.678");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "vendredi" + "'", str55, "vendredi");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 59 + "'", int68 == 59);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ven." + "'", str73, "ven.");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "-1" + "'", str74, "-1");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 9 + "'", int81 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar91);
// flaky:         org.junit.Assert.assertEquals(calendar91.toString(), "java.util.GregorianCalendar[time=1644572898324,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=2,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1644537696324,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=2,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "306" + "'", str93, "306");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "11" + "'", str96, "11");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "zh_TW" + "'", str97, "zh_TW");
    }

    @Test
    public void test13341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13341");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.secondOfDay();
        java.lang.String str12 = property11.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = property11.set("2022-02-11T00:01:37.904Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T00:01:37.904Z\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 28 + "'", int6 == 28);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "74899" + "'", str12, "74899");
    }

    @Test
    public void test13342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13342");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        int int4 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        int int8 = dateTimeFormatter2.getDefaultYear();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        java.util.Locale locale21 = null;
        java.util.Calendar calendar22 = mutableDateTime11.toCalendar(locale21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime11.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime11.add(readableDuration27, 34878113);
        mutableDateTime11.addWeeks(575);
        int int32 = mutableDateTime11.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer9, (org.joda.time.ReadableInstant) mutableDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644537696359,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=37,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37 + "'", int32 == 37);
    }

    @Test
    public void test13343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13343");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear(74411);
        int int5 = mutableDateTime1.getMinuteOfHour();
        int int6 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.yearOfCentury();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundHalfFloor();
        boolean boolean15 = property7.equals((java.lang.Object) property11);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13344");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        mutableDateTime2.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(1644572701033L, chronology11, locale12);
        org.joda.time.ReadablePartial readablePartial14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology11.get(readablePartial14, 158578916286L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74899 + "'", int8 == 74899);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test13345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13345");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.yearOfEra();
        mutableDateTime20.setMillis((long) 121);
        mutableDateTime20.addMonths(74432089);
        boolean boolean30 = mutableDateTime20.isAfter(1644572418816L);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime20.add(readablePeriod31);
        mutableDateTime20.addWeeks(660);
        boolean boolean35 = mutableDateTime20.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test13346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13346");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.getMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfWeek();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = null;
        int int19 = property15.getMaximumTextLength(locale18);
        int int20 = property15.getMaximumValueOverall();
        int int21 = property15.get();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime24 = mutableDateTime23.toDateTime();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        org.joda.time.Chronology chronology31 = mutableDateTime26.getChronology();
        mutableDateTime23.setChronology(chronology31);
        java.util.Locale locale35 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale36 = locale35.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology31, locale35);
        java.lang.String str38 = property15.getAsShortText(locale35);
        java.lang.String str39 = property11.getAsText(locale35);
        org.joda.time.MutableDateTime mutableDateTime40 = property11.roundHalfFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime51 = mutableDateTime42.toDateTime();
        int int52 = dateTime51.getMonthOfYear();
        int int53 = mutableDateTime40.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "vendredi" + "'", str17, "vendredi");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals(locale35.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Fri" + "'", str38, "Fri");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "20" + "'", str39, "20");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test13347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.getMutableDateTime();
        int int6 = mutableDateTime5.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test13348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13348");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 407);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter5.getParser();
        boolean boolean8 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology10 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 809);
        org.joda.time.Chronology chronology17 = dateTimeFormatter16.getChronolgy();
        boolean boolean18 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withZoneUTC();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology28.add(readablePeriod30, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter19.withChronology(chronology28);
        org.joda.time.Chronology chronology36 = dateTimeFormatter35.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(418L, chronology36);
        int int38 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime1.addMinutes(74893);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(dateTimePrinter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6L + "'", long33 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test13349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13349");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        mutableDateTime1.addMonths((int) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test13350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13350");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        boolean boolean22 = dateTimeFormatter20.isParser();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.addWrapField(0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology35, locale37, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField41 = chronology35.halfdays();
        org.joda.time.DurationField durationField42 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.minuteOfDay();
        mutableDateTime26.setChronology(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter20.withChronology(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter20.withPivotYear(928);
        boolean boolean49 = dateTimeFormatter48.isOffsetParsed();
        boolean boolean50 = dateTimeFormatter48.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime52 = dateTimeFormatter48.parseMutableDateTime("2022-02-11T09:43:28.308Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test13351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13351");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        java.lang.String str14 = chronology8.toString();
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        boolean boolean16 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfEra();
        boolean boolean19 = dateTimeField17.isLeap(0L);
        java.lang.String str21 = dateTimeField17.getAsShortText((long) 793);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970" + "'", str21, "1970");
    }

    @Test
    public void test13352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13352");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime51.add(readableDuration75, 59);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(chronology78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        boolean boolean81 = mutableDateTime79.isEqual(readableInstant80);
        mutableDateTime79.setMinuteOfHour((int) (short) 1);
        int int84 = mutableDateTime79.getHourOfDay();
        boolean boolean85 = mutableDateTime51.isAfter((org.joda.time.ReadableInstant) mutableDateTime79);
        mutableDateTime79.setMillisOfDay(388);
        mutableDateTime79.setYear(966);
        org.joda.time.MutableDateTime mutableDateTime90 = mutableDateTime79.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572898485,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=163,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537696485,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=163,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:19.163+00:00:00.678" + "'", str37, "2022-02-11T09:48:19.163+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(mutableDateTime90);
    }

    @Test
    public void test13353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-11T09:40:40.240Z", dateTimeZone8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        java.util.Locale locale21 = null;
        java.util.Calendar calendar22 = mutableDateTime11.toCalendar(locale21);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime11.toDateTime(dateTimeZone24);
        java.lang.String str26 = dateTimeZone24.getID();
        long long29 = dateTimeZone24.adjustOffset((long) 158, true);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int[] intArray49 = new int[] { 259, (byte) 10, 829, 224, 158, 34818666 };
        int int50 = dateTimeField41.getMinimumValue(readablePartial42, intArray49);
        java.lang.String str52 = dateTimeField41.getAsShortText((long) (-1));
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        mutableDateTime60.addHours(59);
        int int65 = mutableDateTime60.getMillisOfSecond();
        mutableDateTime60.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        int int72 = dateTimeField71.getMaximumValue();
        int int75 = dateTimeField71.getDifference((long) 10, (long) 'a');
        int int77 = dateTimeField71.getLeapAmount((-1L));
        java.util.Locale locale79 = java.util.Locale.ITALY;
        java.lang.String str80 = dateTimeField71.getAsText((long) 340, locale79);
        java.util.Locale locale82 = java.util.Locale.UK;
        java.lang.String str83 = dateTimeField71.getAsShortText((int) '4', locale82);
        org.joda.time.ReadablePartial readablePartial84 = null;
        java.util.Locale locale86 = java.util.Locale.UK;
        java.lang.String str87 = dateTimeField71.getAsText(readablePartial84, 292278993, locale86);
        java.lang.String str88 = mutableDateTime60.toString("237", locale86);
        java.util.Locale.Builder builder89 = builder58.setLocale(locale86);
        java.lang.String str90 = dateTimeField41.getAsText(readablePartial53, 232, locale86);
        java.lang.String str91 = dateTimeZone24.getShortName((long) 34824770, locale86);
        boolean boolean92 = dateTimeZone8.equals((java.lang.Object) 34824770);
        long long96 = dateTimeZone8.convertLocalToUTC((-62141731200517L), false, 201L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644537696533,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=211,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.678" + "'", str26, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 158L + "'", long29 == 158L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[259, 10, 829, 224, 158, 34818666]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "999" + "'", str52, "999");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 211 + "'", int65 == 211);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 59 + "'", int72 == 59);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "52" + "'", str83, "52");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "292278993" + "'", str87, "292278993");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "237" + "'", str88, "237");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "232" + "'", str90, "232");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.678" + "'", str91, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-62141731201195L) + "'", long96 == (-62141731201195L));
    }

    @Test
    public void test13354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13354");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        java.util.Date date20 = mutableDateTime11.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime11.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone21);
        int int25 = dateTimeZone21.getOffset((long) 35148164);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572898595,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=273,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 678 + "'", int25 == 678);
    }

    @Test
    public void test13355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13355");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(34808947);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeFormatter12.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimeZone15);
    }

    @Test
    public void test13356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = mutableDateTime12.toCalendar(locale16);
        int int18 = mutableDateTime12.getMinuteOfHour();
        mutableDateTime12.add(6L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.minuteOfHour();
        int int28 = mutableDateTime22.getSecondOfDay();
        mutableDateTime22.setSecondOfDay((int) (byte) 0);
        mutableDateTime22.setHourOfDay(0);
        boolean boolean33 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        java.util.Date date35 = mutableDateTime12.toDate();
        org.joda.time.Instant instant36 = mutableDateTime12.toInstant();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField46.getType();
        boolean boolean48 = instant36.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572898635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=313,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 74899 + "'", int28 == 74899);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 11 09:48:18 UTC 2022");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test13357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13357");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        java.lang.String str4 = property3.getAsText();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.toMutableDateTime();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test13358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13358");
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable7);
        java.io.IOException iOException9 = new java.io.IOException("hi!", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException11 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("2022-02-11T00:01:37.078Z", (java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException("zh_CN");
        iOException13.addSuppressed((java.lang.Throwable) iOException15);
        java.io.IOException iOException17 = new java.io.IOException("2022-02-11T09:20:38.656Z", (java.lang.Throwable) iOException15);
        java.io.IOException iOException18 = new java.io.IOException("2022-02-11T09:45:46.391+00:00:00.100", (java.lang.Throwable) iOException15);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
    }

    @Test
    public void test13359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addMillis(779);
        mutableDateTime1.setWeekyear(74415);
        mutableDateTime1.addHours(74551393);
        int int16 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17, 116);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 829 + "'", int16 == 829);
    }

    @Test
    public void test13360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        int int8 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.Chronology chronology18 = mutableDateTime13.getChronology();
        mutableDateTime10.setChronology(chronology18);
        java.util.Locale locale22 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale23 = locale22.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology18, locale22);
        java.lang.String str25 = property2.getAsShortText(locale22);
        int int26 = property2.get();
        int int27 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Fri" + "'", str25, "Fri");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
    }

    @Test
    public void test13361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13361");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:48:05.244+00:01:14.456", "885");
        java.lang.String str3 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:48:05.244+00:01:14.456_885");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test13362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13362");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        int int47 = mutableDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        java.util.Locale locale53 = null;
        java.util.Calendar calendar54 = mutableDateTime49.toCalendar(locale53);
        int int55 = mutableDateTime49.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime49.toMutableDateTime();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology66, locale68, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField72 = chronology66.halfdays();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField74 = chronology66.millisOfSecond();
        mutableDateTime1.setChronology(chronology66);
        int int76 = mutableDateTime1.getDayOfYear();
        mutableDateTime1.setMillisOfSecond(975);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1644572898732,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=410,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 42 + "'", int76 == 42);
    }

    @Test
    public void test13363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology19, locale21, (java.lang.Integer) 2022);
        java.util.Locale locale25 = locale21.stripExtensions();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale locale28 = builder26.build();
        java.util.Locale.Builder builder30 = builder26.setVariant("2022");
        java.util.Locale locale31 = builder30.build();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = locale45.getDisplayScript();
        java.lang.String str48 = locale45.getISO3Country();
        java.lang.String str49 = locale31.getDisplayVariant(locale45);
        java.lang.String str51 = locale45.getExtension('a');
        java.lang.String str52 = locale25.getDisplayLanguage(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withLocale(locale25);
        org.joda.time.Chronology chronology54 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNull(dateTimePrinter55);
    }

    @Test
    public void test13364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13364");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        mutableDateTime0.setDate(readableInstant4);
        mutableDateTime0.setMillisOfDay(35183527);
        int int8 = mutableDateTime0.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572898772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=450,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
    }

    @Test
    public void test13365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13365");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        mutableDateTime6.addDays(0);
        long long12 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        org.joda.time.DurationField durationField16 = dateTimeField15.getDurationField();
        boolean boolean18 = dateTimeField15.isLeap((long) (short) -1);
        java.lang.String str19 = dateTimeField15.getName();
        long long22 = dateTimeField15.getDifferenceAsLong((long) 74416, 0L);
        mutableDateTime6.setRounding(dateTimeField15);
        org.joda.time.DurationField durationField24 = dateTimeField15.getDurationField();
        int int26 = dateTimeField15.getMaximumValue((long) 35310168);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "secondOfMinute" + "'", str19, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 74L + "'", long22 == 74L);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
    }

    @Test
    public void test13366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        java.util.Date date10 = mutableDateTime1.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime();
        int int14 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.setMillis(237001L);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((-1404779995L));
        boolean boolean22 = mutableDateTime1.equals((java.lang.Object) (-1404779995L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test13367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.lang.String str12 = property9.getAsText();
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) str12);
        int int14 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.year();
        int int16 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.millisOfDay();
        mutableDateTime1.addDays((int) '4');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "vendredi" + "'", str11, "vendredi");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vendredi" + "'", str12, "vendredi");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74899 + "'", int16 == 74899);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test13368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        java.lang.Object obj14 = mutableDateTime1.clone();
        int int15 = mutableDateTime1.getSecondOfDay();
        java.lang.String str16 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T00:00:00.910+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T00:00:00.910+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T00:00:00.910+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.910+00:00:00.678" + "'", str16, "1970-01-01T00:00:00.910+00:00:00.678");
    }

    @Test
    public void test13369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = mutableDateTime23.toDateTime(chronology24);
        int int26 = mutableDateTime23.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74899 + "'", int7 == 74899);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
    }

    @Test
    public void test13370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13370");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar9 = mutableDateTime6.toCalendar(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale5, locale8, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        java.util.Set<java.lang.String> strSet19 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.yearOfEra();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar32 = mutableDateTime29.toCalendar(locale31);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale28, locale31, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale.FilteringMode filteringMode40 = null;
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList38, filteringMode40);
        java.util.Set<java.lang.String> strSet42 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap47 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strMap47);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfEra();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar53 = mutableDateTime50.toCalendar(locale52);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.util.Locale locale55 = java.util.Locale.ITALY;
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale49, locale52, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale.FilteringMode filteringMode61 = null;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList59, filteringMode61);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList59);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572898886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=564,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572898886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=564,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572898887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=565,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(localeList64);
    }

    @Test
    public void test13371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13371");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology14.days();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology14.add(readablePeriod17, (long) 34828152, 0);
        org.joda.time.Chronology chronology21 = chronology14.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(320, 74583951, 110, 35328, 41142, 35285, 953, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35328 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 34828152L + "'", long20 == 34828152L);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test13372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13372");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.lang.String str12 = property9.getAsText();
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) str12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfWeek();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        java.util.Locale locale19 = new java.util.Locale("2022-02-11T00:01:37.241Z", "2022-02-11T09:40:41.810Z", "2022-02-11T09:42:59.396Z");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = property14.getAsText(locale19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "vendredi" + "'", str11, "vendredi");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vendredi" + "'", str12, "vendredi");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertEquals(locale19.toString(), "2022-02-11t00:01:37.241z_2022-02-11T09:40:41.810Z_2022-02-11T09:42:59.396Z");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Sunday" + "'", str21, "Sunday");
    }

    @Test
    public void test13373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13373");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.678" + "'", str15, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13374");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = null;
        int int17 = property13.getMaximumTextLength(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = property13.getAsShortText(locale31);
        java.lang.String str34 = dateTimeField8.getAsShortText(readablePartial9, (int) (short) -1, locale31);
        long long36 = dateTimeField8.roundCeiling((long) 906);
        long long38 = dateTimeField8.roundFloor((long) 35147968);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "vendredi" + "'", str15, "vendredi");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ven." + "'", str33, "ven.");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test13375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test13376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set(521);
        org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 711 + "'", int6 == 711);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13377");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.minuteOfDay();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DurationField durationField25 = chronology19.millis();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone38.isLocalDateTimeGap(localDateTime42);
        long long45 = dateTimeZone38.previousTransition((long) 518);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone38.isLocalDateTimeGap(localDateTime46);
        org.joda.time.Chronology chronology48 = chronology19.withZone(dateTimeZone38);
        long long50 = dateTimeZone38.nextTransition(1644578530482L);
        mutableDateTime1.setZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField52 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addWeekyears(115);
        int int55 = mutableDateTime1.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74899 + "'", int7 == 74899);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:48:19.726+00:00:00.678" + "'", str31, "2022-02-11T09:48:19.726+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 518L + "'", long45 == 518L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644578530482L + "'", long50 == 1644578530482L);
        org.junit.Assert.assertNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test13378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.add(6L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.setSecondOfDay((int) (byte) 0);
        mutableDateTime11.setHourOfDay(0);
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        int int23 = mutableDateTime11.getSecondOfDay();
        int int24 = mutableDateTime11.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572899065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=743,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74899 + "'", int17 == 74899);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test13379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13379");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 805);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfWeek();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property10.getAsText(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        int int15 = property10.getMaximumValueOverall();
        int int16 = property10.get();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime19 = mutableDateTime18.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        mutableDateTime18.setChronology(chronology26);
        java.util.Locale locale30 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale31 = locale30.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology26, locale30);
        java.lang.String str33 = property10.getAsShortText(locale30);
        java.lang.String str34 = property10.getName();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        long long38 = mutableDateTime37.getMillis();
        int int39 = mutableDateTime37.getSecondOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.addHours(59);
        int int46 = mutableDateTime41.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean48 = mutableDateTime41.isSupported(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime41.dayOfMonth();
        org.joda.time.Chronology chronology50 = mutableDateTime41.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime37.toMutableDateTime(chronology50);
        java.util.Locale locale54 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 350, chronology50, locale54, (java.lang.Integer) 810, 781);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.275Z");
        java.lang.String str61 = locale54.getDisplayName(locale60);
        java.lang.String str62 = property10.getAsShortText(locale54);
        org.joda.time.MutableDateTime mutableDateTime64 = property10.add(710);
        org.joda.time.DateTimeField dateTimeField65 = property10.getField();
        dateTimeParserBucket5.saveField(dateTimeField65, 738);
        java.lang.String str69 = dateTimeField65.getAsShortText(66L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vendredi" + "'", str12, "vendredi");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertEquals(locale30.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Fri" + "'", str33, "Fri");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dayOfWeek" + "'", str34, "dayOfWeek");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644572899076L + "'", long38 == 1644572899076L);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35299 + "'", int39 == 35299);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 754 + "'", int46 == 754);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertEquals(locale54.toString(), "yearofera");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "yearofera" + "'", str61, "yearofera");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Fri" + "'", str62, "Fri");
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "jeu." + "'", str69, "jeu.");
    }

    @Test
    public void test13380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13380");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        mutableDateTime1.setYear(59);
        int int9 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime11.getZone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        mutableDateTime37.setRounding(dateTimeField45);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = dateTimeField45.getAsShortText((int) (byte) 1, locale49);
        java.lang.String str51 = property31.getAsShortText(locale49);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale49.getDisplayScript(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale49);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        int int58 = mutableDateTime56.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime56.set(dateTimeFieldType59, 0);
        boolean boolean62 = dateTimeParserBucket55.restoreState((java.lang.Object) dateTimeFieldType59);
        java.lang.String str63 = dateTimeFieldType59.getName();
        mutableDateTime11.set(dateTimeFieldType59, 18);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType59.getField(chronology73);
        long long80 = dateTimeField77.getDifferenceAsLong((long) 390, (long) 202);
        long long82 = dateTimeField77.roundHalfEven((long) 74422);
        mutableDateTime1.setRounding(dateTimeField77);
        int int84 = mutableDateTime1.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(74432964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74432964 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35299829 + "'", int4 == 35299829);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "vendredi" + "'", str33, "vendredi");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ven." + "'", str51, "ven.");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minuteOfDay" + "'", str63, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 60000L + "'", long82 == 60000L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
    }

    @Test
    public void test13381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        boolean boolean6 = mutableDateTime1.isEqual((long) 411);
        mutableDateTime1.addHours(34824000);
        mutableDateTime1.setDayOfYear(96);
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.seconds();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology11.getDateTimeMillis(1310, 800, 318, 74455);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 800 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test13382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = property5.set(463);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 463 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test13383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13383");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        int int24 = mutableDateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        long long29 = dateTimeField26.addWrapField((long) 74514593, 643);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 74515236L + "'", long29 == 74515236L);
    }

    @Test
    public void test13384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13384");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        int int12 = dateTimeFormatter11.getDefaultYear();
        boolean boolean13 = dateTimeFormatter11.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test13385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13385");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsText();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.add((long) 439);
        int int6 = mutableDateTime5.getDayOfWeek();
        mutableDateTime5.setMillis((long) 34883740);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology17, locale19, (java.lang.Integer) 2022);
        java.util.Locale locale23 = locale19.stripExtensions();
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Calendar calendar26 = mutableDateTime5.toCalendar(locale23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.yearOfCentury();
        org.joda.time.DurationField durationField31 = property30.getDurationField();
        int int32 = property30.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime33 = property30.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int38 = dateTimeField36.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfWeek();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property42.getAsText(locale43);
        java.util.Locale locale45 = null;
        int int46 = property42.getMaximumTextLength(locale45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        mutableDateTime48.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        mutableDateTime48.setRounding(dateTimeField56);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = dateTimeField56.getAsShortText((int) (byte) 1, locale60);
        java.lang.String str62 = property42.getAsShortText(locale60);
        java.lang.String str63 = dateTimeField36.getAsShortText(1L, locale60);
        java.lang.String str64 = locale60.getISO3Country();
        boolean boolean65 = locale60.hasExtensions();
        java.lang.String str66 = locale60.getDisplayLanguage();
        java.lang.String str67 = locale60.getDisplayScript();
        java.lang.String str68 = property30.getAsText(locale60);
        org.joda.time.MutableDateTime mutableDateTime69 = property30.getMutableDateTime();
        mutableDateTime69.setMinuteOfDay(2);
        int int72 = mutableDateTime69.getRoundingMode();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        boolean boolean77 = mutableDateTime75.isEqual(readableInstant76);
        mutableDateTime75.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        mutableDateTime75.add(readablePeriod80, (-292275054));
        long long83 = mutableDateTime75.getMillis();
        long long84 = mutableDateTime75.getMillis();
        org.joda.time.Chronology chronology85 = mutableDateTime75.getChronology();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(chronology85);
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType73.getField(chronology85);
        boolean boolean88 = mutableDateTime69.isSupported(dateTimeFieldType73);
        org.joda.time.Chronology chronology89 = mutableDateTime69.getChronology();
        boolean boolean90 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.DateTime dateTime91 = mutableDateTime5.toDateTimeISO();
        int int92 = dateTime91.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fra" + "'", str25, "fra");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=34883740,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=24,MILLISECOND=418,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "vendredi" + "'", str44, "vendredi");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ven." + "'", str62, "ven.");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "French" + "'", str66, "French");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "23" + "'", str68, "23");
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1644785299241L + "'", long83 == 1644785299241L);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1644785299241L + "'", long84 == 1644785299241L);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 24 + "'", int92 == 24);
    }

    @Test
    public void test13386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.toMutableDateTime();
        mutableDateTime25.addMillis(841);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 678 + "'", int22 == 678);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test13387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        boolean boolean12 = mutableDateTime10.isAfter((long) 35651);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        int int31 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.Instant instant32 = mutableDateTime22.toInstant();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime22.dayOfWeek();
        mutableDateTime22.addWeekyears(796);
        int int36 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime22.set(dateTimeFieldType37, 9);
        dateTimeParserBucket18.saveField(dateTimeFieldType37, 34839065);
        java.lang.String str42 = dateTimeFieldType37.toString();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.millisOfDay();
        org.joda.time.DurationField durationField55 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType37.getField(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.set(dateTimeFieldType37, 74568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74568 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 972 + "'", int6 == 972);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "secondOfMinute" + "'", str42, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test13388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13388");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 9, 59);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket6.saveField(dateTimeFieldType8, 59);
        long long12 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket6.getChronology();
        java.util.Locale locale16 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology13, locale16, (java.lang.Integer) 617);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter21.getZone();
        boolean boolean23 = dateTimeFormatter21.isOffsetParsed();
        org.joda.time.Chronology chronology24 = dateTimeFormatter21.getChronology();
        boolean boolean25 = dateTimeParserBucket18.restoreState((java.lang.Object) dateTimeFormatter21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 74410);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter21.getParser();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60305299200678L) + "'", long12 == (-60305299200678L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
    }

    @Test
    public void test13389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13389");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime0.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant51 = null;
        mutableDateTime50.setMillis(readableInstant51);
        mutableDateTime50.setMinuteOfDay(522);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setHourOfDay(74583951);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74583951 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572899319,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=19,MILLISECOND=997,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.678" + "'", str42, "+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-673L) + "'", long46 == (-673L));
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.678" + "'", str47, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test13390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13390");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        mutableDateTime9.setRounding(dateTimeField13);
        long long22 = dateTimeField13.add(1L, (long) 237);
        long long24 = dateTimeField13.roundHalfEven((long) 938);
        int int26 = dateTimeField13.getMaximumValue((long) 416);
        java.lang.String str28 = dateTimeField13.getAsShortText(1644572462781L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 237001L + "'", long22 == 237001L);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1322L + "'", long24 == 1322L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3" + "'", str28, "3");
    }

    @Test
    public void test13391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13391");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale17 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str18 = locale13.getDisplayLanguage(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale13, (java.lang.Integer) 0);
        org.joda.time.DurationField durationField21 = chronology8.weeks();
        org.joda.time.DurationField durationField22 = chronology8.halfdays();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField24 = chronology8.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test13392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        boolean boolean26 = mutableDateTime1.isEqualNow();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        java.lang.String str34 = dateTimeZone33.toString();
        boolean boolean36 = dateTimeZone33.isStandardOffset((long) 59);
        mutableDateTime1.setZone(dateTimeZone33);
        java.util.TimeZone timeZone38 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        boolean boolean40 = dateTimeZone33.isFixed();
        long long42 = dateTimeZone33.convertUTCToLocal((long) 58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.048+00:00:00.678" + "'", str22, "2022-02-11T00:01:37.048+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.678" + "'", str34, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 736L + "'", long42 == 736L);
    }

    @Test
    public void test13393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, (long) 656, 912);
        org.joda.time.DurationField durationField16 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField19 = chronology9.centuries();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 656L + "'", long15 == 656L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test13394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13394");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        int int16 = dateTimeField14.get((long) 2);
        int int17 = dateTimeField14.getMinimumValue();
        java.lang.String str19 = dateTimeField14.getAsShortText(35001L);
        int int21 = dateTimeField14.get((long) 312);
        int int24 = dateTimeField14.getDifference((long) 34935388, 210L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "12" + "'", str19, "12");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
    }

    @Test
    public void test13395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13395");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clearExtensions();
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = builder38.build();
        java.util.Locale.Builder builder42 = builder38.setVariant("2022");
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale37.getDisplayScript(locale43);
        java.util.Locale.Builder builder45 = builder35.setLocale(locale37);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.add(100);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.weekyear();
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(0L, chronology53, locale54, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket57.getZone();
        org.joda.time.Chronology chronology59 = dateTimeParserBucket57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfHalfday();
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.lang.String str62 = locale61.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology59, locale61, (java.lang.Integer) 2022);
        java.util.Locale locale65 = locale61.stripExtensions();
        java.lang.String str66 = property50.getAsText(locale65);
        java.util.Locale.Builder builder67 = builder45.setLocale(locale65);
        java.lang.Class<?> wildcardClass68 = builder67.getClass();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 88 + "'", int10 == 88);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2122" + "'", str66, "2122");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test13396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone16);
        long long22 = dateTimeZone16.convertUTCToLocal((long) 91);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfEra();
        boolean boolean34 = dateTimeParserBucket28.restoreState((java.lang.Object) property33);
        org.joda.time.DurationField durationField35 = property33.getDurationField();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        org.joda.time.Chronology chronology42 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime37.toMutableDateTime();
        mutableDateTime43.setTime((long) 381);
        long long46 = property33.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime43);
        java.lang.String str47 = property33.toString();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property33.getAsText(locale48);
        org.joda.time.MutableDateTime mutableDateTime50 = property33.roundHalfFloor();
        int int51 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.678" + "'", str17, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 769L + "'", long22 == 769L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-678L) + "'", long31 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[yearOfEra]" + "'", str47, "Property[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 678 + "'", int51 == 678);
    }

    @Test
    public void test13397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13397");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str5 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh_CN" + "'", str5, "zh_CN");
    }

    @Test
    public void test13398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13398");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale1.getScript();
        java.util.Locale.setDefault(category0, locale1);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology6, locale7, (java.lang.Integer) 9, 59);
        java.lang.Object obj11 = dateTimeParserBucket10.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket10.saveField(dateTimeFieldType12, 59);
        long long16 = dateTimeParserBucket10.computeMillis(true);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket10.getChronology();
        java.util.Locale locale20 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology17, locale20, (java.lang.Integer) 617);
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale locale25 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale25);
        java.util.Locale locale28 = java.util.Locale.getDefault(category0);
        java.lang.String str29 = locale28.getDisplayVariant();
        java.lang.String str30 = locale28.getScript();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-60305299200678L) + "'", long16 == (-60305299200678L));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals(locale20.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertEquals(locale25.toString(), "yearofera");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "yearofera");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test13399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfEven();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.secondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 191 + "'", int6 == 191);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test13400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13400");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(211);
        java.lang.StringBuffer stringBuffer23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.addHours((int) (short) 0);
        mutableDateTime24.addWeekyears((int) 'a');
        mutableDateTime24.setWeekyear(74416135);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        int int35 = dateTimeZone32.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        boolean boolean37 = mutableDateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime24.toMutableDateTimeISO();
        mutableDateTime24.addMonths(74565);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter22.printTo(stringBuffer23, (org.joda.time.ReadableInstant) mutableDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 678 + "'", int35 == 678);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test13401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setSecondOfDay(437);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfEra();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.set(625);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.secondOfMinute();
        boolean boolean29 = mutableDateTime10.equals((java.lang.Object) property28);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime10.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 249 + "'", int16 == 249);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test13402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13402");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.yearOfEra();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.minuteOfHour();
        int int7 = property6.getMaximumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        mutableDateTime9.addDays(0);
        long long15 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime9);
        int int16 = mutableDateTime9.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime9.toMutableDateTimeISO();
        mutableDateTime17.addMinutes(738);
        mutableDateTime17.addYears(57451);
        int int22 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeFormatter25.getZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter25.withZone(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime38.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter25.withZone(dateTimeZone45);
        boolean boolean48 = dateTimeZone45.isStandardOffset((long) 2922789);
        mutableDateTime17.setZoneRetainFields(dateTimeZone45);
        int int50 = mutableDateTime17.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35300 + "'", int16 == 35300);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.678" + "'", str35, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 73 + "'", int50 == 73);
    }

    @Test
    public void test13403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13403");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strMap10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap15);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfEra();
        java.util.Locale locale20 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar21 = mutableDateTime18.toCalendar(locale20);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.lang.String str25 = locale24.getISO3Country();
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale17, locale20, locale22, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale.FilteringMode filteringMode29 = null;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList27, filteringMode29);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList30);
        java.util.Locale locale32 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap33 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap38);
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.yearOfEra();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar44 = mutableDateTime41.toCalendar(locale43);
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale40, locale43, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = null;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter(languageRangeList39, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags(languageRangeList39, (java.util.Collection<java.lang.String>) strSet54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, strMap59);
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.yearOfEra();
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar65 = mutableDateTime62.toCalendar(locale64);
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getISO3Country();
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale61, locale64, locale66, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = null;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList60, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter(languageRangeList39, (java.util.Collection<java.util.Locale>) localeList71);
        java.util.Locale.FilteringMode filteringMode76 = null;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList71, filteringMode76);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList79, strMap80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572899628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=306,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572899628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=306,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644572899628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=306,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(languageRangeList79);
        org.junit.Assert.assertNotNull(languageRangeList81);
    }

    @Test
    public void test13404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13404");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int7 = dateTimeField2.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int int9 = dateTimeField2.getMinimumValue(readablePartial8);
        long long11 = dateTimeField2.roundHalfEven((long) 928);
        long long14 = dateTimeField2.add((long) 930, 74416135);
        boolean boolean15 = dateTimeField2.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1322L + "'", long11 == 1322L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 74416135930L + "'", long14 == 74416135930L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test13405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13405");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(612);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = mutableDateTime11.toCalendar(locale15);
        int int17 = mutableDateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone24);
        org.joda.time.Chronology chronology28 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        org.joda.time.DurationField durationField33 = dateTimeField32.getDurationField();
        boolean boolean35 = dateTimeField32.isLeap((long) (short) -1);
        java.lang.String str36 = dateTimeField32.getName();
        long long39 = dateTimeField32.getDifferenceAsLong((long) 74416, 0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField32.getType();
        int int41 = mutableDateTime11.get(dateTimeFieldType40);
        java.lang.String str42 = dateTimeFieldType40.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.set(dateTimeFieldType40, 438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 438 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:20.396+00:00:00.678" + "'", str5, "2022-02-11T09:48:20.396+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572899718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=396,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 74L + "'", long39 == 74L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "secondOfMinute" + "'", str42, "secondOfMinute");
    }

    @Test
    public void test13406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13406");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder0.clear();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology14.getZone();
        org.joda.time.DurationField durationField18 = chronology14.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.year();
        java.util.Locale locale22 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        int int23 = dateTimeField19.getMaximumTextLength(locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        int int31 = dateTimeField27.getDifference((long) 10, (long) 'a');
        int int33 = dateTimeField27.getLeapAmount((-1L));
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = dateTimeField27.getAsText((long) 340, locale35);
        java.lang.String str37 = dateTimeField19.getAsShortText(6, locale35);
        java.util.Locale.Builder builder38 = builder6.setLocale(locale35);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale22.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "6" + "'", str37, "6");
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test13407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfWeek();
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.joda.time.DurationField durationField12 = chronology7.minutes();
        java.util.Locale locale15 = new java.util.Locale("2022-02-11T09:41:27.270-00:00:00.001", "2022-02-11T00:01:37.203Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(1644572763608L, chronology7, locale15, (java.lang.Integer) 377, 842);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals(locale15.toString(), "2022-02-11t09:41:27.270-00:00:00.001_2022-02-11T00:01:37.203Z");
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test13408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        int int19 = mutableDateTime12.getEra();
        mutableDateTime12.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        int int24 = mutableDateTime12.get(dateTimeFieldType22);
        java.lang.String str25 = dateTimeFieldType22.toString();
        boolean boolean26 = mutableDateTime1.isSupported(dateTimeFieldType22);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.year();
        org.joda.time.ReadableInstant readableInstant28 = null;
        long long29 = property27.getDifferenceAsLong(readableInstant28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "centuryOfEra" + "'", str25, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 34810126L + "'", long29 == 34810126L);
    }

    @Test
    public void test13409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13409");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(94);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 74449, dateTimeZone2);
        int int4 = mutableDateTime3.getHourOfDay();
        int int5 = mutableDateTime3.getSecondOfDay();
        mutableDateTime3.addDays(902);
        mutableDateTime3.setMillisOfDay(966);
        int int10 = mutableDateTime3.getYearOfEra();
        mutableDateTime3.setMinuteOfDay((int) (short) 100);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1972 + "'", int10 == 1972);
    }

    @Test
    public void test13410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        boolean boolean10 = mutableDateTime1.isBefore((long) 533);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(74904, 74616, 328, 34999936, 35320020, 57501, 41274661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34999936 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test13411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13411");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale12 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale13 = locale12.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 380, chronology8, locale13, (java.lang.Integer) 390);
        org.joda.time.DurationField durationField16 = chronology8.minutes();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals(locale12.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test13412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13412");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setMillisOfDay(0);
        int int18 = mutableDateTime7.getCenturyOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        int int25 = mutableDateTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        mutableDateTime20.setZone(dateTimeZone38);
        long long44 = dateTimeZone38.previousTransition((long) 852);
        mutableDateTime7.setZoneRetainFields(dateTimeZone38);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime7.centuryOfEra();
        boolean boolean47 = property46.isLeap();
        org.joda.time.MutableDateTime mutableDateTime49 = property46.add((long) 830);
        boolean boolean50 = mutableDateTime49.isEqualNow();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime49.yearOfEra();
        mutableDateTime49.addWeeks(617);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572899817,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=495,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 495 + "'", int25 == 495);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:48:20.495+00:00:00.678" + "'", str31, "2022-02-11T09:48:20.495+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 852L + "'", long44 == 852L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test13413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13413");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str13 = dateTimeZone12.getID();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone12.isLocalDateTimeGap(localDateTime14);
        org.joda.time.Chronology chronology16 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology9.weekyears();
        org.joda.time.Chronology chronology19 = chronology9.withUTC();
        org.joda.time.DurationField durationField20 = chronology9.millis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+390:13" + "'", str13, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test13414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getDayOfMonth();
        mutableDateTime4.addMillis(4);
        mutableDateTime4.addHours(0);
        mutableDateTime4.setMillis(3715200915L);
        mutableDateTime4.addYears(199);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 525 + "'", int9 == 525);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
    }

    @Test
    public void test13415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13415");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = locale20.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology18, locale20, (java.lang.Integer) 2022);
        java.util.Locale locale24 = locale20.stripExtensions();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean33 = mutableDateTime26.isSupported(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.dayOfMonth();
        org.joda.time.Chronology chronology35 = mutableDateTime26.getChronology();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime26.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int41 = dateTimeField39.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = null;
        int int49 = property45.getMaximumTextLength(locale48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        mutableDateTime51.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int60 = dateTimeField59.getMaximumValue();
        mutableDateTime51.setRounding(dateTimeField59);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = dateTimeField59.getAsShortText((int) (byte) 1, locale63);
        java.lang.String str65 = property45.getAsShortText(locale63);
        java.lang.String str66 = dateTimeField39.getAsShortText(1L, locale63);
        boolean boolean67 = property36.equals((java.lang.Object) locale63);
        org.joda.time.MutableDateTime mutableDateTime68 = property36.roundHalfCeiling();
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.lang.String str72 = property36.getAsShortText(locale69);
        java.lang.String str73 = locale24.getDisplayCountry(locale69);
        java.lang.String str74 = locale24.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 637, chronology8, locale24, (java.lang.Integer) 0, 74540164);
        java.lang.String str78 = chronology8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 535 + "'", int31 == 535);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "vendredi" + "'", str47, "vendredi");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ven." + "'", str65, "ven.");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str71, "\u4e2d\u56fd\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "74901" + "'", str72, "74901");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ISOChronology[UTC]" + "'", str78, "ISOChronology[UTC]");
    }

    @Test
    public void test13416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        int int5 = mutableDateTime4.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(34839065);
        java.lang.String str9 = property6.getAsShortText();
        java.lang.String str10 = property6.getName();
        boolean boolean11 = property6.isLeap();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar15 = mutableDateTime12.toCalendar(locale14);
        int int16 = mutableDateTime12.getMillisOfDay();
        boolean boolean17 = mutableDateTime12.isEqualNow();
        int int18 = mutableDateTime12.getSecondOfMinute();
        long long19 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 588 + "'", int5 == 588);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7" + "'", str9, "7");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572899877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=555,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35300555 + "'", int16 == 35300555);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test13417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean55 = mutableDateTime48.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = mutableDateTime48.getRoundingField();
        boolean boolean58 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime1.add(readableDuration60, 34931287);
        mutableDateTime1.setWeekyear(21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 567 + "'", int53 == 567);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test13418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13418");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test13419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13419");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int33 = mutableDateTime26.get(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        mutableDateTime43.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        mutableDateTime43.setRounding(dateTimeField51);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = dateTimeField51.getAsShortText((int) (byte) 1, locale55);
        java.lang.String str57 = property37.getAsShortText(locale55);
        java.util.Calendar calendar58 = mutableDateTime26.toCalendar(locale55);
        int int59 = property24.getMaximumShortTextLength(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology18, locale55, (java.lang.Integer) 664);
        java.lang.String str62 = locale55.getISO3Country();
        java.util.Set<java.lang.String> strSet63 = locale55.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withLocale(locale55);
        java.io.Writer writer65 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter64.printTo(writer65, (long) 35187545);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 590 + "'", int31 == 590);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "vendredi" + "'", str39, "vendredi");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven." + "'", str57, "ven.");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644785299912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=20,MILLISECOND=590,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
    }

    @Test
    public void test13420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13420");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:48:12.727+00:00:00.678", "8223-06-27T00:00:07.940+390:13", "61");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:48:12.727+00:00:00.678_8223-06-27T00:00:07.940+390:13_61");
    }

    @Test
    public void test13421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13421");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.copy();
        int int27 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setMillisOfDay(10);
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime26.getRoundingField();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.minuteOfDay();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 678 + "'", int27 == 678);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test13422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        int int12 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 625 + "'", int7 == 625);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test13423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13423");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology34, locale36, (java.lang.Integer) 2022);
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = dateTimeField23.getAsText(readablePartial24, 842, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology9, locale40, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime46.getZone();
        long long55 = dateTimeZone53.nextTransition((long) 59);
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0);
        dateTimeParserBucket44.setZone(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 97018, dateTimeZone53);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.centuryOfEra();
        mutableDateTime60.setMillisOfDay(10699);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "842" + "'", str42, "842");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 59L + "'", long55 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.678" + "'", str57, "+00:00:00.678");
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test13424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(1);
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.getDefault(category28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale35 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str36 = locale31.getDisplayLanguage(locale35);
        java.lang.String str37 = locale29.getDisplayCountry(locale31);
        java.lang.String str38 = dateTimeField26.getAsText((-47934633599741L), locale31);
        org.joda.time.DurationField durationField39 = dateTimeField26.getRangeDurationField();
        int int41 = dateTimeField26.getMaximumValue(259200657L);
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.monthOfYear();
        boolean boolean53 = dateTimeField52.isSupported();
        org.joda.time.ReadablePartial readablePartial54 = null;
        int int55 = dateTimeField52.getMaximumValue(readablePartial54);
        long long58 = dateTimeField52.getDifferenceAsLong((long) 7, 1644537697248L);
        long long60 = dateTimeField52.roundHalfCeiling((long) 34812148);
        org.joda.time.ReadablePartial readablePartial61 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int65 = dateTimeField64.getMaximumValue();
        int int68 = dateTimeField64.getDifference((long) 10, (long) 'a');
        int int70 = dateTimeField64.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial71 = null;
        int[] intArray78 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int79 = dateTimeField64.getMinimumValue(readablePartial71, intArray78);
        int int80 = dateTimeField52.getMinimumValue(readablePartial61, intArray78);
        int[] intArray82 = dateTimeField26.addWrapPartial(readablePartial42, 74779, intArray78, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField19.addWrapField(readablePartial20, 74415910, intArray78, 35024122);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 74415910");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696982,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=660,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals(locale35.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "451" + "'", str38, "451");
        org.junit.Assert.assertNull(durationField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 12 + "'", int55 == 12);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-625L) + "'", long58 == (-625L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[9, 59, 10, 32, 411, 74411]");
    }

    @Test
    public void test13425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13425");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime43.getZone();
        long long52 = dateTimeZone50.nextTransition((long) 59);
        java.lang.String str54 = dateTimeZone50.getName((long) (short) 0);
        java.lang.String str55 = dateTimeZone50.getID();
        long long57 = dateTimeZone50.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getMinuteOfHour();
        mutableDateTime64.addDays(831);
        boolean boolean74 = mutableDateTime60.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Calendar calendar76 = mutableDateTime64.toCalendar(locale75);
        java.lang.String str77 = dateTimeZone50.getShortName((-41907196800000L), locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter20.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter20.withDefaultYear(97608);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter20.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = dateTimeFormatter20.parseDateTime("2022-02-11T09:47:55.037+00:00:00.678");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-678L) + "'", long31 == (-678L));
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.678" + "'", str38, "+00:00:00.678");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 59L + "'", long52 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.678" + "'", str55, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 48 + "'", int71 == 48);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1716583700002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=20,MILLISECOND=680,ZONE_OFFSET=678,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.678" + "'", str77, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test13426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13426");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        mutableDateTime0.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundCeiling();
        int int25 = property23.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = property23.add(1644572654688L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1644572654688");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572900035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=713,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:48:20.713+00:00:00.678" + "'", str11, "2022-02-11T09:48:20.713+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
    }

    @Test
    public void test13427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13427");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        long long75 = mutableDateTime48.getMillis();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime48.era();
        int int77 = property76.getMinimumValueOverall();
        int int78 = property76.getMinimumValue();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572900048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=20,MILLISECOND=726,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697048,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=726,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:20.726+00:00:00.678" + "'", str37, "2022-02-11T09:48:20.726+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1644572900048L + "'", long75 == 1644572900048L);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test13428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13428");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        int int10 = mutableDateTime4.getSecondOfDay();
        mutableDateTime4.setSecondOfDay((int) (byte) 0);
        boolean boolean13 = property1.equals((java.lang.Object) mutableDateTime4);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        org.joda.time.DurationField durationField18 = property17.getDurationField();
        int int19 = property17.getMinimumValue();
        org.joda.time.DurationField durationField20 = property17.getDurationField();
        boolean boolean21 = property1.equals((java.lang.Object) durationField20);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        long long30 = dateTimeParserBucket27.computeMillis(false);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str46 = dateTimeZone44.getNameKey((long) (byte) 0);
        mutableDateTime33.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Chronology chronology48 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType31.getField(chronology48);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType31.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        int int57 = dateTimeField55.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfWeek();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property61.getAsText(locale62);
        java.util.Locale locale64 = null;
        int int65 = property61.getMaximumTextLength(locale64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        int int70 = mutableDateTime67.getHourOfDay();
        mutableDateTime67.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType73.getField(chronology74);
        int int76 = dateTimeField75.getMaximumValue();
        mutableDateTime67.setRounding(dateTimeField75);
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = dateTimeField75.getAsShortText((int) (byte) 1, locale79);
        java.lang.String str81 = property61.getAsShortText(locale79);
        java.lang.String str82 = dateTimeField55.getAsShortText(1L, locale79);
        dateTimeParserBucket27.saveField(dateTimeFieldType31, "Etc/UTC", locale79);
        java.lang.String str84 = locale79.getVariant();
        java.lang.String str85 = property1.getAsShortText(locale79);
        int int86 = property1.getMaximumValueOverall();
        int int87 = property1.getMaximumValue();
        int int88 = property1.getLeapAmount();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74900 + "'", int10 == 74900);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-678L) + "'", long30 == (-678L));
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:20.754+00:00:00.678" + "'", str37, "2022-02-11T09:48:20.754+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "vendredi" + "'", str63, "vendredi");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ven." + "'", str81, "ven.");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022" + "'", str85, "2022");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 292278993 + "'", int86 == 292278993);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 292278993 + "'", int87 == 292278993);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test13429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13429");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(381);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(761);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withZoneUTC();
        java.util.Locale locale31 = dateTimeFormatter29.getLocale();
        boolean boolean32 = dateTimeFormatter29.isParser();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = dateTimeFormatter29.parseMillis("2022-02-11T09:42:22.465Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str14 = dateTimeZone8.getShortName((long) 34808947);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime21.toMutableDateTime();
        int int28 = mutableDateTime21.getMinuteOfHour();
        mutableDateTime21.addDays(831);
        boolean boolean31 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Calendar calendar33 = mutableDateTime21.toCalendar(locale32);
        int int34 = mutableDateTime21.getEra();
        int int35 = mutableDateTime21.getSecondOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime46 = mutableDateTime37.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean48 = mutableDateTime37.isSupported(dateTimeFieldType47);
        mutableDateTime21.set(dateTimeFieldType47, 7);
        java.lang.String str51 = dateTimeFieldType47.getName();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime15.property(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.678" + "'", str14, "+00:00:00.678");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1716583700118,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=20,MILLISECOND=796,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 74900 + "'", int35 == 74900);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "secondOfDay" + "'", str51, "secondOfDay");
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test13431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13431");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillisOfSecond(822);
        int int59 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = mutableDateTime63.toString(dateTimeFormatter66);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology69, locale70, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeParserBucket73.getZone();
        java.lang.String str76 = dateTimeZone74.getNameKey((long) (byte) 0);
        mutableDateTime63.setZoneRetainFields(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone74.isLocalDateTimeGap(localDateTime78);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime1.toMutableDateTime(dateTimeZone74);
        int int81 = mutableDateTime80.getEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:48:20.818+00:00:00.678" + "'", str67, "2022-02-11T09:48:20.818+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test13432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13432");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(568);
        java.util.Locale locale8 = dateTimeFormatter7.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeFormatter10.parseMillis("2022-02-27T15:58:20.075+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test13433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13433");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        long long8 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket5.saveState();
        java.lang.Object obj10 = dateTimeParserBucket5.saveState();
        java.lang.Integer int11 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket5.getZone();
        long long13 = dateTimeParserBucket5.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-678L) + "'", long13 == (-678L));
    }

    @Test
    public void test13434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime1.get(dateTimeFieldType10);
        int int12 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 779);
        org.joda.time.MutableDateTime mutableDateTime17 = property13.add((long) 853);
        org.joda.time.Chronology chronology18 = mutableDateTime17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology18.getDateTimeMillis((long) 81847059, 35282612, 35292901, 37, 179);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35282612 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 903 + "'", int6 == 903);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74900903 + "'", int12 == 74900903);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test13435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13435");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) "34962680", chronology8);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (-15));
        boolean boolean16 = mutableDateTime13.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test13436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13436");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.joda.time.DurationField durationField12 = chronology7.hours();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.clockhourOfDay();
        org.joda.time.DurationField durationField16 = chronology7.years();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13437");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getScript();
        int int13 = dateTimeField10.getMaximumTextLength(locale11);
        int int16 = dateTimeField10.getDifference((long) 2022, (long) 286);
        long long19 = dateTimeField10.addWrapField(1644572752142L, 34860408);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1736 + "'", int16 == 1736);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572752550L + "'", long19 == 1644572752550L);
    }

    @Test
    public void test13438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.dayOfWeek();
        int int37 = dateTimeField35.getMaximumValue((long) 74788708);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 678 + "'", int22 == 678);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:48:20.953+00:00:00.678" + "'", str28, "2022-02-11T09:48:20.953+00:00:00.678");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
    }

    @Test
    public void test13439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        mutableDateTime1.addMonths((int) '4');
        mutableDateTime1.setMillis((-1479L));
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime1.yearOfEra();
        int int36 = property35.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfFloor();
        org.joda.time.DateTime dateTime38 = mutableDateTime37.toDateTime();
        int int39 = dateTime38.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        int int42 = mutableDateTime40.getDayOfMonth();
        long long43 = mutableDateTime40.getMillis();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime40.add(readablePeriod44, (int) 'a');
        int int47 = mutableDateTime40.getWeekOfWeekyear();
        mutableDateTime40.addHours(74416135);
        org.joda.time.DateTime dateTime50 = mutableDateTime40.toDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableDateTime40.add(readablePeriod51, 432);
        boolean boolean54 = dateTime38.equals((java.lang.Object) 432);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 983 + "'", int7 == 983);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=983,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572900305L + "'", long43 == 1644572900305L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test13440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13440");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = dateTimeFormatter8.print(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test13441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13441");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.addMonths(745);
        mutableDateTime5.addWeekyears(241);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setWeekOfWeekyear(347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 347 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test13442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13442");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.minuteOfHour();
        int int22 = mutableDateTime16.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime16.set(dateTimeFieldType23, (int) 'a');
        dateTimeParserBucket14.saveField(dateTimeFieldType23, 3);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 74535);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = mutableDateTime31.toDateTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = mutableDateTime31.toCalendar(locale41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime31.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        mutableDateTime47.addHours(59);
        int int52 = mutableDateTime47.getMillisOfSecond();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology54, locale55, (java.lang.Integer) 9, 59);
        java.lang.Object obj59 = dateTimeParserBucket58.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket58.saveField(dateTimeFieldType60, 59);
        boolean boolean63 = mutableDateTime47.isSupported(dateTimeFieldType60);
        boolean boolean64 = dateTime45.isSupported(dateTimeFieldType60);
        java.lang.String str65 = dateTimeFieldType60.getName();
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyear();
        org.joda.time.DurationField durationField76 = chronology73.halfdays();
        org.joda.time.DurationField durationField77 = chronology73.days();
        org.joda.time.DurationField durationField78 = chronology73.hours();
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(chronology73);
        boolean boolean80 = dateTimeFieldType60.isSupported(chronology73);
        dateTimeParserBucket14.saveField(dateTimeFieldType60, 104);
        long long83 = dateTimeParserBucket14.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 74901 + "'", int22 == 74901);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644537696352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=30,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 30 + "'", int52 == 30);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "yearOfEra" + "'", str65, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-58853779274532L) + "'", long83 == (-58853779274532L));
    }

    @Test
    public void test13443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        int int10 = mutableDateTime1.getCenturyOfEra();
        int int11 = mutableDateTime1.getYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test13444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        mutableDateTime1.setMillis(5L);
        int int10 = mutableDateTime1.getDayOfYear();
        int int11 = mutableDateTime1.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        int int14 = mutableDateTime1.get(dateTimeFieldType12);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.setWeekyear(74454);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test13445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        mutableDateTime1.setZone(dateTimeZone16);
        int int18 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.weekyear();
        int int20 = mutableDateTime1.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 588 + "'", int20 == 588);
    }

    @Test
    public void test13446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13446");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        int int3 = property1.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.DurationField durationField17 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType6.getField(chronology14);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMinimumValue(readablePartial19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int[] intArray34 = null;
        int int35 = dateTimeField32.getMinimumValue(readablePartial33, intArray34);
        long long37 = dateTimeField32.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getMaximumValue((long) (byte) 1);
        java.lang.String str49 = dateTimeField41.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray67 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int68 = dateTimeField60.getMinimumValue(readablePartial61, intArray67);
        int int69 = dateTimeField41.getMaximumValue(readablePartial50, intArray67);
        int int70 = dateTimeField32.getMinimumValue(readablePartial38, intArray67);
        int int71 = dateTimeField18.getMaximumValue(readablePartial21, intArray67);
        int int72 = dateTimeField4.getMinimumValue(readablePartial5, intArray67);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField4.getType();
        org.joda.time.ReadablePartial readablePartial74 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType75.getField(chronology76);
        int int78 = dateTimeField77.getMaximumValue();
        int int81 = dateTimeField77.getDifference((long) 10, (long) 'a');
        int int83 = dateTimeField77.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial84 = null;
        int[] intArray91 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int92 = dateTimeField77.getMinimumValue(readablePartial84, intArray91);
        int int93 = dateTimeField4.getMinimumValue(readablePartial74, intArray91);
        org.joda.time.ReadablePartial readablePartial94 = null;
        int int95 = dateTimeField4.getMinimumValue(readablePartial94);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278993 + "'", int3 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 865L + "'", long37 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 59 + "'", int83 == 59);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test13447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13447");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime1.get(dateTimeFieldType10);
        int int12 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 133 + "'", int6 == 133);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74901133 + "'", int12 == 74901133);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test13448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13448");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.setHourOfDay(0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        mutableDateTime25.add(readablePeriod36, 34991235);
        int int39 = mutableDateTime25.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35301161 + "'", int28 == 35301161);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
    }

    @Test
    public void test13449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13449");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime11.getZone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        mutableDateTime37.setRounding(dateTimeField45);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = dateTimeField45.getAsShortText((int) (byte) 1, locale49);
        java.lang.String str51 = property31.getAsShortText(locale49);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale49.getDisplayScript(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale49);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        int int58 = mutableDateTime56.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime56.set(dateTimeFieldType59, 0);
        boolean boolean62 = dateTimeParserBucket55.restoreState((java.lang.Object) dateTimeFieldType59);
        java.lang.String str63 = dateTimeFieldType59.getName();
        mutableDateTime11.set(dateTimeFieldType59, 18);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType59.getField(chronology73);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime1.property(dateTimeFieldType59);
        org.joda.time.MutableDateTime mutableDateTime79 = property78.roundCeiling();
        java.lang.String str80 = property78.getAsShortText();
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.lang.String str82 = property78.getAsShortText(locale81);
        java.lang.String str83 = locale81.getDisplayLanguage();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(chronology84);
        org.joda.time.ReadableInstant readableInstant86 = null;
        boolean boolean87 = mutableDateTime85.isEqual(readableInstant86);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = null;
        java.lang.String str89 = mutableDateTime85.toString(dateTimeFormatter88);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime85.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime91 = property90.roundFloor();
        java.util.Locale locale92 = java.util.Locale.FRANCE;
        int int93 = property90.getMaximumTextLength(locale92);
        java.lang.String str94 = locale81.getDisplayName(locale92);
        java.util.Locale.setDefault(locale92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "vendredi" + "'", str33, "vendredi");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ven." + "'", str51, "ven.");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minuteOfDay" + "'", str63, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2" + "'", str80, "2");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2" + "'", str82, "2");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-11T09:48:21.181+00:00:00.678" + "'", str89, "2022-02-11T09:48:21.181+00:00:00.678");
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test13450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13450");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears(2259);
        int int77 = mutableDateTime51.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime51.setSecondOfDay(35292781);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35292781 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572900551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=229,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537696551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=229,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:21.229+00:00:00.678" + "'", str37, "2022-02-11T09:48:21.229+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.678" + "'", str45, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4281 + "'", int77 == 4281);
    }

    @Test
    public void test13451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13451");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-27T15:57:58.212+390:13");
        java.lang.String str2 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test13452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13452");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.yearOfCentury();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test13453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13453");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getScript();
        int int13 = dateTimeField10.getMaximumTextLength(locale11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = dateTimeField10.getAsText((long) 4, locale15);
        int int19 = dateTimeField10.get((long) 145);
        org.joda.time.DurationField durationField20 = dateTimeField10.getDurationField();
        java.lang.String str22 = dateTimeField10.getAsShortText((long) 928);
        long long24 = dateTimeField10.roundHalfCeiling(10522310497445L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 145 + "'", int19 == 145);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "928" + "'", str22, "928");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10522310497445L + "'", long24 == 10522310497445L);
    }

    @Test
    public void test13454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        int int9 = mutableDateTime1.getYearOfEra();
        int int10 = mutableDateTime1.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(34848733);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34848733 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572900627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=305,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 43401 + "'", int10 == 43401);
    }

    @Test
    public void test13455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13455");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.setMinuteOfHour((int) (short) 1);
        int int13 = mutableDateTime8.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.weekyear();
        int int15 = mutableDateTime8.getWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.Chronology chronology22 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology22);
        boolean boolean25 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime35 = mutableDateTime8.toDateTime(dateTimeZone32);
        mutableDateTime1.setZone(dateTimeZone32);
        long long39 = dateTimeZone32.adjustOffset(1644784896000L, false);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = mutableDateTime41.toString(dateTimeFormatter44);
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        java.lang.String str53 = dateTimeZone52.getID();
        java.lang.String str55 = dateTimeZone52.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime41.toMutableDateTime(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime57 = null;
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        mutableDateTime60.addHours(59);
        org.joda.time.Chronology chronology65 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology65.getZone();
        long long68 = dateTimeZone52.getMillisKeepLocal(dateTimeZone66, (long) (-292275054));
        long long70 = dateTimeZone32.getMillisKeepLocal(dateTimeZone52, (long) 442);
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:21.359+00:00:00.678" + "'", str5, "2022-02-11T09:48:21.359+00:00:00.678");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 359 + "'", int13 == 359);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644784896000L + "'", long39 == 1644784896000L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-11T09:48:21.359+00:00:00.678" + "'", str45, "2022-02-11T09:48:21.359+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.678" + "'", str53, "+00:00:00.678");
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-292275054L) + "'", long68 == (-292275054L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 442L + "'", long70 == 442L);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test13456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13456");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addSeconds(839);
        mutableDateTime1.addWeekyears(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        int int14 = mutableDateTime9.getMillisOfSecond();
        mutableDateTime9.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        int int24 = dateTimeField20.getDifference((long) 10, (long) 'a');
        int int26 = dateTimeField20.getLeapAmount((-1L));
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = dateTimeField20.getAsText((long) 340, locale28);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField20.getAsShortText((int) '4', locale31);
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = dateTimeField20.getAsText(readablePartial33, 292278993, locale35);
        java.lang.String str37 = mutableDateTime9.toString("237", locale35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        mutableDateTime39.addYears(0);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket50.getZone();
        mutableDateTime39.setZoneRetainFields(dateTimeZone51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        boolean boolean59 = mutableDateTime54.isSupported(dateTimeFieldType58);
        int int60 = mutableDateTime39.get(dateTimeFieldType58);
        boolean boolean61 = mutableDateTime9.isSupported(dateTimeFieldType58);
        boolean boolean62 = mutableDateTime1.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime63 = mutableDateTime1.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 382 + "'", int14 == 382);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "292278993" + "'", str36, "292278993");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "237" + "'", str37, "237");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test13457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13457");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.lang.String str38 = dateTimeField12.getAsText(readablePartial13, 237, locale35);
        java.lang.String str39 = locale35.getDisplayName();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime41.set(dateTimeFieldType45, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime41.getZone();
        long long50 = dateTimeZone48.nextTransition((long) 59);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        org.joda.time.DurationField durationField55 = dateTimeField54.getDurationField();
        boolean boolean57 = dateTimeField54.isLeap((long) (short) -1);
        java.lang.String str58 = dateTimeField54.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        int int63 = dateTimeField62.getMaximumValue();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.dayOfWeek();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime66.yearOfCentury();
        org.joda.time.DurationField durationField69 = property68.getDurationField();
        int int70 = property68.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        int int74 = dateTimeField73.getMaximumValue();
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = locale76.getISO3Country();
        java.lang.String str78 = dateTimeField73.getAsShortText(0L, locale76);
        int int79 = property68.getMaximumTextLength(locale76);
        java.lang.String str80 = dateTimeField62.getAsShortText(0L, locale76);
        java.lang.String str81 = dateTimeField54.getAsText((-1L), locale76);
        java.lang.String str82 = dateTimeZone48.getName((long) 693, locale76);
        java.lang.String str83 = locale35.getDisplayCountry(locale76);
        java.lang.String str84 = locale76.getVariant();
        java.lang.String str85 = locale76.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "237" + "'", str38, "237");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "French" + "'", str39, "French");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 59L + "'", long50 == 59L);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "secondOfMinute" + "'", str58, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0" + "'", str78, "0");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0" + "'", str80, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+00:00:00.678" + "'", str82, "+00:00:00.678");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "French" + "'", str85, "French");
    }

    @Test
    public void test13458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        org.joda.time.Chronology chronology21 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology21.getZone();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology21, locale23);
        org.joda.time.Chronology chronology25 = dateTimeParserBucket24.getChronology();
        mutableDateTime12.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.halfdayOfDay();
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getLanguage();
        int int30 = dateTimeField27.getMaximumShortTextLength(locale28);
        java.lang.String str32 = dateTimeField27.getAsText((-86399574L));
        org.joda.time.ReadablePartial readablePartial33 = null;
        int int34 = dateTimeField27.getMaximumValue(readablePartial33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it" + "'", str29, "it");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AM" + "'", str32, "AM");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test13459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13459");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology7.add(readablePeriod10, (long) 34828152, 0);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.era();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 34828152L + "'", long13 == 34828152L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test13460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13460");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DurationField durationField16 = chronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        java.lang.String str16 = mutableDateTime1.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(74459);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74459 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537696852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=530,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T00:01:37.530+00:00:00.678" + "'", str16, "2022-02-11T00:01:37.530+00:00:00.678");
    }

    @Test
    public void test13462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13462");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        boolean boolean22 = dateTimeFormatter20.isParser();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.addWrapField(0);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology35, locale37, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField41 = chronology35.halfdays();
        org.joda.time.DurationField durationField42 = chronology35.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology35.minuteOfDay();
        mutableDateTime26.setChronology(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter20.withChronology(chronology35);
        boolean boolean47 = dateTimeFormatter20.isPrinter();
        java.lang.StringBuffer stringBuffer48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        int int58 = mutableDateTime50.get(dateTimeFieldType57);
        int int59 = mutableDateTime50.getWeekOfWeekyear();
        java.lang.Object obj60 = mutableDateTime50.clone();
        mutableDateTime50.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime50.getZone();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime50.dayOfMonth();
        mutableDateTime50.addMonths(158);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(stringBuffer48, (org.joda.time.ReadableInstant) mutableDateTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "2022-02-11T00:01:37.542+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "2022-02-11T00:01:37.542+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "2022-02-11T00:01:37.542+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test13463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13463");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 2);
        long long12 = dateTimeParserBucket5.computeMillis(false);
        java.lang.Object obj13 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        long long24 = dateTimeZone22.nextTransition((long) 59);
        java.lang.String str26 = dateTimeZone22.getName((long) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime28.toMutableDateTime();
        int int35 = mutableDateTime28.getYear();
        int int36 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) mutableDateTime28);
        dateTimeParserBucket5.setZone(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.util.TimeZone timeZone39 = dateTimeZone22.toTimeZone();
        boolean boolean41 = dateTimeZone22.isStandardOffset(60000L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-678L) + "'", long12 == (-678L));
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 59L + "'", long24 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.678" + "'", str26, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 678 + "'", int36 == 678);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test13464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.add((-62142641999839L));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test13465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTime dateTime7 = mutableDateTime1.toDateTimeISO();
        mutableDateTime1.setMillisOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.copy();
        mutableDateTime1.addWeeks(35298258);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 615 + "'", int6 == 615);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test13466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13466");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        int int15 = dateTimeField14.getMaximumValue();
        long long17 = dateTimeField14.roundFloor((long) 34883740);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.year();
        org.joda.time.DurationField durationField30 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType19.getField(chronology27);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField31.getMinimumValue(readablePartial32);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial46 = null;
        int[] intArray47 = null;
        int int48 = dateTimeField45.getMinimumValue(readablePartial46, intArray47);
        long long50 = dateTimeField45.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        int int55 = dateTimeField54.getMaximumValue();
        int int58 = dateTimeField54.getDifference((long) 10, (long) 'a');
        int int60 = dateTimeField54.getMaximumValue((long) (byte) 1);
        java.lang.String str62 = dateTimeField54.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial63 = null;
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.dayOfYear();
        org.joda.time.ReadablePartial readablePartial74 = null;
        int[] intArray80 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int81 = dateTimeField73.getMinimumValue(readablePartial74, intArray80);
        int int82 = dateTimeField54.getMaximumValue(readablePartial63, intArray80);
        int int83 = dateTimeField45.getMinimumValue(readablePartial51, intArray80);
        int int84 = dateTimeField31.getMaximumValue(readablePartial34, intArray80);
        int int85 = dateTimeField14.getMinimumValue(readablePartial18, intArray80);
        boolean boolean86 = dateTimeField14.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 34883000L + "'", long17 == 34883000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 865L + "'", long50 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 59 + "'", int55 == 59);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 59 + "'", int82 == 59);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 999 + "'", int84 == 999);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test13467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13467");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology31 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        org.joda.time.Chronology chronology33 = chronology7.withZone(dateTimeZone32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.Instant instant44 = mutableDateTime35.toInstant();
        mutableDateTime35.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.millis();
        java.lang.String str48 = durationFieldType47.toString();
        java.lang.String str49 = durationFieldType47.getName();
        mutableDateTime35.add(durationFieldType47, 20);
        java.lang.Object obj52 = mutableDateTime35.clone();
        mutableDateTime35.setDayOfYear(160);
        int int55 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:21.662+00:00:00.678" + "'", str20, "2022-02-11T09:48:21.662+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "millis" + "'", str48, "millis");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "millis" + "'", str49, "millis");
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "2022-03-15T00:01:37.682+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "2022-03-15T00:01:37.682+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "2022-03-15T00:01:37.682+00:00:00.678");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 678 + "'", int55 == 678);
    }

    @Test
    public void test13468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13468");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        long long9 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = chronology10.years();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        long long16 = chronology10.add(readablePeriod13, (long) 199, 34920);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((-350874189294L), chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-678L) + "'", long9 == (-678L));
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 199L + "'", long16 == 199L);
    }

    @Test
    public void test13469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13469");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology9.getDateTimeMillis(1644572742459L, 408, 35333, 0, 74616);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 408 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13470");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) 100);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        java.lang.String str3 = property2.getAsText();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean12 = mutableDateTime5.isSupported(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime5.dayOfMonth();
        org.joda.time.Chronology chronology14 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        int int17 = mutableDateTime5.get(dateTimeFieldType15);
        long long18 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime5);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0" + "'", str3, "0");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 707 + "'", int10 == 707);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74901 + "'", int17 == 74901);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1644785300L) + "'", long18 == (-1644785300L));
    }

    @Test
    public void test13471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13471");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(395);
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatter26.getParser();
        java.lang.Appendable appendable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter26.printTo(appendable28, 2924811L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeParser27);
    }

    @Test
    public void test13472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfCeiling();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfWeek();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property25.getAsText(locale26);
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        mutableDateTime31.setRounding(dateTimeField39);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = dateTimeField39.getAsShortText((int) (byte) 1, locale43);
        java.lang.String str45 = property25.getAsShortText(locale43);
        java.lang.String str46 = dateTimeField20.getAsShortText(readablePartial21, (int) (short) -1, locale43);
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        int int58 = mutableDateTime50.get(dateTimeFieldType57);
        int int59 = mutableDateTime50.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.yearOfEra();
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar63 = mutableDateTime60.toCalendar(locale62);
        java.util.Calendar calendar64 = mutableDateTime50.toCalendar(locale62);
        java.lang.String str65 = dateTimeField20.getAsText(readablePartial47, 306, locale62);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale66);
        java.lang.String str68 = locale62.getDisplayName(locale66);
        java.lang.String str69 = locale62.getISO3Country();
        int int70 = property10.getMaximumShortTextLength(locale62);
        java.lang.String str71 = locale62.getDisplayVariant();
        java.lang.String str72 = locale62.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "vendredi" + "'", str27, "vendredi");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ven." + "'", str45, "ven.");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "-1" + "'", str46, "-1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644572901051,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=729,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644537697051,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=729,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "306" + "'", str65, "306");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "chinois (Taiwan)" + "'", str68, "chinois (Taiwan)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "TWN" + "'", str69, "TWN");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "chinois (Taiwan)" + "'", str72, "chinois (Taiwan)");
    }

    @Test
    public void test13473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13473");
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable5);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable8);
        iOException6.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("French", (java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException("2022-02-11T09:40:30.647Z", (java.lang.Throwable) iOException6);
        java.io.IOException iOException13 = new java.io.IOException("chinois", (java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException("2022-02-11T09:40:42.726Z", (java.lang.Throwable) iOException12);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray16 = iOException15.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test13474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13474");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        mutableDateTime1.addSeconds(166);
        mutableDateTime1.setDayOfMonth(26);
        mutableDateTime1.setSecondOfDay(298);
        mutableDateTime1.setWeekyear(74432920);
        int int17 = mutableDateTime1.getHourOfDay();
        boolean boolean19 = mutableDateTime1.isAfter((long) 846);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.weekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test13475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13475");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.yearOfCentury();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        int int19 = property8.getMaximumTextLength(locale16);
        java.lang.String str20 = dateTimeField2.getAsShortText(0L, locale16);
        org.joda.time.DurationField durationField21 = dateTimeField2.getDurationField();
        boolean boolean22 = dateTimeField2.isLenient();
        int int24 = dateTimeField2.getMinimumValue(34965311L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test13476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13476");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 74519);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter2.getZone();
        java.io.Writer writer21 = null;
        org.joda.time.ReadablePartial readablePartial22 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer21, readablePartial22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.678" + "'", str12, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimeZone20);
    }

    @Test
    public void test13477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13477");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = property16.isLeap();
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) property16);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.lang.String str21 = property20.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        mutableDateTime24.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int31 = mutableDateTime24.get(dateTimeFieldType30);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime23.yearOfEra();
        org.joda.time.DurationField durationField34 = property33.getDurationField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        mutableDateTime39.addHours(59);
        int int44 = mutableDateTime39.getMillisOfSecond();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology46, locale47, (java.lang.Integer) 9, 59);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket50.saveField(dateTimeFieldType52, 59);
        boolean boolean55 = mutableDateTime39.isSupported(dateTimeFieldType52);
        int int56 = mutableDateTime36.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.addWeekyears(74415);
        java.lang.String str59 = mutableDateTime39.toString();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime39.hourOfDay();
        int int61 = property33.getDifference((org.joda.time.ReadableInstant) mutableDateTime39);
        long long62 = mutableDateTime39.getMillis();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(34970384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34970384 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572901151,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=21,MILLISECOND=829,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 42 + "'", int31 == 42);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 829 + "'", int44 == 829);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "76437-02-08T20:48:21.829+00:00:00.678" + "'", str59, "76437-02-08T20:48:21.829+00:00:00.678");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-74414) + "'", int61 == (-74414));
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 2349954967701151L + "'", long62 == 2349954967701151L);
    }

    @Test
    public void test13478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13478");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addWeekyears(796);
        int int23 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        mutableDateTime9.set(dateTimeFieldType24, 9);
        dateTimeParserBucket5.saveField(dateTimeFieldType24, 34839065);
        java.lang.String str29 = dateTimeFieldType24.toString();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType24.getDurationType();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology38.centuries();
        org.joda.time.DurationField durationField44 = chronology38.millis();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = mutableDateTime46.toString(dateTimeFormatter49);
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        java.lang.String str59 = dateTimeZone57.getNameKey((long) (byte) 0);
        mutableDateTime46.setZoneRetainFields(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone57.isLocalDateTimeGap(localDateTime61);
        long long64 = dateTimeZone57.previousTransition((long) 518);
        org.joda.time.LocalDateTime localDateTime65 = null;
        boolean boolean66 = dateTimeZone57.isLocalDateTimeGap(localDateTime65);
        org.joda.time.Chronology chronology67 = chronology38.withZone(dateTimeZone57);
        org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.minuteOfHour();
        boolean boolean70 = durationFieldType30.isSupported(chronology67);
        org.joda.time.ReadablePartial readablePartial71 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long73 = chronology67.set(readablePartial71, (-4127L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "secondOfMinute" + "'", str29, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:48:21.860+00:00:00.678" + "'", str50, "2022-02-11T09:48:21.860+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 518L + "'", long64 == 518L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test13479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13479");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DurationField durationField13 = chronology10.days();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfHalfday();
        int int16 = dateTimeField15.getMinimumValue();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = locale18.getDisplayScript();
        java.lang.String str21 = dateTimeField15.getAsShortText(235, locale18);
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale.setDefault(locale18);
        java.lang.String str24 = locale18.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fran\347ais" + "'", str19, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "235" + "'", str21, "235");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test13480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime1.isEqual(readableInstant9);
        mutableDateTime1.setSecondOfMinute(7);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime1.add(durationFieldType14, (int) (short) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        boolean boolean24 = durationFieldType14.isSupported(chronology23);
        org.joda.time.DurationField durationField25 = chronology23.years();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.secondOfDay();
        long long30 = chronology23.add((long) 4196, 276323655739681L, 2779);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 767903439300577695L + "'", long30 == 767903439300577695L);
    }

    @Test
    public void test13481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13481");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        mutableDateTime1.setMillisOfSecond(728);
        mutableDateTime1.addMinutes(445);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = mutableDateTime1.toString("2022-02-27T15:57:49.864+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13482");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Instant instant9 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.era();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74901 + "'", int7 == 74901);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test13483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        mutableDateTime7.setTime((long) 381);
        org.joda.time.Instant instant10 = mutableDateTime7.toInstant();
        int int11 = mutableDateTime7.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = mutableDateTime7.toString("2022-02-11T09:47:48.020+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 381 + "'", int11 == 381);
    }

    @Test
    public void test13484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13484");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.addSeconds(11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add(1644785033315L);
        org.joda.time.DurationField durationField29 = property26.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime31 = property26.add((long) 655);
        org.joda.time.MutableDateTime mutableDateTime33 = property26.add(236);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test13485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13485");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        java.util.Date date20 = mutableDateTime11.toDate();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime11.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone21);
        int int24 = dateTimeZone21.getOffset((long) 74520);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572901339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=48,SECOND=22,MILLISECOND=17,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 678 + "'", int24 == 678);
    }

    @Test
    public void test13486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.Interval interval5 = property2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.minuteOfHour();
        int int16 = mutableDateTime10.getSecondOfDay();
        mutableDateTime10.setSecondOfDay((int) (byte) 0);
        boolean boolean19 = property7.equals((java.lang.Object) mutableDateTime10);
        long long20 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        int int21 = mutableDateTime10.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74902 + "'", int16 == 74902);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 32 + "'", int21 == 32);
    }

    @Test
    public void test13487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13487");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter11.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withZoneUTC();
        java.lang.StringBuffer stringBuffer14 = null;
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(stringBuffer14, readablePartial15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test13488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13488");
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable6);
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("2022-02-11T00:01:37.078Z", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException("2022-02-11T00:01:37.846Z", (java.lang.Throwable) iOException11);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.String str15 = iOException14.toString();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: java.io.IOException: 2022-02-11T00:01:37.846Z" + "'", str15, "java.io.IOException: java.io.IOException: 2022-02-11T00:01:37.846Z");
    }

    @Test
    public void test13489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        java.util.Date date13 = mutableDateTime1.toDate();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = durationFieldType14.isSupported(chronology15);
        mutableDateTime1.add(durationFieldType14, 902);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology27, locale29, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField33 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.millisOfSecond();
        org.joda.time.DurationField durationField35 = chronology27.minutes();
        boolean boolean36 = durationFieldType14.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = chronology27.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 15 00:01:36 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test13490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        mutableDateTime1.addSeconds(166);
        mutableDateTime1.setDayOfMonth(26);
        mutableDateTime1.setSecondOfDay(298);
        mutableDateTime1.setWeekyear(74432920);
        int int17 = mutableDateTime1.getHourOfDay();
        boolean boolean19 = mutableDateTime1.isAfter((long) 846);
        int int20 = mutableDateTime1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 744329 + "'", int20 == 744329);
    }

    @Test
    public void test13491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.clockhourOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = chronology10.get(readablePeriod16, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74902 + "'", int7 == 74902);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test13492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13492");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField9.getType();
        long long13 = dateTimeField9.getDifferenceAsLong((long) 74475, (long) 536);
        org.joda.time.ReadablePartial readablePartial14 = null;
        int int15 = dateTimeField9.getMaximumValue(readablePartial14);
        org.joda.time.DurationField durationField16 = dateTimeField9.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        boolean boolean24 = mutableDateTime19.isSupported(dateTimeFieldType23);
        mutableDateTime19.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = mutableDateTime28.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime37 = mutableDateTime28.toDateTime();
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = mutableDateTime28.toCalendar(locale38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime28.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = dateTimeZone40.getShortName((long) 34818666, locale47);
        java.lang.String str49 = locale47.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = dateTimeField9.getAsText(readablePartial17, locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644537696453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=131,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.678" + "'", str48, "+00:00:00.678");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test13493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add(41);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        int int14 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        mutableDateTime9.setZone(dateTimeZone27);
        long long33 = dateTimeZone27.previousTransition((long) 852);
        mutableDateTime7.setZone(dateTimeZone27);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale.Builder builder38 = builder36.clear();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder40 = builder36.setLocale(locale39);
        java.util.Locale locale41 = locale39.stripExtensions();
        java.lang.String str42 = locale39.getLanguage();
        java.lang.String str43 = dateTimeZone27.getName((long) 34987747, locale39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime46.getZone();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 34880355, dateTimeZone50);
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone50.getShortName(3577293024L, locale53);
        boolean boolean55 = dateTimeZone27.equals((java.lang.Object) 3577293024L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 151 + "'", int14 == 151);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:22.151+00:00:00.678" + "'", str20, "2022-02-11T09:48:22.151+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 852L + "'", long33 == 852L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "it" + "'", str42, "it");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.678" + "'", str43, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.678" + "'", str54, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test13494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13494");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        mutableDateTime0.set(dateTimeFieldType15, 5);
        boolean boolean19 = mutableDateTime0.isBeforeNow();
        int int20 = mutableDateTime0.getYearOfCentury();
        int int21 = mutableDateTime0.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addDays(0);
        int int30 = mutableDateTime24.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime24.add(readableDuration31, 693);
        org.joda.time.Chronology chronology34 = mutableDateTime24.getChronology();
        int int35 = mutableDateTime24.getMinuteOfDay();
        boolean boolean36 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime0.setYear(97302);
        int int39 = mutableDateTime0.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = mutableDateTime0.toString("2022-02-27T15:58:15.734+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 588 + "'", int35 == 588);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35302172 + "'", int39 == 35302172);
    }

    @Test
    public void test13495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13495");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add(100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekyear();
        boolean boolean14 = mutableDateTime1.equals((java.lang.Object) mutableDateTime12);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTimeISO();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test13496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13496");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime24.getZone();
        long long33 = dateTimeZone31.nextTransition((long) 59);
        java.lang.String str35 = dateTimeZone31.getName((long) (short) 0);
        java.lang.String str36 = dateTimeZone31.getID();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime43.toMutableDateTime();
        int int50 = mutableDateTime43.getMinuteOfHour();
        mutableDateTime43.addDays(831);
        boolean boolean53 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Calendar calendar55 = mutableDateTime43.toCalendar(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        int int62 = dateTimeField58.getDifference((long) 10, (long) 'a');
        int int64 = dateTimeField58.getLeapAmount((-1L));
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = dateTimeField58.getAsText((long) 340, locale66);
        java.lang.String str68 = locale54.getDisplayVariant(locale66);
        java.lang.String str69 = dateTimeZone31.getShortName((long) 74427617, locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter20.withLocale(locale66);
        org.joda.time.Chronology chronology71 = dateTimeFormatter20.getChronolgy();
        org.joda.time.DurationField durationField72 = chronology71.millis();
        org.joda.time.DateTimeZone dateTimeZone73 = chronology71.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 59L + "'", long33 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.678" + "'", str35, "+00:00:00.678");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.678" + "'", str36, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1716583701524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.678,offset=678,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=48,SECOND=22,MILLISECOND=202,ZONE_OFFSET=678,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.678" + "'", str69, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
    }

    @Test
    public void test13497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13497");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(340);
        java.lang.String str3 = dateTimeZone1.getName((-512L));
        long long5 = dateTimeZone1.nextTransition(1644572502560L);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        mutableDateTime7.setMinuteOfDay(400);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+340:00" + "'", str3, "+340:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572502560L + "'", long5 == 1644572502560L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test13498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        int int8 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField12.getAsShortText(1L, locale36);
        java.lang.String str40 = locale36.getISO3Country();
        boolean boolean41 = locale36.hasExtensions();
        java.lang.String str42 = locale36.getDisplayLanguage();
        java.lang.String str43 = locale36.getDisplayScript();
        int int44 = property9.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime45 = property9.roundFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setDateTime(35322548, 485, 35163, 35659, 762, 57615838, 10654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35659 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 242 + "'", int8 == 242);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Friday" + "'", str20, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "French" + "'", str42, "French");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test13499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13499");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        java.lang.String str4 = property1.getName();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.getMutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime8.add(readablePeriod14);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime17 = mutableDateTime16.toDateTime();
        int int18 = dateTime17.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime17.getZone();
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime5.setZoneRetainFields(dateTimeZone19);
        long long25 = dateTimeZone19.convertLocalToUTC(1644788793203L, false, 0L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644788792525L + "'", long25 == 1644788792525L);
    }

    @Test
    public void test13500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest26.test13500");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime14.yearOfCentury();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.secondOfDay();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.weekyear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfDay();
        java.util.Locale locale38 = java.util.Locale.UK;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfWeek();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property41.getAsText(locale42);
        java.util.Locale locale44 = null;
        int int45 = property41.getMaximumTextLength(locale44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        boolean boolean49 = mutableDateTime47.isEqual(readableInstant48);
        int int50 = mutableDateTime47.getHourOfDay();
        mutableDateTime47.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        int int56 = dateTimeField55.getMaximumValue();
        mutableDateTime47.setRounding(dateTimeField55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.lang.String str60 = dateTimeField55.getAsShortText((int) (byte) 1, locale59);
        java.lang.String str61 = property41.getAsShortText(locale59);
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.lang.String str63 = locale62.getScript();
        java.lang.String str64 = locale59.getDisplayScript(locale62);
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = locale59.getDisplayLanguage(locale65);
        java.lang.String str67 = locale38.getDisplayCountry(locale65);
        java.lang.String str68 = dateTimeField36.getAsText(214, locale65);
        java.lang.String str69 = property25.getAsText(locale65);
        boolean boolean70 = locale65.hasExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-678L) + "'", long8 == (-678L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Friday" + "'", str43, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ven." + "'", str61, "ven.");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "French" + "'", str66, "French");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "United Kingdom" + "'", str67, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "214" + "'", str68, "214");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "97" + "'", str69, "97");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }
}

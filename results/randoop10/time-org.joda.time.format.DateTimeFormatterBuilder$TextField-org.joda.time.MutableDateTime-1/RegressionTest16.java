import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.ReadablePartial readablePartial12 = null;
        int int13 = dateTimeField11.getMaximumValue(readablePartial12);
        long long15 = dateTimeField11.remainder((long) 242);
        java.lang.String str17 = dateTimeField11.getAsText((long) 35659);
        boolean boolean19 = dateTimeField11.isLeap((long) 814);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 242L + "'", long15 == 242L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 6);
        java.lang.Object obj4 = null;
        boolean boolean5 = dateTimeZone1.equals(obj4);
        long long8 = dateTimeZone1.adjustOffset((long) 340, false);
        org.joda.time.ReadableInstant readableInstant9 = null;
        int int10 = dateTimeZone1.getOffset(readableInstant9);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.millisOfDay();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        int int33 = mutableDateTime28.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int35 = mutableDateTime28.get(dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime28.minuteOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.dayOfWeek();
        java.util.Locale locale40 = null;
        java.lang.String str41 = property39.getAsText(locale40);
        java.util.Locale locale42 = null;
        int int43 = property39.getMaximumTextLength(locale42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        mutableDateTime45.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        mutableDateTime45.setRounding(dateTimeField53);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = dateTimeField53.getAsShortText((int) (byte) 1, locale57);
        java.lang.String str59 = property39.getAsShortText(locale57);
        java.util.Calendar calendar60 = mutableDateTime28.toCalendar(locale57);
        int int61 = property26.getMaximumShortTextLength(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology20, locale57, (java.lang.Integer) 664);
        java.lang.String str64 = locale57.getVariant();
        java.util.Locale.Category category65 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale66 = java.util.Locale.getDefault(category65);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale72 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str73 = locale68.getDisplayLanguage(locale72);
        java.lang.String str74 = locale66.getDisplayCountry(locale68);
        java.lang.String str75 = locale57.getDisplayLanguage(locale68);
        java.lang.String str76 = dateTimeZone1.getName(3715200472L, locale68);
        long long78 = dateTimeZone1.convertUTCToLocal(1644788730341L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.678" + "'", str3, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 340L + "'", long8 == 340L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 678 + "'", int10 == 678);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 649 + "'", int33 == 649);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "vendredi" + "'", str41, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ven." + "'", str59, "ven.");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644785180649,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=20,MILLISECOND=649,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + category65 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category65.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals(locale72.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "French" + "'", str75, "French");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.678" + "'", str76, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1644788731019L + "'", long78 == 1644788731019L);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.add(34809000L);
        long long10 = property2.remainder();
        org.joda.time.Interval interval11 = property2.toInterval();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35181356L + "'", long10 == 35181356L);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime14.toMutableDateTime(chronology32);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology36, locale37, (java.lang.Integer) 9, 59);
        java.lang.Object obj41 = dateTimeParserBucket40.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket40.saveField(dateTimeFieldType42, 59);
        long long46 = dateTimeParserBucket40.computeMillis(true);
        org.joda.time.Chronology chronology47 = dateTimeParserBucket40.getChronology();
        java.util.Locale locale50 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology47, locale50, (java.lang.Integer) 617);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeFormatter55.getZone();
        boolean boolean57 = dateTimeFormatter55.isOffsetParsed();
        org.joda.time.Chronology chronology58 = dateTimeFormatter55.getChronology();
        boolean boolean59 = dateTimeParserBucket52.restoreState((java.lang.Object) dateTimeFormatter55);
        dateTimeParserBucket52.setPivotYear((java.lang.Integer) 34824000);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.DurationField durationField74 = chronology71.hours();
        org.joda.time.DurationField durationField75 = durationFieldType63.getField(chronology71);
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder77 = builder76.clearExtensions();
        java.util.Locale.Builder builder79 = builder77.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale80 = builder79.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology71, locale80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType82.getField(chronology83);
        dateTimeParserBucket81.saveField(dateTimeFieldType82, 518);
        java.util.Locale locale88 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale89 = java.util.Locale.JAPAN;
        java.lang.String str90 = locale88.getDisplayLanguage(locale89);
        dateTimeParserBucket52.saveField(dateTimeFieldType82, "2022-02-11T09:41:19.565Z", locale89);
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime(98374L);
        org.joda.time.Chronology chronology94 = mutableDateTime93.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.minutes();
        boolean boolean96 = dateTimeFieldType82.isSupported(chronology94);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.set(dateTimeFieldType82, 322);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 322 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-60305299200000L) + "'", long46 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertEquals(locale50.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str90, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        long long44 = dateTimeZone38.adjustOffset((long) 34816672, false);
        boolean boolean46 = dateTimeZone38.isStandardOffset((long) 34839691);
        dateTimeParserBucket25.setZone(dateTimeZone38);
        java.lang.String str48 = dateTimeZone38.getID();
        org.joda.time.LocalDateTime localDateTime49 = null;
        boolean boolean50 = dateTimeZone38.isLocalDateTimeGap(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:46:20.749Z" + "'", str31, "2022-02-11T09:46:20.749Z");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 34816672L + "'", long44 == 34816672L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = mutableDateTime9.toString(dateTimeFormatter12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.String str22 = dateTimeZone20.getNameKey((long) (byte) 0);
        mutableDateTime9.setZoneRetainFields(dateTimeZone20);
        org.joda.time.Chronology chronology24 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology24.getZone();
        boolean boolean26 = dateTimeZone25.isFixed();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime1.toMutableDateTime(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone25.isLocalDateTimeGap(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:46:20.763Z" + "'", str13, "2022-02-11T09:46:20.763Z");
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        boolean boolean20 = mutableDateTime12.isBefore((long) 74413);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.minuteOfHour();
        mutableDateTime12.addMinutes(444);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74780 + "'", int7 == 74780);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:20.792Z" + "'", str16, "2022-02-11T09:46:20.792Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException(throwable1);
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:40:13.771Z", throwable1);
        java.io.IOException iOException5 = new java.io.IOException("ISOChronology[UTC]");
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        iOException3.addSuppressed((java.lang.Throwable) iOException7);
        org.junit.Assert.assertNotNull(throwableArray8);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime7.getEra();
        mutableDateTime7.addMillis(35837);
        int int11 = mutableDateTime7.getMinuteOfHour();
        mutableDateTime7.addMillis(1246);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 46 + "'", int11 == 46);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10, 1310);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785180904L + "'", long9 == 1644785180904L);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        mutableDateTime0.addWeekyears(0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        mutableDateTime53.addHours(59);
        org.joda.time.Chronology chronology58 = mutableDateTime53.getChronology();
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime53.copy();
        mutableDateTime53.setWeekyear(34812148);
        mutableDateTime53.setWeekyear(796);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        boolean boolean68 = mutableDateTime66.isEqual(readableInstant67);
        mutableDateTime66.addHours(59);
        org.joda.time.Chronology chronology71 = mutableDateTime66.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime66.toMutableDateTime();
        int int73 = mutableDateTime66.getMinuteOfHour();
        mutableDateTime66.addDays(831);
        org.joda.time.DateTime dateTime76 = mutableDateTime66.toDateTime();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(0L, chronology78, locale79, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket82.getZone();
        org.joda.time.Chronology chronology84 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.monthOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.weekyear();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial88 = null;
        int[] intArray89 = null;
        int int90 = dateTimeField87.getMinimumValue(readablePartial88, intArray89);
        int int92 = dateTimeField87.getMaximumValue((long) 109);
        mutableDateTime66.setRounding(dateTimeField87);
        boolean boolean94 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime66);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime66.setDayOfWeek(977);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 977 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572780924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=20,MILLISECOND=924,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 46 + "'", int73 == 46);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1439 + "'", int92 == 1439);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getScript();
        int int13 = dateTimeField10.getMaximumTextLength(locale11);
        int int16 = dateTimeField10.getDifference((long) 2022, (long) 286);
        long long18 = dateTimeField10.roundHalfEven(1644784845134L);
        long long21 = dateTimeField10.addWrapField(1644784842000L, 393);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1736 + "'", int16 == 1736);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644784845134L + "'", long18 == 1644784845134L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644784842393L + "'", long21 == 1644784842393L);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.weekyear();
        long long15 = mutableDateTime1.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74780 + "'", int7 == 74780);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644710400966L + "'", long15 == 1644710400966L);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = dateTimeField2.getAsShortText(0L, locale5);
        java.lang.String str8 = locale5.getDisplayVariant();
        java.lang.String str9 = locale5.getLanguage();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(100);
        java.lang.String str14 = property11.getAsText();
        java.lang.String str15 = property11.getAsText();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = locale36.getDisplayScript(locale39);
        java.lang.String str42 = property11.getAsText(locale36);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime44.yearOfCentury();
        org.joda.time.DurationField durationField47 = property46.getDurationField();
        int int48 = property46.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime49 = property46.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        int int54 = dateTimeField52.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.dayOfWeek();
        java.util.Locale locale59 = null;
        java.lang.String str60 = property58.getAsText(locale59);
        java.util.Locale locale61 = null;
        int int62 = property58.getMaximumTextLength(locale61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        mutableDateTime64.setRounding(dateTimeField72);
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = dateTimeField72.getAsShortText((int) (byte) 1, locale76);
        java.lang.String str78 = property58.getAsShortText(locale76);
        java.lang.String str79 = dateTimeField52.getAsShortText(1L, locale76);
        java.lang.String str80 = locale76.getISO3Country();
        boolean boolean81 = locale76.hasExtensions();
        java.lang.String str82 = locale76.getDisplayLanguage();
        java.lang.String str83 = locale76.getDisplayScript();
        java.lang.String str84 = property46.getAsText(locale76);
        java.lang.String str85 = locale36.getDisplayName(locale76);
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.util.Locale locale87 = locale86.stripExtensions();
        java.util.Locale locale88 = java.util.Locale.CHINESE;
        java.lang.String str89 = locale88.toLanguageTag();
        java.lang.String str90 = locale87.getDisplayScript(locale88);
        java.lang.String str91 = locale76.getDisplayScript(locale88);
        java.lang.String str92 = locale5.getDisplayVariant(locale76);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2122" + "'", str14, "2122");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2122" + "'", str15, "2122");
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2122" + "'", str42, "2122");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "vendredi" + "'", str60, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ven." + "'", str78, "ven.");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "0" + "'", str79, "0");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "fran\347ais" + "'", str82, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "23" + "'", str84, "23");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fran\347ais" + "'", str85, "fran\347ais");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "zh" + "'", str89, "zh");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        int int31 = mutableDateTime1.getYearOfCentury();
        int int32 = mutableDateTime1.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(35179470, 321, 636, 57505904, 34986274, 74551, 46800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57505904 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 16 + "'", int7 == 16);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=16,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        int int5 = dateTimeField3.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property9.getMaximumTextLength(locale12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        mutableDateTime15.setRounding(dateTimeField23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = dateTimeField23.getAsShortText((int) (byte) 1, locale27);
        java.lang.String str29 = property9.getAsShortText(locale27);
        java.lang.String str30 = dateTimeField3.getAsShortText(1L, locale27);
        int int31 = dateTimeField3.getMaximumValue();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = dateTimeField44.getAsText(readablePartial45, 842, locale61);
        int int64 = dateTimeField3.getMaximumShortTextLength(locale61);
        java.util.Locale.setDefault(category0, locale61);
        java.lang.String str66 = locale61.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "vendredi" + "'", str11, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ven." + "'", str29, "ven.");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "842" + "'", str63, "842");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fran\347ais" + "'", str66, "fran\347ais");
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        java.lang.String str16 = mutableDateTime1.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime1.getZone();
        mutableDateTime1.setMillis((long) 1112);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        int int23 = dateTimeField22.getMaximumValue();
        int int26 = dateTimeField22.getDifference((long) 10, (long) 'a');
        int int27 = dateTimeField22.getMaximumValue();
        int int29 = dateTimeField22.getLeapAmount((long) 237);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField22.getType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType30, 211);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 211 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=80,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T00:01:37.080Z" + "'", str16, "2022-02-11T00:01:37.080Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.DateTimeField dateTimeField26 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology9.centuryOfEra();
        java.lang.String str29 = dateTimeField28.toString();
        long long31 = dateTimeField28.roundHalfFloor(1644785157889L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str29, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 946684800000L + "'", long31 == 946684800000L);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.yearOfCentury();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        int int19 = property8.getMaximumTextLength(locale16);
        java.lang.String str20 = dateTimeField2.getAsShortText(0L, locale16);
        int int22 = dateTimeField2.getMinimumValue((long) 806);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int27 = dateTimeField26.getMaximumValue();
        int int30 = dateTimeField26.getDifference((long) 10, (long) 'a');
        int int32 = dateTimeField26.getLeapAmount((-1L));
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = dateTimeField26.getAsText((long) 340, locale34);
        java.util.Locale locale37 = java.util.Locale.UK;
        java.lang.String str38 = dateTimeField26.getAsShortText((int) '4', locale37);
        org.joda.time.ReadablePartial readablePartial39 = null;
        java.util.Locale locale41 = java.util.Locale.UK;
        java.lang.String str42 = dateTimeField26.getAsText(readablePartial39, 292278993, locale41);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        java.util.Locale locale48 = null;
        java.lang.String str49 = property47.getAsText(locale48);
        java.util.Locale locale50 = null;
        int int51 = property47.getMaximumTextLength(locale50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        mutableDateTime53.setRounding(dateTimeField61);
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = dateTimeField61.getAsShortText((int) (byte) 1, locale65);
        java.lang.String str67 = property47.getAsShortText(locale65);
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.lang.String str69 = locale68.getScript();
        java.lang.String str70 = locale65.getDisplayScript(locale68);
        java.util.Locale locale71 = java.util.Locale.US;
        java.lang.String str72 = locale65.getDisplayLanguage(locale71);
        java.util.Locale.setDefault(locale65);
        java.lang.String str74 = dateTimeField26.getAsText(readablePartial43, 74411, locale65);
        org.joda.time.DurationField durationField75 = dateTimeField26.getDurationField();
        long long77 = dateTimeField26.roundHalfEven((long) 74516);
        org.joda.time.ReadablePartial readablePartial78 = null;
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology81, locale82, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket85.getZone();
        long long87 = dateTimeParserBucket85.computeMillis();
        java.util.Locale locale88 = dateTimeParserBucket85.getLocale();
        java.util.Locale locale89 = null;
        java.lang.String str90 = locale88.getDisplayCountry(locale89);
        java.lang.String str91 = dateTimeField26.getAsShortText(readablePartial78, 74489, locale88);
        java.lang.String str92 = dateTimeField2.getAsShortText(74611L, locale88);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "52" + "'", str38, "52");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "292278993" + "'", str42, "292278993");
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "vendredi" + "'", str49, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ven." + "'", str67, "ven.");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "French" + "'", str72, "French");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "74411" + "'", str74, "74411");
        org.junit.Assert.assertNotNull(durationField75);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 75000L + "'", long77 == 75000L);
        org.junit.Assert.assertNotNull(dateTimeZone86);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "74489" + "'", str91, "74489");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "14" + "'", str92, "14");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(74415232);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35181223 + "'", int4 == 35181223);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime5.getMinuteOfHour();
        mutableDateTime5.addDays(831);
        boolean boolean15 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Calendar calendar17 = mutableDateTime5.toCalendar(locale16);
        int int18 = mutableDateTime5.getEra();
        int int19 = mutableDateTime5.getSecondOfDay();
        int int20 = mutableDateTime5.getWeekOfWeekyear();
        mutableDateTime5.setWeekyear(0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.dayOfWeek();
        java.util.Locale locale26 = null;
        java.lang.String str27 = property25.getAsText(locale26);
        java.util.Locale locale28 = null;
        int int29 = property25.getMaximumTextLength(locale28);
        int int30 = property25.getMaximumValueOverall();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology64, locale66, (java.lang.Integer) 2022);
        java.util.Locale locale70 = locale66.stripExtensions();
        java.lang.String str71 = locale70.getISO3Language();
        java.lang.String str72 = dateTimeField53.getAsText(readablePartial54, 842, locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology39, locale70, (java.lang.Integer) 237);
        int int75 = property25.getMaximumShortTextLength(locale70);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = property25.getFieldType();
        int int77 = mutableDateTime5.get(dateTimeFieldType76);
        java.lang.String str78 = dateTimeFieldType76.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 46 + "'", int12 == 46);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1716583581239,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=21,MILLISECOND=239,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 74781 + "'", int19 == 74781);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "vendredi" + "'", str27, "vendredi");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "842" + "'", str72, "842");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 5 + "'", int77 == 5);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "dayOfWeek" + "'", str78, "dayOfWeek");
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.lang.String str5 = property3.getAsString();
        org.joda.time.DurationField durationField6 = property3.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.roundCeiling();
        java.lang.String str8 = property3.toString();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property3.getAsShortText(locale9);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[yearOfEra]" + "'", str8, "Property[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2023" + "'", str10, "2023");
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        java.util.Locale locale14 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology8, locale14);
        java.lang.String str16 = chronology8.toString();
        org.joda.time.DurationField durationField17 = chronology8.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = mutableDateTime13.toDateTime(chronology21);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime24.toMutableDateTime();
        long long27 = dateTime24.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572781295L + "'", long27 == 1644572781295L);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 862);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        java.util.Date date13 = mutableDateTime1.toDate();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = durationFieldType14.isSupported(chronology15);
        mutableDateTime1.add(durationFieldType14, 902);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology27, locale29, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField33 = chronology27.halfdays();
        org.joda.time.DateTimeField dateTimeField34 = chronology27.millisOfSecond();
        org.joda.time.DurationField durationField35 = chronology27.minutes();
        boolean boolean36 = durationFieldType14.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField37 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = chronology27.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = dateTimeField38.set((long) 824, 64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 15 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withDefaultYear(34810005);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology30, locale32, (java.lang.Integer) 2022);
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getISO3Language();
        java.lang.String str39 = locale36.getScript();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale locale44 = builder43.build();
        java.lang.String str45 = locale40.getDisplayVariant(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter2.withLocale(locale40);
        boolean boolean47 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 59);
        long long11 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        long long13 = dateTimeParserBucket5.computeMillis();
        java.util.Locale locale14 = dateTimeParserBucket5.getLocale();
        dateTimeParserBucket5.setOffset(35659);
        java.lang.Object obj17 = dateTimeParserBucket5.saveState();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60305299200000L) + "'", long11 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-60273763200001L) + "'", long13 == (-60273763200001L));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        long long16 = dateTimeField13.add((long) 642, 580);
        boolean boolean17 = dateTimeField13.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 50112000642L + "'", long16 == 50112000642L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int11 = dateTimeField10.getMaximumValue();
        int int14 = dateTimeField10.getDifference((long) 10, (long) 'a');
        int int16 = dateTimeField10.getLeapAmount((-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = dateTimeField10.getAsText((long) 340, locale18);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = dateTimeField10.getAsShortText((int) '4', locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = dateTimeField10.getAsText(readablePartial23, 292278993, locale25);
        java.util.Calendar calendar27 = mutableDateTime1.toCalendar(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean29 = mutableDateTime1.isSupported(dateTimeFieldType28);
        int int30 = mutableDateTime1.getDayOfYear();
        int int31 = mutableDateTime1.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = mutableDateTime1.toString("2022-02-11T00:01:37.283Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74781 + "'", int7 == 74781);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "292278993" + "'", str26, "292278993");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644785181399,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=21,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 44 + "'", int30 == 44);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1246 + "'", int31 == 1246);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        java.lang.String str22 = property19.getAsText();
        boolean boolean23 = mutableDateTime11.equals((java.lang.Object) str22);
        long long24 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DurationField durationField25 = property9.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime26 = property9.getMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "vendredi" + "'", str21, "vendredi");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "vendredi" + "'", str22, "vendredi");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-2L) + "'", long24 == (-2L));
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addSeconds(648);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.hourOfDay();
        int int21 = property20.getLeapAmount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime1.year();
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime1.add(readableDuration41, 74575436);
        int int44 = mutableDateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:46:21.448Z" + "'", str31, "2022-02-11T09:46:21.448Z");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        java.util.Locale locale25 = new java.util.Locale("Property[year]", "34949284", "314");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property19.set("2022-02-27T00:01:41.204+390:13", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-27T00:01:41.204+390:13\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74781 + "'", int7 == 74781);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:21.489Z" + "'", str16, "2022-02-11T09:46:21.489Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals(locale25.toString(), "property[year]_34949284_314");
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2024-07-13T16:36:59.747Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2024-07-13t16:36:59.747z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:46:00.020Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:46:00.020z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfYear();
        org.joda.time.Instant instant10 = mutableDateTime0.toInstant();
        mutableDateTime0.addHours(34828152);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.hourOfDay();
        org.joda.time.DurationField durationField14 = property13.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572781569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=21,MILLISECOND=569,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.Instant instant27 = mutableDateTime20.toInstant();
        boolean boolean28 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) instant27);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.ReadableInstant readableInstant30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = mutableDateTime1.compareTo(readableInstant30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 579 + "'", int6 == 579);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfYear();
        org.joda.time.Instant instant10 = mutableDateTime0.toInstant();
        mutableDateTime0.addHours(34828152);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.hourOfDay();
        int int14 = mutableDateTime0.getYear();
        int int15 = mutableDateTime0.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572781634,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=21,MILLISECOND=634,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5995 + "'", int14 == 5995);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T22:44:28.750+253:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t22:44:28.750+253:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        java.util.Date date13 = mutableDateTime1.toDate();
        mutableDateTime1.setYear(74420);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16);
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Mar 15 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addSeconds((-292275054));
        int int10 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setMillisOfSecond(395);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime14.getZone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        boolean boolean43 = mutableDateTime38.isSupported(dateTimeFieldType42);
        int int44 = mutableDateTime23.get(dateTimeFieldType42);
        boolean boolean45 = mutableDateTime14.isSupported(dateTimeFieldType42);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.property(dateTimeFieldType42);
        boolean boolean47 = property46.isLeap();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        mutableDateTime49.addHours(59);
        org.joda.time.Chronology chronology54 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology54.getZone();
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        mutableDateTime59.addHours(59);
        org.joda.time.Chronology chronology64 = mutableDateTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = mutableDateTime59.toMutableDateTime();
        int int66 = mutableDateTime59.getYear();
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime59.getZone();
        boolean boolean69 = dateTimeZone67.equals((java.lang.Object) 302);
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime57.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        int int74 = dateTimeField73.getMaximumValue();
        int int77 = dateTimeField73.getDifference((long) 10, (long) 'a');
        int int79 = dateTimeField73.getLeapAmount((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = dateTimeField73.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = dateTimeField73.getType();
        int int82 = mutableDateTime57.get(dateTimeFieldType81);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime57.dayOfYear();
        int int84 = property46.getDifference((org.joda.time.ReadableInstant) mutableDateTime57);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74781 + "'", int7 == 74781);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 59 + "'", int74 == 59);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 21 + "'", int82 == 21);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-9) + "'", int84 == (-9));
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withDefaultYear(13);
        boolean boolean23 = dateTimeFormatter19.isOffsetParsed();
        org.joda.time.Chronology chronology24 = dateTimeFormatter19.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter19.getParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNull(dateTimeParser25);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int11 = dateTimeField10.getMaximumValue();
        int int14 = dateTimeField10.getDifference((long) 10, (long) 'a');
        int int16 = dateTimeField10.getLeapAmount((-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = dateTimeField10.getAsText((long) 340, locale18);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = dateTimeField10.getAsShortText((int) '4', locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = dateTimeField10.getAsText(readablePartial23, 292278993, locale25);
        java.util.Calendar calendar27 = mutableDateTime1.toCalendar(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean29 = mutableDateTime1.isSupported(dateTimeFieldType28);
        int int30 = mutableDateTime1.getDayOfYear();
        int int31 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74781 + "'", int7 == 74781);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "292278993" + "'", str26, "292278993");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644785181825,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=21,MILLISECOND=825,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 44 + "'", int30 == 44);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        mutableDateTime1.addMonths(74444144);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = mutableDateTime1.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74781 + "'", int7 == 74781);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(420);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 739);
        java.lang.StringBuffer stringBuffer18 = null;
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(stringBuffer18, readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime29 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        boolean boolean51 = mutableDateTime46.isSupported(dateTimeFieldType50);
        int int52 = mutableDateTime31.get(dateTimeFieldType50);
        mutableDateTime31.setWeekyear(74419);
        mutableDateTime31.addWeekyears(34818666);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTime dateTime58 = mutableDateTime31.toDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 879 + "'", int14 == 879);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getRangeDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        long long12 = dateTimeParserBucket9.computeMillis(true);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket9.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfEra();
        boolean boolean16 = durationFieldType3.isSupported(chronology13);
        org.joda.time.DurationField durationField17 = durationFieldType1.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int25 = dateTimeField24.getMaximumValue();
        int int28 = dateTimeField24.getDifference((long) 10, (long) 'a');
        int int29 = dateTimeField24.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial30 = null;
        int int31 = dateTimeField24.getMinimumValue(readablePartial30);
        long long33 = dateTimeField24.roundHalfEven((long) 928);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        mutableDateTime36.addHours(59);
        org.joda.time.Chronology chronology41 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime36.toMutableDateTime();
        int int43 = mutableDateTime36.getMinuteOfHour();
        mutableDateTime36.addDays(831);
        org.joda.time.DateTime dateTime46 = mutableDateTime36.toDateTime();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale49, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyear();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial58 = null;
        int[] intArray59 = null;
        int int60 = dateTimeField57.getMinimumValue(readablePartial58, intArray59);
        int int62 = dateTimeField57.getMaximumValue((long) 109);
        mutableDateTime36.setRounding(dateTimeField57);
        org.joda.time.ReadablePartial readablePartial64 = null;
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket70.getZone();
        org.joda.time.Chronology chronology72 = dateTimeParserBucket70.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.days();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.dayOfYear();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField77 = chronology72.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial78 = null;
        int[] intArray80 = new int[] { (byte) -1 };
        int int81 = dateTimeField77.getMinimumValue(readablePartial78, intArray80);
        int int82 = dateTimeField57.getMinimumValue(readablePartial64, intArray80);
        int int83 = dateTimeField24.getMinimumValue(readablePartial34, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            chronology13.validate(readablePartial21, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1000L + "'", long33 == 1000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 46 + "'", int43 == 46);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1439 + "'", int62 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("2022-02-11T09:40:13.388Z");
        iOException9.addSuppressed((java.lang.Throwable) iOException12);
        java.lang.Throwable[] throwableArray14 = iOException9.getSuppressed();
        java.lang.Throwable[] throwableArray15 = iOException9.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException("2022-02-11T00:01:37.657-00:00:00.001", (java.lang.Throwable) iOException9);
        java.lang.String str17 = iOException16.toString();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.io.IOException: 2022-02-11T00:01:37.657-00:00:00.001" + "'", str17, "java.io.IOException: 2022-02-11T00:01:37.657-00:00:00.001");
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        int int11 = property8.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 959 + "'", int7 == 959);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+390:13" + "'", str3, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+W0:13");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime5.dayOfWeek();
        mutableDateTime5.addMonths(34908315);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572781979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=21,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = chronology16.getDateTimeMillis(323, 460, 10676, 717);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 460 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:22.017Z" + "'", str5, "2022-02-11T09:46:22.017Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((-74), 74756, 301, 34841, 4196, 975, 125);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34841 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        mutableDateTime1.addDays((int) ' ');
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        java.lang.String str14 = durationFieldType13.toString();
        java.lang.String str15 = durationFieldType13.getName();
        mutableDateTime1.add(durationFieldType13, 20);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        int int27 = mutableDateTime19.getMonthOfYear();
        long long28 = mutableDateTime19.getMillis();
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime19.toMutableDateTime();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeFormatter33.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter33.getParser();
        boolean boolean36 = dateTimeFormatter33.isParser();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology44.add(readablePeriod46, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter33.withChronology(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter50.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear(211);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter53.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeFormatter53.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter53.withPivotYear(74497);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = mutableDateTime19.toString(dateTimeFormatter53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "millis" + "'", str14, "millis");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "millis" + "'", str15, "millis");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644572782035L + "'", long28 == 1644572782035L);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNull(dateTimeZone34);
        org.junit.Assert.assertNull(dateTimeParser35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        long long13 = dateTimeField11.roundHalfCeiling((long) 550);
        int int14 = dateTimeField11.getMaximumValue();
        boolean boolean15 = dateTimeField11.isLenient();
        org.joda.time.DurationField durationField16 = dateTimeField11.getDurationField();
        long long19 = dateTimeField11.add(0L, (long) 35000);
        long long22 = dateTimeField11.set((long) 74418, 883);
        java.lang.String str24 = dateTimeField11.getAsShortText(1644572504518L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1000L + "'", long13 == 1000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35000000L + "'", long19 == 35000000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 883418L + "'", long22 == 883418L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "34904" + "'", str24, "34904");
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addDays(831);
        mutableDateTime1.addWeeks(608);
        int int13 = mutableDateTime1.getYearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfHour();
        int int21 = mutableDateTime15.getSecondOfDay();
        mutableDateTime15.addMinutes(59);
        int int24 = mutableDateTime15.getYear();
        mutableDateTime15.addMillis(97545);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology33.getZone();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = mutableDateTime15.toDateTime(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        int int43 = mutableDateTime38.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean45 = mutableDateTime38.isSupported(dateTimeFieldType44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime38.dayOfMonth();
        org.joda.time.Chronology chronology47 = mutableDateTime38.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.hours();
        boolean boolean49 = mutableDateTime15.equals((java.lang.Object) chronology47);
        java.lang.String str50 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField51, 35158455);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 35158455");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 46 + "'", int8 == 46);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 36 + "'", int13 == 36);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74782 + "'", int21 == 74782);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 63 + "'", int43 == 63);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(2454659L);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getDayOfMonth();
        mutableDateTime4.addYears(2922789);
        mutableDateTime4.addHours((int) '4');
        int int27 = mutableDateTime4.getYearOfCentury();
        mutableDateTime4.setYear(857);
        org.joda.time.Instant instant30 = mutableDateTime4.toInstant();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add(100);
        org.joda.time.MutableDateTime mutableDateTime36 = property32.addWrapField(10);
        mutableDateTime36.setMillis((long) 779);
        long long39 = mutableDateTime36.getMillis();
        mutableDateTime36.addDays(35651);
        mutableDateTime36.addMinutes(728);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime36.copy();
        boolean boolean45 = instant30.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 88 + "'", int9 == 88);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 779L + "'", long39 == 779L);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime1.getChronology();
        int int19 = mutableDateTime1.getDayOfWeek();
        java.lang.Object obj20 = mutableDateTime1.clone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.weekyear();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime22.add(readablePeriod27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime22.dayOfWeek();
        boolean boolean30 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime1.add(readablePeriod31, 35175932);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572782148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=22,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T09:46:22.148Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T09:46:22.148Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T09:46:22.148Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35182148 + "'", int25 == 35182148);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        int int18 = mutableDateTime13.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = mutableDateTime20.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone31);
        mutableDateTime13.setZone(dateTimeZone31);
        long long37 = dateTimeZone31.previousTransition((long) 852);
        long long40 = dateTimeZone31.adjustOffset((long) 580, true);
        long long44 = dateTimeZone31.convertLocalToUTC((long) 879, false, (long) 852);
        org.joda.time.Chronology chronology45 = chronology9.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = chronology45.get(readablePeriod49, (-2L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 212 + "'", int18 == 212);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:46:22.212Z" + "'", str24, "2022-02-11T09:46:22.212Z");
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 852L + "'", long37 == 852L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 580L + "'", long40 == 580L);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 879L + "'", long44 == 879L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setVariant("2022");
        java.util.Locale locale7 = builder6.build();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        mutableDateTime9.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int18 = dateTimeField17.getMaximumValue();
        mutableDateTime9.setRounding(dateTimeField17);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = dateTimeField17.getAsShortText((int) (byte) 1, locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale7.getDisplayVariant(locale21);
        java.lang.String str27 = locale21.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 35128908, chronology1, locale21, (java.lang.Integer) 57462, 411);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        dateTimeParserBucket30.setZone(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(211);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTimeFormatter23.print(1644572773648L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        int int3 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setDayOfYear(97824);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97824 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        mutableDateTime1.setTime(1644572690347L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        int int18 = mutableDateTime10.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = mutableDateTime10.toDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addYears(0);
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) mutableDateTime21);
        int int28 = mutableDateTime10.getEra();
        int int29 = mutableDateTime10.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime10.hourOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.Chronology chronology33 = null;
        mutableDateTime32.setChronology(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = mutableDateTime36.toString(dateTimeFormatter39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.weekOfWeekyear();
        org.joda.time.Chronology chronology42 = mutableDateTime36.getChronology();
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.addMinutes((int) 'u');
        org.joda.time.Chronology chronology46 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.DateTime dateTime48 = mutableDateTime10.toDateTime(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.hours();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.era();
        mutableDateTime1.setRounding(dateTimeField50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(74546);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74546 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:46:22.334Z" + "'", str40, "2022-02-11T09:46:22.334Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addWeeks(74411);
        org.joda.time.Instant instant18 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = mutableDateTime20.toString(dateTimeFormatter23);
        int int25 = mutableDateTime20.getDayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.setMinuteOfHour((int) (short) 1);
        int int32 = mutableDateTime27.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime27.weekyear();
        int int34 = mutableDateTime27.getWeekyear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        mutableDateTime36.addHours(59);
        org.joda.time.Chronology chronology41 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = chronology41.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology41);
        boolean boolean44 = mutableDateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(0L, chronology46, locale47, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeParserBucket50.getZone();
        java.lang.String str53 = dateTimeZone51.getNameKey((long) (byte) 0);
        org.joda.time.DateTime dateTime54 = mutableDateTime27.toDateTime(dateTimeZone51);
        mutableDateTime20.setZone(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = instant18.toDateTime(dateTimeZone51);
        java.lang.String str58 = dateTimeZone51.getName((long) 901);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:46:22.349Z" + "'", str24, "2022-02-11T09:46:22.349Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 42 + "'", int25 == 42);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 349 + "'", int32 == 349);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        mutableDateTime1.setMinuteOfDay((int) ' ');
        int int14 = mutableDateTime1.getEra();
        boolean boolean16 = mutableDateTime1.isAfter((long) 34841148);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology18, locale19, (java.lang.Integer) 9, 59);
        java.lang.Object obj23 = dateTimeParserBucket22.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket22.saveField(dateTimeFieldType24, 59);
        java.lang.String str27 = dateTimeFieldType24.getName();
        int int28 = mutableDateTime1.get(dateTimeFieldType24);
        mutableDateTime1.addHours(81867);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 367 + "'", int7 == 367);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yearOfEra" + "'", str27, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear(211);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter22.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter22.withPivotYear(74497);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = dateTimeFormatter26.parseLocalDate("2022-02-27T15:58:13.484+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial12 = null;
        java.util.Locale locale15 = new java.util.Locale("2032");
        java.lang.String str16 = dateTimeField11.getAsText(readablePartial12, 1306, locale15);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(locale15.toString(), "2032");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1306" + "'", str16, "1306");
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.Interval interval5 = property2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.minuteOfHour();
        int int16 = mutableDateTime10.getSecondOfDay();
        mutableDateTime10.setSecondOfDay((int) (byte) 0);
        boolean boolean19 = property7.equals((java.lang.Object) mutableDateTime10);
        long long20 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime10.millisOfSecond();
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = mutableDateTime10.toCalendar(locale22);
        mutableDateTime10.addYears(536324);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74782 + "'", int16 == 74782);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644710400422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=422,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.setMillisOfDay(7);
        mutableDateTime1.setDate(1000L);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.secondOfMinute();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = builder11.build();
        boolean boolean14 = property8.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder15 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setLanguageTag("2022-02-11T09:45:52.781Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = chronology7.hours();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime2.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 59);
        java.lang.String str13 = dateTimeZone9.getName((long) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.Chronology chronology20 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime15.toMutableDateTime();
        int int22 = mutableDateTime15.getYear();
        int int23 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime25.toString(dateTimeFormatter28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime15.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        int int41 = dateTimeField37.getDifference((long) 10, (long) 'a');
        int int43 = dateTimeField37.getLeapAmount((-1L));
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = dateTimeField37.getAsText((long) 340, locale45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTimeField37.getAsShortText((int) '4', locale48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField37.getAsText(readablePartial50, 292278993, locale52);
        java.lang.String str54 = locale52.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(74420L, chronology31, locale52, (java.lang.Integer) 74547, 562);
        org.joda.time.DurationField durationField58 = chronology31.weeks();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology31);
        java.lang.Class<?> wildcardClass60 = chronology31.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 59L + "'", long11 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T09:46:22.500Z" + "'", str29, "2022-02-11T09:46:22.500Z");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52" + "'", str49, "52");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "292278993" + "'", str53, "292278993");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GB" + "'", str54, "GB");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        java.util.Locale locale1 = new java.util.Locale("");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType1.getDurationType();
        java.lang.String str4 = durationFieldType3.getName();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.Chronology chronology7 = null;
        mutableDateTime6.setChronology(chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = mutableDateTime10.toString(dateTimeFormatter13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = mutableDateTime10.getChronology();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.addMinutes((int) 'u');
        org.joda.time.Chronology chronology20 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = chronology20.months();
        org.joda.time.DurationField durationField23 = durationFieldType3.getField(chronology20);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int30 = dateTimeField28.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfWeek();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property34.getAsText(locale35);
        java.util.Locale locale37 = null;
        int int38 = property34.getMaximumTextLength(locale37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        mutableDateTime40.setRounding(dateTimeField48);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = dateTimeField48.getAsShortText((int) (byte) 1, locale52);
        java.lang.String str54 = property34.getAsShortText(locale52);
        java.lang.String str55 = dateTimeField28.getAsShortText(1L, locale52);
        int int56 = dateTimeField28.getMaximumValue();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField69 = chronology64.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial70 = null;
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        org.joda.time.Chronology chronology80 = dateTimeParserBucket78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.hourOfHalfday();
        java.util.Locale locale82 = java.util.Locale.FRENCH;
        java.lang.String str83 = locale82.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology80, locale82, (java.lang.Integer) 2022);
        java.util.Locale locale86 = locale82.stripExtensions();
        java.lang.String str87 = locale86.getISO3Language();
        java.lang.String str88 = dateTimeField69.getAsText(readablePartial70, 842, locale86);
        int int89 = dateTimeField28.getMaximumShortTextLength(locale86);
        java.util.Locale.setDefault(category24, locale86);
        java.util.Set<java.lang.Character> charSet91 = locale86.getExtensionKeys();
        java.lang.String str92 = locale86.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket((long) 784, chronology20, locale86, (java.lang.Integer) 34830, 500);
        org.joda.time.ReadablePeriod readablePeriod96 = null;
        long long99 = chronology20.add(readablePeriod96, 946684800000L, 74441);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "centuries" + "'", str4, "centuries");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:46:22.529Z" + "'", str14, "2022-02-11T09:46:22.529Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "vendredi" + "'", str36, "vendredi");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ven." + "'", str54, "ven.");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fra" + "'", str87, "fra");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "842" + "'", str88, "842");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fr" + "'", str92, "fr");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 946684800000L + "'", long99 == 946684800000L);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        mutableDateTime1.addDays(222);
        org.joda.time.DateTimeField dateTimeField28 = mutableDateTime1.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(350);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 350 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.558Z" + "'", str22, "2022-02-11T00:01:37.558Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(dateTimeField28);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        int int3 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        mutableDateTime12.setZoneRetainFields(dateTimeZone23);
        mutableDateTime5.setZone(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int33 = dateTimeField31.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        mutableDateTime43.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        mutableDateTime43.setRounding(dateTimeField51);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = dateTimeField51.getAsShortText((int) (byte) 1, locale55);
        java.lang.String str57 = property37.getAsShortText(locale55);
        java.lang.String str58 = dateTimeField31.getAsShortText(1L, locale55);
        java.util.Set<java.lang.Character> charSet59 = locale55.getExtensionKeys();
        java.lang.String str60 = dateTimeZone23.getShortName((long) 6, locale55);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime1.toMutableDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-11T09:41:10.716Z", dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime62.setDateTime(35169286, 34852, 74701, 74544, 254, 690, 193);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74544 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 571 + "'", int10 == 571);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:22.571Z" + "'", str16, "2022-02-11T09:46:22.571Z");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "vendredi" + "'", str39, "vendredi");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven." + "'", str57, "ven.");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(charSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long9 = dateTimeParserBucket5.computeMillis(true, "237");
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 645);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int13 = dateTimeField12.getMaximumValue();
        int int16 = dateTimeField12.getDifference((long) 10, (long) 'a');
        int int18 = dateTimeField12.getLeapAmount((-1L));
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = dateTimeField12.getAsText((long) 340, locale20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = dateTimeField12.getAsShortText((int) '4', locale23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField12.getAsText(readablePartial25, 292278993, locale27);
        java.lang.String str29 = mutableDateTime1.toString("237", locale27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        mutableDateTime31.setZoneRetainFields(dateTimeZone43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        boolean boolean51 = mutableDateTime46.isSupported(dateTimeFieldType50);
        int int52 = mutableDateTime31.get(dateTimeFieldType50);
        boolean boolean53 = mutableDateTime1.isSupported(dateTimeFieldType50);
        mutableDateTime1.setWeekyear(74439);
        org.joda.time.DateTime dateTime56 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        boolean boolean60 = mutableDateTime58.isEqual(readableInstant59);
        int int61 = mutableDateTime58.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime58.set(dateTimeFieldType62, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        int int66 = mutableDateTime58.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime67 = mutableDateTime58.toDateTime();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        int int72 = mutableDateTime69.getHourOfDay();
        mutableDateTime69.addYears(0);
        mutableDateTime58.setDate((org.joda.time.ReadableInstant) mutableDateTime69);
        int int76 = mutableDateTime58.getEra();
        int int77 = mutableDateTime58.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = null;
        java.lang.String str79 = mutableDateTime58.toString(dateTimeFormatter78);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime58.minuteOfHour();
        boolean boolean82 = property80.equals((java.lang.Object) 369);
        org.joda.time.DateTimeField dateTimeField83 = property80.getField();
        int int84 = dateTime56.get(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 678 + "'", int6 == 678);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "52" + "'", str24, "52");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "292278993" + "'", str28, "292278993");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "237" + "'", str29, "237");
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-11T00:01:37.678Z" + "'", str79, "2022-02-11T00:01:37.678Z");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.toMutableDateTime();
        mutableDateTime16.addWeekyears(32519953);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:22.707Z" + "'", str5, "2022-02-11T09:46:22.707Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfMonth(985);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 985 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.hourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeFormatter19.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatter19.getParser();
        boolean boolean22 = dateTimeFormatter19.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter19.withOffsetParsed();
        int int24 = dateTimeFormatter19.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter19.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withLocale(locale28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        java.lang.String str47 = dateTimeZone46.toString();
        org.joda.time.DateTime dateTime48 = mutableDateTime31.toDateTime(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter26.withZone(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter26.getZone();
        boolean boolean51 = dateTimeFormatter26.isParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = mutableDateTime1.toString(dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(dateTimeZone20);
        org.junit.Assert.assertNull(dateTimeParser21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.lang.String str5 = property2.getAsText();
        java.lang.String str6 = property2.toString();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundCeiling();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology15.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.era();
        int int21 = mutableDateTime7.get(dateTimeField20);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfDay(74508);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74508 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vendredi" + "'", str5, "vendredi");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfWeek]" + "'", str6, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 257);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        mutableDateTime1.setYear(59);
        int int9 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35182777 + "'", int4 == 35182777);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add(41);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        int int14 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = mutableDateTime16.toString(dateTimeFormatter19);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str29 = dateTimeZone27.getNameKey((long) (byte) 0);
        mutableDateTime16.setZoneRetainFields(dateTimeZone27);
        mutableDateTime9.setZone(dateTimeZone27);
        long long33 = dateTimeZone27.previousTransition((long) 852);
        mutableDateTime7.setZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.set(dateTimeFieldType36, 993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 788 + "'", int14 == 788);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:46:22.788Z" + "'", str20, "2022-02-11T09:46:22.788Z");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 852L + "'", long33 == 852L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addWeekyears((-2));
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = property11.compareTo(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 779L + "'", long8 == 779L);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        mutableDateTime1.setZone(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(74736152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74736152 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone16);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 9, 59);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket6.saveField(dateTimeFieldType8, 59);
        long long12 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket6.getChronology();
        java.util.Locale locale16 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology13, locale16, (java.lang.Integer) 617);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.DurationField durationField25 = dateTimeField24.getDurationField();
        boolean boolean27 = dateTimeField24.isLeap((long) (short) -1);
        java.lang.String str29 = dateTimeField24.getAsShortText((long) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        int int36 = dateTimeField32.getDifference((long) 10, (long) 'a');
        int int38 = dateTimeField32.getLeapAmount((-1L));
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = dateTimeField32.getAsText((long) 340, locale40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = dateTimeField32.getAsShortText((int) '4', locale43);
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale47 = java.util.Locale.UK;
        java.lang.String str48 = dateTimeField32.getAsText(readablePartial45, 292278993, locale47);
        int int49 = dateTimeField24.getMaximumTextLength(locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String str52 = locale47.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str54 = locale50.getScript();
        java.lang.String str55 = dateTimeField20.getAsText((-62141731199838L), locale50);
        java.lang.String str56 = locale50.getScript();
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = locale50.getDisplayCountry(locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60305299200000L) + "'", long12 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "52" + "'", str44, "52");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "292278993" + "'", str48, "292278993");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u661f\u671f\u65e5" + "'", str55, "\u661f\u671f\u65e5");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        int int10 = mutableDateTime4.getSecondOfDay();
        mutableDateTime4.setSecondOfDay((int) (byte) 0);
        boolean boolean13 = property1.equals((java.lang.Object) mutableDateTime4);
        java.lang.String str14 = property1.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property1.getFieldType();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74782 + "'", int10 == 74782);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "yearOfEra" + "'", str14, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology8);
        int int17 = mutableDateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addMinutes(135);
        int int9 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTimeISO();
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        int int12 = dateTime10.getYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572782919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=22,MILLISECOND=919,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime1.add(durationFieldType4, 103);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(144, 120, 709, 74644);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 144 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DurationField durationField35 = chronology28.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.weekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.hourOfHalfday();
        mutableDateTime1.setChronology(chronology28);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime1.monthOfYear();
        int int40 = property39.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundCeiling();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfCeiling();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        int int27 = mutableDateTime22.getMillisOfSecond();
        mutableDateTime22.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        int int37 = dateTimeField33.getDifference((long) 10, (long) 'a');
        int int39 = dateTimeField33.getLeapAmount((-1L));
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = dateTimeField33.getAsText((long) 340, locale41);
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = dateTimeField33.getAsShortText((int) '4', locale44);
        org.joda.time.ReadablePartial readablePartial46 = null;
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTimeField33.getAsText(readablePartial46, 292278993, locale48);
        java.lang.String str50 = mutableDateTime22.toString("237", locale48);
        java.util.Locale.Builder builder51 = builder20.setLocale(locale48);
        java.util.Set<java.lang.Character> charSet52 = locale48.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 35570, chronology16, locale48, (java.lang.Integer) 287, 327);
        boolean boolean56 = locale48.hasExtensions();
        java.lang.String str57 = locale48.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime58 = property12.set("2022-02-11T00:01:37.972Z", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T00:01:37.972Z\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 249 + "'", int6 == 249);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 250 + "'", int27 == 250);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "52" + "'", str45, "52");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "292278993" + "'", str49, "292278993");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "237" + "'", str50, "237");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "anglais (Royaume-Uni)" + "'", str57, "anglais (Royaume-Uni)");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, 5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.addSeconds((-292275054));
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        java.util.Locale locale35 = locale31.stripExtensions();
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = mutableDateTime11.toString("842", locale35);
        boolean boolean38 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        int int39 = mutableDateTime11.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74783 + "'", int17 == 74783);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "842" + "'", str37, "842");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.minuteOfHour();
        int int4 = property3.getMaximumValue();
        boolean boolean5 = property3.isLeap();
        org.joda.time.MutableDateTime mutableDateTime7 = property3.add((long) 560);
        boolean boolean9 = property3.equals((java.lang.Object) 1644784934782L);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        mutableDateTime0.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.weekyear();
        int int24 = property23.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundHalfFloor();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = mutableDateTime27.toDateTime();
        java.util.Locale locale37 = null;
        java.util.Calendar calendar38 = mutableDateTime27.toCalendar(locale37);
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime27.getZone();
        int int40 = mutableDateTime27.getMillisOfDay();
        boolean boolean41 = mutableDateTime25.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime27.isEqual(readableInstant42);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572783316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=23,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:46:23.316Z" + "'", str11, "2022-02-11T09:46:23.316Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644537697316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97316 + "'", int40 == 97316);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar4 = mutableDateTime1.toCalendar(locale3);
        mutableDateTime1.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int10 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        java.util.Date date21 = mutableDateTime12.toDate();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        long long33 = dateTimeParserBucket29.computeMillis(true, "237");
        dateTimeParserBucket29.setOffset((java.lang.Integer) 74409);
        int int36 = dateTimeParserBucket29.getOffset();
        boolean boolean37 = dateTimeZone22.equals((java.lang.Object) dateTimeParserBucket29);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((-74409L), dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getRangeDurationType();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        long long49 = dateTimeParserBucket46.computeMillis(true);
        org.joda.time.Chronology chronology50 = dateTimeParserBucket46.getChronology();
        org.joda.time.Chronology chronology51 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.yearOfEra();
        boolean boolean53 = durationFieldType40.isSupported(chronology50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.add(durationFieldType40, 74493);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572783334,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=23,MILLISECOND=334,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 74409 + "'", int36 == 74409);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTimeZone47);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.Chronology chronology14 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        int int26 = mutableDateTime17.getWeekOfWeekyear();
        org.joda.time.Instant instant27 = mutableDateTime17.toInstant();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime17.weekyear();
        int int29 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime17.minuteOfDay();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyear();
        org.joda.time.DurationField durationField41 = chronology38.halfdays();
        org.joda.time.DurationField durationField42 = chronology38.days();
        mutableDateTime17.setChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 74465, chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(74607, (-72464), 34859, 22407, 799, 34881, 34983280, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22407 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        java.io.IOException iOException2 = new java.io.IOException("chinois");
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable5);
        java.lang.Throwable throwable8 = null;
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable8);
        iOException6.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException11 = new java.io.IOException("French", (java.lang.Throwable) iOException6);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        iOException2.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException16 = new java.io.IOException("2022-02-11T09:41:05.610Z", (java.lang.Throwable) iOException2);
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable20);
        java.lang.Throwable throwable23 = null;
        java.io.IOException iOException24 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable23);
        iOException21.addSuppressed((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException("2022-02-11T09:40:17.701Z", (java.lang.Throwable) iOException21);
        java.io.IOException iOException27 = new java.io.IOException("hourOfDay", (java.lang.Throwable) iOException21);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        iOException16.addSuppressed((java.lang.Throwable) iOException27);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(34850849);
        org.joda.time.MutableDateTime mutableDateTime38 = property34.add((long) 785);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean47 = mutableDateTime40.isSupported(dateTimeFieldType46);
        int int48 = mutableDateTime40.getCenturyOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        int int57 = mutableDateTime50.getEra();
        mutableDateTime50.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime50);
        mutableDateTime40.setTime((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime40.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundFloor();
        long long64 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35183527 + "'", int28 == 35183527);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 34851634L + "'", long64 == 34851634L);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.millisOfSecond();
        java.util.Locale locale27 = null;
        int int28 = property26.getMaximumTextLength(locale27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.625Z" + "'", str22, "2022-02-11T00:01:37.625Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        mutableDateTime1.setZone(dateTimeZone16);
        int int18 = mutableDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology19 = mutableDateTime1.getChronology();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology19.get(readablePeriod20, (long) 710);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        long long28 = dateTimeZone22.convertLocalToUTC((long) 81846, true, 34902694L);
        long long30 = dateTimeZone22.nextTransition((long) 34950367);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 81846L + "'", long28 == 81846L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 34950367L + "'", long30 == 34950367L);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        java.lang.String str4 = property3.getAsText();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        boolean boolean11 = mutableDateTime6.isSupported(dateTimeFieldType10);
        mutableDateTime6.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        long long22 = dateTimeParserBucket19.computeMillis(true);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket19.getChronology();
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime6.toMutableDateTime(chronology24);
        org.joda.time.Instant instant27 = mutableDateTime6.toInstant();
        mutableDateTime6.addWeeks(74449);
        boolean boolean30 = property3.equals((java.lang.Object) mutableDateTime6);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = null;
        java.lang.String str36 = mutableDateTime32.toString(dateTimeFormatter35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.Chronology chronology39 = null;
        mutableDateTime38.setChronology(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = mutableDateTime42.toString(dateTimeFormatter45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.weekOfWeekyear();
        org.joda.time.Chronology chronology48 = mutableDateTime42.getChronology();
        mutableDateTime38.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime42.add(readableDuration50);
        int int52 = mutableDateTime32.compareTo((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime32);
        boolean boolean55 = mutableDateTime6.isAfter(1643380062000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(156, 0, 272, 983, (-74414113), 572, 34893364);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 983 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:46:23.708Z" + "'", str36, "2022-02-11T09:46:23.708Z");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:46:23.708Z" + "'", str46, "2022-02-11T09:46:23.708Z");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        boolean boolean7 = property6.isLeap();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField12.getAsShortText(1L, locale36);
        int int40 = dateTimeField12.getMaximumValue();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.days();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology64, locale66, (java.lang.Integer) 2022);
        java.util.Locale locale70 = locale66.stripExtensions();
        java.lang.String str71 = locale70.getISO3Language();
        java.lang.String str72 = dateTimeField53.getAsText(readablePartial54, 842, locale70);
        int int73 = dateTimeField12.getMaximumShortTextLength(locale70);
        java.util.Locale.setDefault(category9, locale70);
        java.lang.String str75 = locale70.getScript();
        org.joda.time.Chronology chronology78 = null;
        java.util.Locale locale79 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(0L, chronology78, locale79, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone83 = dateTimeParserBucket82.getZone();
        org.joda.time.Chronology chronology84 = dateTimeParserBucket82.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.hourOfHalfday();
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        java.lang.String str87 = locale86.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology84, locale86, (java.lang.Integer) 2022);
        java.util.Locale locale90 = locale86.stripExtensions();
        java.lang.String str91 = locale90.getScript();
        java.lang.String str92 = locale90.getISO3Language();
        java.lang.String str93 = locale90.getScript();
        java.util.Locale locale94 = locale90.stripExtensions();
        java.lang.String str95 = locale70.getDisplayCountry(locale90);
        java.lang.String str96 = property6.getAsText(locale90);
        java.lang.String str97 = locale90.getISO3Country();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572783778,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=23,MILLISECOND=778,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "842" + "'", str72, "842");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fra" + "'", str92, "fra");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "41183778" + "'", str96, "41183778");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        boolean boolean15 = dateTimeField13.isLeap(319L);
        java.lang.String str17 = dateTimeField13.getAsShortText((long) 708);
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int22 = dateTimeField21.getMaximumValue();
        int int25 = dateTimeField21.getDifference((long) 10, (long) 'a');
        int int27 = dateTimeField21.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial28 = null;
        int[] intArray35 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int36 = dateTimeField21.getMinimumValue(readablePartial28, intArray35);
        org.joda.time.DurationField durationField37 = dateTimeField21.getRangeDurationField();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology46, locale48, (java.lang.Integer) 2022);
        java.util.Locale locale52 = locale48.stripExtensions();
        int int53 = dateTimeField21.getMaximumShortTextLength(locale48);
        org.joda.time.ReadablePartial readablePartial54 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        int int62 = dateTimeField58.getDifference((long) 10, (long) 'a');
        int int64 = dateTimeField58.getLeapAmount((-1L));
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = dateTimeField58.getAsText((long) 340, locale66);
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType69.getField(chronology70);
        int int72 = dateTimeField71.getMaximumValue();
        int int75 = dateTimeField71.getDifference((long) 10, (long) 'a');
        int int77 = dateTimeField71.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial78 = null;
        int[] intArray85 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int86 = dateTimeField71.getMinimumValue(readablePartial78, intArray85);
        int int87 = dateTimeField58.getMinimumValue(readablePartial68, intArray85);
        int[] intArray89 = dateTimeField21.add(readablePartial54, 292278993, intArray85, 0);
        int int90 = dateTimeField13.getMinimumValue(readablePartial18, intArray85);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 59 + "'", int72 == 59);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 59 + "'", int77 == 59);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.DateTimeField dateTimeField26 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology9.getDateTimeMillis(314, 192, 74514, 57478764);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 192 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.util.Locale locale2 = new java.util.Locale("JPN", "2022-02-11T09:42:14.912Z");
        org.junit.Assert.assertEquals(locale2.toString(), "jpn_2022-02-11T09:42:14.912Z");
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9, 43);
        int int12 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.minuteOfHour();
        int int14 = property13.getMaximumValueOverall();
        boolean boolean15 = property13.isLeap();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundCeiling();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 865 + "'", int6 == 865);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.monthOfYear();
        dateTimeParserBucket5.saveField(dateTimeField17, 993);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology27.weekyear();
        int int34 = dateTimeField33.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial35 = null;
        int int36 = dateTimeField33.getMinimumValue(readablePartial35);
        boolean boolean37 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeField33);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeField33.set((long) 631, "2832-02-11T09:45:55.439Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2832-02-11T09:45:55.439Z\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 292278993 + "'", int34 == 292278993);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-292275054) + "'", int36 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        long long15 = chronology7.add((long) 205, (long) 74411, 664);
        org.joda.time.DateTimeField dateTimeField16 = chronology7.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfDay();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int[] intArray48 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int49 = dateTimeField41.getMinimumValue(readablePartial42, intArray48);
        int[] intArray51 = dateTimeField29.addWrapPartial(readablePartial30, 6, intArray48, 0);
        // The following exception was thrown during execution in test generation
        try {
            chronology7.validate(readablePartial17, intArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 49409109L + "'", long15 == 49409109L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1, 237, 0, 1, -1]");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        java.util.Locale locale14 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology8, locale14);
        org.joda.time.Chronology chronology16 = dateTimeParserBucket15.getChronology();
        org.joda.time.ReadablePartial readablePartial17 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology16.set(readablePartial17, 10522310497445L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.ReadablePartial readablePartial11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = dateTimeFormatter10.print(readablePartial11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = null; // flaky: org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long28 = 0L; // flaky: dateTimeZone25.adjustOffset((-1404779350L), false);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1404779350L) + "'", long28 == (-1404779350L));
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology22);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572783962,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=23,MILLISECOND=962,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology38);
        int int41 = mutableDateTime40.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField44.getAsShortText(0L, locale47);
        mutableDateTime40.setRounding(dateTimeField44);
        mutableDateTime40.addDays(627);
        java.lang.String str53 = mutableDateTime40.toString();
        java.util.Date date54 = mutableDateTime40.toDate();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime40.addYears(34833);
        int int58 = mutableDateTime40.getHourOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697018,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=18,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2023-10-31T09:46:24.000Z" + "'", str53, "2023-10-31T09:46:24.000Z");
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Oct 31 09:46:24 UTC 2023");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.lang.String str12 = locale11.getScript();
        int int13 = dateTimeField10.getMaximumTextLength(locale11);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String str17 = dateTimeField10.getAsText((long) 4, locale15);
        boolean boolean18 = dateTimeField10.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeField10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = dateTimeField22.getAsText(readablePartial23, 842, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale39, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime45.getZone();
        long long54 = dateTimeZone52.nextTransition((long) 59);
        java.lang.String str56 = dateTimeZone52.getName((long) (short) 0);
        dateTimeParserBucket43.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        org.joda.time.Chronology chronology65 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.minuteOfDay();
        org.joda.time.DurationField durationField69 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.halfdayOfDay();
        dateTimeParserBucket43.saveField(dateTimeField70, 670);
        int int74 = dateTimeField70.get((-350874189297L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "842" + "'", str41, "842");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 59L + "'", long54 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime32 = property1.roundCeiling();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.minuteOfHour();
        mutableDateTime34.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.addWrapField(0);
        boolean boolean46 = mutableDateTime34.isAfter((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        mutableDateTime49.addHours(59);
        org.joda.time.Chronology chronology54 = mutableDateTime49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = chronology54.getZone();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology54, locale56);
        org.joda.time.Chronology chronology58 = dateTimeParserBucket57.getChronology();
        mutableDateTime45.setChronology(chronology58);
        boolean boolean60 = mutableDateTime32.isAfter((org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572784092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = mutableDateTime3.get(dateTimeFieldType10);
        org.joda.time.Instant instant12 = mutableDateTime3.toInstant();
        mutableDateTime3.addDays((int) ' ');
        java.util.Date date15 = mutableDateTime3.toDate();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology17 = null;
        boolean boolean18 = durationFieldType16.isSupported(chronology17);
        mutableDateTime3.add(durationFieldType16, 902);
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField35 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = chronology29.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology29.minutes();
        boolean boolean38 = durationFieldType16.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology29.hourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeFormatter44.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatter44.getParser();
        boolean boolean47 = dateTimeFormatter44.isParser();
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        boolean boolean49 = locale48.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter44.withLocale(locale48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter44.withPivotYear(34821173);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType53.getField(chronology54);
        int int57 = dateTimeField55.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.dayOfWeek();
        java.util.Locale locale62 = null;
        java.lang.String str63 = property61.getAsText(locale62);
        java.util.Locale locale64 = null;
        int int65 = property61.getMaximumTextLength(locale64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        int int70 = mutableDateTime67.getHourOfDay();
        mutableDateTime67.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType73.getField(chronology74);
        int int76 = dateTimeField75.getMaximumValue();
        mutableDateTime67.setRounding(dateTimeField75);
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = dateTimeField75.getAsShortText((int) (byte) 1, locale79);
        java.lang.String str81 = property61.getAsShortText(locale79);
        java.lang.String str82 = dateTimeField55.getAsShortText(1L, locale79);
        java.lang.String str83 = locale79.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter84 = dateTimeFormatter44.withLocale(locale79);
        java.lang.String str85 = locale79.getDisplayName();
        java.util.Locale locale86 = java.util.Locale.UK;
        java.lang.String str87 = locale79.getDisplayLanguage(locale86);
        java.lang.String str88 = dateTimeField40.getAsShortText(728, locale79);
        boolean boolean89 = dateTimeField40.isSupported();
        long long91 = dateTimeField40.roundHalfCeiling((long) 2025);
        mutableDateTime0.setRounding(dateTimeField40);
        mutableDateTime0.addDays(51);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Mar 15 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNull(dateTimeZone45);
        org.junit.Assert.assertNull(dateTimeParser46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "vendredi" + "'", str63, "vendredi");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ven." + "'", str81, "ven.");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fran\347ais" + "'", str85, "fran\347ais");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "French" + "'", str87, "French");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "728" + "'", str88, "728");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        mutableDateTime8.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        mutableDateTime8.setRounding(dateTimeField16);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = dateTimeField16.getAsShortText((int) (byte) 1, locale20);
        java.lang.String str22 = property2.getAsShortText(locale20);
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale20.getDisplayScript(locale23);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale20.getDisplayLanguage(locale26);
        java.util.Locale.setDefault(locale20);
        java.lang.String str29 = locale20.getCountry();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.minuteOfHour();
        int int37 = mutableDateTime31.getSecondOfDay();
        mutableDateTime31.addMinutes(59);
        int int40 = mutableDateTime31.getYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = mutableDateTime42.toString(dateTimeFormatter45);
        int int47 = mutableDateTime42.getMonthOfYear();
        mutableDateTime31.setMillis((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime31.minuteOfHour();
        int int50 = property49.getLeapAmount();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        int int57 = dateTimeField53.getDifference((long) 10, (long) 'a');
        int int59 = dateTimeField53.getLeapAmount((-1L));
        java.util.Locale locale61 = java.util.Locale.ITALY;
        java.lang.String str62 = dateTimeField53.getAsText((long) 340, locale61);
        java.util.Locale locale64 = java.util.Locale.UK;
        java.lang.String str65 = dateTimeField53.getAsShortText((int) '4', locale64);
        org.joda.time.ReadablePartial readablePartial66 = null;
        java.util.Locale locale68 = java.util.Locale.UK;
        java.lang.String str69 = dateTimeField53.getAsText(readablePartial66, 292278993, locale68);
        java.util.Locale locale70 = locale68.stripExtensions();
        java.lang.String str71 = locale70.getDisplayScript();
        java.lang.String str72 = property49.getAsShortText(locale70);
        java.lang.String str73 = locale20.getDisplayVariant(locale70);
        java.util.Locale locale74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = locale70.getDisplayLanguage(locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ven." + "'", str22, "ven.");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French" + "'", str27, "French");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 74784 + "'", int37 == 74784);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:46:24.155Z" + "'", str46, "2022-02-11T09:46:24.155Z");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "52" + "'", str65, "52");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "292278993" + "'", str69, "292278993");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "46" + "'", str72, "46");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        int int14 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        boolean boolean17 = property16.isLeap();
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) property16);
        int int19 = property16.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 366 + "'", int19 == 366);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        java.lang.String str5 = property3.getAsString();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar9 = mutableDateTime6.toCalendar(locale8);
        mutableDateTime6.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = mutableDateTime13.toString(dateTimeFormatter16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        mutableDateTime13.setZoneRetainFields(dateTimeZone24);
        mutableDateTime6.setZone(dateTimeZone24);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime6.weekyear();
        boolean boolean30 = property29.isLeap();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology39, locale41, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.secondOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = dateTimeField50.getAsShortText(0L, locale53);
        boolean boolean56 = dateTimeField50.isLenient();
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime60.set(dateTimeFieldType64, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        int int68 = mutableDateTime60.get(dateTimeFieldType67);
        int int69 = mutableDateTime60.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.yearOfEra();
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar73 = mutableDateTime70.toCalendar(locale72);
        java.util.Calendar calendar74 = mutableDateTime60.toCalendar(locale72);
        java.lang.String str75 = dateTimeField50.getAsShortText(readablePartial57, (int) ' ', locale72);
        java.lang.String str76 = dateTimeField46.getAsText(224, locale72);
        java.lang.String str77 = locale72.toLanguageTag();
        int int78 = property29.getMaximumTextLength(locale72);
        java.lang.String str79 = property3.getAsShortText(locale72);
        java.lang.Object obj80 = locale72.clone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022" + "'", str5, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572784186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:46:24.186Z" + "'", str17, "2022-02-11T09:46:24.186Z");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "UTC" + "'", str26, "UTC");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572784186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1644537697186,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=186,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "32" + "'", str75, "32");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "224" + "'", str76, "224");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "zh-TW" + "'", str77, "zh-TW");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 9 + "'", int78 == 9);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "zh_TW");
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getDayOfMonth();
        int int23 = mutableDateTime4.getYear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 220 + "'", int9 == 220);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        java.lang.String str24 = dateTimeField19.getAsShortText(0L, locale22);
        boolean boolean25 = dateTimeField19.isLenient();
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        int int38 = mutableDateTime29.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar42 = mutableDateTime39.toCalendar(locale41);
        java.util.Calendar calendar43 = mutableDateTime29.toCalendar(locale41);
        java.lang.String str44 = dateTimeField19.getAsShortText(readablePartial26, (int) ' ', locale41);
        java.lang.String str45 = dateTimeField15.getAsText(224, locale41);
        java.util.Set<java.lang.Character> charSet46 = locale41.getExtensionKeys();
        java.lang.String str47 = locale41.getVariant();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572784235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644537697235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32" + "'", str44, "32");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "224" + "'", str45, "224");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getDayOfWeek();
        mutableDateTime1.addYears(810);
        boolean boolean7 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime7.toMutableDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.lang.String str21 = property20.getAsText();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property20.getFieldType();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfHour();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        boolean boolean35 = dateTimeFieldType24.isSupported(chronology32);
        mutableDateTime18.setChronology(chronology32);
        org.joda.time.DurationField durationField37 = chronology32.millis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572784260,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        java.util.Locale locale5 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.addUnicodeLocaleAttribute("2022-02-11T09:41:12.693Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:41:12.693Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        mutableDateTime1.setSecondOfDay(74439);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(74432048, 0, 57464236, 70, 1404780000, 74501, 481);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785184342L + "'", long9 == 1644785184342L);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType5.getDurationType();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.Chronology chronology19 = chronology16.withUTC();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 755, chronology19);
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.clockhourOfDay();
        org.joda.time.DurationField durationField23 = durationFieldType8.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime27.minuteOfHour();
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfDay();
        java.util.Locale locale43 = java.util.Locale.UK;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfWeek();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        mutableDateTime52.setRounding(dateTimeField60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = dateTimeField60.getAsShortText((int) (byte) 1, locale64);
        java.lang.String str66 = property46.getAsShortText(locale64);
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.lang.String str68 = locale67.getScript();
        java.lang.String str69 = locale64.getDisplayScript(locale67);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale64.getDisplayLanguage(locale70);
        java.lang.String str72 = locale43.getDisplayCountry(locale70);
        java.lang.String str73 = dateTimeField41.getAsText(214, locale70);
        java.lang.String str74 = property29.getAsText(locale70);
        boolean boolean75 = locale70.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTimeField24.getAsText(1736, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1736");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "vendredi" + "'", str48, "vendredi");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ven." + "'", str66, "ven.");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French" + "'", str71, "French");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "United Kingdom" + "'", str72, "United Kingdom");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "214" + "'", str73, "214");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "46" + "'", str74, "46");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime(chronology25);
        int int29 = mutableDateTime18.getDayOfWeek();
        mutableDateTime18.setMillisOfDay(2302);
        int int32 = mutableDateTime18.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 302 + "'", int32 == 302);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar22 = mutableDateTime19.toCalendar(locale21);
        mutableDateTime19.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.millisOfDay();
        int int26 = mutableDateTime19.getDayOfWeek();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.setMillisOfDay(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean38 = mutableDateTime31.isSupported(dateTimeFieldType37);
        int int39 = mutableDateTime31.getCenturyOfEra();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        mutableDateTime31.setZone(dateTimeZone46);
        mutableDateTime19.setZoneRetainFields(dateTimeZone46);
        long long51 = dateTimeZone46.adjustOffset(1644784905354L, true);
        org.joda.time.Chronology chronology52 = chronology10.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField53 = chronology10.yearOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 447 + "'", int6 == 447);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572784447,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=447,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644784905354L + "'", long51 == 1644784905354L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType49.getField(chronology63);
        long long70 = dateTimeField67.getDifferenceAsLong((long) 390, (long) 202);
        long long72 = dateTimeField67.roundHalfEven((long) 74422);
        boolean boolean74 = dateTimeField67.isLeap((long) 788);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 60000L + "'", long72 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology34, locale36, (java.lang.Integer) 2022);
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = dateTimeField23.getAsText(readablePartial24, 842, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology9, locale40, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime46.getZone();
        long long55 = dateTimeZone53.nextTransition((long) 59);
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0);
        dateTimeParserBucket44.setZone(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 97018, dateTimeZone53);
        org.joda.time.DateTime dateTime61 = mutableDateTime60.toDateTime();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime60.yearOfEra();
        boolean boolean64 = mutableDateTime60.isBefore((long) 74749093);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "842" + "'", str42, "842");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 59L + "'", long55 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime0.add(durationFieldType3, 642);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        org.joda.time.Chronology chronology22 = mutableDateTime7.getChronology();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        int int27 = dateTimeZone24.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) 161);
        long long32 = dateTimeZone24.nextTransition((long) 34833543);
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone24);
        boolean boolean34 = durationFieldType3.isSupported(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        mutableDateTime36.setZoneRetainFields(dateTimeZone48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        boolean boolean56 = mutableDateTime51.isSupported(dateTimeFieldType55);
        int int57 = mutableDateTime36.get(dateTimeFieldType55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        mutableDateTime59.addHours(59);
        org.joda.time.Chronology chronology64 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = chronology64.getZone();
        boolean boolean66 = dateTimeFieldType55.isSupported(chronology64);
        org.joda.time.DurationField durationField67 = durationFieldType3.getField(chronology64);
        org.joda.time.Chronology chronology68 = chronology64.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = chronology64.minuteOfHour();
        org.joda.time.Chronology chronology70 = chronology64.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long78 = chronology64.getDateTimeMillis(35171857, 74773016, 214, 35169576, 970, 22407, 34908298);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35169576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:46:24.564Z" + "'", str11, "2022-02-11T09:46:24.564Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 34833543L + "'", long32 == 34833543L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology70);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        org.joda.time.DurationField durationField20 = property19.getDurationField();
        int int21 = property19.getLeapAmount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74784 + "'", int7 == 74784);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:24.581Z" + "'", str16, "2022-02-11T09:46:24.581Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        boolean boolean14 = dateTimeFormatter13.isPrinter();
        int int15 = dateTimeFormatter13.getDefaultYear();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.275Z");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfYear();
        org.joda.time.ReadablePartial readablePartial12 = null;
        int[] intArray18 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int19 = dateTimeField11.getMinimumValue(readablePartial12, intArray18);
        boolean boolean21 = dateTimeField11.isLeap((long) 74415);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str35 = locale34.getScript();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        java.lang.String str37 = dateTimeField11.getAsShortText((long) 34816672, locale34);
        java.util.Set<java.lang.Character> charSet38 = locale34.getExtensionKeys();
        java.lang.String str39 = locale1.getDisplayScript(locale34);
        java.util.Set<java.lang.Character> charSet40 = locale34.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(48966019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48966019 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology16 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer18 = null;
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer18, readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.Instant instant8 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        long long18 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        boolean boolean21 = dateTimeParserBucket15.restoreState((java.lang.Object) property20);
        int int22 = property20.getMinimumValueOverall();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        int int31 = mutableDateTime24.getEra();
        boolean boolean32 = mutableDateTime24.isEqualNow();
        int int33 = property20.getDifference((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.addSeconds(11);
        boolean boolean36 = mutableDateTime1.equals((java.lang.Object) 11);
        int int37 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = property38.set("Royaume-Uni");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Royaume-Uni\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 708 + "'", int37 == 708);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        int int17 = mutableDateTime1.getCenturyOfEra();
        java.lang.String str18 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2033-02-11T09:46:23.000Z" + "'", str18, "2033-02-11T09:46:23.000Z");
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime1.add(readablePeriod40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.minuteOfDay();
        java.lang.String str52 = chronology49.toString();
        mutableDateTime1.setChronology(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.year();
        org.joda.time.DurationField durationField55 = chronology49.hours();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:46:24.742Z" + "'", str31, "2022-02-11T09:46:24.742Z");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withLocale(locale10);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 34929238);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeFormatter16.parseMillis("2022-02-11T09:41:26.594-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType12.getDurationType();
        int int16 = mutableDateTime1.get(dateTimeFieldType12);
        java.lang.String str17 = dateTimeFieldType12.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74784 + "'", int16 == 74784);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "secondOfDay" + "'", str17, "secondOfDay");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        int int22 = mutableDateTime20.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime20.add(durationFieldType23, 642);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        org.joda.time.Chronology chronology42 = mutableDateTime27.getChronology();
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        int int47 = dateTimeZone44.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(dateTimeZone44);
        int int50 = dateTimeZone44.getOffsetFromLocal((long) 161);
        long long52 = dateTimeZone44.nextTransition((long) 34833543);
        org.joda.time.Chronology chronology53 = chronology42.withZone(dateTimeZone44);
        boolean boolean54 = durationFieldType23.isSupported(chronology53);
        mutableDateTime19.setChronology(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        long long59 = dateTimeField56.roundCeiling((long) 34878113);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:46:24.850Z" + "'", str31, "2022-02-11T09:46:24.850Z");
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 34833543L + "'", long52 == 34833543L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 36000000L + "'", long59 == 36000000L);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeFormatter8.parseMillis("2022-02-11T09:46:07.176Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime9.add(readablePeriod23, (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology33.halfdayOfDay();
        mutableDateTime9.setChronology(chronology33);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Chronology chronology41 = chronology33.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(obj7, chronology33);
        org.joda.time.DateTimeField dateTimeField43 = chronology33.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(872, 0, 34812612, 35169576, 600, 74626, 74737, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35169576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = mutableDateTime29.toDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addYears(0);
        mutableDateTime29.setDate((org.joda.time.ReadableInstant) mutableDateTime40);
        int int47 = mutableDateTime29.getEra();
        int int48 = mutableDateTime29.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = null;
        java.lang.String str50 = mutableDateTime29.toString(dateTimeFormatter49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime29.minuteOfHour();
        mutableDateTime29.addYears(237);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        mutableDateTime55.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int64 = dateTimeField63.getMaximumValue();
        mutableDateTime55.setRounding(dateTimeField63);
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.lang.String str68 = dateTimeField63.getAsShortText((int) (byte) 1, locale67);
        java.util.Calendar calendar69 = mutableDateTime29.toCalendar(locale67);
        java.util.Locale locale70 = locale67.stripExtensions();
        dateTimeParserBucket25.saveField(dateTimeFieldType26, "2022-02-11T09:40:27.022Z", locale70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        boolean boolean75 = mutableDateTime73.isEqual(readableInstant74);
        mutableDateTime73.addHours(59);
        org.joda.time.Chronology chronology78 = mutableDateTime73.getChronology();
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime73.copy();
        mutableDateTime73.setWeekyear(34812148);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType82.getField(chronology83);
        org.joda.time.DurationField durationField85 = dateTimeField84.getDurationField();
        boolean boolean87 = dateTimeField84.isLeap((long) (short) -1);
        java.lang.String str88 = dateTimeField84.getName();
        long long91 = dateTimeField84.getDifferenceAsLong((long) 74416, 0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = dateTimeField84.getType();
        int int93 = mutableDateTime73.get(dateTimeFieldType92);
        dateTimeParserBucket25.saveField(dateTimeFieldType92, 54);
        org.joda.time.DateTimeField dateTimeField96 = null;
        dateTimeParserBucket25.saveField(dateTimeField96, 2021);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T00:01:37.912Z" + "'", str50, "2022-02-11T00:01:37.912Z");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=9123494497912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=912,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "secondOfMinute" + "'", str88, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 74L + "'", long91 == 74L);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 24 + "'", int93 == 24);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        boolean boolean21 = durationFieldType11.isSupported(chronology19);
        mutableDateTime1.add(durationFieldType11, 964);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.minuteOfHour();
        org.joda.time.Chronology chronology37 = chronology31.withUTC();
        org.joda.time.DurationField durationField38 = chronology31.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField42 = chronology31.minuteOfHour();
        org.joda.time.DateTime dateTime43 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology31);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 936 + "'", int7 == 936);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572784936L + "'", long10 == 1644572784936L);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMinutes(422);
        int int16 = mutableDateTime1.getYearOfCentury();
        int int17 = mutableDateTime1.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 47 + "'", int16 == 47);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 29 + "'", int17 == 29);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        int int7 = mutableDateTime0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572784961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=24,MILLISECOND=961,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable4);
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) iOException5);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException8);
        java.lang.String str10 = iOException9.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: 2022-02-11T09:40:17.716Z" + "'", str10, "java.io.IOException: 2022-02-11T09:40:17.716Z");
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField15 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.yearOfCentury();
        int int18 = dateTimeField16.getLeapAmount(1644578530482L);
        long long21 = dateTimeField16.add((long) 2022, 186);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 5869584002022L + "'", long21 == 5869584002022L);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology7.add(readablePeriod16, (long) 166, 34824770);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime21.getZone();
        long long30 = dateTimeZone28.nextTransition((long) 59);
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0);
        java.lang.String str33 = dateTimeZone28.getID();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.yearOfCentury();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime43 = property39.add(41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.addHours(59);
        int int50 = mutableDateTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = mutableDateTime52.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) (byte) 0);
        mutableDateTime52.setZoneRetainFields(dateTimeZone63);
        mutableDateTime45.setZone(dateTimeZone63);
        long long69 = dateTimeZone63.previousTransition((long) 852);
        mutableDateTime43.setZone(dateTimeZone63);
        mutableDateTime43.addDays(74411);
        int int73 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Chronology chronology74 = chronology7.withZone(dateTimeZone28);
        java.lang.String str75 = chronology74.toString();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = chronology74.get(readablePeriod76, 1644538037483L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 166L + "'", long19 == 166L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 59L + "'", long30 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 27 + "'", int50 == 27);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:46:25.027Z" + "'", str56, "2022-02-11T09:46:25.027Z");
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 852L + "'", long69 == 852L);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[UTC]" + "'", str75, "ISOChronology[UTC]");
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean23 = dateTimeZone20.isStandardOffset((long) 930);
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.secondOfMinute();
        long long42 = chronology32.add(1835L, (long) 693, 12);
        org.joda.time.DateTime dateTime43 = mutableDateTime1.toDateTime(chronology32);
        int int44 = dateTime43.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.addWrapField(0);
        mutableDateTime48.setHourOfDay((int) (byte) 1);
        mutableDateTime48.addWeeks(568);
        int int53 = mutableDateTime48.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime48.toMutableDateTimeISO();
        boolean boolean55 = dateTime43.isEqual((org.joda.time.ReadableInstant) mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 72 + "'", int6 == 72);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10151L + "'", long42 == 10151L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        java.util.GregorianCalendar gregorianCalendar46 = mutableDateTime24.toGregorianCalendar();
        int int47 = mutableDateTime24.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setMillisOfSecond(35045000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35045000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 93 + "'", int29 == 93);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.Instant instant27 = mutableDateTime20.toInstant();
        boolean boolean28 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) instant27);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTime();
        int int31 = mutableDateTime30.getEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 107 + "'", int6 == 107);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyear();
        org.joda.time.DurationField durationField33 = chronology30.halfdays();
        org.joda.time.DurationField durationField34 = chronology30.days();
        mutableDateTime9.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology30.year();
        // The following exception was thrown during execution in test generation
        try {
            long long46 = chronology30.getDateTimeMillis(34882, 280, 962, 34904750, 75, 74519, 74728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34904750 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        java.util.Locale locale3 = new java.util.Locale("2022-03-15T00:01:37.480+390:13", "2022-02-11T00:01:37.306Z", "2022-02-11t09:41:20.409-00:00:00.001_924");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-03-15t00:01:37.480+390:13_2022-02-11T00:01:37.306Z_2022-02-11t09:41:20.409-00:00:00.001_924");
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:42:24.252Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:42:24.252z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.weekyear();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = property10.getAsShortText(locale11);
        java.lang.String str13 = locale11.getScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = new java.util.Locale("");
        java.lang.String str19 = locale15.getDisplayScript(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        int int24 = dateTimeField22.getMinimumValue((long) (short) 10);
        int int26 = dateTimeField22.getMaximumValue((long) 9);
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = dateTimeField22.getAsShortText(74409, locale28);
        java.lang.String str31 = locale28.getCountry();
        java.lang.String str32 = locale18.getDisplayLanguage(locale28);
        java.lang.String str33 = locale11.getDisplayCountry(locale18);
        boolean boolean34 = locale18.hasExtensions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str16, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "74409" + "'", str30, "74409");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "TW" + "'", str31, "TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime51.add(readableDuration75, 1736);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime51.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572785225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=25,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697224,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=224,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:46:25.225Z" + "'", str37, "2022-02-11T09:46:25.225Z");
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime3.toMutableDateTime();
        int int10 = mutableDateTime9.getEra();
        mutableDateTime9.addSeconds(0);
        boolean boolean13 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime14 = mutableDateTime9.toDateTime();
        org.joda.time.DateTime dateTime15 = mutableDateTime9.toDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter18.getZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        java.lang.String str28 = dateTimeZone27.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter18.withZone(dateTimeZone27);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter18.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter18.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = mutableDateTime35.toString(dateTimeFormatter38);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (byte) 0);
        mutableDateTime35.setZoneRetainFields(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone46.isLocalDateTimeGap(localDateTime50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter33.withZone(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withPivotYear((java.lang.Integer) 261);
        boolean boolean55 = dateTimeFormatter54.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTime15.toString(dateTimeFormatter54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimePrinter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:46:25.271Z" + "'", str39, "2022-02-11T09:46:25.271Z");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTC" + "'", str48, "UTC");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        int int6 = mutableDateTime1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 46 + "'", int6 == 46);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:45:52.098Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:45:52.098z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property2.getFieldType();
        java.lang.String str6 = property2.getAsText();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundCeiling();
        int int8 = mutableDateTime7.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set(74518);
        int int12 = property9.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.roundCeiling();
        int int14 = property9.getMaximumValue();
        java.lang.String str15 = property9.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "vendredi" + "'", str6, "vendredi");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "year" + "'", str15, "year");
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter2.getChronology();
        boolean boolean13 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.util.Calendar calendar41 = mutableDateTime1.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        mutableDateTime1.setMinuteOfDay(227);
        mutableDateTime1.setWeekyear(691);
        mutableDateTime1.setMillisOfDay(0);
        mutableDateTime1.setSecondOfDay(159);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.428Z" + "'", str22, "2022-02-11T00:01:37.428Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=9123494497428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("9");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 74427617, chronology9, locale19);
        org.joda.time.DateTimeField dateTimeField21 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField22 = chronology9.years();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addWeeks(580);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.dayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime36 = mutableDateTime35.toDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.millisOfDay();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        mutableDateTime39.addHours(59);
        int int44 = mutableDateTime39.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int46 = mutableDateTime39.get(dateTimeFieldType45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime39.minuteOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfWeek();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property50.getAsText(locale51);
        java.util.Locale locale53 = null;
        int int54 = property50.getMaximumTextLength(locale53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int65 = dateTimeField64.getMaximumValue();
        mutableDateTime56.setRounding(dateTimeField64);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = dateTimeField64.getAsShortText((int) (byte) 1, locale68);
        java.lang.String str70 = property50.getAsShortText(locale68);
        java.util.Calendar calendar71 = mutableDateTime39.toCalendar(locale68);
        int int72 = property37.getMaximumShortTextLength(locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology31, locale68, (java.lang.Integer) 664);
        java.lang.String str75 = locale68.getVariant();
        java.util.Locale.Category category76 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale77 = java.util.Locale.getDefault(category76);
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale83 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str84 = locale79.getDisplayLanguage(locale83);
        java.lang.String str85 = locale77.getDisplayCountry(locale79);
        java.lang.String str86 = locale68.getDisplayLanguage(locale79);
        java.util.Set<java.lang.Character> charSet87 = locale79.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime88 = property21.set("2022-02-11T09:46:12.254Z", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:46:12.254Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74785 + "'", int7 == 74785);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:25.456Z" + "'", str16, "2022-02-11T09:46:25.456Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 456 + "'", int44 == 456);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "vendredi" + "'", str52, "vendredi");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ven." + "'", str70, "ven.");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644785185456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=25,MILLISECOND=456,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category76.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals(locale83.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Taiwan" + "'", str85, "Taiwan");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "French" + "'", str86, "French");
        org.junit.Assert.assertNotNull(charSet87);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfSecond((int) (byte) 0);
        boolean boolean13 = mutableDateTime1.isEqual((long) 259);
        java.util.GregorianCalendar gregorianCalendar14 = mutableDateTime1.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 476 + "'", int9 == 476);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundCeiling();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfCeiling();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        boolean boolean19 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withOffsetParsed();
        int int21 = dateTimeFormatter16.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter16.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear(468);
        boolean boolean26 = property12.equals((java.lang.Object) 468);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 519 + "'", int6 == 519);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        mutableDateTime1.add((long) 765);
        mutableDateTime1.setYear(34817966);
        boolean boolean52 = mutableDateTime1.isAfter((-62141731199839L));
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime1.getZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("2022-02-27T15:58:15.034+390:13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-27T15:58:15.034+390:13 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.getScript();
        int int41 = dateTimeField38.getMaximumTextLength(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        int int48 = dateTimeField44.getDifference((long) 10, (long) 'a');
        int int50 = dateTimeField44.getLeapAmount((-1L));
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = dateTimeField44.getAsText((long) 340, locale52);
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = dateTimeField44.getAsShortText((int) '4', locale55);
        org.joda.time.ReadablePartial readablePartial57 = null;
        java.util.Locale locale59 = java.util.Locale.UK;
        java.lang.String str60 = dateTimeField44.getAsText(readablePartial57, 292278993, locale59);
        java.lang.String str61 = locale59.getISO3Country();
        java.lang.String str62 = locale59.getDisplayScript();
        java.lang.String str63 = locale39.getDisplayScript(locale59);
        java.util.Calendar calendar64 = mutableDateTime18.toCalendar(locale59);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket70.getZone();
        long long73 = dateTimeParserBucket70.computeMillis(true);
        org.joda.time.Chronology chronology74 = dateTimeParserBucket70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.year();
        org.joda.time.DateTime dateTime76 = mutableDateTime18.toDateTime(chronology74);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:25.604Z" + "'", str5, "2022-02-11T09:46:25.604Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "52" + "'", str56, "52");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "292278993" + "'", str60, "292278993");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "GBR" + "'", str61, "GBR");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=-40957539214396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=672,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=37,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=25,MILLISECOND=604,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone71);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime1.getChronology();
        int int17 = mutableDateTime1.getMillisOfDay();
        int int18 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addYears(34880355);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:25.669Z" + "'", str5, "2022-02-11T09:46:25.669Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35185669 + "'", int17 == 35185669);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter20.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(772);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeFormatter26.print((long) 931);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumTextLength(locale23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        mutableDateTime26.setRounding(dateTimeField34);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = dateTimeField34.getAsShortText((int) (byte) 1, locale38);
        java.lang.String str40 = property20.getAsShortText(locale38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.getScript();
        java.lang.String str43 = locale38.getDisplayScript(locale41);
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = locale38.getDisplayLanguage(locale44);
        java.lang.String str46 = locale17.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology9, locale44);
        java.lang.Integer int48 = dateTimeParserBucket47.getOffsetInteger();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "vendredi" + "'", str22, "vendredi");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ven." + "'", str40, "ven.");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French" + "'", str45, "French");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United Kingdom" + "'", str46, "United Kingdom");
        org.junit.Assert.assertNull(int48);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        long long31 = mutableDateTime1.getMillis();
        int int32 = mutableDateTime1.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(35733);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35733 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 735 + "'", int7 == 735);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697735,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=735,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644537697880L + "'", long31 == 1644537697880L);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 37 + "'", int32 == 37);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) 227);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.lang.String str14 = locale13.getDisplayName();
        long long15 = dateTimeField10.set((long) 858, "9", locale13);
        java.lang.String str16 = dateTimeField10.getName();
        org.joda.time.DurationField durationField17 = dateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587" + "'", str14, "\u6cd5\u6587");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 9858L + "'", long15 == 9858L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "secondOfMinute" + "'", str16, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        java.util.Date date21 = mutableDateTime12.toDate();
        mutableDateTime12.addDays((int) (byte) -1);
        mutableDateTime12.addMillis(2);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        int int27 = mutableDateTime12.getSecondOfDay();
        boolean boolean29 = mutableDateTime12.isEqual((long) 560);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setDate(34867128, 57501939, 648);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57501939 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 814 + "'", int9 == 814);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.year();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology7.add(readablePeriod14, 1644573600000L, 833);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644573600000L + "'", long17 == 1644573600000L);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        boolean boolean14 = dateTimeField13.isLenient();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785185836L + "'", long9 == 1644785185836L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785185836L + "'", long10 == 1644785185836L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int7 = dateTimeField2.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int int9 = dateTimeField2.getMinimumValue(readablePartial8);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField2.getAsShortText(422, locale11);
        org.joda.time.DurationField durationField13 = dateTimeField2.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology23.centuries();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology23.getZone();
        org.joda.time.DurationField durationField27 = chronology23.weeks();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.year();
        long long31 = dateTimeField28.set(287L, "9");
        org.joda.time.ReadablePartial readablePartial32 = null;
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology41.days();
        boolean boolean44 = durationFieldType33.isSupported(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.centuryOfEra();
        java.lang.String str47 = dateTimeField45.getAsText((long) 74413);
        org.joda.time.ReadablePartial readablePartial48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        int int55 = mutableDateTime50.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int57 = mutableDateTime50.get(dateTimeFieldType56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime50.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int64 = dateTimeField63.getMaximumValue();
        int int67 = dateTimeField63.getDifference((long) 10, (long) 'a');
        int int69 = dateTimeField63.getMaximumValue((long) (byte) 1);
        java.lang.String str71 = dateTimeField63.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial72 = null;
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        org.joda.time.Chronology chronology80 = dateTimeParserBucket78.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.dayOfYear();
        org.joda.time.ReadablePartial readablePartial83 = null;
        int[] intArray89 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int90 = dateTimeField82.getMinimumValue(readablePartial83, intArray89);
        int int91 = dateTimeField63.getMaximumValue(readablePartial72, intArray89);
        int int92 = dateTimeField59.getMinimumValue(readablePartial60, intArray89);
        int int93 = dateTimeField45.getMinimumValue(readablePartial48, intArray89);
        int int94 = dateTimeField28.getMaximumValue(readablePartial32, intArray89);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField2.set(readablePartial14, 404, intArray89, 35080);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35080 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "422" + "'", str12, "422");
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61883135999713L) + "'", long31 == (-61883135999713L));
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "19" + "'", str47, "19");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 844 + "'", int55 == 844);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 59 + "'", int91 == 59);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 292278993 + "'", int94 == 292278993);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int12 = mutableDateTime10.get(dateTimeFieldType11);
        int int13 = mutableDateTime10.getEra();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.era();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology21.getZone();
        mutableDateTime10.setZone(dateTimeZone25);
        mutableDateTime10.setMillis(1644572756958L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setMinuteOfHour(196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 196 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 882 + "'", int6 == 882);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) (byte) 0);
        mutableDateTime2.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology17 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.minuteOfHour();
        int int29 = mutableDateTime23.getSecondOfDay();
        mutableDateTime23.addSeconds((-292275054));
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology41, locale43, (java.lang.Integer) 2022);
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = locale47.getISO3Language();
        java.lang.String str49 = mutableDateTime23.toString("842", locale47);
        java.lang.String str50 = dateTimeField20.getAsText(779, locale47);
        java.lang.String str51 = locale47.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:46:25.893Z" + "'", str6, "2022-02-11T09:46:25.893Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 74785 + "'", int29 == 74785);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "842" + "'", str49, "842");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "779" + "'", str50, "779");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        int int3 = property2.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        boolean boolean14 = dateTimeFieldType4.isSupported(chronology12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType4.getField(chronology15);
        java.lang.String str17 = dateTimeFieldType4.getName();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology20, locale21, (java.lang.Integer) 9, 59);
        java.lang.Object obj25 = dateTimeParserBucket24.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket24.saveField(dateTimeFieldType26, 59);
        long long30 = dateTimeParserBucket24.computeMillis(true);
        org.joda.time.Chronology chronology31 = dateTimeParserBucket24.getChronology();
        java.util.Locale locale34 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology31, locale34, (java.lang.Integer) 617);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int41 = dateTimeField39.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        java.util.Locale locale46 = null;
        java.lang.String str47 = property45.getAsText(locale46);
        java.util.Locale locale48 = null;
        int int49 = property45.getMaximumTextLength(locale48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        mutableDateTime51.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int60 = dateTimeField59.getMaximumValue();
        mutableDateTime51.setRounding(dateTimeField59);
        java.util.Locale locale63 = java.util.Locale.FRENCH;
        java.lang.String str64 = dateTimeField59.getAsShortText((int) (byte) 1, locale63);
        java.lang.String str65 = property45.getAsShortText(locale63);
        java.lang.String str66 = dateTimeField39.getAsShortText(1L, locale63);
        boolean boolean68 = dateTimeField39.isLeap(0L);
        dateTimeParserBucket36.saveField(dateTimeField39, 34818666);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfCentury();
        boolean boolean73 = dateTimeFieldType4.isSupported(chronology71);
        org.joda.time.DateTimeField dateTimeField74 = chronology71.dayOfMonth();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "dayOfWeek" + "'", str17, "dayOfWeek");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-60305299200000L) + "'", long30 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals(locale34.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "vendredi" + "'", str47, "vendredi");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ven." + "'", str65, "ven.");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology10, locale12, (java.lang.Integer) 2022);
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale16.getISO3Language();
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Locale.Builder builder19 = builder0.setLocale(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder0.setExtension('a', "2022-02-11T09:46:25.604Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:46:25.604Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addDays(831);
        boolean boolean11 = mutableDateTime1.isEqualNow();
        mutableDateTime1.addSeconds(880);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(74453);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74453 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 46 + "'", int8 == 46);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = dateTimeField14.getAsShortText(0L, locale17);
        boolean boolean20 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar37 = mutableDateTime34.toCalendar(locale36);
        java.util.Calendar calendar38 = mutableDateTime24.toCalendar(locale36);
        java.lang.String str39 = dateTimeField14.getAsShortText(readablePartial21, (int) ' ', locale36);
        int int40 = property11.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime41 = property11.roundCeiling();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        int int51 = mutableDateTime41.get(dateTimeFieldType48);
        java.lang.String str52 = mutableDateTime41.toString();
        int int53 = mutableDateTime41.getHourOfDay();
        boolean boolean55 = mutableDateTime41.isBefore((long) 34918235);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572785985,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=25,MILLISECOND=985,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644537697985,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=985,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35186 + "'", int51 == 35186);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:46:26.000Z" + "'", str52, "2022-02-11T09:46:26.000Z");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime(chronology25);
        int int29 = mutableDateTime18.getMillisOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.minuteOfHour();
        int int37 = mutableDateTime31.getSecondOfDay();
        mutableDateTime31.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology40 = mutableDateTime31.getChronology();
        int int41 = mutableDateTime31.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime31.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime31.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        java.lang.String str46 = dateTimeFieldType44.getName();
        mutableDateTime31.set(dateTimeFieldType44, 831);
        int int49 = mutableDateTime31.getHourOfDay();
        int int50 = mutableDateTime18.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime31.addSeconds(74450);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35186031 + "'", int29 == 35186031);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 74786 + "'", int37 == 74786);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "millisOfSecond" + "'", str46, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        long long15 = dateTimeField13.roundHalfEven((long) 712);
        org.joda.time.ReadablePartial readablePartial16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = dateTimeField13.getMaximumValue(readablePartial16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime9.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime14.getZone();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        org.joda.time.Chronology chronology30 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology30.getZone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfWeek();
        java.util.Locale locale35 = null;
        java.lang.String str36 = property34.getAsText(locale35);
        java.util.Locale locale37 = null;
        int int38 = property34.getMaximumTextLength(locale37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        mutableDateTime40.setRounding(dateTimeField48);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = dateTimeField48.getAsShortText((int) (byte) 1, locale52);
        java.lang.String str54 = property34.getAsShortText(locale52);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.lang.String str56 = locale55.getScript();
        java.lang.String str57 = locale52.getDisplayScript(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale52);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.yearOfEra();
        int int61 = mutableDateTime59.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime59.set(dateTimeFieldType62, 0);
        boolean boolean65 = dateTimeParserBucket58.restoreState((java.lang.Object) dateTimeFieldType62);
        java.lang.String str66 = dateTimeFieldType62.getName();
        mutableDateTime14.set(dateTimeFieldType62, 18);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime14.weekyear();
        mutableDateTime14.setMillisOfSecond(822);
        int int72 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.addDays(380);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "vendredi" + "'", str36, "vendredi");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ven." + "'", str54, "ven.");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 11 + "'", int61 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "minuteOfDay" + "'", str66, "minuteOfDay");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.monthOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        int int32 = mutableDateTime14.getEra();
        int int33 = mutableDateTime14.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = mutableDateTime14.toString(dateTimeFormatter34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime14.minuteOfHour();
        mutableDateTime14.addYears(237);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        mutableDateTime40.setRounding(dateTimeField48);
        java.util.Locale locale52 = java.util.Locale.FRENCH;
        java.lang.String str53 = dateTimeField48.getAsShortText((int) (byte) 1, locale52);
        java.util.Calendar calendar54 = mutableDateTime14.toCalendar(locale52);
        java.util.Locale locale55 = locale52.stripExtensions();
        int int56 = dateTimeField12.getMaximumTextLength(locale52);
        java.lang.String str57 = locale52.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T00:01:37.088Z" + "'", str35, "2022-02-11T00:01:37.088Z");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=9123494497088,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=88,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fr" + "'", str57, "fr");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        java.lang.String str10 = dateTimeField8.getAsText((long) 40);
        int int13 = dateTimeField8.getDifference((long) 355, (long) 598);
        org.joda.time.DurationField durationField14 = dateTimeField8.getLeapDurationField();
        long long16 = dateTimeField8.remainder((long) 314);
        java.lang.String str18 = dateTimeField8.getAsText((long) 319);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfMonth();
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology27, locale32);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.year();
        org.joda.time.ReadablePartial readablePartial35 = null;
        java.util.Locale locale38 = new java.util.Locale("2022-02-11T00:01:40.594Z");
        java.lang.String str39 = dateTimeField34.getAsShortText(readablePartial35, 74450, locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        org.joda.time.DurationField durationField43 = dateTimeField42.getDurationField();
        boolean boolean45 = dateTimeField42.isLeap((long) (short) -1);
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = dateTimeField42.getAsText((long) (-1), locale47);
        org.joda.time.ReadablePartial readablePartial49 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = dateTimeField53.getAsShortText(0L, locale56);
        boolean boolean59 = dateTimeField53.isLenient();
        org.joda.time.ReadablePartial readablePartial60 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        int int66 = mutableDateTime63.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime63.set(dateTimeFieldType67, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.year();
        int int71 = mutableDateTime63.get(dateTimeFieldType70);
        int int72 = mutableDateTime63.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.yearOfEra();
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar76 = mutableDateTime73.toCalendar(locale75);
        java.util.Calendar calendar77 = mutableDateTime63.toCalendar(locale75);
        java.lang.String str78 = dateTimeField53.getAsShortText(readablePartial60, (int) ' ', locale75);
        java.lang.String str79 = locale75.getDisplayCountry();
        java.lang.String str80 = dateTimeField42.getAsShortText(readablePartial49, 34812148, locale75);
        java.lang.String str81 = locale75.getDisplayLanguage();
        java.lang.String str82 = locale38.getDisplayVariant(locale75);
        int int83 = dateTimeField8.getMaximumShortTextLength(locale38);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 314L + "'", long16 == 314L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals(locale38.toString(), "2022-02-11t00:01:40.594z");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "74450" + "'", str39, "74450");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "59" + "'", str48, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1644572786187,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=26,MILLISECOND=187,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar77);
// flaky:         org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1644537697187,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=187,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "32" + "'", str78, "32");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u53f0\u7063" + "'", str79, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "34812148" + "'", str80, "34812148");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\u4e2d\u6587" + "'", str81, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.ReadablePartial readablePartial17 = null;
        int[] intArray24 = new int[] { 259, (byte) 10, 829, 224, 158, 34818666 };
        int int25 = dateTimeField16.getMinimumValue(readablePartial17, intArray24);
        java.lang.String str27 = dateTimeField16.getAsShortText((long) (-1));
        org.joda.time.ReadablePartial readablePartial28 = null;
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        int int40 = mutableDateTime35.getMillisOfSecond();
        mutableDateTime35.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        int int50 = dateTimeField46.getDifference((long) 10, (long) 'a');
        int int52 = dateTimeField46.getLeapAmount((-1L));
        java.util.Locale locale54 = java.util.Locale.ITALY;
        java.lang.String str55 = dateTimeField46.getAsText((long) 340, locale54);
        java.util.Locale locale57 = java.util.Locale.UK;
        java.lang.String str58 = dateTimeField46.getAsShortText((int) '4', locale57);
        org.joda.time.ReadablePartial readablePartial59 = null;
        java.util.Locale locale61 = java.util.Locale.UK;
        java.lang.String str62 = dateTimeField46.getAsText(readablePartial59, 292278993, locale61);
        java.lang.String str63 = mutableDateTime35.toString("237", locale61);
        java.util.Locale.Builder builder64 = builder33.setLocale(locale61);
        java.lang.String str65 = dateTimeField16.getAsText(readablePartial28, 232, locale61);
        java.lang.String str66 = locale61.getDisplayLanguage();
        java.util.Locale.Builder builder67 = builder4.setLocale(locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder69 = builder4.setLanguageTag("2022-02-27T15:58:20.463+390:13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[259, 10, 829, 224, 158, 34818666]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "999" + "'", str27, "999");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 228 + "'", int40 == 228);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "52" + "'", str58, "52");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "292278993" + "'", str62, "292278993");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "237" + "'", str63, "237");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "232" + "'", str65, "232");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u82f1\u6587" + "'", str66, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        long long9 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        org.joda.time.DurationField durationField12 = chronology11.weekyears();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology21, locale23, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField32.getAsShortText(0L, locale35);
        boolean boolean38 = dateTimeField32.isLenient();
        org.joda.time.ReadablePartial readablePartial39 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        int int51 = mutableDateTime42.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.yearOfEra();
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar55 = mutableDateTime52.toCalendar(locale54);
        java.util.Calendar calendar56 = mutableDateTime42.toCalendar(locale54);
        java.lang.String str57 = dateTimeField32.getAsShortText(readablePartial39, (int) ' ', locale54);
        java.lang.String str58 = dateTimeField28.getAsText(224, locale54);
        java.lang.String str59 = locale54.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 34909, chronology11, locale54, (java.lang.Integer) 112);
        java.util.Locale locale62 = dateTimeParserBucket61.getLocale();
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1644572786245,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=26,MILLISECOND=245,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644537697245,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=245,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "32" + "'", str57, "32");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "224" + "'", str58, "224");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str59, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        org.joda.time.DateTime dateTime31 = mutableDateTime14.toDateTime(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter9.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeFormatter9.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime35.getZone();
        long long44 = dateTimeZone42.nextTransition((long) 59);
        java.lang.String str46 = dateTimeZone42.getName((long) (short) 0);
        java.lang.String str47 = dateTimeZone42.getID();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        mutableDateTime54.addHours(59);
        org.joda.time.Chronology chronology59 = mutableDateTime54.getChronology();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime54.toMutableDateTime();
        int int61 = mutableDateTime54.getMinuteOfHour();
        mutableDateTime54.addDays(831);
        boolean boolean64 = mutableDateTime50.isBefore((org.joda.time.ReadableInstant) mutableDateTime54);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Calendar calendar66 = mutableDateTime54.toCalendar(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        int int70 = dateTimeField69.getMaximumValue();
        int int73 = dateTimeField69.getDifference((long) 10, (long) 'a');
        int int75 = dateTimeField69.getLeapAmount((-1L));
        java.util.Locale locale77 = java.util.Locale.ITALY;
        java.lang.String str78 = dateTimeField69.getAsText((long) 340, locale77);
        java.lang.String str79 = locale65.getDisplayVariant(locale77);
        java.lang.String str80 = dateTimeZone42.getShortName((long) 74427617, locale77);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter9.withLocale(locale77);
        java.lang.Appendable appendable82 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter81.printTo(appendable82, 106451L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 59L + "'", long44 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 46 + "'", int61 == 46);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1716583586271,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=26,MILLISECOND=271,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "0" + "'", str78, "0");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        mutableDateTime3.setSecondOfDay(0);
        int int6 = mutableDateTime3.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.add((long) 140);
        int int11 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 293 + "'", int6 == 293);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 59);
        java.lang.String str10 = dateTimeFieldType7.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter13.getParser();
        boolean boolean16 = dateTimeFormatter13.isParser();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology24.add(readablePeriod26, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter13.withChronology(chronology24);
        org.joda.time.DurationField durationField31 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType7.getField(chronology24);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology24.getZone();
        org.joda.time.Chronology chronology34 = chronology24.withUTC();
        org.joda.time.ReadablePartial readablePartial35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = chronology24.get(readablePartial35, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfEra" + "'", str10, "yearOfEra");
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter3.getParser();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType15.getDurationType();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.Chronology chronology29 = chronology26.withUTC();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 755, chronology29);
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfDay();
        org.joda.time.DurationField durationField33 = durationFieldType18.getField(chronology29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter3.withChronology(chronology29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) 66, chronology29);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setSecondOfMinute(74478149);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74478149 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 344 + "'", int6 == 344);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime11.getEra();
        int int13 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime11);
        int int14 = mutableDateTime11.getDayOfWeek();
        int int15 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfEra();
        int int18 = mutableDateTime16.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime16.add(durationFieldType19, 642);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        org.joda.time.Chronology chronology38 = mutableDateTime23.getChronology();
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        int int43 = dateTimeZone40.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone40);
        int int46 = dateTimeZone40.getOffsetFromLocal((long) 161);
        long long48 = dateTimeZone40.nextTransition((long) 34833543);
        org.joda.time.Chronology chronology49 = chronology38.withZone(dateTimeZone40);
        boolean boolean50 = durationFieldType19.isSupported(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        mutableDateTime52.setZoneRetainFields(dateTimeZone64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        int int70 = mutableDateTime67.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        boolean boolean72 = mutableDateTime67.isSupported(dateTimeFieldType71);
        int int73 = mutableDateTime52.get(dateTimeFieldType71);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(chronology74);
        org.joda.time.ReadableInstant readableInstant76 = null;
        boolean boolean77 = mutableDateTime75.isEqual(readableInstant76);
        mutableDateTime75.addHours(59);
        org.joda.time.Chronology chronology80 = mutableDateTime75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone81 = chronology80.getZone();
        boolean boolean82 = dateTimeFieldType71.isSupported(chronology80);
        org.joda.time.DurationField durationField83 = durationFieldType19.getField(chronology80);
        mutableDateTime11.setChronology(chronology80);
        org.joda.time.DateTimeZone dateTimeZone85 = mutableDateTime11.getZone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 74786377 + "'", int15 == 74786377);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T09:46:26.377Z" + "'", str27, "2022-02-11T09:46:26.377Z");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 34833543L + "'", long48 == 34833543L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 9 + "'", int70 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundFloor();
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime19.toGregorianCalendar();
        boolean boolean21 = mutableDateTime19.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setMinuteOfHour(925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 925 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697406,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int33 = mutableDateTime26.get(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        mutableDateTime43.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        mutableDateTime43.setRounding(dateTimeField51);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = dateTimeField51.getAsShortText((int) (byte) 1, locale55);
        java.lang.String str57 = property37.getAsShortText(locale55);
        java.util.Calendar calendar58 = mutableDateTime26.toCalendar(locale55);
        int int59 = property24.getMaximumShortTextLength(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology18, locale55, (java.lang.Integer) 664);
        java.lang.String str62 = locale55.getISO3Country();
        java.util.Set<java.lang.String> strSet63 = locale55.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withLocale(locale55);
        java.util.Locale locale65 = locale55.stripExtensions();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 429 + "'", int31 == 429);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "vendredi" + "'", str39, "vendredi");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven." + "'", str57, "ven.");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644785186429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=26,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int9 = mutableDateTime0.getDayOfMonth();
        int int10 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.dayOfWeek();
        int int12 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getRangeDurationType();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        long long25 = dateTimeParserBucket22.computeMillis(true);
        org.joda.time.Chronology chronology26 = dateTimeParserBucket22.getChronology();
        org.joda.time.Chronology chronology27 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.yearOfEra();
        boolean boolean29 = durationFieldType16.isSupported(chronology26);
        org.joda.time.DurationField durationField30 = durationFieldType14.getField(chronology26);
        boolean boolean31 = mutableDateTime0.equals((java.lang.Object) chronology26);
        int int32 = mutableDateTime0.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(74608);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74608 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572786458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=26,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getDayOfWeek();
        int int17 = mutableDateTime7.getDayOfMonth();
        java.util.Date date18 = mutableDateTime7.toDate();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.minuteOfHour();
        org.joda.time.Chronology chronology32 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        mutableDateTime7.setChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeField35.set(74457592L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572786475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=26,MILLISECOND=475,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 11:26:26 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology46, locale48, (java.lang.Integer) 2022);
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = dateTimeField35.getAsText(readablePartial36, 842, locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology21, locale52, (java.lang.Integer) 237);
        org.joda.time.DateTimeZone dateTimeZone57 = chronology21.getZone();
        long long59 = dateTimeZone57.convertUTCToLocal((long) 34864317);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        boolean boolean61 = property6.equals((java.lang.Object) mutableDateTime60);
        long long62 = mutableDateTime60.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:26.543Z" + "'", str5, "2022-02-11T09:46:26.543Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fra" + "'", str53, "fra");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "842" + "'", str54, "842");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 34864317L + "'", long59 == 34864317L);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1644572786544L + "'", long62 == 1644572786544L);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime16.getZone();
        long long25 = dateTimeZone23.nextTransition((long) 59);
        java.lang.String str27 = dateTimeZone23.getName((long) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        mutableDateTime29.addHours(59);
        org.joda.time.Chronology chronology34 = mutableDateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime29.toMutableDateTime();
        int int36 = mutableDateTime29.getYear();
        int int37 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = mutableDateTime39.toString(dateTimeFormatter42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.weekOfWeekyear();
        org.joda.time.Chronology chronology45 = mutableDateTime39.getChronology();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime29.toMutableDateTime(chronology45);
        boolean boolean48 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime6.setMillisOfDay(34913);
        int int51 = mutableDateTime6.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 570 + "'", int11 == 570);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 59L + "'", long25 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:46:26.570Z" + "'", str43, "2022-02-11T09:46:26.570Z");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.hours();
        org.joda.time.DurationField durationField25 = durationFieldType13.getField(chronology21);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale30 = builder29.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 2818, chronology21, locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        java.lang.String str33 = dateTimeField10.getAsShortText(74474093, locale32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 595 + "'", int6 == 595);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "74474093" + "'", str33, "74474093");
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        mutableDateTime8.setMillis((long) 898);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.getMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property27.getFieldType();
        int int30 = mutableDateTime8.get(dateTimeFieldType29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        mutableDateTime36.addHours(59);
        org.joda.time.Chronology chronology41 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime36.toMutableDateTime();
        int int43 = mutableDateTime36.getMinuteOfHour();
        mutableDateTime36.addDays(831);
        boolean boolean46 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) mutableDateTime36);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Calendar calendar48 = mutableDateTime36.toCalendar(locale47);
        int int49 = mutableDateTime36.getEra();
        int int50 = mutableDateTime36.getSecondOfDay();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = mutableDateTime52.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean63 = mutableDateTime52.isSupported(dateTimeFieldType62);
        mutableDateTime36.set(dateTimeFieldType62, 7);
        org.joda.time.DateTimeZone dateTimeZone66 = mutableDateTime36.getZone();
        org.joda.time.DateTime dateTime67 = mutableDateTime8.toDateTime(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:26.614Z" + "'", str5, "2022-02-11T09:46:26.614Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 46 + "'", int43 == 46);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1716583586614,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=26,MILLISECOND=614,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 74786 + "'", int50 == 74786);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        mutableDateTime11.setMillisOfDay(369);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        int int17 = mutableDateTime16.getCenturyOfEra();
        int int18 = mutableDateTime16.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 655 + "'", int7 == 655);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572786655L + "'", long10 == 1644572786655L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        mutableDateTime8.addDays(0);
        int int14 = mutableDateTime8.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.weekyear();
        int int16 = mutableDateTime8.getMonthOfYear();
        org.joda.time.Chronology chronology17 = mutableDateTime8.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(34912420, 535, 24779, 172, 35169576, 74416, 34898163, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 679 + "'", int14 == 679);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter20.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter20.getParser();
        boolean boolean23 = dateTimeFormatter20.isParser();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology31.add(readablePeriod33, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter20.withChronology(chronology31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter37.withOffsetParsed();
        boolean boolean39 = dateTimeFormatter38.isOffsetParsed();
        org.joda.time.Chronology chronology40 = dateTimeFormatter38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField42 = dateTimeField41.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        org.joda.time.Chronology chronology51 = dateTimeParserBucket49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.hours();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType57.getField(chronology58);
        int int60 = dateTimeField59.getMaximumValue();
        int int63 = dateTimeField59.getDifference((long) 10, (long) 'a');
        int int65 = dateTimeField59.getLeapAmount((-1L));
        java.util.Locale locale67 = java.util.Locale.ITALY;
        java.lang.String str68 = dateTimeField59.getAsText((long) 340, locale67);
        org.joda.time.ReadablePartial readablePartial69 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        int int76 = dateTimeField72.getDifference((long) 10, (long) 'a');
        int int78 = dateTimeField72.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial79 = null;
        int[] intArray86 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int87 = dateTimeField72.getMinimumValue(readablePartial79, intArray86);
        int int88 = dateTimeField59.getMinimumValue(readablePartial69, intArray86);
        int int89 = dateTimeField55.getMaximumValue(readablePartial56, intArray86);
        int int90 = dateTimeField41.getMinimumValue(readablePartial43, intArray86);
        mutableDateTime1.setRounding(dateTimeField41);
        mutableDateTime1.add((-1404779823L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNull(dateTimeZone21);
        org.junit.Assert.assertNull(dateTimeParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 59 + "'", int60 == 59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 99 + "'", int89 == 99);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = dateTimeFormatter2.print(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DurationField durationField14 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = chronology7.get(readablePeriod16, (long) 8541, (long) 74446);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.millisOfSecond();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        boolean boolean5 = property4.isLeap();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.Object obj7 = dateTimeParserBucket5.saveState();
        long long8 = dateTimeParserBucket5.computeMillis();
        java.lang.Object obj9 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket5.getZone();
        java.lang.String str13 = dateTimeZone11.getNameKey((long) 296);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField14 = chronology7.weekyears();
        org.joda.time.DurationField durationField15 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.minuteOfDay();
        long long18 = dateTimeField16.remainder((long) 57492386);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 12386L + "'", long18 == 12386L);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        int int51 = dateTimeZone41.getStandardOffset(1644572504889L);
        java.lang.String str52 = dateTimeZone41.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572786971,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=26,MILLISECOND=971,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Instant instant5 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.secondOfDay();
        long long7 = property6.remainder();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 989L + "'", long7 == 989L);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int28 = dateTimeField26.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfWeek();
        java.util.Locale locale33 = null;
        java.lang.String str34 = property32.getAsText(locale33);
        java.util.Locale locale35 = null;
        int int36 = property32.getMaximumTextLength(locale35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        mutableDateTime38.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        mutableDateTime38.setRounding(dateTimeField46);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = dateTimeField46.getAsShortText((int) (byte) 1, locale50);
        java.lang.String str52 = property32.getAsShortText(locale50);
        java.lang.String str53 = dateTimeField26.getAsShortText(1L, locale50);
        java.lang.String str54 = locale50.getISO3Country();
        boolean boolean55 = locale50.hasExtensions();
        java.lang.String str56 = locale50.getDisplayLanguage();
        java.lang.String str57 = locale50.getDisplayScript();
        java.lang.String str58 = property10.getAsShortText(locale50);
        java.lang.String str59 = locale50.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "vendredi" + "'", str34, "vendredi");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ven." + "'", str52, "ven.");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fran\347ais" + "'", str56, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Chronology chronology33 = chronology25.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        long long37 = dateTimeField35.roundFloor(1644784882773L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644710400000L + "'", long37 == 1644710400000L);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(58883000L);
        mutableDateTime1.addWeeks(74425);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        int int55 = mutableDateTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale58, (java.lang.Integer) 9, 59);
        java.lang.Object obj62 = dateTimeParserBucket61.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket61.saveField(dateTimeFieldType63, 59);
        boolean boolean66 = mutableDateTime50.isSupported(dateTimeFieldType63);
        int int67 = mutableDateTime47.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        int int68 = mutableDateTime50.getDayOfMonth();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime50);
        int int70 = mutableDateTime50.getYear();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        mutableDateTime50.add(readablePeriod71);
        int int73 = mutableDateTime50.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 89 + "'", int29 == 89);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 89 + "'", int55 == 89);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 7 + "'", int73 == 7);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        int int8 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.getMutableDateTime();
        mutableDateTime9.addDays(185);
        java.util.Date date12 = mutableDateTime9.toDate();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime14.getZone();
        int int22 = mutableDateTime14.getMonthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean35 = mutableDateTime24.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getDurationType();
        boolean boolean37 = mutableDateTime14.equals((java.lang.Object) dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime9.property(dateTimeFieldType34);
        java.lang.String str39 = property38.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Aug 15 09:46:27 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "35187" + "'", str39, "35187");
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        java.lang.Integer int15 = dateTimeParserBucket14.getPivotYear();
        java.lang.Integer int16 = dateTimeParserBucket14.getPivotYear();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        long long25 = dateTimeParserBucket22.computeMillis(true);
        long long27 = dateTimeParserBucket22.computeMillis(true);
        long long29 = dateTimeParserBucket22.computeMillis(true);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        dateTimeParserBucket22.saveField(dateTimeFieldType37, 97608);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        mutableDateTime44.addHours(59);
        int int49 = mutableDateTime44.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean51 = mutableDateTime44.isSupported(dateTimeFieldType50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime44.dayOfMonth();
        org.joda.time.Chronology chronology53 = mutableDateTime44.getChronology();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime44.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int59 = dateTimeField57.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.dayOfWeek();
        java.util.Locale locale64 = null;
        java.lang.String str65 = property63.getAsText(locale64);
        java.util.Locale locale66 = null;
        int int67 = property63.getMaximumTextLength(locale66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = mutableDateTime69.isEqual(readableInstant70);
        int int72 = mutableDateTime69.getHourOfDay();
        mutableDateTime69.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType75.getField(chronology76);
        int int78 = dateTimeField77.getMaximumValue();
        mutableDateTime69.setRounding(dateTimeField77);
        java.util.Locale locale81 = java.util.Locale.FRENCH;
        java.lang.String str82 = dateTimeField77.getAsShortText((int) (byte) 1, locale81);
        java.lang.String str83 = property63.getAsShortText(locale81);
        java.lang.String str84 = dateTimeField57.getAsShortText(1L, locale81);
        boolean boolean85 = property54.equals((java.lang.Object) locale81);
        java.lang.String str86 = locale81.getDisplayLanguage();
        dateTimeParserBucket14.saveField(dateTimeFieldType37, "2022-02-11T09:41:31.708-00:00:00.001", locale81);
        java.lang.String str89 = locale81.getExtension('a');
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 156 + "'", int49 == 156);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "vendredi" + "'", str65, "vendredi");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1" + "'", str82, "1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ven." + "'", str83, "ven.");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "0" + "'", str84, "0");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "fran\347ais" + "'", str86, "fran\347ais");
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clearExtensions();
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = builder38.build();
        java.util.Locale.Builder builder42 = builder38.setVariant("2022");
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale37.getDisplayScript(locale43);
        java.util.Locale.Builder builder45 = builder35.setLocale(locale37);
        java.util.Locale.Builder builder47 = builder35.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder47.setExtension('#', "2022-02-21T22:44:25.742+253:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 182 + "'", int10 == 182);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long7 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket5.getZone();
        long long12 = dateTimeZone8.convertLocalToUTC(0L, true, (long) 74557);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfEven();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfMonth();
        boolean boolean11 = property10.isLeap();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 251 + "'", int6 == 251);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.setWeekyear(74416135);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        int int11 = dateTimeZone8.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        boolean boolean13 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar17 = mutableDateTime14.toCalendar(locale16);
        mutableDateTime14.addMinutes((int) (byte) 100);
        int int20 = mutableDateTime14.getDayOfMonth();
        int int21 = mutableDateTime14.getMillisOfSecond();
        int int22 = mutableDateTime14.getSecondOfDay();
        boolean boolean23 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime12.weekyear();
        boolean boolean25 = property24.isLeap();
        org.joda.time.DurationField durationField26 = property24.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572787260,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=27,MILLISECOND=260,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 260 + "'", int21 == 260);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 41187 + "'", int22 == 41187);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter20.getPrinter();
        org.joda.time.Chronology chronology43 = dateTimeFormatter20.getChronolgy();
        java.io.Writer writer44 = null;
        org.joda.time.ReadablePartial readablePartial45 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter20.printTo(writer44, readablePartial45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfDay();
        int int4 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.lang.String str13 = locale12.getISO3Country();
        java.lang.String str14 = dateTimeField9.getAsShortText(0L, locale12);
        java.lang.String str15 = locale12.getScript();
        int int16 = property6.getMaximumTextLength(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property6.getFieldType();
        int int18 = mutableDateTime1.get(dateTimeFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DurationField durationField21 = durationFieldType19.getField(chronology20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        int int8 = property2.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property2.getFieldType();
        int int10 = property2.getMaximumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology44, locale46, (java.lang.Integer) 2022);
        java.util.Locale locale50 = locale46.stripExtensions();
        java.lang.String str51 = locale50.getISO3Language();
        java.lang.String str52 = dateTimeField33.getAsText(readablePartial34, 842, locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology19, locale50, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime56.getZone();
        long long65 = dateTimeZone63.nextTransition((long) 59);
        java.lang.String str67 = dateTimeZone63.getName((long) (short) 0);
        dateTimeParserBucket54.setZone(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(dateTimeZone63);
        int int71 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime70);
        int int72 = mutableDateTime70.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "842" + "'", str52, "842");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 59L + "'", long65 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 42 + "'", int72 == 42);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj11 = mutableDateTime1.clone();
        mutableDateTime1.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        mutableDateTime1.addWeeks(612);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfDay();
        mutableDateTime1.addWeekyears(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = mutableDateTime1.toString("2022-02-11T09:42:38.754Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "2022-02-11T00:01:37.373Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "2022-02-11T00:01:37.373Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "2022-02-11T00:01:37.373Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime7.toGregorianCalendar();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        int int18 = mutableDateTime10.getMonthOfYear();
        mutableDateTime10.addDays(5);
        boolean boolean22 = mutableDateTime10.isAfter((long) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime24.getZone();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        mutableDateTime10.setZoneRetainFields(dateTimeZone44);
        mutableDateTime7.setZoneRetainFields(dateTimeZone44);
        mutableDateTime7.add((long) 58);
        int int51 = mutableDateTime7.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 384 + "'", int16 == 384);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644537697384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        dateTimeParserBucket35.setOffset((java.lang.Integer) 2);
        java.util.Locale locale38 = dateTimeParserBucket35.getLocale();
        java.util.Locale.setDefault(locale38);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean12 = mutableDateTime1.isSupported(dateTimeFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getDurationType();
        java.lang.String str14 = dateTimeFieldType11.toString();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology48, locale50, (java.lang.Integer) 2022);
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = dateTimeField37.getAsText(readablePartial38, 842, locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology23, locale54, (java.lang.Integer) 237);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType11.getField(chronology23);
        long long62 = dateTimeField60.roundHalfEven((long) 57506);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondOfDay" + "'", str14, "secondOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fra" + "'", str55, "fra");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "842" + "'", str56, "842");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 58000L + "'", long62 == 58000L);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.yearOfEra();
        int int38 = mutableDateTime36.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime36.set(dateTimeFieldType39, 0);
        boolean boolean42 = dateTimeParserBucket35.restoreState((java.lang.Object) dateTimeFieldType39);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.monthOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        dateTimeParserBucket35.saveField(dateTimeField52, 642);
        long long56 = dateTimeParserBucket35.computeMillis(false);
        java.lang.Integer int57 = dateTimeParserBucket35.getOffsetInteger();
        long long60 = dateTimeParserBucket35.computeMillis(true, "eras");
        long long61 = dateTimeParserBucket35.computeMillis();
        dateTimeParserBucket35.setOffset((java.lang.Integer) 667);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 11 + "'", int38 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-41907196800000L) + "'", long56 == (-41907196800000L));
        org.junit.Assert.assertNull(int57);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-41907456000000L) + "'", long60 == (-41907456000000L));
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-41907196800000L) + "'", long61 == (-41907196800000L));
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, dateTimeZone13);
        mutableDateTime1.setYear(806);
        mutableDateTime1.setMinuteOfDay(316);
        boolean boolean20 = mutableDateTime1.isEqual((long) 460);
        int int21 = mutableDateTime1.getYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74787 + "'", int7 == 74787);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 806 + "'", int21 == 806);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        long long13 = dateTimeField11.roundHalfCeiling((long) 550);
        int int14 = dateTimeField11.getMaximumValue();
        boolean boolean15 = dateTimeField11.isLenient();
        org.joda.time.ReadablePartial readablePartial16 = null;
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        int int37 = dateTimeField33.getDifference((long) 10, (long) 'a');
        int int39 = dateTimeField33.getLeapAmount((-1L));
        java.util.Locale locale41 = java.util.Locale.ITALY;
        java.lang.String str42 = dateTimeField33.getAsText((long) 340, locale41);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        int int50 = dateTimeField46.getDifference((long) 10, (long) 'a');
        int int52 = dateTimeField46.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial53 = null;
        int[] intArray60 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int61 = dateTimeField46.getMinimumValue(readablePartial53, intArray60);
        int int62 = dateTimeField33.getMinimumValue(readablePartial43, intArray60);
        int int63 = dateTimeField29.getMaximumValue(readablePartial30, intArray60);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = dateTimeField11.add(readablePartial16, 0, intArray60, 164);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1000L + "'", long13 == 1000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[173, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 99 + "'", int63 == 99);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        int int4 = mutableDateTime0.getMillisOfDay();
        int int5 = mutableDateTime0.getMonthOfYear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        long long8 = mutableDateTime7.getMillis();
        int int9 = mutableDateTime7.getSecondOfDay();
        boolean boolean10 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime7);
        int int11 = mutableDateTime0.getMillisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572787545,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=27,MILLISECOND=545,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35187545 + "'", int4 == 35187545);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572787545L + "'", long8 == 1644572787545L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35187 + "'", int9 == 35187);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 545 + "'", int11 == 545);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addSeconds((-292275054));
        int int10 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setMillisOfSecond(395);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime14.getZone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        mutableDateTime23.setZoneRetainFields(dateTimeZone35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        boolean boolean43 = mutableDateTime38.isSupported(dateTimeFieldType42);
        int int44 = mutableDateTime23.get(dateTimeFieldType42);
        boolean boolean45 = mutableDateTime14.isSupported(dateTimeFieldType42);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.property(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime50.getZone();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 34880355, dateTimeZone54);
        int int56 = property46.compareTo((org.joda.time.ReadableInstant) mutableDateTime55);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime55.setHourOfDay(57463685);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57463685 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74787 + "'", int7 == 74787);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(5430, 968, 55, 486, 6, 946, 74517);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 486 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        int int3 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        java.lang.String str25 = dateTimeZone23.getNameKey((long) (byte) 0);
        mutableDateTime12.setZoneRetainFields(dateTimeZone23);
        mutableDateTime5.setZone(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int33 = dateTimeField31.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        mutableDateTime43.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        mutableDateTime43.setRounding(dateTimeField51);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = dateTimeField51.getAsShortText((int) (byte) 1, locale55);
        java.lang.String str57 = property37.getAsShortText(locale55);
        java.lang.String str58 = dateTimeField31.getAsShortText(1L, locale55);
        java.util.Set<java.lang.Character> charSet59 = locale55.getExtensionKeys();
        java.lang.String str60 = dateTimeZone23.getShortName((long) 6, locale55);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime1.toMutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        mutableDateTime63.addHours(59);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime63.minuteOfHour();
        int int69 = mutableDateTime63.getSecondOfDay();
        mutableDateTime63.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology72 = mutableDateTime63.getChronology();
        int int73 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        mutableDateTime76.addHours(59);
        org.joda.time.Chronology chronology81 = mutableDateTime76.getChronology();
        org.joda.time.MutableDateTime mutableDateTime82 = mutableDateTime76.toMutableDateTime();
        int int83 = mutableDateTime76.getMinuteOfHour();
        mutableDateTime76.addDays(831);
        org.joda.time.DateTime dateTime86 = mutableDateTime76.toDateTime();
        int int87 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-11T09:40:20.381Z", dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime89 = null;
        boolean boolean90 = dateTimeZone23.isLocalDateTimeGap(localDateTime89);
        java.util.TimeZone timeZone91 = dateTimeZone23.toTimeZone();
        java.util.TimeZone timeZone92 = dateTimeZone23.toTimeZone();
        long long95 = dateTimeZone23.convertLocalToUTC(1644572774338L, false);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 587 + "'", int10 == 587);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:27.587Z" + "'", str16, "2022-02-11T09:46:27.587Z");
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTC" + "'", str25, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "vendredi" + "'", str39, "vendredi");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven." + "'", str57, "ven.");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(charSet59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 74787 + "'", int69 == 74787);
        org.junit.Assert.assertNotNull(chronology72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 46 + "'", int83 == 46);
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(timeZone91);
// flaky:         org.junit.Assert.assertEquals(timeZone91.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(timeZone92);
// flaky:         org.junit.Assert.assertEquals(timeZone92.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1644572774338L + "'", long95 == 1644572774338L);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.hours();
        org.joda.time.DurationField durationField12 = durationFieldType0.getField(chronology8);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology8);
        int int14 = mutableDateTime13.getSecondOfMinute();
        mutableDateTime13.add(0L);
        int int17 = mutableDateTime13.getYear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27 + "'", int14 == 27);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.Chronology chronology14 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale39.getScript();
        java.lang.String str41 = locale36.getDisplayScript(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale36);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 74415232, chronology14);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        int int53 = mutableDateTime45.get(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = mutableDateTime45.toDateTime();
        java.util.Locale locale55 = null;
        java.util.Calendar calendar56 = mutableDateTime45.toCalendar(locale55);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTime dateTime59 = mutableDateTime45.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = mutableDateTime61.isEqual(readableInstant62);
        mutableDateTime61.addHours(59);
        int int66 = mutableDateTime61.getMillisOfSecond();
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology68, locale69, (java.lang.Integer) 9, 59);
        java.lang.Object obj73 = dateTimeParserBucket72.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket72.saveField(dateTimeFieldType74, 59);
        boolean boolean77 = mutableDateTime61.isSupported(dateTimeFieldType74);
        boolean boolean78 = dateTime59.isSupported(dateTimeFieldType74);
        boolean boolean79 = mutableDateTime43.isSupported(dateTimeFieldType74);
        int int80 = mutableDateTime5.get(dateTimeFieldType74);
        mutableDateTime5.addMonths(520);
        int int83 = mutableDateTime5.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setMillisOfSecond(35019285);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35019285 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644537697640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 640 + "'", int66 == 640);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.lang.String str5 = property2.getAsText();
        java.lang.String str6 = property2.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime8.weekyear();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime8.add(readablePeriod13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.dayOfWeek();
        mutableDateTime8.addSeconds(630);
        int int18 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime8);
        java.lang.String str19 = property2.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime20 = property2.roundCeiling();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.toLanguageTag();
        java.util.Locale.setDefault(locale22);
        java.lang.String str25 = locale22.getVariant();
        java.lang.String str26 = locale22.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = property2.set("34812612", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"34812612\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vendredi" + "'", str5, "vendredi");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfWeek]" + "'", str6, "Property[dayOfWeek]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35187663 + "'", int11 == 35187663);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ven." + "'", str19, "ven.");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        java.util.Date date21 = mutableDateTime12.toDate();
        mutableDateTime12.addDays((int) (byte) -1);
        mutableDateTime12.addMillis(2);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        int int27 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = mutableDateTime29.toDateTime();
        int int39 = dateTime38.getMinuteOfHour();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(350, 158, 962);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 158 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 676 + "'", int9 == 676);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = chronology8.getZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfWeek();
        java.util.Locale locale13 = null;
        java.lang.String str14 = property12.getAsText(locale13);
        java.util.Locale locale15 = null;
        int int16 = property12.getMaximumTextLength(locale15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int27 = dateTimeField26.getMaximumValue();
        mutableDateTime18.setRounding(dateTimeField26);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = dateTimeField26.getAsShortText((int) (byte) 1, locale30);
        java.lang.String str32 = property12.getAsShortText(locale30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale33.getScript();
        java.lang.String str35 = locale30.getDisplayScript(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale30);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) 74444144, chronology8);
        int int38 = mutableDateTime37.getEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.Chronology chronology41 = null;
        mutableDateTime40.setChronology(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = null;
        java.lang.String str48 = mutableDateTime44.toString(dateTimeFormatter47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.Chronology chronology50 = mutableDateTime44.getChronology();
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) mutableDateTime44);
        mutableDateTime44.addMinutes((int) 'u');
        org.joda.time.Chronology chronology54 = mutableDateTime44.getChronology();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        long long58 = chronology54.add(readablePeriod55, 1644537697610L, 328);
        org.joda.time.DateTime dateTime59 = mutableDateTime37.toDateTime(chronology54);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u661f\u671f\u4e94" + "'", str14, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ven." + "'", str32, "ven.");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:46:27.690Z" + "'", str48, "2022-02-11T09:46:27.690Z");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644537697610L + "'", long58 == 1644537697610L);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(34997);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34997 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        boolean boolean30 = dateTimeZone27.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 1, dateTimeZone27);
        long long34 = dateTimeZone13.getMillisKeepLocal(dateTimeZone27, (long) 964);
        java.lang.String str35 = dateTimeZone27.toString();
        long long38 = dateTimeZone27.adjustOffset(778L, false);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.secondOfDay();
        long long42 = mutableDateTime40.getMillis();
        org.joda.time.DateTimeField dateTimeField43 = mutableDateTime40.getRoundingField();
        mutableDateTime40.addSeconds(439);
        int int46 = mutableDateTime40.getDayOfYear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:46:27.836Z" + "'", str6, "2022-02-11T09:46:27.836Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 964L + "'", long34 == 964L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 778L + "'", long38 == 778L);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572787836L + "'", long42 == 1644572787836L);
        org.junit.Assert.assertNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        mutableDateTime2.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        long long25 = dateTimeField16.add((long) 34824770, 145);
        long long28 = dateTimeField16.addWrapField((long) 320, 747);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = dateTimeField16.getAsShortText(2818, locale30);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.getDefault(category33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.toLanguageTag();
        java.lang.String str39 = locale36.getDisplayScript(locale37);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale51.getScript();
        int int53 = dateTimeField50.getMaximumTextLength(locale51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        int int60 = dateTimeField56.getDifference((long) 10, (long) 'a');
        int int62 = dateTimeField56.getLeapAmount((-1L));
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.lang.String str65 = dateTimeField56.getAsText((long) 340, locale64);
        java.util.Locale locale67 = java.util.Locale.UK;
        java.lang.String str68 = dateTimeField56.getAsShortText((int) '4', locale67);
        org.joda.time.ReadablePartial readablePartial69 = null;
        java.util.Locale locale71 = java.util.Locale.UK;
        java.lang.String str72 = dateTimeField56.getAsText(readablePartial69, 292278993, locale71);
        java.lang.String str73 = locale71.getISO3Country();
        java.lang.String str74 = locale71.getDisplayScript();
        java.lang.String str75 = locale51.getDisplayScript(locale71);
        java.lang.String str76 = locale37.getDisplayName(locale71);
        java.lang.String str77 = locale71.getISO3Language();
        java.util.Locale.setDefault(category33, locale71);
        java.util.Locale locale79 = java.util.Locale.getDefault(category33);
        java.lang.String str80 = dateTimeField16.getAsShortText(0L, locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) 35066, chronology11, locale79, (java.lang.Integer) 744);
        java.util.Set<java.lang.String> strSet83 = locale79.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74787 + "'", int8 == 74787);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 34969770L + "'", long25 == 34969770L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 27320L + "'", long28 == 27320L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2818" + "'", str31, "2818");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "0" + "'", str65, "0");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "52" + "'", str68, "52");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "292278993" + "'", str72, "292278993");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "GBR" + "'", str73, "GBR");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Chinese" + "'", str76, "Chinese");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "eng" + "'", str77, "eng");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0" + "'", str80, "0");
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.add((long) 852);
        mutableDateTime12.addMillis(74537);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setDate(10699, 2022, 1644572477);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74787 + "'", int7 == 74787);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:27.937Z" + "'", str16, "2022-02-11T09:46:27.937Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        long long8 = dateTimeField2.add(0L, 537);
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.hourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DurationField durationField22 = chronology18.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.year();
        long long26 = dateTimeField23.set(287L, "9");
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.days();
        boolean boolean39 = durationFieldType28.isSupported(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.centuryOfEra();
        java.lang.String str42 = dateTimeField40.getAsText((long) 74413);
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.addHours(59);
        int int50 = mutableDateTime45.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int52 = mutableDateTime45.get(dateTimeFieldType51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime45.hourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = property53.getField();
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        int int62 = dateTimeField58.getDifference((long) 10, (long) 'a');
        int int64 = dateTimeField58.getMaximumValue((long) (byte) 1);
        java.lang.String str66 = dateTimeField58.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial67 = null;
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology69, locale70, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeParserBucket73.getZone();
        org.joda.time.Chronology chronology75 = dateTimeParserBucket73.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.days();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.dayOfYear();
        org.joda.time.ReadablePartial readablePartial78 = null;
        int[] intArray84 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int85 = dateTimeField77.getMinimumValue(readablePartial78, intArray84);
        int int86 = dateTimeField58.getMaximumValue(readablePartial67, intArray84);
        int int87 = dateTimeField54.getMinimumValue(readablePartial55, intArray84);
        int int88 = dateTimeField40.getMinimumValue(readablePartial43, intArray84);
        int int89 = dateTimeField23.getMaximumValue(readablePartial27, intArray84);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField2.add(readablePartial9, 57496329, intArray84, 74787);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57496329");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 537000L + "'", long8 == 537000L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61883135999713L) + "'", long26 == (-61883135999713L));
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "19" + "'", str42, "19");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 947 + "'", int50 == 947);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 59 + "'", int86 == 59);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 292278993 + "'", int89 == 292278993);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.weekyears();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.weekyearOfCentury();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket25.getZone();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        mutableDateTime31.setRounding(dateTimeField39);
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = dateTimeField39.getAsShortText((int) (byte) 1, locale43);
        java.lang.String str45 = dateTimeZone27.getName(10930L, locale43);
        java.lang.String str46 = locale43.getVariant();
        java.lang.String str47 = locale43.getScript();
        java.lang.String str48 = locale43.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = dateTimeField17.set((long) 34957, "2022-02-11T09:42:57.836Z", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:42:57.836Z\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "French" + "'", str48, "French");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfDay(10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9, 580);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime1.add(readablePeriod12, 6);
        mutableDateTime1.setMillisOfDay(35333);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = null;
        java.lang.String str23 = mutableDateTime19.toString(dateTimeFormatter22);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (byte) 0);
        mutableDateTime19.setZoneRetainFields(dateTimeZone30);
        org.joda.time.Chronology chronology34 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType17.getField(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        boolean boolean39 = mutableDateTime1.equals((java.lang.Object) dateTimeField38);
        int int40 = mutableDateTime1.getMinuteOfHour();
        int int41 = mutableDateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 978 + "'", int6 == 978);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:46:27.978Z" + "'", str23, "2022-02-11T09:46:27.978Z");
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.minuteOfHour();
        boolean boolean40 = dateTimeParserBucket35.restoreState((java.lang.Object) mutableDateTime37);
        java.lang.Integer int41 = dateTimeParserBucket35.getOffsetInteger();
        long long43 = dateTimeParserBucket35.computeMillis(true);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket35.getZone();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(int41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone44);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        int int11 = mutableDateTime1.get(dateTimeFieldType10);
        int int12 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 779);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundFloor();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfHour();
        int int24 = mutableDateTime18.getSecondOfDay();
        mutableDateTime18.addSeconds((-292275054));
        int int27 = mutableDateTime18.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime18.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.weekOfWeekyear();
        mutableDateTime28.setMillisOfDay(28);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) mutableDateTime28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 74788005 + "'", int12 == 74788005);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 74788 + "'", int24 == 74788);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 15 + "'", int27 == 15);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(176);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 176 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572788018L + "'", long10 == 1644572788018L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime18.add(readableDuration26);
        java.lang.Object obj28 = mutableDateTime18.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setMinuteOfHour(528);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 528 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:28.131Z" + "'", str5, "2022-02-11T09:46:28.131Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "0672-02-09T09:46:28.131Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "0672-02-09T09:46:28.131Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "0672-02-09T09:46:28.131Z");
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, 5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.addSeconds((-292275054));
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        java.util.Locale locale35 = locale31.stripExtensions();
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = mutableDateTime11.toString("842", locale35);
        boolean boolean38 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        boolean boolean40 = mutableDateTime11.isEqual(237000L);
        int int41 = mutableDateTime11.getWeekOfWeekyear();
        long long42 = mutableDateTime11.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74788 + "'", int17 == 74788);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "842" + "'", str37, "842");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 45 + "'", int41 == 45);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1352510134144L + "'", long42 == 1352510134144L);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:42:16.069Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:42:16.069z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DurationField durationField10 = chronology7.millis();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket16.getZone();
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        mutableDateTime22.setRounding(dateTimeField30);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = dateTimeField30.getAsShortText((int) (byte) 1, locale34);
        java.lang.String str36 = dateTimeZone18.getName(10930L, locale34);
        org.joda.time.Chronology chronology37 = chronology7.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField38 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = chronology7.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.yearOfCentury();
        mutableDateTime19.setMillisOfDay(7);
        long long24 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.setMillisOfDay(10);
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.monthOfYear();
        mutableDateTime1.setRounding(dateTimeField28, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        org.joda.time.DurationField durationField34 = dateTimeField33.getDurationField();
        boolean boolean36 = dateTimeField33.isLeap((long) (short) -1);
        java.lang.String str38 = dateTimeField33.getAsShortText((long) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getLeapAmount((-1L));
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = dateTimeField41.getAsText((long) 340, locale49);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField41.getAsShortText((int) '4', locale52);
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = dateTimeField41.getAsText(readablePartial54, 292278993, locale56);
        int int58 = dateTimeField33.getMaximumTextLength(locale56);
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale56.getDisplayVariant(locale59);
        java.lang.String str63 = locale59.getExtension('a');
        java.util.Locale.setDefault(locale59);
        int int65 = dateTimeField28.getMaximumShortTextLength(locale59);
        long long67 = dateTimeField28.roundHalfFloor((long) 35148686);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=175,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52" + "'", str53, "52");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "292278993" + "'", str57, "292278993");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        int int4 = mutableDateTime3.getSecondOfDay();
        java.lang.String str5 = mutableDateTime3.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setSecondOfDay(35100329);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35100329 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35188 + "'", int4 == 35188);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122-02-11T09:46:28.194Z" + "'", str5, "2122-02-11T09:46:28.194Z");
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType49.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = chronology63.weekyear();
        org.joda.time.DurationField durationField70 = chronology63.days();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u661f\u671f\u4e94" + "'", str23, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        long long42 = dateTimeParserBucket39.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        boolean boolean45 = dateTimeParserBucket39.restoreState((java.lang.Object) property44);
        int int46 = property44.getMinimumValueOverall();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime48.set(dateTimeFieldType52, (int) 'a');
        int int55 = mutableDateTime48.getEra();
        boolean boolean56 = mutableDateTime48.isEqualNow();
        int int57 = property44.getDifference((org.joda.time.ReadableInstant) mutableDateTime48);
        int int58 = mutableDateTime48.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime48.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundHalfFloor();
        int int61 = mutableDateTime60.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType62.getDurationType();
        mutableDateTime60.add(durationFieldType64, 34908298);
        int int67 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 236 + "'", int6 == 236);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 46 + "'", int19 == 46);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 236 + "'", int27 == 236);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572788236L + "'", long30 == 1644572788236L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20 + "'", int61 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.Chronology chronology14 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology14, locale16);
        java.lang.String str18 = locale16.getLanguage();
        java.lang.String str19 = locale16.getLanguage();
        java.lang.String str20 = property6.getAsText(locale16);
        org.joda.time.MutableDateTime mutableDateTime21 = property6.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fr" + "'", str19, "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "44" + "'", str20, "44");
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime1.getZone();
        long long14 = dateTimeZone11.convertLocalToUTC(328651L, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 270 + "'", int7 == 270);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 328651L + "'", long14 == 328651L);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(100);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(10);
        int int17 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfWeek();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property29.getAsText(locale30);
        java.util.Locale locale32 = null;
        int int33 = property29.getMaximumTextLength(locale32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        mutableDateTime35.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int44 = dateTimeField43.getMaximumValue();
        mutableDateTime35.setRounding(dateTimeField43);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 1, locale47);
        java.lang.String str49 = property29.getAsShortText(locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale47.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale47);
        org.joda.time.DurationField durationField54 = chronology25.centuries();
        java.lang.String str55 = chronology25.toString();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime16.toMutableDateTime(chronology25);
        org.joda.time.DurationField durationField57 = chronology25.days();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray61 = chronology25.get(readablePeriod58, (long) 40849, (long) 709);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u661f\u671f\u4e94" + "'", str31, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ven." + "'", str49, "ven.");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(durationField54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.setDayOfYear(7);
        java.lang.String str9 = mutableDateTime1.toString();
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime1.add(readableDuration10, 74465);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(163, 290, 34929238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 290 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572788293,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=28,MILLISECOND=293,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-01-07T09:46:28.293Z" + "'", str9, "2022-01-07T09:46:28.293Z");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.addHours((int) (short) 0);
        mutableDateTime4.addWeekyears((int) 'a');
        java.lang.String str10 = mutableDateTime4.toString("0");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        mutableDateTime4.set(dateTimeFieldType19, 5);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(10);
        org.joda.time.DateTimeField dateTimeField26 = property23.getField();
        long long28 = dateTimeField26.roundHalfEven(866L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withZone(dateTimeZone7);
        boolean boolean10 = dateTimeFormatter5.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket18.getZone();
        boolean boolean21 = dateTimeZone20.isFixed();
        long long23 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, 0L);
        java.lang.String str24 = dateTimeZone12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter5.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology26 = dateTimeFormatter5.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withOffsetParsed();
        int int28 = dateTimeFormatter27.getDefaultYear();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 678L + "'", long23 == 678L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.678" + "'", str24, "+00:00:00.678");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str36 = dateTimeZone34.getNameKey((long) (byte) 0);
        mutableDateTime23.setZoneRetainFields(dateTimeZone34);
        mutableDateTime16.setZone(dateTimeZone34);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.weekyear();
        java.lang.String str42 = property41.getAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 364 + "'", int21 == 364);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T09:46:28.364Z" + "'", str27, "2022-02-11T09:46:28.364Z");
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        java.lang.Integer int15 = dateTimeParserBucket14.getPivotYear();
        java.lang.Integer int16 = dateTimeParserBucket14.getPivotYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime18.set(dateTimeFieldType22, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        int int26 = mutableDateTime18.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime27 = mutableDateTime18.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        java.util.Locale locale31 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(0L, chronology30, locale31, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket34.getZone();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology36, locale38, (java.lang.Integer) 2022);
        java.util.Locale locale42 = locale38.stripExtensions();
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale42.getISO3Language();
        java.util.Calendar calendar45 = dateTime27.toCalendar(locale42);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime27.getZone();
        long long49 = dateTimeZone46.convertLocalToUTC((long) 65, true);
        dateTimeParserBucket14.setZone(dateTimeZone46);
        dateTimeParserBucket14.setOffset((java.lang.Integer) 466);
        int int53 = dateTimeParserBucket14.getOffset();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644537697376,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=376,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 65L + "'", long49 == 65L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 466 + "'", int53 == 466);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:42:20.327Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:42:20.327z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("GB");
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setScript("2022-02-11T09:41:32.342-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:41:32.342-00:00:00.001 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        java.util.GregorianCalendar gregorianCalendar46 = mutableDateTime24.toGregorianCalendar();
        int int47 = mutableDateTime24.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str49 = dateTimeFieldType48.toString();
        boolean boolean50 = mutableDateTime24.isSupported(dateTimeFieldType48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime24.hourOfDay();
        java.lang.String str52 = mutableDateTime24.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 405 + "'", int29 == 405);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 29248 + "'", int47 == 29248);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "year" + "'", str49, "year");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2924811-02-13T20:46:28.405Z" + "'", str52, "2924811-02-13T20:46:28.405Z");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.lang.String str6 = dateTimeField2.getName();
        long long8 = dateTimeField2.roundHalfCeiling((long) 1);
        org.joda.time.ReadablePartial readablePartial9 = null;
        int int10 = dateTimeField2.getMinimumValue(readablePartial9);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField2.set(898920991L, "");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondOfMinute" + "'", str6, "secondOfMinute");
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 6);
        java.lang.Object obj5 = null;
        boolean boolean6 = dateTimeZone2.equals(obj5);
        long long9 = dateTimeZone2.adjustOffset((long) 340, false);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone2.getOffset(readableInstant10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(1644572537832L, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setSecondOfMinute(64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.678" + "'", str4, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 340L + "'", long9 == 340L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 678 + "'", int11 == 678);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.addHours((int) (short) 0);
        mutableDateTime12.addWeekyears((int) 'a');
        java.lang.String str18 = mutableDateTime12.toString("0");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        mutableDateTime12.set(dateTimeFieldType27, 5);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.year();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology39);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime44.yearOfCentury();
        int int47 = mutableDateTime44.getMinuteOfHour();
        org.joda.time.Chronology chronology48 = mutableDateTime44.getChronology();
        boolean boolean49 = dateTimeFieldType27.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74788 + "'", int7 == 74788);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 46 + "'", int47 == 46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        org.joda.time.Instant instant11 = mutableDateTime2.toInstant();
        mutableDateTime2.addDays((int) ' ');
        java.util.Date date14 = mutableDateTime2.toDate();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology16 = null;
        boolean boolean17 = durationFieldType15.isSupported(chronology16);
        mutableDateTime2.add(durationFieldType15, 902);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology28, locale30, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField34 = chronology28.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.millisOfSecond();
        org.joda.time.DurationField durationField36 = chronology28.minutes();
        boolean boolean37 = durationFieldType15.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 854, chronology28);
        int int40 = mutableDateTime39.getHourOfDay();
        int int41 = mutableDateTime39.getEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Mar 15 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(74776);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74776 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTimeField dateTimeField3 = dateTimeFieldType1.getField(chronology2);
        int int5 = dateTimeField3.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        java.util.Locale locale10 = null;
        java.lang.String str11 = property9.getAsText(locale10);
        java.util.Locale locale12 = null;
        int int13 = property9.getMaximumTextLength(locale12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        mutableDateTime15.setRounding(dateTimeField23);
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = dateTimeField23.getAsShortText((int) (byte) 1, locale27);
        java.lang.String str29 = property9.getAsShortText(locale27);
        java.lang.String str30 = dateTimeField3.getAsShortText(1L, locale27);
        int int31 = dateTimeField3.getMaximumValue();
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.Chronology chronology55 = dateTimeParserBucket53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.hourOfHalfday();
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale57.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology55, locale57, (java.lang.Integer) 2022);
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale61.getISO3Language();
        java.lang.String str63 = dateTimeField44.getAsText(readablePartial45, 842, locale61);
        int int64 = dateTimeField3.getMaximumShortTextLength(locale61);
        java.util.Locale.setDefault(category0, locale61);
        java.util.Locale locale66 = java.util.Locale.getDefault(category0);
        java.util.Locale locale67 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u661f\u671f\u4e94" + "'", str11, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ven." + "'", str29, "ven.");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "842" + "'", str63, "842");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        int int24 = mutableDateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        int int27 = mutableDateTime26.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getDurationType();
        mutableDateTime26.add(durationFieldType30, 34908298);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime26.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.add(1309);
        int int36 = mutableDateTime35.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.util.Calendar calendar41 = mutableDateTime1.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime44.getZone();
        long long53 = dateTimeZone51.nextTransition((long) 59);
        java.lang.String str55 = dateTimeZone51.getName((long) (short) 0);
        java.lang.String str56 = dateTimeZone51.getID();
        mutableDateTime1.setZone(dateTimeZone51);
        mutableDateTime1.setMillis((long) 34811);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime1.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(74630);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74630 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.585Z" + "'", str22, "2022-02-11T00:01:37.585Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=9123494497585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 59L + "'", long53 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.setVariant("2022");
        java.util.Locale locale6 = new java.util.Locale("2022-02-11T09:40:20.145Z");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11t09:40:20.145z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale6.toString(), "2022-02-11t09:40:20.145z");
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.Chronology chronology9 = mutableDateTime4.getChronology();
        mutableDateTime1.setChronology(chronology9);
        org.joda.time.DurationField durationField11 = chronology9.days();
        org.joda.time.DurationField durationField12 = chronology9.weekyears();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        long long24 = property22.remainder();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.setMinuteOfHour((int) (short) 1);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime26.weekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add((long) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        mutableDateTime37.addHours(59);
        org.joda.time.Chronology chronology42 = mutableDateTime37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology42, locale44);
        java.lang.String str46 = property32.getAsShortText(locale44);
        java.lang.String str47 = locale44.getLanguage();
        java.lang.String str48 = property22.getAsShortText(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(1644785106302L, chronology9, locale44, (java.lang.Integer) 477);
        boolean boolean51 = locale44.hasExtensions();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 648 + "'", int31 == 648);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2032" + "'", str46, "2032");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11" + "'", str48, "11");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.weekyear();
        int int15 = property14.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.minuteOfHour();
        int int18 = mutableDateTime16.getSecondOfMinute();
        int int19 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        boolean boolean20 = property1.isLeap();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        int int30 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology32, locale33, (java.lang.Integer) 9, 59);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket36.saveField(dateTimeFieldType38, 59);
        boolean boolean41 = mutableDateTime25.isSupported(dateTimeFieldType38);
        int int42 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        int int43 = mutableDateTime25.getDayOfMonth();
        mutableDateTime25.addMillis(4);
        mutableDateTime25.addHours(0);
        long long48 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DurationField durationField49 = property1.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572788663,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=28,MILLISECOND=663,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 663 + "'", int30 == 663);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNull(durationField49);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        boolean boolean6 = mutableDateTime1.isAfter(218915317700L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        mutableDateTime8.addWeeks(34808947);
        boolean boolean17 = mutableDateTime8.isBefore((long) 533);
        mutableDateTime8.addMinutes((int) (short) 100);
        boolean boolean20 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int13 = dateTimeField12.getMaximumValue();
        int int16 = dateTimeField12.getDifference((long) 10, (long) 'a');
        int int18 = dateTimeField12.getLeapAmount((-1L));
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = dateTimeField12.getAsText((long) 340, locale20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = dateTimeField12.getAsShortText((int) '4', locale23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField12.getAsText(readablePartial25, 292278993, locale27);
        java.lang.String str29 = mutableDateTime1.toString("237", locale27);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 690 + "'", int6 == 690);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "52" + "'", str24, "52");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "292278993" + "'", str28, "292278993");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "237" + "'", str29, "237");
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        int int11 = mutableDateTime6.getMillisOfSecond();
        mutableDateTime6.setMillisOfDay(10);
        boolean boolean14 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime6);
        int int15 = mutableDateTime1.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 700 + "'", int11 == 700);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime4.getZone();
        int int24 = mutableDateTime4.getWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        mutableDateTime26.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        int int38 = mutableDateTime26.get(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime26.secondOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.setMinuteOfHour((int) (short) 1);
        int int46 = mutableDateTime41.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime41.weekyear();
        int int48 = mutableDateTime41.getDayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = mutableDateTime41.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int51 = mutableDateTime41.get(dateTimeFieldType50);
        int int52 = property39.getDifference((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        java.lang.String str55 = mutableDateTime41.toString("74434");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 708 + "'", int9 == 708);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 74788708 + "'", int22 == 74788708);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 708 + "'", int46 == 708);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 42 + "'", int48 == 42);
        org.junit.Assert.assertNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 541 + "'", int51 == 541);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-32488) + "'", int52 == (-32488));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "74434" + "'", str55, "74434");
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.set(74444144);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = property10.add(1644785105069L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1644785105069");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        long long17 = dateTimeZone13.convertLocalToUTC(0L, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addDays(5);
        boolean boolean13 = mutableDateTime1.isAfter((long) '#');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime15.getZone();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime1.addMillis(145);
        int int31 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter35.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter35.getParser();
        boolean boolean38 = dateTimeFormatter35.isParser();
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.days();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology46.add(readablePeriod48, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter35.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType32.getField(chronology46);
        mutableDateTime1.setChronology(chronology46);
        org.joda.time.DurationField durationField55 = chronology46.seconds();
        org.joda.time.DateTimeField dateTimeField56 = chronology46.clockhourOfHalfday();
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        mutableDateTime60.addHours(59);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.joda.time.ReadablePartial readablePartial67 = null;
        int[] intArray74 = new int[] { 11, (-1), 2, 634, ' ', '#' };
        int int75 = dateTimeField66.getMinimumValue(readablePartial67, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField56.add(readablePartial57, 74772895, intArray74, 81857899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 74772895");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 762 + "'", int7 == 762);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697762,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=762,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNull(dateTimeZone36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[11, -1, 2, 634, 32, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 809);
        org.joda.time.Chronology chronology14 = dateTimeFormatter13.getChronolgy();
        boolean boolean15 = dateTimeFormatter13.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter16.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        int int24 = dateTimeField20.getDifference((long) 10, (long) 'a');
        int int26 = dateTimeField20.getLeapAmount((-1L));
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = dateTimeField20.getAsText((long) 340, locale28);
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter16.withLocale(locale28);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "italien (Italie)" + "'", str31, "italien (Italie)");
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfHour();
        long long39 = chronology30.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField40 = chronology30.weeks();
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology30);
        int int42 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar46 = mutableDateTime43.toCalendar(locale45);
        mutableDateTime43.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int52 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        java.util.Date date63 = mutableDateTime54.toDate();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime54.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 34835);
        mutableDateTime1.setZoneRetainFields(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime69 = mutableDateTime1.toMutableDateTime();
        mutableDateTime69.setMillisOfDay(41142);
        int int72 = mutableDateTime69.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 7218525L + "'", long39 == 7218525L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572788809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=28,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getDayOfMonth();
        long long23 = mutableDateTime4.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setTime(616, 244, 82974, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 616 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 838 + "'", int9 == 838);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644785188838L + "'", long23 == 1644785188838L);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = dateTimeFormatter11.parseMutableDateTime("2022-02-11T09:42:20.327Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setYear((-1));
        int int15 = mutableDateTime1.getSecondOfMinute();
        java.lang.String str16 = mutableDateTime1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 37 + "'", int15 == 37);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-0001-02-11T00:01:37.863Z" + "'", str16, "-0001-02-11T00:01:37.863Z");
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        mutableDateTime9.setRounding(dateTimeField13);
        mutableDateTime9.addDays(627);
        int int22 = mutableDateTime9.getMinuteOfDay();
        mutableDateTime9.addWeeks(74434287);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime9.add(readableDuration25, 218);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        boolean boolean32 = dateTimeZone30.isStandardOffset((long) 3);
        long long34 = dateTimeZone30.nextTransition((long) 225);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime36.set(dateTimeFieldType40, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        int int44 = mutableDateTime36.get(dateTimeFieldType43);
        int int45 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.Instant instant46 = mutableDateTime36.toInstant();
        int int47 = mutableDateTime36.getMinuteOfHour();
        int int48 = mutableDateTime36.getWeekyear();
        int int49 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime9.setZone(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime51 = null;
        boolean boolean52 = dateTimeZone30.isLocalDateTimeGap(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 586 + "'", int22 == 586);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 225L + "'", long34 == 225L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1404780000 + "'", int49 == 1404780000);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        org.joda.time.Chronology chronology26 = mutableDateTime1.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.920Z" + "'", str22, "2022-02-11T00:01:37.920Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644784858327L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        int int11 = mutableDateTime3.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = mutableDateTime3.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        mutableDateTime14.addYears(0);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime3.addMillis((int) (byte) 0);
        int int23 = mutableDateTime3.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime3.property(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.days();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.minuteOfHour();
        org.joda.time.Chronology chronology40 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology34.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology34.add(readablePeriod43, (long) 166, 34824770);
        org.joda.time.DurationField durationField47 = durationFieldType26.getField(chronology34);
        org.joda.time.DateTimeZone dateTimeZone48 = chronology34.getZone();
        mutableDateTime1.setChronology(chronology34);
        mutableDateTime1.addMonths(93);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType52.getField(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType52, 211);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 211 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 166L + "'", long46 == 166L);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        mutableDateTime0.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.weekyear();
        boolean boolean24 = property23.isLeap();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.secondOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int45 = dateTimeField44.getMaximumValue();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = dateTimeField44.getAsShortText(0L, locale47);
        boolean boolean50 = dateTimeField44.isLenient();
        org.joda.time.ReadablePartial readablePartial51 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        int int63 = mutableDateTime54.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.yearOfEra();
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar67 = mutableDateTime64.toCalendar(locale66);
        java.util.Calendar calendar68 = mutableDateTime54.toCalendar(locale66);
        java.lang.String str69 = dateTimeField44.getAsShortText(readablePartial51, (int) ' ', locale66);
        java.lang.String str70 = dateTimeField40.getAsText(224, locale66);
        java.lang.String str71 = locale66.toLanguageTag();
        int int72 = property23.getMaximumTextLength(locale66);
        java.util.Locale locale73 = locale66.stripExtensions();
        java.lang.String str74 = locale66.getDisplayScript();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572788997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=28,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:46:28.997Z" + "'", str11, "2022-02-11T09:46:28.997Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644572788997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=28,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644537697997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "32" + "'", str69, "32");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "224" + "'", str70, "224");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh-TW" + "'", str71, "zh-TW");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setLanguageTag("2022-02-11T09:45:30.933+00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.yearOfEra();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35189027 + "'", int28 == 35189027);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfDay();
        int int4 = mutableDateTime1.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 191 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.dayOfWeek();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        boolean boolean30 = dateTimeZone27.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 1, dateTimeZone27);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale locale35 = builder34.build();
        java.util.Locale locale36 = builder34.build();
        java.util.Locale.Builder builder38 = builder34.setVariant("2022");
        java.util.Locale locale39 = builder38.build();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        int int50 = dateTimeField49.getMaximumValue();
        mutableDateTime41.setRounding(dateTimeField49);
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.lang.String str54 = dateTimeField49.getAsShortText((int) (byte) 1, locale53);
        java.lang.String str55 = locale53.getDisplayScript();
        java.lang.String str56 = locale53.getISO3Country();
        java.lang.String str57 = locale39.getDisplayVariant(locale53);
        java.lang.String str58 = dateTimeZone27.getName((long) 212, locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = dateTimeField17.getAsShortText(74755, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 74755");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 59 + "'", int50 == 59);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTime();
        int int9 = mutableDateTime1.getYear();
        mutableDateTime1.add(946684800687L);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 167, chronology8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        boolean boolean19 = mutableDateTime14.isSupported(dateTimeFieldType18);
        int int20 = mutableDateTime14.getYearOfEra();
        mutableDateTime14.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = dateTimeField27.getAsShortText(0L, locale30);
        boolean boolean33 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        int int46 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfEra();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar50 = mutableDateTime47.toCalendar(locale49);
        java.util.Calendar calendar51 = mutableDateTime37.toCalendar(locale49);
        java.lang.String str52 = dateTimeField27.getAsShortText(readablePartial34, (int) ' ', locale49);
        int int53 = property24.getMaximumShortTextLength(locale49);
        org.joda.time.MutableDateTime mutableDateTime54 = property24.roundCeiling();
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean56 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        boolean boolean57 = mutableDateTime14.isEqualNow();
        int int58 = mutableDateTime14.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572789081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=29,MILLISECOND=81,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644537697081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=81,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "32" + "'", str52, "32");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 20 + "'", int58 == 20);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        mutableDateTime1.addSeconds(0);
        int int13 = mutableDateTime1.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        mutableDateTime16.addWeeks(40);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.clockhourOfDay();
        mutableDateTime16.setChronology(chronology30);
        mutableDateTime14.setChronology(chronology30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 105 + "'", int7 == 105);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        int int6 = mutableDateTime0.getDayOfMonth();
        int int7 = mutableDateTime0.getMillisOfSecond();
        int int8 = mutableDateTime0.getSecondOfDay();
        mutableDateTime0.addWeekyears(565);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.minuteOfHour();
        mutableDateTime12.addWeeks(34808947);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        boolean boolean29 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.minuteOfHour();
        int int37 = mutableDateTime31.getSecondOfDay();
        mutableDateTime31.setSecondOfDay((int) (byte) 0);
        mutableDateTime31.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.addHours((int) (short) 0);
        mutableDateTime42.addWeekyears((int) 'a');
        java.lang.String str48 = mutableDateTime42.toString("0");
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        int int58 = mutableDateTime50.get(dateTimeFieldType57);
        mutableDateTime42.set(dateTimeFieldType57, 5);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime31.property(dateTimeFieldType57);
        mutableDateTime21.set(dateTimeFieldType57, 237);
        java.lang.String str64 = mutableDateTime21.toString();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime21.millisOfDay();
        boolean boolean66 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572789117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=29,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 117 + "'", int7 == 117);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 41189 + "'", int8 == 41189);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 117 + "'", int27 == 117);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 74789 + "'", int37 == 74789);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(property61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0237-02-11T09:46:29.117Z" + "'", str64, "0237-02-11T09:46:29.117Z");
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology5 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 46 + "'", int4 == 46);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        int int3 = property1.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.DurationField durationField17 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType6.getField(chronology14);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMinimumValue(readablePartial19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int[] intArray34 = null;
        int int35 = dateTimeField32.getMinimumValue(readablePartial33, intArray34);
        long long37 = dateTimeField32.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getMaximumValue((long) (byte) 1);
        java.lang.String str49 = dateTimeField41.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray67 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int68 = dateTimeField60.getMinimumValue(readablePartial61, intArray67);
        int int69 = dateTimeField41.getMaximumValue(readablePartial50, intArray67);
        int int70 = dateTimeField32.getMinimumValue(readablePartial38, intArray67);
        int int71 = dateTimeField18.getMaximumValue(readablePartial21, intArray67);
        int int72 = dateTimeField4.getMinimumValue(readablePartial5, intArray67);
        int int74 = dateTimeField4.getMaximumValue(1644784966650L);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.add(100);
        org.joda.time.MutableDateTime mutableDateTime81 = property77.addWrapField(10);
        mutableDateTime81.setMillis((long) 779);
        long long84 = mutableDateTime81.getMillis();
        mutableDateTime81.addWeekyears((-2));
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime81.dayOfWeek();
        java.util.Locale locale88 = java.util.Locale.getDefault();
        java.lang.String str89 = locale88.getISO3Language();
        java.lang.String str90 = locale88.getLanguage();
        java.lang.String str91 = property87.getAsShortText(locale88);
        java.lang.String str92 = locale88.getDisplayLanguage();
        java.lang.String str93 = dateTimeField4.getAsShortText(0L, locale88);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278993 + "'", int3 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 865L + "'", long37 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278993 + "'", int74 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 779L + "'", long84 == 779L);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "zho" + "'", str89, "zho");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "zh" + "'", str90, "zh");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\u661f\u671f\u56db" + "'", str91, "\u661f\u671f\u56db");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "chinois" + "'", str92, "chinois");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(1644577200000L, chronology1);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = null;
        int int17 = property13.getMaximumTextLength(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = property13.getAsShortText(locale31);
        java.lang.String str34 = dateTimeField8.getAsShortText(readablePartial9, (int) (short) -1, locale31);
        java.lang.String str35 = locale31.getCountry();
        java.util.Locale.setDefault(locale31);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u661f\u671f\u4e94" + "'", str15, "\u661f\u671f\u4e94");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ven." + "'", str33, "ven.");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getDayOfYear();
        int int7 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(496, 98728, 680, 120);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 496 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:46:29.235Z" + "'", str5, "2022-02-11T09:46:29.235Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        mutableDateTime3.setHourOfDay((int) (byte) 1);
        mutableDateTime3.addWeeks(568);
        int int8 = mutableDateTime3.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime3.toMutableDateTimeISO();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime3.toMutableDateTime(chronology17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setWeekOfWeekyear(202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        mutableDateTime0.setChronology(chronology8);
        mutableDateTime0.setSecondOfMinute(0);
        mutableDateTime0.setDate(1644788463784L);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.Chronology chronology23 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.DurationField durationField25 = chronology23.seconds();
        org.joda.time.DateTime dateTime26 = mutableDateTime0.toDateTime(chronology23);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer9, readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getMillisOfDay();
        mutableDateTime17.addDays(22);
        mutableDateTime17.setYear(59);
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTime dateTime26 = dateTime15.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTimeISO();
        int int28 = dateTime26.getMillisOfSecond();
        java.util.GregorianCalendar gregorianCalendar29 = dateTime26.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35189301 + "'", int20 == 35189301);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 301 + "'", int28 == 301);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        mutableDateTime3.setHourOfDay((int) (byte) 1);
        mutableDateTime3.addWeeks(568);
        mutableDateTime3.addMillis(157);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withOffsetParsed();
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        org.joda.time.Chronology chronology14 = dateTimeFormatter12.getChronolgy();
        boolean boolean15 = dateTimeFormatter12.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 601);
        java.lang.StringBuffer stringBuffer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer12, (long) 792);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        java.lang.Object obj7 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfEra();
        java.lang.String str10 = property9.getAsText();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.add((long) 439);
        int int14 = mutableDateTime13.getDayOfWeek();
        mutableDateTime13.setMillis((long) 34883740);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.era();
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) mutableDateTime13);
        mutableDateTime1.addMinutes(34868);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "2022-02-11T09:46:29.372Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "2022-02-11T09:46:29.372Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "2022-02-11T09:46:29.372Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj11 = mutableDateTime1.clone();
        mutableDateTime1.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        boolean boolean16 = property15.isLeap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = property15.set("2022-02-11T09:42:39.498Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:42:39.498Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "2022-02-11T00:01:37.394Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "2022-02-11T00:01:37.394Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "2022-02-11T00:01:37.394Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        int int4 = property1.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(74457592);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add(34873735);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DurationField durationField20 = chronology17.centuries();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 167, chronology17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        int int29 = mutableDateTime23.getYearOfEra();
        mutableDateTime23.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = locale39.getISO3Country();
        java.lang.String str41 = dateTimeField36.getAsShortText(0L, locale39);
        boolean boolean42 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = mutableDateTime46.get(dateTimeFieldType53);
        int int55 = mutableDateTime46.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar59 = mutableDateTime56.toCalendar(locale58);
        java.util.Calendar calendar60 = mutableDateTime46.toCalendar(locale58);
        java.lang.String str61 = dateTimeField36.getAsShortText(readablePartial43, (int) ' ', locale58);
        int int62 = property33.getMaximumShortTextLength(locale58);
        org.joda.time.MutableDateTime mutableDateTime63 = property33.roundCeiling();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime63);
        boolean boolean65 = mutableDateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime21.weekOfWeekyear();
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.450Z");
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        int int70 = property66.getMaximumShortTextLength(locale68);
        int int71 = property1.getMaximumShortTextLength(locale68);
        java.lang.String str72 = locale68.getDisplayName();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0" + "'", str41, "0");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644572789404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=29,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644537697404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "32" + "'", str61, "32");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        boolean boolean8 = dateTimeZone7.isFixed();
        long long11 = dateTimeZone7.adjustOffset((long) 34992084, true);
        boolean boolean13 = dateTimeZone7.isStandardOffset(127920830L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 34992084L + "'", long11 == 34992084L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial9 = null;
        int[] intArray16 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int17 = dateTimeField2.getMinimumValue(readablePartial9, intArray16);
        org.joda.time.DurationField durationField18 = dateTimeField2.getRangeDurationField();
        int int19 = dateTimeField2.getMaximumValue();
        org.joda.time.DurationField durationField20 = dateTimeField2.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.millisOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int33 = mutableDateTime26.get(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfWeek();
        java.util.Locale locale38 = null;
        java.lang.String str39 = property37.getAsText(locale38);
        java.util.Locale locale40 = null;
        int int41 = property37.getMaximumTextLength(locale40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        mutableDateTime43.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        mutableDateTime43.setRounding(dateTimeField51);
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = dateTimeField51.getAsShortText((int) (byte) 1, locale55);
        java.lang.String str57 = property37.getAsShortText(locale55);
        java.util.Calendar calendar58 = mutableDateTime26.toCalendar(locale55);
        int int59 = property24.getMaximumShortTextLength(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology18, locale55, (java.lang.Integer) 664);
        java.lang.String str62 = locale55.getISO3Country();
        java.util.Set<java.lang.String> strSet63 = locale55.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter2.withLocale(locale55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withDefaultYear(34966000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime68 = dateTimeFormatter66.parseDateTime("2022-02-11T00:01:37.241Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 499 + "'", int31 == 499);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "vendredi" + "'", str39, "vendredi");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ven." + "'", str57, "ven.");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644785189499,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=29,MILLISECOND=499,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (byte) 0);
        mutableDateTime4.setZoneRetainFields(dateTimeZone15);
        org.joda.time.Chronology chronology19 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType2.getField(chronology19);
        int int22 = mutableDateTime1.get(dateTimeFieldType2);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.addWrapField(79);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.toMutableDateTimeISO();
        mutableDateTime26.addHours(97923);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime30.getZone();
        long long39 = dateTimeZone37.nextTransition((long) 59);
        java.lang.String str41 = dateTimeZone37.getName((long) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime43.toMutableDateTime();
        int int50 = mutableDateTime43.getYear();
        int int51 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        java.lang.String str53 = dateTimeZone37.getName((long) 74507);
        mutableDateTime26.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime56.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime56.toMutableDateTimeISO();
        int int60 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeFormatter63.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter63.getParser();
        boolean boolean66 = dateTimeFormatter63.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.Chronology chronology68 = dateTimeFormatter63.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = dateTimeFormatter63.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter63.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter63.withDefaultYear(34808947);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = mutableDateTime26.toString(dateTimeFormatter63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:46:29.516Z" + "'", str8, "2022-02-11T09:46:29.516Z");
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 59L + "'", long39 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(dateTimeZone64);
        org.junit.Assert.assertNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(chronology68);
        org.junit.Assert.assertNull(dateTimePrinter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        int int30 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology32, locale33, (java.lang.Integer) 9, 59);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket36.saveField(dateTimeFieldType38, 59);
        boolean boolean41 = mutableDateTime25.isSupported(dateTimeFieldType38);
        int int42 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) mutableDateTime22);
        int int44 = mutableDateTime22.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDate(10689, 57488, 347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57488 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 533 + "'", int30 == 533);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 586 + "'", int44 == 586);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.roundHalfEven();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        java.lang.String str16 = dateTimeZone15.getID();
        java.lang.String str18 = dateTimeZone15.getNameKey((long) 74414);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = mutableDateTime20.toDateTime();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addYears(0);
        mutableDateTime20.setDate((org.joda.time.ReadableInstant) mutableDateTime31);
        int int38 = mutableDateTime20.getEra();
        int int39 = mutableDateTime20.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = mutableDateTime20.toString(dateTimeFormatter40);
        int int42 = mutableDateTime20.getMinuteOfHour();
        mutableDateTime20.addWeeks(258);
        boolean boolean45 = mutableDateTime20.isEqualNow();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        java.lang.String str53 = dateTimeZone52.toString();
        boolean boolean55 = dateTimeZone52.isStandardOffset((long) 59);
        mutableDateTime20.setZone(dateTimeZone52);
        long long58 = dateTimeZone15.getMillisKeepLocal(dateTimeZone52, 779L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        boolean boolean60 = property2.equals((java.lang.Object) dateTimeZone52);
        int int61 = property2.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T00:01:37.563Z" + "'", str41, "2022-02-11T00:01:37.563Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 779L + "'", long58 == 779L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime8.getZone();
        long long17 = dateTimeZone15.nextTransition((long) 59);
        java.lang.String str19 = dateTimeZone15.getName((long) (short) 0);
        java.lang.String str20 = dateTimeZone15.getID();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = mutableDateTime22.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (byte) 0);
        mutableDateTime22.setZoneRetainFields(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone33.isLocalDateTimeGap(localDateTime37);
        long long40 = dateTimeZone33.previousTransition((long) 518);
        long long42 = dateTimeZone15.getMillisKeepLocal(dateTimeZone33, (long) 441);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(2040, 405, 141, 74757, 74491, 74624303, 490, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74757 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 59L + "'", long17 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:46:29.597Z" + "'", str26, "2022-02-11T09:46:29.597Z");
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 518L + "'", long40 == 518L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 441L + "'", long42 == 441L);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        long long12 = dateTimeField10.roundFloor(0L);
        java.lang.String str13 = dateTimeField10.toString();
        org.joda.time.DurationField durationField14 = dateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str13, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        java.lang.String str20 = property19.getName();
        org.joda.time.DurationField durationField21 = property19.getLeapDurationField();
        boolean boolean23 = property19.equals((java.lang.Object) 970);
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = property19.compareTo(readablePartial24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74789 + "'", int7 == 74789);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:29.640Z" + "'", str16, "2022-02-11T09:46:29.640Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minuteOfHour" + "'", str20, "minuteOfHour");
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        int int12 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        long long21 = dateTimeParserBucket18.computeMillis(true);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket18.getChronology();
        org.joda.time.Chronology chronology23 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfEra();
        mutableDateTime1.setChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        int int35 = mutableDateTime30.getMillisOfSecond();
        mutableDateTime30.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getLeapAmount((-1L));
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = dateTimeField41.getAsText((long) 340, locale49);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField41.getAsShortText((int) '4', locale52);
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = dateTimeField41.getAsText(readablePartial54, 292278993, locale56);
        java.lang.String str58 = mutableDateTime30.toString("237", locale56);
        java.lang.String str59 = locale56.getISO3Country();
        java.lang.String str60 = dateTimeField26.getAsText(readablePartial27, 363, locale56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74789 + "'", int7 == 74789);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 651 + "'", int12 == 651);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 651 + "'", int35 == 651);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52" + "'", str53, "52");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "292278993" + "'", str57, "292278993");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "237" + "'", str58, "237");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "GBR" + "'", str59, "GBR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "363" + "'", str60, "363");
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        boolean boolean19 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setMinuteOfDay(993);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = mutableDateTime23.toDateTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        mutableDateTime34.addYears(0);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime34);
        int int41 = mutableDateTime23.getEra();
        int int42 = mutableDateTime23.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = mutableDateTime23.toString(dateTimeFormatter43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime23.minuteOfHour();
        mutableDateTime23.addYears(237);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime23.millisOfSecond();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime15.setMillisOfDay(34908929);
        int int52 = mutableDateTime15.getDayOfMonth();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime54.millisOfDay();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.MutableDateTime mutableDateTime58 = property56.roundCeiling();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.secondOfDay();
        int int60 = mutableDateTime58.getSecondOfDay();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T00:01:37.684Z" + "'", str44, "2022-02-11T00:01:37.684Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "35189684" + "'", str57, "35189684");
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35189 + "'", int60 == 35189);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        java.lang.String str9 = chronology7.toString();
        org.joda.time.DurationField durationField10 = chronology7.millis();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket16.getZone();
        boolean boolean19 = dateTimeZone18.isFixed();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        mutableDateTime22.setRounding(dateTimeField30);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = dateTimeField30.getAsShortText((int) (byte) 1, locale34);
        java.lang.String str36 = dateTimeZone18.getName(10930L, locale34);
        org.joda.time.Chronology chronology37 = chronology7.withZone(dateTimeZone18);
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str4 = dateTimeZone2.getShortName((long) 6);
        java.lang.Object obj5 = null;
        boolean boolean6 = dateTimeZone2.equals(obj5);
        long long9 = dateTimeZone2.adjustOffset((long) 340, false);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = dateTimeZone2.getOffset(readableInstant10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(1644572537832L, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMonthOfYear(147);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 147 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.678" + "'", str4, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 340L + "'", long9 == 340L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 678 + "'", int11 == 678);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addYears(0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        boolean boolean30 = mutableDateTime25.isSupported(dateTimeFieldType29);
        int int31 = mutableDateTime10.get(dateTimeFieldType29);
        boolean boolean32 = mutableDateTime1.isSupported(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime1.add(durationFieldType33, 388);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.dayOfMonth();
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology44, locale49);
        org.joda.time.DateTimeField dateTimeField51 = chronology44.year();
        org.joda.time.DurationField durationField52 = durationFieldType33.getField(chronology44);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        long long56 = chronology44.add(readablePeriod53, 34809000L, 832);
        org.joda.time.DurationField durationField57 = chronology44.centuries();
        org.joda.time.DateTimeField dateTimeField58 = chronology44.dayOfYear();
        org.joda.time.DurationField durationField59 = chronology44.seconds();
        org.joda.time.DurationField durationField60 = chronology44.weeks();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 34809000L + "'", long56 == 34809000L);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 280);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withDefaultYear(332);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = dateTimeFormatter9.parseLocalDate("2022-02-11T09:41:55.898-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getMaximumValue((long) (byte) 1);
        java.lang.String str10 = dateTimeField2.getAsShortText((long) 5);
        long long12 = dateTimeField2.roundHalfFloor(10L);
        java.lang.String str14 = dateTimeField2.getAsShortText((-2208988800000L));
        org.joda.time.DurationField durationField15 = dateTimeField2.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeField20.getAsShortText(0L, locale23);
        boolean boolean26 = dateTimeField20.isLenient();
        org.joda.time.ReadablePartial readablePartial27 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = mutableDateTime30.get(dateTimeFieldType37);
        int int39 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar43 = mutableDateTime40.toCalendar(locale42);
        java.util.Calendar calendar44 = mutableDateTime30.toCalendar(locale42);
        java.lang.String str45 = dateTimeField20.getAsShortText(readablePartial27, (int) ' ', locale42);
        int int46 = property17.getMaximumShortTextLength(locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        int int51 = dateTimeField49.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.dayOfWeek();
        java.util.Locale locale56 = null;
        java.lang.String str57 = property55.getAsText(locale56);
        java.util.Locale locale58 = null;
        int int59 = property55.getMaximumTextLength(locale58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = mutableDateTime61.isEqual(readableInstant62);
        int int64 = mutableDateTime61.getHourOfDay();
        mutableDateTime61.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        int int70 = dateTimeField69.getMaximumValue();
        mutableDateTime61.setRounding(dateTimeField69);
        java.util.Locale locale73 = java.util.Locale.FRENCH;
        java.lang.String str74 = dateTimeField69.getAsShortText((int) (byte) 1, locale73);
        java.lang.String str75 = property55.getAsShortText(locale73);
        java.lang.String str76 = dateTimeField49.getAsShortText(1L, locale73);
        java.util.Set<java.lang.Character> charSet77 = locale73.getExtensionKeys();
        java.lang.String str78 = locale42.getDisplayVariant(locale73);
        int int79 = dateTimeField2.getMaximumShortTextLength(locale42);
        java.lang.String str81 = dateTimeField2.getAsText(0L);
        long long83 = dateTimeField2.remainder(167L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572789948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=29,MILLISECOND=948,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644537697948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=948,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "32" + "'", str45, "32");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "vendredi" + "'", str57, "vendredi");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ven." + "'", str75, "ven.");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0" + "'", str76, "0");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 167L + "'", long83 == 167L);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.addHours((int) (short) 0);
        mutableDateTime19.addWeekyears((int) 'a');
        java.lang.String str25 = mutableDateTime19.toString("0");
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        mutableDateTime19.set(dateTimeFieldType34, 5);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.property(dateTimeFieldType34);
        boolean boolean39 = mutableDateTime1.isSupported(dateTimeFieldType34);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        int int10 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        int int21 = mutableDateTime12.getWeekOfWeekyear();
        org.joda.time.Instant instant22 = mutableDateTime12.toInstant();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.addWeekyears(796);
        int int26 = mutableDateTime12.getYearOfEra();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime12.monthOfYear();
        org.joda.time.Chronology chronology28 = mutableDateTime12.getChronology();
        int int29 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:21.217Z");
        java.lang.String str32 = mutableDateTime31.toString();
        int int33 = mutableDateTime31.getYear();
        boolean boolean34 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        int int35 = mutableDateTime31.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2818 + "'", int26 == 2818);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:40:21.217Z" + "'", str32, "2022-02-11T09:40:21.217Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField13.getAsShortText(readablePartial14, (int) (short) -1, locale36);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = mutableDateTime53.toCalendar(locale55);
        java.util.Calendar calendar57 = mutableDateTime43.toCalendar(locale55);
        java.lang.String str58 = dateTimeField13.getAsText(readablePartial40, 306, locale55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale55.getDisplayName(locale59);
        java.util.Locale.Builder builder62 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder64 = builder62.setVariant("");
        java.util.Locale.Builder builder66 = builder64.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder68 = builder64.setRegion("2022-02-11T09:41:18.149Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:41:18.149Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572790045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644537697044,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=44,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "306" + "'", str58, "306");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "chinois (Taiwan)" + "'", str61, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.centuryOfEra();
        int int14 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74790 + "'", int7 == 74790);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = dateTimeFieldType14.getName();
        mutableDateTime1.set(dateTimeFieldType14, 831);
        int int19 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(457);
        long long23 = dateTimeZone21.nextTransition((long) 74445);
        mutableDateTime1.setZoneRetainFields(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter27.getParser();
        boolean boolean30 = dateTimeFormatter27.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.Chronology chronology32 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = dateTimeFormatter27.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter35.withZoneUTC();
        boolean boolean37 = dateTimeFormatter35.isParser();
        int int38 = dateTimeFormatter35.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = mutableDateTime1.toString(dateTimeFormatter35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74790 + "'", int7 == 74790);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "millisOfSecond" + "'", str16, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 74445L + "'", long23 == 74445L);
        org.junit.Assert.assertNull(dateTimeZone28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNull(dateTimePrinter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime11.getZone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = chronology27.getZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        java.util.Locale locale32 = null;
        java.lang.String str33 = property31.getAsText(locale32);
        java.util.Locale locale34 = null;
        int int35 = property31.getMaximumTextLength(locale34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        mutableDateTime37.setRounding(dateTimeField45);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = dateTimeField45.getAsShortText((int) (byte) 1, locale49);
        java.lang.String str51 = property31.getAsShortText(locale49);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale52.getScript();
        java.lang.String str54 = locale49.getDisplayScript(locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale49);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.yearOfEra();
        int int58 = mutableDateTime56.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime56.set(dateTimeFieldType59, 0);
        boolean boolean62 = dateTimeParserBucket55.restoreState((java.lang.Object) dateTimeFieldType59);
        java.lang.String str63 = dateTimeFieldType59.getName();
        mutableDateTime11.set(dateTimeFieldType59, 18);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.days();
        org.joda.time.DateTimeField dateTimeField75 = chronology73.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType59.getField(chronology73);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime1.property(dateTimeFieldType59);
        org.joda.time.MutableDateTime mutableDateTime79 = property78.roundCeiling();
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology81, locale82, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket85.getZone();
        org.joda.time.Chronology chronology87 = dateTimeParserBucket85.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod89 = null;
        long long92 = chronology87.add(readablePeriod89, (long) 6, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone93 = chronology87.getZone();
        java.lang.String str95 = dateTimeZone93.getName(74409L);
        org.joda.time.DateTime dateTime96 = mutableDateTime79.toDateTime(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "vendredi" + "'", str33, "vendredi");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ven." + "'", str51, "ven.");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "minuteOfDay" + "'", str63, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 6L + "'", long92 == 6L);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00" + "'", str95, "+00:00");
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = mutableDateTime5.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str18 = dateTimeZone16.getNameKey((long) (byte) 0);
        mutableDateTime5.setZoneRetainFields(dateTimeZone16);
        int int20 = mutableDateTime5.getWeekOfWeekyear();
        boolean boolean21 = languageRange1.equals((java.lang.Object) mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:46:30.202Z" + "'", str9, "2022-02-11T09:46:30.202Z");
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.millisOfSecond();
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        int int28 = property26.get();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.244Z" + "'", str22, "2022-02-11T00:01:37.244Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 244 + "'", int28 == 244);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        boolean boolean20 = dateTimeField17.isLeap((long) (short) -1);
        java.util.Locale locale22 = java.util.Locale.US;
        java.lang.String str23 = dateTimeField17.getAsText((long) (-1), locale22);
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int29 = dateTimeField28.getMaximumValue();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = dateTimeField28.getAsShortText(0L, locale31);
        boolean boolean34 = dateTimeField28.isLenient();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        int int47 = mutableDateTime38.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.yearOfEra();
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar51 = mutableDateTime48.toCalendar(locale50);
        java.util.Calendar calendar52 = mutableDateTime38.toCalendar(locale50);
        java.lang.String str53 = dateTimeField28.getAsShortText(readablePartial35, (int) ' ', locale50);
        java.lang.String str54 = locale50.getDisplayCountry();
        java.lang.String str55 = dateTimeField17.getAsShortText(readablePartial24, 34812148, locale50);
        java.lang.String str56 = locale50.getDisplayLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter2.withLocale(locale50);
        java.lang.String str58 = locale50.getDisplayName();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "59" + "'", str23, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0" + "'", str33, "0");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644572790255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644537697255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "32" + "'", str53, "32");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Taiwan" + "'", str54, "Taiwan");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "34812148" + "'", str55, "34812148");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "chinois" + "'", str56, "chinois");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "chinois (Taiwan)" + "'", str58, "chinois (Taiwan)");
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        org.joda.time.Instant instant43 = mutableDateTime34.toInstant();
        mutableDateTime34.addDays((int) ' ');
        int int46 = mutableDateTime34.getSecondOfMinute();
        boolean boolean47 = mutableDateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime32.setDayOfMonth(189);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 189 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37 + "'", int46 == 37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField13.getAsShortText(readablePartial14, (int) (short) -1, locale36);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = mutableDateTime53.toCalendar(locale55);
        java.util.Calendar calendar57 = mutableDateTime43.toCalendar(locale55);
        java.lang.String str58 = dateTimeField13.getAsText(readablePartial40, 306, locale55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale55.getDisplayName(locale59);
        java.util.Locale.Builder builder62 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder65 = builder62.setLanguageTag("2022-02-11T09:42:03.626Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572790284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644537697284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=284,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "306" + "'", str58, "306");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "chinois (Taiwan)" + "'", str61, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set(625);
        java.lang.String str7 = property3.toString();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.addWrapField(74577);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = builder12.build();
        java.util.Locale.Builder builder16 = builder12.setVariant("2022");
        java.util.Locale locale17 = builder16.build();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = locale31.getDisplayScript();
        java.lang.String str34 = locale31.getISO3Country();
        java.lang.String str35 = locale17.getDisplayVariant(locale31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter10.withLocale(locale31);
        java.lang.StringBuffer stringBuffer37 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter40.getZone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology48.getZone();
        java.lang.String str50 = dateTimeZone49.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter40.withZone(dateTimeZone49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime53.set(dateTimeFieldType57, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone60 = mutableDateTime53.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter40.withZone(dateTimeZone60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime63.copy();
        int int65 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) mutableDateTime64);
        mutableDateTime64.setMillisOfDay(10);
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime64.add(readableDuration68, 783);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(stringBuffer37, (org.joda.time.ReadableInstant) mutableDateTime64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(mutableDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfCentury();
        org.joda.time.DurationField durationField12 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfHalfday();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime27);
        int int34 = mutableDateTime16.getEra();
        int int35 = mutableDateTime16.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime16.toString(dateTimeFormatter36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.minuteOfHour();
        mutableDateTime16.addYears(237);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.util.Calendar calendar56 = mutableDateTime16.toCalendar(locale54);
        java.util.Locale locale57 = locale54.stripExtensions();
        java.lang.String str58 = locale54.getISO3Language();
        java.lang.String str59 = dateTimeField13.getAsShortText(1644785183689L, locale54);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T00:01:37.345Z" + "'", str37, "2022-02-11T00:01:37.345Z");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=9123494497345,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=345,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fra" + "'", str58, "fra");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "8" + "'", str59, "8");
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.add(6L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.setSecondOfDay((int) (byte) 0);
        mutableDateTime11.setHourOfDay(0);
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        int int23 = mutableDateTime11.getSecondOfDay();
        int int24 = mutableDateTime11.getSecondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        org.joda.time.Chronology chronology31 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology31.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        int int43 = mutableDateTime34.getWeekOfWeekyear();
        org.joda.time.Instant instant44 = mutableDateTime34.toInstant();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime34.weekyear();
        int int46 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime34.minuteOfDay();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime34.monthOfYear();
        mutableDateTime34.addHours(74430);
        boolean boolean51 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime34.setTime(97242, 622, 517, 97610);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97242 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572790366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 46 + "'", int7 == 46);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74790 + "'", int17 == 74790);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getRoundingMode();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.days();
        boolean boolean28 = durationFieldType17.isSupported(chronology25);
        mutableDateTime7.setChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.weekyearOfCentury();
        long long32 = dateTimeField30.roundHalfCeiling((long) 34884855);
        long long35 = dateTimeField30.add((long) 34976, 34946334);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572790382,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=382,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1102799784528034976L + "'", long35 == 1102799784528034976L);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime4.getZone();
        int int24 = mutableDateTime4.getWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        int int33 = mutableDateTime26.getEra();
        mutableDateTime26.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        int int38 = mutableDateTime26.get(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime26.secondOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.setMinuteOfHour((int) (short) 1);
        int int46 = mutableDateTime41.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime41.weekyear();
        int int48 = mutableDateTime41.getDayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = mutableDateTime41.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int51 = mutableDateTime41.get(dateTimeFieldType50);
        int int52 = property39.getDifference((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime41.setSecondOfMinute(339);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 339 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 421 + "'", int9 == 421);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 74790421 + "'", int22 == 74790421);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 421 + "'", int46 == 421);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 42 + "'", int48 == 42);
        org.junit.Assert.assertNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 541 + "'", int51 == 541);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-32490) + "'", int52 == (-32490));
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int14 = mutableDateTime7.get(dateTimeFieldType13);
        int int15 = mutableDateTime7.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = dateTimeFormatter5.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime7, "2022-02-11T09:41:15.308Z", 539);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572790463,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=463,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(74445, 74581);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 74581");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime1.add(readableDuration19, 842);
        mutableDateTime1.setSecondOfDay(320);
        boolean boolean24 = mutableDateTime1.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField38 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology33.minuteOfHour();
        org.joda.time.DurationField durationField40 = chronology33.weekyears();
        org.joda.time.DurationField durationField41 = chronology33.centuries();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.yearOfCentury();
        int int43 = mutableDateTime1.get(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697482,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=482,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        int int26 = mutableDateTime20.getSecondOfDay();
        mutableDateTime20.setSecondOfDay((int) (byte) 0);
        mutableDateTime20.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        mutableDateTime31.set(dateTimeFieldType46, 5);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime20.property(dateTimeFieldType46);
        mutableDateTime10.set(dateTimeFieldType46, 237);
        mutableDateTime10.addWeekyears(22);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime10.era();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime57.isEqual(readableInstant58);
        int int60 = mutableDateTime57.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime57.set(dateTimeFieldType61, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        int int65 = mutableDateTime57.get(dateTimeFieldType64);
        org.joda.time.DateTime dateTime66 = mutableDateTime57.toDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        int int71 = mutableDateTime68.getHourOfDay();
        mutableDateTime68.addYears(0);
        mutableDateTime57.setDate((org.joda.time.ReadableInstant) mutableDateTime68);
        int int75 = mutableDateTime57.getEra();
        int int76 = mutableDateTime57.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = null;
        java.lang.String str78 = mutableDateTime57.toString(dateTimeFormatter77);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime57.minuteOfHour();
        mutableDateTime57.addYears(237);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(chronology82);
        org.joda.time.ReadableInstant readableInstant84 = null;
        boolean boolean85 = mutableDateTime83.isEqual(readableInstant84);
        int int86 = mutableDateTime83.getHourOfDay();
        mutableDateTime83.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType89.getField(chronology90);
        int int92 = dateTimeField91.getMaximumValue();
        mutableDateTime83.setRounding(dateTimeField91);
        java.util.Locale locale95 = java.util.Locale.FRENCH;
        java.lang.String str96 = dateTimeField91.getAsShortText((int) (byte) 1, locale95);
        java.util.Calendar calendar97 = mutableDateTime57.toCalendar(locale95);
        java.util.Locale locale98 = locale95.stripExtensions();
        int int99 = property55.getMaximumShortTextLength(locale95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 556 + "'", int16 == 556);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 74790 + "'", int26 == 74790);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 9 + "'", int60 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-11T00:01:37.557Z" + "'", str78, "2022-02-11T00:01:37.557Z");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 59 + "'", int92 == 59);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1" + "'", str96, "1");
        org.junit.Assert.assertNotNull(calendar97);
// flaky:         org.junit.Assert.assertEquals(calendar97.toString(), "java.util.GregorianCalendar[time=9123494497557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=557,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale98);
        org.junit.Assert.assertEquals(locale98.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 9 + "'", int99 == 9);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.monthOfYear();
        dateTimeParserBucket5.saveField(dateTimeField17, 993);
        java.lang.Object obj20 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.minuteOfHour();
        int int28 = mutableDateTime22.getSecondOfDay();
        mutableDateTime22.setSecondOfDay((int) (byte) 0);
        mutableDateTime22.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.addHours((int) (short) 0);
        mutableDateTime33.addWeekyears((int) 'a');
        java.lang.String str39 = mutableDateTime33.toString("0");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime41.set(dateTimeFieldType45, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        int int49 = mutableDateTime41.get(dateTimeFieldType48);
        mutableDateTime33.set(dateTimeFieldType48, 5);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime22.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.Chronology chronology60 = dateTimeParserBucket58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.dayOfYear();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.year();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType48.getField(chronology60);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.dayOfWeek();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime65.yearOfCentury();
        int int68 = mutableDateTime65.getMinuteOfHour();
        org.joda.time.Chronology chronology69 = mutableDateTime65.getChronology();
        boolean boolean70 = dateTimeFieldType48.isSupported(chronology69);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology72);
        org.joda.time.ReadableInstant readableInstant74 = null;
        boolean boolean75 = mutableDateTime73.isEqual(readableInstant74);
        mutableDateTime73.addHours(59);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime73.minuteOfHour();
        mutableDateTime73.addWeeks(34808947);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime73.weekOfWeekyear();
        java.util.Locale.Category category82 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.lang.String str84 = locale83.getScript();
        java.util.Locale.setDefault(category82, locale83);
        int int86 = property81.getMaximumTextLength(locale83);
        java.lang.String str87 = locale83.getCountry();
        dateTimeParserBucket5.saveField(dateTimeFieldType48, "2022-02-11T09:45:35.162+00:00:00.100", locale83);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 74790 + "'", int28 == 74790);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 46 + "'", int68 == 46);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + category82 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category82.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "TW" + "'", str87, "TW");
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        java.io.IOException iOException2 = new java.io.IOException("2022-02-11T09:40:13.388Z");
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:40:30.403Z", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar22 = mutableDateTime19.toCalendar(locale21);
        mutableDateTime19.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.millisOfDay();
        int int26 = mutableDateTime19.getDayOfWeek();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.setMillisOfDay(0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        mutableDateTime31.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean38 = mutableDateTime31.isSupported(dateTimeFieldType37);
        int int39 = mutableDateTime31.getCenturyOfEra();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        mutableDateTime31.setZone(dateTimeZone46);
        mutableDateTime19.setZoneRetainFields(dateTimeZone46);
        long long51 = dateTimeZone46.adjustOffset(1644784905354L, true);
        org.joda.time.Chronology chronology52 = chronology10.withZone(dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = chronology52.get(readablePeriod53, (long) 57464);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 626 + "'", int6 == 626);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572790626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 5 + "'", int26 == 5);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644784905354L + "'", long51 == 1644784905354L);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime1.add(readableDuration12, 35149787);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime11.getEra();
        int int13 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime14 = property2.getMutableDateTime();
        org.joda.time.DurationField durationField15 = property2.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property2.addWrapField(821);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-2) + "'", int13 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.DurationField durationField6 = property3.getLeapDurationField();
        java.lang.String str7 = property3.getAsString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        int int8 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfYear();
        int int10 = mutableDateTime1.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(537, 35166, 22407, 74575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 537 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        int int18 = mutableDateTime11.getEra();
        mutableDateTime11.setMillisOfDay(411);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime11);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        int int23 = mutableDateTime11.getYearOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.Instant instant27 = mutableDateTime20.toInstant();
        boolean boolean28 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) instant27);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime30 = instant27.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setMillisOfSecond(34960);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34960 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 802 + "'", int6 == 802);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 13 + "'", int13 == 13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.secondOfDay();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 815 + "'", int6 == 815);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 46 + "'", int12 == 46);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        mutableDateTime1.addMonths(281);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        mutableDateTime19.setChronology(chronology27);
        java.util.Locale locale31 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        java.util.Locale locale32 = locale31.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 598, chronology27, locale31);
        mutableDateTime1.setChronology(chronology27);
        int int35 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str37 = property36.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 28 + "'", int35 == 28);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[weekOfWeekyear]" + "'", str37, "Property[weekOfWeekyear]");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withOffsetParsed();
        java.io.Writer writer11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar15 = mutableDateTime12.toCalendar(locale14);
        mutableDateTime12.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.millisOfDay();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.era();
        mutableDateTime12.addSeconds(457);
        mutableDateTime12.setMinuteOfDay(715);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime25.set(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = mutableDateTime25.get(dateTimeFieldType32);
        int int34 = mutableDateTime25.getWeekOfWeekyear();
        boolean boolean36 = mutableDateTime25.isAfter((long) 74448);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime47 = mutableDateTime38.toDateTime();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        mutableDateTime49.addYears(0);
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime38.addMillis((int) (byte) 0);
        int int58 = mutableDateTime38.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime38.property(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getRangeDurationType();
        mutableDateTime25.set(dateTimeFieldType59, 830);
        mutableDateTime12.set(dateTimeFieldType59, 293);
        int int66 = mutableDateTime12.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer11, (org.joda.time.ReadableInstant) mutableDateTime12);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572790845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=30,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology16 = dateTimeFormatter2.getChronology();
        java.lang.Appendable appendable17 = null;
        org.joda.time.ReadablePartial readablePartial18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable17, readablePartial18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:41:20.153-00:00:00.001", (double) (-2735127036L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-2.735127036E9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setLanguage("2022-02-11T09:40:47.534Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:40:47.534Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        long long12 = chronology8.add((long) (byte) 10, (long) 822, 57);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.yearOfCentury();
        java.lang.String str15 = dateTimeField14.getName();
        int int16 = dateTimeField14.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 46864L + "'", long12 == 46864L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfCentury" + "'", str15, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T00:01:37.368Z", (double) 74610655);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=7.4610655E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime1.add(readablePeriod13);
        mutableDateTime1.setMillisOfDay(854);
        boolean boolean18 = mutableDateTime1.equals((java.lang.Object) 57213211);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        int int13 = mutableDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        boolean boolean35 = mutableDateTime30.isSupported(dateTimeFieldType34);
        int int36 = mutableDateTime15.get(dateTimeFieldType34);
        mutableDateTime15.setWeekyear(74419);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.secondOfDay();
        boolean boolean40 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setWeekyear(74486);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74790 + "'", int7 == 74790);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DurationField durationField14 = chronology7.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.dayOfYear();
        int int18 = dateTimeField16.getLeapAmount((long) 34846890);
        int int20 = dateTimeField16.get(2349954967422879L);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        boolean boolean37 = dateTimeField35.isLeap((long) 670);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial48 = null;
        int[] intArray55 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int56 = dateTimeField41.getMinimumValue(readablePartial48, intArray55);
        int int57 = dateTimeField35.getMaximumValue(readablePartial38, intArray55);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField16.set(readablePartial21, 35174, intArray55, 35144922);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 24 + "'", int57 == 24);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = mutableDateTime1.toCalendar(locale12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644537697964,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=964,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.setMinuteOfHour((int) (short) 1);
        int int14 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology22);
        mutableDateTime24.setWeekyear(17);
        int int27 = mutableDateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        java.util.Date date38 = mutableDateTime29.toDate();
        org.joda.time.DateTimeZone dateTimeZone39 = mutableDateTime29.getZone();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime29.secondOfDay();
        org.joda.time.DateTime dateTime41 = mutableDateTime29.toDateTime();
        boolean boolean42 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableDateTime9.add(readablePeriod43, 89);
        boolean boolean46 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime9.addMinutes(35047);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 973 + "'", int14 == 973);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        mutableDateTime48.addHours(59);
        int int53 = mutableDateTime48.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean55 = mutableDateTime48.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = mutableDateTime48.getRoundingField();
        boolean boolean58 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone59 = mutableDateTime1.getZone();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime1.add(readableDuration60, 34931287);
        org.joda.time.DateTime dateTime63 = mutableDateTime1.toDateTimeISO();
        mutableDateTime1.addMonths(74471);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 990 + "'", int53 == 990);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.yearOfCentury();
        int int18 = mutableDateTime15.getMinuteOfHour();
        boolean boolean19 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime15.setMinuteOfDay(993);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = mutableDateTime23.toDateTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        mutableDateTime34.addYears(0);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime34);
        int int41 = mutableDateTime23.getEra();
        int int42 = mutableDateTime23.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = mutableDateTime23.toString(dateTimeFormatter43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime23.minuteOfHour();
        mutableDateTime23.addYears(237);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime23.millisOfSecond();
        mutableDateTime15.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        mutableDateTime62.addYears(0);
        mutableDateTime51.setDate((org.joda.time.ReadableInstant) mutableDateTime62);
        int int69 = mutableDateTime51.getEra();
        int int70 = mutableDateTime51.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime51.hourOfDay();
        int int72 = mutableDateTime23.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Chronology chronology73 = mutableDateTime51.getChronology();
        boolean boolean75 = mutableDateTime51.isAfter((long) 52);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime51.year();
        int int77 = mutableDateTime51.getYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T00:01:37.018Z" + "'", str44, "2022-02-11T00:01:37.018Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        int int5 = dateTimeZone2.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int8 = dateTimeZone2.getOffsetFromLocal((long) 161);
        long long11 = dateTimeZone2.adjustOffset((long) 2818, true);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 583, dateTimeZone2);
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime12.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMinuteOfHour(74595);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74595 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2818L + "'", long11 == 2818L);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.addSeconds(11);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime14.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add(1644785033315L);
        org.joda.time.DurationField durationField29 = property26.getDurationField();
        int int30 = property26.get();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 36 + "'", int30 == 36);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DurationField durationField11 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.clockhourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        int int35 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = null;
        java.lang.String str41 = mutableDateTime37.toString(dateTimeFormatter40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.String str50 = dateTimeZone48.getNameKey((long) (byte) 0);
        mutableDateTime37.setZoneRetainFields(dateTimeZone48);
        mutableDateTime30.setZone(dateTimeZone48);
        java.util.TimeZone timeZone53 = dateTimeZone48.toTimeZone();
        int int55 = dateTimeZone48.getStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime15.toMutableDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology57 = chronology7.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        int int60 = dateTimeField58.get((long) 35034849);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 89 + "'", int35 == 89);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T09:46:31.089Z" + "'", str41, "2022-02-11T09:46:31.089Z");
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        int int7 = dateTimeField6.getMaximumValue();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = dateTimeField6.getAsShortText(0L, locale9);
        boolean boolean12 = locale9.hasExtensions();
        java.lang.String str13 = locale9.toLanguageTag();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.lang.String str15 = locale2.getDisplayScript(locale9);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        int int25 = mutableDateTime20.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology27, locale28, (java.lang.Integer) 9, 59);
        java.lang.Object obj32 = dateTimeParserBucket31.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket31.saveField(dateTimeFieldType33, 59);
        boolean boolean36 = mutableDateTime20.isSupported(dateTimeFieldType33);
        int int37 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        int int38 = mutableDateTime20.getMinuteOfDay();
        mutableDateTime20.addWeeks(74476);
        boolean boolean41 = locale9.equals((java.lang.Object) 74476);
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr" + "'", str13, "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u6cd5\u6587" + "'", str14, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 140 + "'", int25 == 140);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1246 + "'", int38 == 1246);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundFloor();
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime19.toGregorianCalendar();
        boolean boolean21 = mutableDateTime19.isBeforeNow();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundCeiling();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697188,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=188,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime14.yearOfCentury();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.secondOfDay();
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        int int30 = dateTimeZone27.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        int int33 = dateTimeZone27.getOffsetFromLocal((long) 161);
        long long35 = dateTimeZone27.convertUTCToLocal((long) 617);
        mutableDateTime14.setZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.set(dateTimeFieldType37, 43140);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 617L + "'", long35 == 617L);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(true);
        org.joda.time.Chronology chronology32 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        java.lang.String str38 = dateTimeZone35.getName((long) 2);
        java.util.TimeZone timeZone39 = dateTimeZone35.toTimeZone();
        org.joda.time.Chronology chronology40 = chronology32.withZone(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter20.withChronology(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone50 = mutableDateTime43.getZone();
        long long52 = dateTimeZone50.nextTransition((long) 59);
        java.lang.String str54 = dateTimeZone50.getName((long) (short) 0);
        java.lang.String str55 = dateTimeZone50.getID();
        long long57 = dateTimeZone50.nextTransition((long) (byte) 0);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        mutableDateTime64.addHours(59);
        org.joda.time.Chronology chronology69 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime64.toMutableDateTime();
        int int71 = mutableDateTime64.getMinuteOfHour();
        mutableDateTime64.addDays(831);
        boolean boolean74 = mutableDateTime60.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Calendar calendar76 = mutableDateTime64.toCalendar(locale75);
        java.lang.String str77 = dateTimeZone50.getShortName((-41907196800000L), locale75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter20.withZone(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter20.withDefaultYear(97608);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter20.withOffsetParsed();
        int int82 = dateTimeFormatter81.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter83 = dateTimeFormatter81.getPrinter();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 59L + "'", long52 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 46 + "'", int71 == 46);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1716583591216,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=46,SECOND=31,MILLISECOND=216,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2000 + "'", int82 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter83);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        long long16 = chronology7.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.era();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.minuteOfHour();
        int int27 = mutableDateTime21.getSecondOfDay();
        mutableDateTime21.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology30 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.yearOfCentury();
        long long32 = property31.remainder();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.roundFloor();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        mutableDateTime43.addHours(59);
        org.joda.time.Chronology chronology48 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology48.getZone();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology48, locale50);
        java.lang.String str52 = locale50.getLanguage();
        java.lang.String str53 = locale50.getLanguage();
        java.lang.String str54 = property40.getAsText(locale50);
        int int55 = property31.getMaximumTextLength(locale50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTimeField18.getAsText(readablePartial19, locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 7218525L + "'", long16 == 7218525L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 74791 + "'", int27 == 74791);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3715200264L + "'", long32 == 3715200264L);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fr" + "'", str52, "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "fr" + "'", str53, "fr");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "44" + "'", str54, "44");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDayOfYear(2620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2620 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74791 + "'", int7 == 74791);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        java.lang.String str11 = dateTimeField9.getName();
        java.lang.String str13 = dateTimeField9.getAsShortText((long) 74420121);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyearOfCentury" + "'", str11, "weekyearOfCentury");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "70" + "'", str13, "70");
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.setMillisOfDay(7);
        long long10 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime5);
        int int11 = mutableDateTime5.getYearOfCentury();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder15 = builder12.setLocale(locale14);
        boolean boolean16 = mutableDateTime5.equals((java.lang.Object) builder15);
        mutableDateTime5.add((-910799144L));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        java.lang.String str16 = mutableDateTime1.toString();
        mutableDateTime1.setMillis((-875944994L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697407,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=407,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T00:01:37.407Z" + "'", str16, "2022-02-11T00:01:37.407Z");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = mutableDateTime0.get(dateTimeFieldType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime0.setMillis(readableInstant8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar13 = mutableDateTime10.toCalendar(locale12);
        mutableDateTime10.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime10.weekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfCeiling();
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology28);
        int int31 = mutableDateTime30.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = dateTimeField34.getAsShortText(0L, locale37);
        mutableDateTime30.setRounding(dateTimeField34);
        int int41 = property19.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        boolean boolean42 = mutableDateTime0.equals((java.lang.Object) mutableDateTime30);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setSecondOfMinute(35171857);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35171857 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572791428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=31,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572791428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=31,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfWeek();
        boolean boolean12 = dateTimeField11.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        int int2 = dateTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        int int4 = dateTime3.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = dateTime3.toString("2022-02-27T15:58:12.724+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 46 + "'", int2 == 46);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundCeiling();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfWeek();
        java.lang.String str15 = property14.getName();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property14.getFieldType();
        java.lang.String str18 = property14.getAsText();
        org.joda.time.MutableDateTime mutableDateTime19 = property14.roundCeiling();
        boolean boolean20 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime19);
        java.lang.Throwable throwable24 = null;
        java.io.IOException iOException25 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable24);
        java.lang.Throwable throwable27 = null;
        java.io.IOException iOException28 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable27);
        iOException25.addSuppressed((java.lang.Throwable) iOException28);
        java.io.IOException iOException30 = new java.io.IOException("French", (java.lang.Throwable) iOException25);
        java.io.IOException iOException31 = new java.io.IOException("2022-02-11T09:40:30.647Z", (java.lang.Throwable) iOException25);
        java.lang.Throwable[] throwableArray32 = iOException31.getSuppressed();
        boolean boolean33 = mutableDateTime19.equals((java.lang.Object) throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 466 + "'", int6 == 466);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfWeek" + "'", str15, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "vendredi" + "'", str18, "vendredi");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(903);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.monthOfYear();
        mutableDateTime9.addHours(74430);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime9.weekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMinuteOfDay(74581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74581 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.minuteOfHour();
        boolean boolean40 = dateTimeParserBucket35.restoreState((java.lang.Object) mutableDateTime37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        mutableDateTime42.addHours(59);
        org.joda.time.Chronology chronology47 = mutableDateTime42.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime42.toMutableDateTime();
        mutableDateTime48.setTime((long) 381);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        dateTimeParserBucket35.saveField(dateTimeFieldType52, 22);
        dateTimeParserBucket35.setOffset((java.lang.Integer) 74482);
        long long59 = dateTimeParserBucket35.computeMillis(false, "2022-02-11T09:46:04.317Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-52482L) + "'", long59 == (-52482L));
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology11, locale12, (java.lang.Integer) 9, 59);
        java.lang.Object obj16 = dateTimeParserBucket15.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, 59);
        boolean boolean20 = mutableDateTime4.isSupported(dateTimeFieldType17);
        int int21 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime4);
        int int22 = mutableDateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime4.getZone();
        long long27 = dateTimeZone23.convertLocalToUTC((long) 74450, false, (long) 74460488);
        java.lang.String str29 = dateTimeZone23.getShortName(14418L);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setWeekOfWeekyear(74779);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74779 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 529 + "'", int9 == 529);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 74791529 + "'", int22 == 74791529);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 74450L + "'", long27 == 74450L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfWeek();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property11.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property11.getMaximumTextLength(locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        mutableDateTime17.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        mutableDateTime17.setRounding(dateTimeField25);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = dateTimeField25.getAsShortText((int) (byte) 1, locale29);
        java.lang.String str31 = property11.getAsShortText(locale29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        java.lang.String str34 = locale29.getDisplayScript(locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale29);
        org.joda.time.DurationField durationField36 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField37 = chronology7.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology7);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "vendredi" + "'", str13, "vendredi");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ven." + "'", str31, "ven.");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addMonths(97840);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime1.secondOfMinute();
        java.lang.String str61 = mutableDateTime1.toString();
        int int62 = mutableDateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addDays(0);
        int int70 = mutableDateTime64.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime64.weekyear();
        int int72 = mutableDateTime64.getMonthOfYear();
        long long73 = mutableDateTime64.getMillis();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime64.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime64.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime64.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime77 = property76.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime78 = property76.roundHalfCeiling();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime78);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "10175-06-11T00:18:37.597Z" + "'", str61, "10175-06-11T00:18:37.597Z");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1117597 + "'", int62 == 1117597);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 597 + "'", int70 == 597);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572791597L + "'", long73 == 1644572791597L);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime7.toMutableDateTime(dateTimeZone17);
        mutableDateTime7.setSecondOfDay(9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572791627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=31,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology8.getZone();
        org.joda.time.DurationField durationField13 = chronology8.seconds();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale15.getDisplayScript(locale16);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getScript();
        int int32 = dateTimeField29.getMaximumTextLength(locale30);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        int int39 = dateTimeField35.getDifference((long) 10, (long) 'a');
        int int41 = dateTimeField35.getLeapAmount((-1L));
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.lang.String str44 = dateTimeField35.getAsText((long) 340, locale43);
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = dateTimeField35.getAsShortText((int) '4', locale46);
        org.joda.time.ReadablePartial readablePartial48 = null;
        java.util.Locale locale50 = java.util.Locale.UK;
        java.lang.String str51 = dateTimeField35.getAsText(readablePartial48, 292278993, locale50);
        java.lang.String str52 = locale50.getISO3Country();
        java.lang.String str53 = locale50.getDisplayScript();
        java.lang.String str54 = locale30.getDisplayScript(locale50);
        java.lang.String str55 = locale16.getDisplayName(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale50);
        org.joda.time.DateTimeField dateTimeField57 = chronology8.minuteOfHour();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        boolean boolean63 = mutableDateTime61.isEqual(readableInstant62);
        mutableDateTime61.addHours(59);
        org.joda.time.Chronology chronology66 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology66.getZone();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfWeek();
        org.joda.time.DurationField durationField70 = chronology66.days();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = chronology66.add(readablePeriod71, (long) 74444144, 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        boolean boolean78 = mutableDateTime76.isEqual(readableInstant77);
        int int79 = mutableDateTime76.getHourOfDay();
        mutableDateTime76.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType82.getField(chronology83);
        int int85 = dateTimeField84.getMaximumValue();
        mutableDateTime76.setRounding(dateTimeField84);
        java.util.Locale locale88 = java.util.Locale.FRENCH;
        java.lang.String str89 = dateTimeField84.getAsShortText((int) (byte) 1, locale88);
        java.lang.String str90 = locale88.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket(1644785042228L, chronology66, locale88, (java.lang.Integer) 2040);
        java.lang.String str93 = dateTimeField57.getAsText((long) 1365, locale88);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "292278993" + "'", str51, "292278993");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GBR" + "'", str52, "GBR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 74444144L + "'", long74 == 74444144L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 9 + "'", int79 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 59 + "'", int85 == 59);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1" + "'", str89, "1");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0" + "'", str93, "0");
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfMonth();
        java.lang.String str12 = property11.getAsShortText();
        int int13 = property11.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.addWrapField(35163);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 722 + "'", int9 == 722);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11" + "'", str12, "11");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(377);
        int int3 = dateTimeZone1.getOffset(74415006L);
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone1.isLocalDateTimeGap(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 377 + "'", int3 == 377);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, strMap10);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar16 = mutableDateTime13.toCalendar(locale15);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.lang.String str20 = locale19.getISO3Country();
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale12, locale15, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale.FilteringMode filteringMode24 = null;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList22, filteringMode24);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap34);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, strMap39);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.yearOfEra();
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar45 = mutableDateTime42.toCalendar(locale44);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale41, locale44, locale46, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale.FilteringMode filteringMode53 = null;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter(languageRangeList40, (java.util.Collection<java.util.Locale>) localeList51, filteringMode53);
        java.util.Set<java.lang.String> strSet55 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList40, (java.util.Collection<java.lang.String>) strSet55);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList35, (java.util.Collection<java.lang.String>) strSet55, filteringMode57);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList35, strMap59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType61.getField(chronology62);
        int int64 = dateTimeField63.getMaximumValue();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = dateTimeField63.getAsShortText(0L, locale66);
        java.lang.String str69 = locale66.getDisplayVariant();
        java.util.Set<java.lang.String> strSet70 = locale66.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet71 = locale66.getUnicodeLocaleKeys();
        java.lang.String str72 = java.util.Locale.lookupTag(languageRangeList35, (java.util.Collection<java.lang.String>) strSet71);
        java.lang.String str73 = java.util.Locale.lookupTag(languageRangeList28, (java.util.Collection<java.lang.String>) strSet71);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572791745,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=31,MILLISECOND=745,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572791745,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=31,MILLISECOND=745,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode57.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 59 + "'", int64 == 59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        mutableDateTime1.add(readablePeriod2);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfEra();
        int int4 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(930);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.era();
        int int8 = mutableDateTime1.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime1.add(readableDuration9, 48898209);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 34811 + "'", int4 == 34811);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4211930 + "'", int8 == 4211930);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial9 = null;
        int[] intArray16 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int17 = dateTimeField2.getMinimumValue(readablePartial9, intArray16);
        int int19 = dateTimeField2.getMinimumValue((long) 74452);
        int int22 = dateTimeField2.getDifference((long) 355, (long) 74531);
        long long24 = dateTimeField2.roundCeiling((long) 326);
        long long26 = dateTimeField2.roundHalfFloor((long) 558);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-74) + "'", int22 == (-74));
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1000L + "'", long24 == 1000L);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1000L + "'", long26 == 1000L);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("China");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "china" + "'", str3, "china");
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = mutableDateTime2.toString(dateTimeFormatter5);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime2.toMutableDateTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj0, dateTimeZone13);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        java.lang.String str28 = dateTimeZone27.toString();
        boolean boolean30 = dateTimeZone27.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 1, dateTimeZone27);
        long long34 = dateTimeZone13.getMillisKeepLocal(dateTimeZone27, (long) 964);
        java.lang.String str35 = dateTimeZone27.toString();
        long long38 = dateTimeZone27.adjustOffset(778L, false);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.dayOfYear();
        mutableDateTime39.addMonths(978);
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = chronology50.add(readablePeriod52, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = mutableDateTime56.toDateTime(chronology64);
        boolean boolean68 = mutableDateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:46:31.991Z" + "'", str6, "2022-02-11T09:46:31.991Z");
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 964L + "'", long34 == 964L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 778L + "'", long38 == 778L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 6L + "'", long55 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        int int24 = dateTimeField20.getDifference((long) 10, (long) 'a');
        int int26 = dateTimeField20.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial27 = null;
        int[] intArray34 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int35 = dateTimeField20.getMinimumValue(readablePartial27, intArray34);
        org.joda.time.DurationField durationField36 = dateTimeField20.getRangeDurationField();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.hourOfHalfday();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = locale47.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology45, locale47, (java.lang.Integer) 2022);
        java.util.Locale locale51 = locale47.stripExtensions();
        int int52 = dateTimeField20.getMaximumShortTextLength(locale47);
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int58 = dateTimeField57.getMaximumValue();
        int int61 = dateTimeField57.getDifference((long) 10, (long) 'a');
        int int63 = dateTimeField57.getLeapAmount((-1L));
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = dateTimeField57.getAsText((long) 340, locale65);
        org.joda.time.ReadablePartial readablePartial67 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        int int71 = dateTimeField70.getMaximumValue();
        int int74 = dateTimeField70.getDifference((long) 10, (long) 'a');
        int int76 = dateTimeField70.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial77 = null;
        int[] intArray84 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int85 = dateTimeField70.getMinimumValue(readablePartial77, intArray84);
        int int86 = dateTimeField57.getMinimumValue(readablePartial67, intArray84);
        int[] intArray88 = dateTimeField20.add(readablePartial53, 292278993, intArray84, 0);
        int int89 = dateTimeField16.getMinimumValue(readablePartial17, intArray88);
        long long91 = dateTimeField16.roundCeiling((long) 74463);
        boolean boolean92 = dateTimeField16.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 59 + "'", int71 == 59);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 74463L + "'", long91 == 74463L);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:42:46.973Z", "2022-02-11T09:42:28.091Z", "2022-02-11T09:42:31.883Z");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:42:46.973z_2022-02-11T09:42:28.091Z_2022-02-11T09:42:31.883Z");
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        long long12 = dateTimeField10.roundFloor(0L);
        long long14 = dateTimeField10.roundHalfFloor((long) 74420121);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.dayOfMonth();
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology23, locale28);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfDay();
        long long32 = dateTimeField30.roundFloor((long) 238);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology41.getZone();
        org.joda.time.DurationField durationField45 = chronology41.weeks();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.year();
        java.util.Locale locale49 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        int int50 = dateTimeField46.getMaximumTextLength(locale49);
        java.lang.String str51 = dateTimeField30.getAsText((int) (short) 1, locale49);
        int int52 = dateTimeField10.getMaximumTextLength(locale49);
        org.joda.time.ReadablePartial readablePartial53 = null;
        int int54 = dateTimeField10.getMaximumValue(readablePartial53);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 74420121L + "'", long14 == 74420121L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals(locale49.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 999 + "'", int54 == 999);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime1.add(readableDuration9);
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.era();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology11.getDateTimeMillis(2122, 74730, 63, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74730 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572792084,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=84,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 74447);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.yearOfEra();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar14 = mutableDateTime11.toCalendar(locale13);
        java.util.Calendar calendar15 = mutableDateTime1.toCalendar(locale13);
        mutableDateTime1.setMillis(1644572557442L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572792182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644537697182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime3.toMutableDateTime();
        int int10 = mutableDateTime9.getEra();
        mutableDateTime9.addSeconds(0);
        boolean boolean13 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        boolean boolean20 = mutableDateTime15.isSupported(dateTimeFieldType19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime15.add(readableDuration21, 5);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.minuteOfHour();
        int int31 = mutableDateTime25.getSecondOfDay();
        mutableDateTime25.addSeconds((-292275054));
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology43, locale45, (java.lang.Integer) 2022);
        java.util.Locale locale49 = locale45.stripExtensions();
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = mutableDateTime25.toString("842", locale49);
        boolean boolean52 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        boolean boolean53 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        int int54 = mutableDateTime9.getYearOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        int int64 = mutableDateTime56.get(dateTimeFieldType63);
        int int65 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.Instant instant66 = mutableDateTime56.toInstant();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime56.dayOfWeek();
        mutableDateTime56.addMonths(411);
        boolean boolean70 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.DateTime dateTime71 = mutableDateTime9.toDateTime();
        int int72 = mutableDateTime9.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 74792 + "'", int31 == 74792);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fra" + "'", str50, "fra");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "842" + "'", str51, "842");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 74792219 + "'", int72 == 74792219);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = dateTimeField9.getAsShortText((int) (byte) 1, locale13);
        boolean boolean16 = dateTimeField9.isLeap((long) 66);
        int int18 = dateTimeField9.getMaximumValue(562L);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfEra();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar22 = mutableDateTime19.toCalendar(locale21);
        mutableDateTime19.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.weekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        org.joda.time.Chronology chronology35 = mutableDateTime30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime30.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar37 = mutableDateTime36.toGregorianCalendar();
        int int38 = property28.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime49 = mutableDateTime40.toDateTime();
        java.util.Locale locale50 = null;
        java.util.Calendar calendar51 = mutableDateTime40.toCalendar(locale50);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime40.toDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = mutableDateTime40.toDateTimeISO();
        int int56 = property28.getDifference((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime mutableDateTime57 = property28.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int62 = dateTimeField60.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.dayOfWeek();
        java.util.Locale locale67 = null;
        java.lang.String str68 = property66.getAsText(locale67);
        java.util.Locale locale69 = null;
        int int70 = property66.getMaximumTextLength(locale69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.ReadableInstant readableInstant73 = null;
        boolean boolean74 = mutableDateTime72.isEqual(readableInstant73);
        int int75 = mutableDateTime72.getHourOfDay();
        mutableDateTime72.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType78.getField(chronology79);
        int int81 = dateTimeField80.getMaximumValue();
        mutableDateTime72.setRounding(dateTimeField80);
        java.util.Locale locale84 = java.util.Locale.FRENCH;
        java.lang.String str85 = dateTimeField80.getAsShortText((int) (byte) 1, locale84);
        java.lang.String str86 = property66.getAsShortText(locale84);
        java.lang.String str87 = dateTimeField60.getAsShortText(1L, locale84);
        java.lang.String str88 = locale84.getISO3Country();
        boolean boolean89 = locale84.hasExtensions();
        java.lang.String str90 = locale84.getDisplayLanguage();
        java.lang.String str91 = locale84.getDisplayScript();
        java.lang.String str92 = locale84.toLanguageTag();
        java.lang.String str93 = property28.getAsShortText(locale84);
        int int94 = dateTimeField9.getMaximumTextLength(locale84);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572792240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644537697240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "vendredi" + "'", str68, "vendredi");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 59 + "'", int81 == 59);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ven." + "'", str86, "ven.");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u6cd5\u6587" + "'", str90, "\u6cd5\u6587");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "fr" + "'", str92, "fr");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022" + "'", str93, "2022");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setMillis((long) 74411);
        boolean boolean10 = mutableDateTime1.isAfterNow();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime12.getZone();
        long long21 = dateTimeZone19.nextTransition((long) 59);
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0);
        java.lang.String str24 = dateTimeZone19.getID();
        long long26 = dateTimeZone19.nextTransition((long) (byte) 0);
        boolean boolean28 = dateTimeZone19.isStandardOffset((long) 580);
        mutableDateTime1.setZoneRetainFields(dateTimeZone19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.setMinuteOfHour((int) (short) 1);
        int int36 = mutableDateTime31.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime31.weekyear();
        int int38 = mutableDateTime31.getWeekyear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        mutableDateTime40.addHours(59);
        org.joda.time.Chronology chronology45 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology45);
        boolean boolean48 = mutableDateTime31.isEqual((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime47.monthOfYear();
        mutableDateTime47.setMillis((long) 74421457);
        boolean boolean53 = mutableDateTime47.isBefore((long) 765);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime47.millisOfDay();
        boolean boolean55 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime1.addWeeks(817);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572792270,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=270,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 46 + "'", int7 == 46);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 59L + "'", long21 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 270 + "'", int36 == 270);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        mutableDateTime1.setMillis(5L);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addYears(34830);
        int int13 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setWeekyear(15);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime1.add(readableDuration16);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        mutableDateTime4.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        boolean boolean16 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.centuries();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DurationField durationField28 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.year();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime4.toMutableDateTime(chronology24);
        boolean boolean31 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        int int32 = mutableDateTime1.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(10664, 82974, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82974 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        mutableDateTime1.setYear((int) 'x');
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(0);
        mutableDateTime17.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime();
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime1.setMillis((long) 635);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74792 + "'", int7 == 74792);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime1.add(readableDuration18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime1.copy();
        mutableDateTime1.addMillis(568);
        mutableDateTime1.setWeekyear(471);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = property25.add(1644785052553L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 164478505255300");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697379,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=379,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMinutes(0);
        boolean boolean12 = mutableDateTime1.isBeforeNow();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        java.lang.String str21 = dateTimeZone20.getID();
        boolean boolean23 = dateTimeZone20.isStandardOffset((long) 930);
        org.joda.time.DateTime dateTime24 = mutableDateTime1.toDateTime(dateTimeZone20);
        java.lang.Object obj25 = mutableDateTime1.clone();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime1.add(readablePeriod26, 594);
        mutableDateTime1.addSeconds(456);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.minuteOfHour();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 389 + "'", int6 == 389);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "2022-02-13T20:46:32.389Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-02-13T20:46:32.389Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-02-13T20:46:32.389Z");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        mutableDateTime1.addWeeks(79);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.addHours((int) (short) 0);
        mutableDateTime13.addWeekyears((int) 'a');
        java.lang.String str19 = mutableDateTime13.toString("0");
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        mutableDateTime13.set(dateTimeFieldType28, 5);
        mutableDateTime13.setMinuteOfHour(0);
        boolean boolean34 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addHours(225);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime13.yearOfCentury();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getMonthOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        mutableDateTime44.addHours(59);
        int int49 = mutableDateTime44.getMillisOfSecond();
        mutableDateTime44.setMillisOfDay(10);
        boolean boolean52 = mutableDateTime39.isEqual((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.millis();
        mutableDateTime39.add(durationFieldType53, 0);
        boolean boolean56 = mutableDateTime13.isEqual((org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime13.setWeekyear(74495);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime13.minuteOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 402 + "'", int49 == 402);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = mutableDateTime17.toDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        mutableDateTime17.setDate((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime17.hourOfDay();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale37 = java.util.Locale.JAPAN;
        java.lang.String str38 = locale36.getDisplayLanguage(locale37);
        java.util.Locale locale40 = new java.util.Locale("");
        java.lang.String str41 = locale37.getDisplayScript(locale40);
        java.lang.String str42 = property35.getAsShortText(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 286, chronology9, locale40, (java.lang.Integer) 74414, 34857505);
        org.joda.time.DateTimeField dateTimeField46 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField48 = chronology9.years();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str38, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(34880240);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        int int25 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime19.weekyear();
        mutableDateTime19.add((long) 993);
        long long29 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(34904750);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        mutableDateTime33.setMinuteOfHour((int) (short) 1);
        int int38 = mutableDateTime33.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime33.weekyear();
        int int40 = mutableDateTime33.getDayOfYear();
        org.joda.time.DateTimeField dateTimeField41 = mutableDateTime33.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime33.toMutableDateTimeISO();
        mutableDateTime42.setMillis((long) 160);
        java.lang.String str45 = mutableDateTime42.toString();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        java.lang.String str48 = mutableDateTime47.toString();
        mutableDateTime47.setDate((long) 715);
        boolean boolean51 = mutableDateTime42.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime19.setDate((org.joda.time.ReadableInstant) mutableDateTime47);
        int int53 = mutableDateTime19.getRoundingMode();
        java.util.Locale locale55 = null;
        java.lang.String str56 = mutableDateTime19.toString("885", locale55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 135 + "'", int14 == 135);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 508 + "'", int25 == 508);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-689217L) + "'", long29 == (-689217L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 508 + "'", int38 == 508);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 42 + "'", int40 == 42);
        org.junit.Assert.assertNull(dateTimeField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.160Z" + "'", str45, "1970-01-01T00:00:00.160Z");
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:40:11.930Z" + "'", str48, "2022-02-11T09:40:11.930Z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "885" + "'", str56, "885");
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("214");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("2022-02-27T15:57:39.813+390:13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-27T15:57:39.813+390:13 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it__#u-214");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale12 = new java.util.Locale("\u4e2d\u56fd\u8a9e");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 287, chronology10, locale12, (java.lang.Integer) 34811, 481);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 35141973, chronology8, locale12, (java.lang.Integer) 266);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.millisOfDay();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeFormatter22.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter22.getParser();
        boolean boolean25 = dateTimeFormatter22.isParser();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.days();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        long long38 = chronology33.add(readablePeriod35, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter22.withChronology(chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        boolean boolean41 = dateTimeFormatter40.isOffsetParsed();
        org.joda.time.Chronology chronology42 = dateTimeFormatter40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = dateTimeField43.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial58 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        int int65 = dateTimeField61.getDifference((long) 10, (long) 'a');
        int int67 = dateTimeField61.getLeapAmount((-1L));
        java.util.Locale locale69 = java.util.Locale.ITALY;
        java.lang.String str70 = dateTimeField61.getAsText((long) 340, locale69);
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType72.getField(chronology73);
        int int75 = dateTimeField74.getMaximumValue();
        int int78 = dateTimeField74.getDifference((long) 10, (long) 'a');
        int int80 = dateTimeField74.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial81 = null;
        int[] intArray88 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int89 = dateTimeField74.getMinimumValue(readablePartial81, intArray88);
        int int90 = dateTimeField61.getMinimumValue(readablePartial71, intArray88);
        int int91 = dateTimeField57.getMaximumValue(readablePartial58, intArray88);
        int int92 = dateTimeField43.getMinimumValue(readablePartial45, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            chronology8.validate(readablePartial19, intArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals(locale12.toString(), "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(dateTimeZone23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "0" + "'", str70, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 59 + "'", int75 == 59);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 59 + "'", int80 == 59);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 99 + "'", int91 == 99);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology19, locale24);
        java.util.Locale locale26 = dateTimeParserBucket25.getLocale();
        java.lang.String str27 = property9.getAsShortText(locale26);
        org.joda.time.DateTimeField dateTimeField28 = property9.getField();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addDays(0);
        int int36 = mutableDateTime30.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime30.weekyear();
        mutableDateTime30.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime30.copy();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType42.getField(chronology43);
        int int46 = dateTimeField44.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.dayOfWeek();
        java.util.Locale locale51 = null;
        java.lang.String str52 = property50.getAsText(locale51);
        java.util.Locale locale53 = null;
        int int54 = property50.getMaximumTextLength(locale53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        mutableDateTime56.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType62.getField(chronology63);
        int int65 = dateTimeField64.getMaximumValue();
        mutableDateTime56.setRounding(dateTimeField64);
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = dateTimeField64.getAsShortText((int) (byte) 1, locale68);
        java.lang.String str70 = property50.getAsShortText(locale68);
        java.lang.String str71 = dateTimeField44.getAsShortText(1L, locale68);
        java.lang.String str72 = locale68.getCountry();
        java.util.Locale.setDefault(locale68);
        java.lang.String str74 = property41.getAsText(locale68);
        int int75 = property9.getMaximumTextLength(locale68);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572792593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=593,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 593 + "'", int36 == 593);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "vendredi" + "'", str52, "vendredi");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ven." + "'", str70, "ven.");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "33" + "'", str74, "33");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getLeapAmount((-1L));
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.lang.String str11 = dateTimeField2.getAsText((long) 340, locale10);
        java.util.Locale locale13 = java.util.Locale.UK;
        java.lang.String str14 = dateTimeField2.getAsShortText((int) '4', locale13);
        org.joda.time.ReadablePartial readablePartial15 = null;
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str18 = dateTimeField2.getAsText(readablePartial15, 292278993, locale17);
        java.lang.String str20 = dateTimeField2.getAsText((long) 276);
        org.joda.time.ReadablePartial readablePartial21 = null;
        int int22 = dateTimeField2.getMinimumValue(readablePartial21);
        java.lang.String str24 = dateTimeField2.getAsText((long) 352);
        org.joda.time.ReadablePartial readablePartial25 = null;
        int int26 = dateTimeField2.getMaximumValue(readablePartial25);
        boolean boolean28 = dateTimeField2.isLeap((long) 927);
        java.lang.String str30 = dateTimeField2.getAsShortText((long) 74592);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52" + "'", str14, "52");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "292278993" + "'", str18, "292278993");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "14" + "'", str30, "14");
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        int int24 = mutableDateTime14.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime14.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant32 = null;
        mutableDateTime28.setDate(readableInstant32);
        long long34 = mutableDateTime28.getMillis();
        int int35 = mutableDateTime28.getYearOfCentury();
        int int36 = property25.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        java.util.GregorianCalendar gregorianCalendar37 = mutableDateTime28.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572792631L + "'", long34 == 1644572792631L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        mutableDateTime0.add(durationFieldType3, 642);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        org.joda.time.Chronology chronology22 = mutableDateTime7.getChronology();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        int int27 = dateTimeZone24.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        int int30 = dateTimeZone24.getOffsetFromLocal((long) 161);
        long long32 = dateTimeZone24.nextTransition((long) 34833543);
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone24);
        boolean boolean34 = durationFieldType3.isSupported(chronology33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.minuteOfHour();
        org.joda.time.Chronology chronology48 = chronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.hourOfDay();
        java.lang.String str50 = chronology42.toString();
        boolean boolean51 = durationFieldType3.isSupported(chronology42);
        org.joda.time.DateTimeField dateTimeField52 = chronology42.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:46:32.647Z" + "'", str11, "2022-02-11T09:46:32.647Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 34833543L + "'", long32 == 34833543L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        int int14 = mutableDateTime6.get(dateTimeFieldType13);
        java.util.Date date15 = mutableDateTime6.toDate();
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime6.getZone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.secondOfDay();
        org.joda.time.DateTime dateTime18 = mutableDateTime6.toDateTime();
        int int19 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime18.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = dateTimeField2.getAsText((long) (-1), locale7);
        int int10 = dateTimeField2.getMaximumValue((long) 74442);
        java.lang.String str12 = dateTimeField2.getAsShortText((-1663980000L));
        org.joda.time.ReadablePartial readablePartial13 = null;
        int int14 = dateTimeField2.getMinimumValue(readablePartial13);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "59" + "'", str8, "59");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        org.joda.time.DurationField durationField20 = property19.getDurationField();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.minuteOfHour();
        mutableDateTime22.addWeeks(34808947);
        mutableDateTime22.addSeconds(166);
        int int32 = mutableDateTime22.getEra();
        mutableDateTime22.setSecondOfDay(74416);
        long long35 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.Chronology chronology36 = mutableDateTime22.getChronology();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        org.joda.time.Chronology chronology43 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        boolean boolean47 = dateTimeZone44.isStandardOffset((long) 930);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.addHours((int) (short) 0);
        mutableDateTime48.addWeekyears((int) 'a');
        mutableDateTime48.setWeekyear(74416135);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        int int59 = dateTimeZone56.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        boolean boolean61 = mutableDateTime48.isAfter((org.joda.time.ReadableInstant) mutableDateTime60);
        int int62 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology63 = chronology36.withZone(dateTimeZone44);
        long long67 = dateTimeZone44.convertLocalToUTC(0L, false, 748L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74792 + "'", int7 == 74792);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:46:32.700Z" + "'", str16, "2022-02-11T09:46:32.700Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-350874189293L) + "'", long35 == (-350874189293L));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology63);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.lang.String str3 = property2.getName();
        org.joda.time.DurationField durationField4 = property2.getRangeDurationField();
        org.joda.time.Interval interval5 = property2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfEra();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.minuteOfHour();
        int int16 = mutableDateTime10.getSecondOfDay();
        mutableDateTime10.setSecondOfDay((int) (byte) 0);
        boolean boolean19 = property7.equals((java.lang.Object) mutableDateTime10);
        long long20 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.addWeeks(388);
        mutableDateTime10.addDays(34810005);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean33 = mutableDateTime26.isSupported(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime26.dayOfMonth();
        mutableDateTime26.addMinutes(0);
        boolean boolean37 = mutableDateTime26.isBeforeNow();
        int int38 = mutableDateTime26.getDayOfMonth();
        boolean boolean39 = mutableDateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Instant instant40 = mutableDateTime26.toInstant();
        org.joda.time.Chronology chronology41 = null;
        mutableDateTime26.setChronology(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        mutableDateTime44.addHours(59);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.minuteOfHour();
        mutableDateTime44.addWeeks(34808947);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addDays(0);
        int int59 = mutableDateTime53.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime53.weekyear();
        boolean boolean61 = mutableDateTime44.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime53.setSecondOfDay(437);
        boolean boolean64 = mutableDateTime26.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfWeek" + "'", str3, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74792 + "'", int16 == 74792);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 718 + "'", int31 == 718);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 718 + "'", int59 == 718);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.days();
        boolean boolean27 = durationFieldType16.isSupported(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 292278993, chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.weekyearOfCentury();
        mutableDateTime1.setChronology(chronology24);
        org.joda.time.DurationField durationField32 = chronology24.halfdays();
        org.joda.time.DurationField durationField33 = chronology24.months();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology8.hours();
        org.joda.time.DurationField durationField13 = chronology8.millis();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        boolean boolean37 = dateTimeField34.isLeap((long) (short) -1);
        java.lang.String str38 = dateTimeField34.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        int int43 = dateTimeField42.getMaximumValue();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime46.yearOfCentury();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        int int50 = property48.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = dateTimeField53.getAsShortText(0L, locale56);
        int int59 = property48.getMaximumTextLength(locale56);
        java.lang.String str60 = dateTimeField42.getAsShortText(0L, locale56);
        java.lang.String str61 = dateTimeField34.getAsText((-1L), locale56);
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "2022-02-11T09:40:25.676Z", locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 93, chronology8, locale56);
        org.joda.time.DateTimeField dateTimeField64 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology8.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondOfMinute" + "'", str38, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "59" + "'", str61, "59");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.addHours((int) (short) 0);
        mutableDateTime4.addWeekyears((int) 'a');
        java.lang.String str10 = mutableDateTime4.toString("0");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime12.set(dateTimeFieldType16, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        int int20 = mutableDateTime12.get(dateTimeFieldType19);
        mutableDateTime4.set(dateTimeFieldType19, 5);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType19);
        int int24 = mutableDateTime1.getDayOfMonth();
        int int25 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        java.lang.Integer int9 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = mutableDateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        mutableDateTime21.setZoneRetainFields(dateTimeZone32);
        mutableDateTime14.setZone(dateTimeZone32);
        long long38 = dateTimeZone32.previousTransition((long) 852);
        long long41 = dateTimeZone32.adjustOffset((long) 580, true);
        long long45 = dateTimeZone32.convertLocalToUTC((long) 879, false, (long) 852);
        org.joda.time.Chronology chronology46 = chronology10.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField47 = chronology10.weekyearOfCentury();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        mutableDateTime49.setMinuteOfHour((int) (short) 1);
        int int54 = mutableDateTime49.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime49.weekyear();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.add((long) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        mutableDateTime60.addHours(59);
        org.joda.time.Chronology chronology65 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology65.getZone();
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology65, locale67);
        java.lang.String str69 = property55.getAsShortText(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(1644572557083L, chronology10, locale67);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 828 + "'", int19 == 828);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:46:32.828Z" + "'", str25, "2022-02-11T09:46:32.828Z");
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 852L + "'", long38 == 852L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 580L + "'", long41 == 580L);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 879L + "'", long45 == 879L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 828 + "'", int54 == 828);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2032" + "'", str69, "2032");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        int int3 = property2.getLeapAmount();
        long long4 = property2.remainder();
        boolean boolean6 = property2.equals((java.lang.Object) "2022-02-11T09:43:46.976Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 35192861L + "'", long4 == 35192861L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        java.util.Locale locale16 = null;
        java.util.Calendar calendar17 = mutableDateTime12.toCalendar(locale16);
        int int18 = mutableDateTime12.getMinuteOfHour();
        mutableDateTime12.add(6L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        mutableDateTime22.addHours(59);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.minuteOfHour();
        int int28 = mutableDateTime22.getSecondOfDay();
        mutableDateTime22.setSecondOfDay((int) (byte) 0);
        mutableDateTime22.setHourOfDay(0);
        boolean boolean33 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime36.set(dateTimeFieldType40, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        int int44 = mutableDateTime36.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = mutableDateTime36.toDateTime();
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale49, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology54, locale56, (java.lang.Integer) 2022);
        java.util.Locale locale60 = locale56.stripExtensions();
        java.lang.String str61 = locale60.getScript();
        java.lang.String str62 = locale60.getISO3Language();
        java.util.Calendar calendar63 = dateTime45.toCalendar(locale60);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime45.getZone();
        long long67 = dateTimeZone64.convertLocalToUTC((long) 65, true);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, dateTimeZone64);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime70 = property69.roundCeiling();
        int int71 = mutableDateTime70.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime70.setDate(140, 791, 858);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 791 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572792880,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=32,MILLISECOND=880,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 46 + "'", int18 == 46);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 74792 + "'", int28 == 74792);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644537697880,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=880,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone64);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 65L + "'", long67 == 65L);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        int int15 = dateTimeField14.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial16 = null;
        int int17 = dateTimeField14.getMaximumValue(readablePartial16);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale29.getScript();
        int int31 = dateTimeField28.getMaximumTextLength(locale29);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        boolean boolean34 = locale33.hasExtensions();
        java.lang.String str35 = dateTimeField28.getAsText((long) 4, locale33);
        int int36 = dateTimeField14.getMaximumShortTextLength(locale33);
        long long38 = dateTimeField14.roundHalfCeiling(0L);
        boolean boolean39 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "4" + "'", str35, "4");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        int int15 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean17 = mutableDateTime10.isSupported(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.dayOfMonth();
        boolean boolean19 = mutableDateTime1.equals((java.lang.Object) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.setMillisOfDay(74482);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 937 + "'", int15 == 937);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("214");
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder9 = builder4.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("2022-02-11T09:46:14.089Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:46:14.089Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it__#u-214");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = dateTimeField22.getAsText(readablePartial23, 842, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale39, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime45.getZone();
        long long54 = dateTimeZone52.nextTransition((long) 59);
        java.lang.String str56 = dateTimeZone52.getName((long) (short) 0);
        dateTimeParserBucket43.setZone(dateTimeZone52);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        org.joda.time.Chronology chronology65 = dateTimeParserBucket63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.minuteOfDay();
        org.joda.time.DurationField durationField69 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField70 = chronology65.halfdayOfDay();
        dateTimeParserBucket43.saveField(dateTimeField70, 670);
        org.joda.time.Chronology chronology74 = null;
        java.util.Locale locale75 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology74, locale75, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket78.getZone();
        org.joda.time.Chronology chronology80 = dateTimeParserBucket78.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.days();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.dayOfYear();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.dayOfMonth();
        org.joda.time.DurationField durationField85 = chronology80.centuries();
        org.joda.time.DateTimeField dateTimeField86 = chronology80.minuteOfHour();
        int int87 = dateTimeField86.getMinimumValue();
        dateTimeParserBucket43.saveField(dateTimeField86, 170);
        dateTimeParserBucket43.setPivotYear((java.lang.Integer) 155);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "842" + "'", str41, "842");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 59L + "'", long54 == 59L);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        boolean boolean10 = dateTimeZone7.isStandardOffset((long) 930);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.addHours((int) (short) 0);
        mutableDateTime11.addWeekyears((int) 'a');
        mutableDateTime11.setWeekyear(74416135);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        boolean boolean24 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        int int25 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime11);
        int int27 = dateTimeZone7.getStandardOffset((long) 351);
        int int29 = dateTimeZone7.getOffset((long) 379);
        java.lang.String str30 = dateTimeZone7.toString();
        int int32 = dateTimeZone7.getOffsetFromLocal((long) 178);
        java.util.TimeZone timeZone33 = dateTimeZone7.toTimeZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        long long23 = dateTimeParserBucket20.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addDays(0);
        int int31 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.weekyear();
        int int33 = mutableDateTime25.getMonthOfYear();
        mutableDateTime25.addDays(5);
        boolean boolean37 = mutableDateTime25.isAfter((long) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = mutableDateTime39.toDateTime();
        java.util.Locale locale49 = null;
        java.util.Calendar calendar50 = mutableDateTime39.toCalendar(locale49);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime39.getZone();
        mutableDateTime25.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        mutableDateTime25.setZoneRetainFields(dateTimeZone59);
        dateTimeParserBucket20.setZone(dateTimeZone59);
        mutableDateTime8.setZoneRetainFields(dateTimeZone59);
        long long66 = dateTimeZone59.nextTransition((long) 44);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(503, 1249, 318, 56, 14, 34958, 97715, dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 28 + "'", int31 == 28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644537697028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 44L + "'", long66 == 44L);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2832-02-11T09:45:55.439Z", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2832-02-11t09:45:55.439z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology7.add(readablePeriod12, (-689217L), 805);
        org.joda.time.DurationField durationField16 = chronology7.days();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-689217L) + "'", long15 == (-689217L));
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        boolean boolean19 = dateTimeZone16.isFixed();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.set(74444144);
        org.joda.time.DurationField durationField14 = property10.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNull(durationField14);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, 5);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.addSeconds((-292275054));
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = locale31.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology29, locale31, (java.lang.Integer) 2022);
        java.util.Locale locale35 = locale31.stripExtensions();
        java.lang.String str36 = locale35.getISO3Language();
        java.lang.String str37 = mutableDateTime11.toString("842", locale35);
        boolean boolean38 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        java.lang.String str41 = property40.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfEra();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar47 = mutableDateTime44.toCalendar(locale46);
        mutableDateTime44.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int51 = mutableDateTime44.get(dateTimeFieldType50);
        mutableDateTime43.setDate((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfMonth();
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology61, locale66);
        mutableDateTime44.setChronology(chronology61);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology61);
        mutableDateTime1.setChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField71 = chronology61.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74793 + "'", int17 == 74793);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "842" + "'", str37, "842");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572793082,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=33,MILLISECOND=82,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 42 + "'", int51 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.dayOfYear();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        java.util.Locale locale24 = null;
        java.lang.String str25 = property23.getAsText(locale24);
        java.util.Locale locale26 = null;
        int int27 = property23.getMaximumTextLength(locale26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        mutableDateTime29.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        mutableDateTime29.setRounding(dateTimeField37);
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = dateTimeField37.getAsShortText((int) (byte) 1, locale41);
        java.lang.String str43 = property23.getAsShortText(locale41);
        java.lang.String str44 = dateTimeField18.getAsShortText(readablePartial19, (int) (short) -1, locale41);
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime48.set(dateTimeFieldType52, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        int int56 = mutableDateTime48.get(dateTimeFieldType55);
        int int57 = mutableDateTime48.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.yearOfEra();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar61 = mutableDateTime58.toCalendar(locale60);
        java.util.Calendar calendar62 = mutableDateTime48.toCalendar(locale60);
        java.lang.String str63 = dateTimeField18.getAsText(readablePartial45, 306, locale60);
        java.lang.String str64 = locale60.getDisplayName();
        java.lang.String str65 = dateTimeZone6.getName(7218525L, locale60);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = locale60.getUnicodeLocaleType("2022-02-27T15:57:36.287+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-27T15:57:36.287+390:13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "vendredi" + "'", str25, "vendredi");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ven." + "'", str43, "ven.");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1" + "'", str44, "-1");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644572793105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=33,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644537697105,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "306" + "'", str63, "306");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "chinois (Taiwan)" + "'", str64, "chinois (Taiwan)");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.lang.String str6 = dateTimeField2.getName();
        int int9 = dateTimeField2.getDifference((long) 13, (long) (byte) 100);
        org.joda.time.DurationField durationField10 = dateTimeField2.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField2.set(1644572586973L, (-34884));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -34884 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "secondOfMinute" + "'", str6, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(durationField10);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder37 = builder35.addUnicodeLocaleAttribute("2022-02-11T09:41:06.061Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:41:06.061Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 145 + "'", int10 == 145);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        int int10 = mutableDateTime1.getMinuteOfDay();
        mutableDateTime1.setTime((long) 22407);
        boolean boolean13 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 586 + "'", int10 == 586);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getRangeDurationType();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.Chronology chronology9 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        java.lang.String str11 = dateTimeZone10.getID();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.days();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfMonth();
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology21, locale26);
        org.joda.time.DurationField durationField28 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField31 = chronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.weekyear();
        boolean boolean33 = mutableDateTime12.equals((java.lang.Object) chronology21);
        boolean boolean34 = durationFieldType2.isSupported(chronology21);
        org.joda.time.DurationField durationField35 = chronology21.seconds();
        java.util.Locale locale36 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 280, chronology21, locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(199);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        java.lang.String str12 = dateTimeField11.toString();
        java.lang.String str14 = dateTimeField11.getAsText(1644572461105L);
        long long17 = dateTimeField11.getDifferenceAsLong((long) 57495283, (-1404779967L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[yearOfEra]" + "'", str12, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clear();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        java.lang.String str45 = dateTimeField40.getAsShortText(0L, locale43);
        boolean boolean46 = dateTimeField40.isLenient();
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        int int53 = mutableDateTime50.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime50.set(dateTimeFieldType54, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        int int58 = mutableDateTime50.get(dateTimeFieldType57);
        int int59 = mutableDateTime50.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.yearOfEra();
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar63 = mutableDateTime60.toCalendar(locale62);
        java.util.Calendar calendar64 = mutableDateTime50.toCalendar(locale62);
        java.lang.String str65 = dateTimeField40.getAsShortText(readablePartial47, (int) ' ', locale62);
        int int66 = property37.getMaximumShortTextLength(locale62);
        java.lang.String str67 = locale62.toLanguageTag();
        java.util.Locale.Builder builder68 = builder35.setLocale(locale62);
        java.util.Locale.Builder builder69 = builder35.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder72 = builder69.setUnicodeLocaleKeyword("2022-01-07T09:41:07.774Z", "2022-02-11T09:43:05.183Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-01-07T09:41:07.774Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 306 + "'", int10 == 306);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644572793306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=33,MILLISECOND=306,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1644537697306,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=306,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zh-TW" + "'", str67, "zh-TW");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime2.add(readablePeriod7, (-292275054));
        long long10 = mutableDateTime2.getMillis();
        long long11 = mutableDateTime2.getMillis();
        org.joda.time.Chronology chronology12 = mutableDateTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType0.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set((long) 74755239, "2022-02-11T09:43:12.714Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:43:12.714Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785193331L + "'", long10 == 1644785193331L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644785193331L + "'", long11 == 1644785193331L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfYear();
        org.joda.time.Instant instant10 = mutableDateTime0.toInstant();
        mutableDateTime0.addHours(34828152);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = property13.set("2022-02-11T09:46:23.726Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:46:23.726Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572793342,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=33,MILLISECOND=342,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.Chronology chronology15 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        boolean boolean19 = dateTimeZone16.isStandardOffset((long) 930);
        mutableDateTime1.setZoneRetainFields(dateTimeZone16);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.ReadablePartial readablePartial31 = null;
        int[] intArray37 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int38 = dateTimeField30.getMinimumValue(readablePartial31, intArray37);
        int int39 = mutableDateTime1.get(dateTimeField30);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours(0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(74456);
        mutableDateTime1.setZone(dateTimeZone44);
        java.lang.String str46 = dateTimeZone44.toString();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 42 + "'", int39 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:01:14.456" + "'", str46, "+00:01:14.456");
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.weekyear();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.minuteOfHour();
        boolean boolean20 = languageRange1.equals((java.lang.Object) property19);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "twn" + "'", str4, "twn");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572793380,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=47,SECOND=47,MILLISECOND=836,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-292275054) + "'", int17 == (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(705);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter16.getParser();
        boolean boolean19 = dateTimeFormatter16.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter16.withOffsetParsed();
        int int21 = dateTimeFormatter16.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter16.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withZoneUTC();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withLocale(locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = mutableDateTime28.get(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        java.lang.String str44 = dateTimeZone43.toString();
        org.joda.time.DateTime dateTime45 = mutableDateTime28.toDateTime(dateTimeZone43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter23.withZone(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter23.getZone();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime49.set(dateTimeFieldType53, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone56 = mutableDateTime49.getZone();
        long long58 = dateTimeZone56.nextTransition((long) 59);
        java.lang.String str60 = dateTimeZone56.getName((long) (short) 0);
        java.lang.String str61 = dateTimeZone56.getID();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = mutableDateTime68.isEqual(readableInstant69);
        mutableDateTime68.addHours(59);
        org.joda.time.Chronology chronology73 = mutableDateTime68.getChronology();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime68.toMutableDateTime();
        int int75 = mutableDateTime68.getMinuteOfHour();
        mutableDateTime68.addDays(831);
        boolean boolean78 = mutableDateTime64.isBefore((org.joda.time.ReadableInstant) mutableDateTime68);
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Calendar calendar80 = mutableDateTime68.toCalendar(locale79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType81.getField(chronology82);
        int int84 = dateTimeField83.getMaximumValue();
        int int87 = dateTimeField83.getDifference((long) 10, (long) 'a');
        int int89 = dateTimeField83.getLeapAmount((-1L));
        java.util.Locale locale91 = java.util.Locale.ITALY;
        java.lang.String str92 = dateTimeField83.getAsText((long) 340, locale91);
        java.lang.String str93 = locale79.getDisplayVariant(locale91);
        java.lang.String str94 = dateTimeZone56.getShortName((long) 74427617, locale91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter23.withLocale(locale91);
        java.util.Set<java.lang.String> strSet96 = locale91.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter11.withLocale(locale91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter99 = dateTimeFormatter11.withPivotYear(524);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2000 + "'", int21 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:01:14.456" + "'", str44, "+00:01:14.456");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 59L + "'", long58 == 59L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:01:14.456" + "'", str60, "+00:01:14.456");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:01:14.456" + "'", str61, "+00:01:14.456");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 47 + "'", int75 == 47);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1716583593392,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=47,SECOND=47,MILLISECOND=848,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 59 + "'", int84 == 59);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "14" + "'", str92, "14");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:01:14.456" + "'", str94, "+00:01:14.456");
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertNotNull(dateTimeFormatter99);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar7 = mutableDateTime4.toCalendar(locale6);
        mutableDateTime4.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.weekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfCeiling();
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTime();
        int int16 = mutableDateTime14.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        int int24 = dateTimeField20.getDifference((long) 10, (long) 'a');
        int int26 = dateTimeField20.getLeapAmount((-1L));
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = dateTimeField20.getAsText((long) 340, locale28);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField20.getAsShortText((int) '4', locale31);
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = dateTimeField20.getAsText(readablePartial33, 292278993, locale35);
        java.lang.String str37 = locale35.getISO3Country();
        java.lang.String str38 = locale35.getDisplayScript();
        int int39 = property17.getMaximumTextLength(locale35);
        java.util.Locale.Builder builder40 = builder3.setLocale(locale35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        boolean boolean47 = mutableDateTime42.isSupported(dateTimeFieldType46);
        mutableDateTime42.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        java.util.Locale locale61 = null;
        java.util.Calendar calendar62 = mutableDateTime51.toCalendar(locale61);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime51.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone63);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder66.clearExtensions();
        java.util.Locale.Builder builder69 = builder67.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = dateTimeZone63.getShortName((long) 34818666, locale70);
        java.lang.String str72 = locale70.getDisplayScript();
        java.util.Locale.Builder builder73 = builder3.setLocale(locale70);
        java.util.Locale.Builder builder74 = builder73.clear();
        java.util.Locale locale75 = builder73.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572793425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=47,SECOND=47,MILLISECOND=881,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "14" + "'", str29, "14");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "292278993" + "'", str36, "292278993");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GBR" + "'", str37, "GBR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644537623425,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=881,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:01:14.456" + "'", str71, "+00:01:14.456");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        int int9 = dateTimeField8.getMaximumValue();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = dateTimeField8.getAsShortText(0L, locale11);
        int int14 = property3.getMaximumTextLength(locale11);
        int int15 = property3.getMinimumValue();
        boolean boolean16 = property3.isLeap();
        int int17 = property3.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "14" + "'", str13, "14");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime1.toMutableDateTime();
        long long13 = mutableDateTime12.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 917 + "'", int7 == 917);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572794454L + "'", long13 == 1644572794454L);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:45:41.956+00:00:00.100");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:45:41.956+00:00:00.100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        int int16 = mutableDateTime1.getEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17, 481);
        mutableDateTime1.addWeekyears(757);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime1.add(readableDuration22, 597600000);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime1.add(readableDuration25, 663);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537623510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=966,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.addWrapField(0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.setMillisOfDay(7);
        long long10 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.Chronology chronology13 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        long long17 = dateTimeField15.roundHalfEven((long) 390);
        java.lang.String str19 = dateTimeField15.getAsText((long) 896);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField15.set((-910799356L), "2022-02-11T00:01:37.751-00:00:00.001");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T00:01:37.751-00:00:00.001\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-74456L) + "'", long17 == (-74456L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "70" + "'", str19, "70");
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField10 = chronology6.days();
        org.joda.time.DurationField durationField11 = chronology6.months();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.lang.String str42 = dateTimeField15.getAsShortText(1L, locale39);
        java.lang.String str43 = locale39.getCountry();
        java.util.Locale.setDefault(locale39);
        java.lang.String str45 = property12.getAsText(locale39);
        java.lang.String str46 = locale39.getDisplayName();
        java.lang.String str47 = locale39.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 995 + "'", int7 == 995);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "14" + "'", str42, "14");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "48" + "'", str45, "48");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fran\347ais" + "'", str46, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTimeISO();
        int int17 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime1.getZone();
        java.lang.String str21 = dateTimeZone19.getName(1644572774984L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537622553,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:01:14.456,offset=74456,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=9,ZONE_OFFSET=74456,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:01:14.456" + "'", str21, "+00:01:14.456");
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        int int17 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.Instant instant18 = mutableDateTime8.toInstant();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.dayOfWeek();
        boolean boolean20 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        int int30 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology32, locale33, (java.lang.Integer) 9, 59);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket36.saveField(dateTimeFieldType38, 59);
        boolean boolean41 = mutableDateTime25.isSupported(dateTimeFieldType38);
        int int42 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime8.minuteOfHour();
        java.lang.String str45 = property44.getAsText();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37 + "'", int30 == 37);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "47" + "'", str45, "47");
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.toMutableDateTimeISO();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addYears(280);
        mutableDateTime1.add((long) 362);
        int int21 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfWeek();
        java.lang.String str32 = chronology30.toString();
        org.joda.time.DurationField durationField33 = chronology30.millis();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket39.getZone();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        mutableDateTime45.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        mutableDateTime45.setRounding(dateTimeField53);
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = dateTimeField53.getAsShortText((int) (byte) 1, locale57);
        java.lang.String str59 = dateTimeZone41.getName(10930L, locale57);
        org.joda.time.Chronology chronology60 = chronology30.withZone(dateTimeZone41);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        mutableDateTime62.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType68.getField(chronology69);
        int int71 = dateTimeField70.getMaximumValue();
        mutableDateTime62.setRounding(dateTimeField70);
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.lang.String str75 = dateTimeField70.getAsShortText((int) (byte) 1, locale74);
        java.util.Locale locale76 = locale74.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 74460488, chronology60, locale74, (java.lang.Integer) 12);
        org.joda.time.DateTime dateTime79 = mutableDateTime1.toDateTime(chronology60);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(465);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2302 + "'", int21 == 2302);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:01:14.456" + "'", str59, "+00:01:14.456");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 59 + "'", int71 == 59);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
    }
}

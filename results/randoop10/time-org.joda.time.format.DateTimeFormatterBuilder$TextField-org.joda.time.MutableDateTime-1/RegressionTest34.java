import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        java.lang.String str3 = property1.getAsShortText();
        int int4 = property1.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((long) 965);
        java.util.Locale locale7 = null;
        int int8 = property1.getMaximumShortTextLength(locale7);
        org.joda.time.DurationField durationField9 = property1.getRangeDurationField();
        org.joda.time.Interval interval10 = property1.toInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022" + "'", str3, "2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 292278993 + "'", int4 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.add((long) 852);
        mutableDateTime12.addWeekyears(74425676);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime12.add(readableDuration23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.hours();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.dayOfYear();
        java.lang.String str38 = dateTimeField37.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setRounding(dateTimeField37, 35133622);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 35133622");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74959 + "'", int7 == 74959);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:49:19.312Z" + "'", str16, "2022-02-11T09:49:19.312Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DateTimeField[dayOfYear]" + "'", str38, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setSecondOfDay(784);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.Chronology chronology22 = mutableDateTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology22.getZone();
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone23);
        mutableDateTime1.setZoneRetainFields(dateTimeZone23);
        int int28 = dateTimeZone23.getStandardOffset((long) 34952);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime9.add(readableDuration23, 4);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology35, locale37, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.secondOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.yearOfCentury();
        java.util.Locale locale43 = java.util.Locale.UK;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfWeek();
        java.util.Locale locale47 = null;
        java.lang.String str48 = property46.getAsText(locale47);
        java.util.Locale locale49 = null;
        int int50 = property46.getMaximumTextLength(locale49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        mutableDateTime52.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        int int61 = dateTimeField60.getMaximumValue();
        mutableDateTime52.setRounding(dateTimeField60);
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = dateTimeField60.getAsShortText((int) (byte) 1, locale64);
        java.lang.String str66 = property46.getAsShortText(locale64);
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.lang.String str68 = locale67.getScript();
        java.lang.String str69 = locale64.getDisplayScript(locale67);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = locale64.getDisplayLanguage(locale70);
        java.lang.String str72 = locale43.getDisplayCountry(locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology35, locale70);
        org.joda.time.DateTimeField dateTimeField74 = chronology35.centuryOfEra();
        mutableDateTime9.setChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField76 = chronology35.yearOfCentury();
        org.joda.time.DurationField durationField77 = chronology35.millis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Friday" + "'", str48, "Friday");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 59 + "'", int61 == 59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ven." + "'", str66, "ven.");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "French" + "'", str71, "French");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "United Kingdom" + "'", str72, "United Kingdom");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        int int13 = mutableDateTime1.getWeekyear();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        int int15 = dateTime14.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable4);
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable7);
        iOException5.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("French", (java.lang.Throwable) iOException5);
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException12 = new java.io.IOException("617", (java.lang.Throwable) iOException5);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable16);
        java.lang.Throwable throwable19 = null;
        java.io.IOException iOException20 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable19);
        iOException17.addSuppressed((java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException("French", (java.lang.Throwable) iOException17);
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException24 = new java.io.IOException("617", (java.lang.Throwable) iOException17);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        iOException12.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException("2022-02-11T09:40:57.338Z", (java.lang.Throwable) iOException12);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException30 = new java.io.IOException("chinois");
        java.lang.Throwable throwable33 = null;
        java.io.IOException iOException34 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable33);
        java.lang.Throwable throwable36 = null;
        java.io.IOException iOException37 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable36);
        iOException34.addSuppressed((java.lang.Throwable) iOException37);
        java.io.IOException iOException39 = new java.io.IOException("French", (java.lang.Throwable) iOException34);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.lang.Throwable[] throwableArray42 = iOException41.getSuppressed();
        iOException30.addSuppressed((java.lang.Throwable) iOException41);
        iOException28.addSuppressed((java.lang.Throwable) iOException41);
        java.io.IOException iOException45 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        org.junit.Assert.assertNotNull(throwableArray42);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = null;
        boolean boolean20 = dateTimeZone16.isLocalDateTimeGap(localDateTime19);
        java.util.TimeZone timeZone21 = dateTimeZone16.toTimeZone();
        org.joda.time.LocalDateTime localDateTime22 = null;
        boolean boolean23 = dateTimeZone16.isLocalDateTimeGap(localDateTime22);
        java.util.TimeZone timeZone24 = dateTimeZone16.toTimeZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Tempo universale coordinato");
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar17 = mutableDateTime14.toCalendar(locale16);
        mutableDateTime14.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = mutableDateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        mutableDateTime21.setZoneRetainFields(dateTimeZone32);
        mutableDateTime14.setZone(dateTimeZone32);
        java.lang.String str38 = dateTimeZone32.getNameKey(210L);
        java.lang.String str40 = dateTimeZone32.getName((long) 34824770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter9.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeFormatter9.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572959404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:49:19.404Z" + "'", str25, "2022-02-11T09:49:19.404Z");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimeZone42);
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getMillisOfDay();
        mutableDateTime17.addDays(22);
        mutableDateTime17.setYear(59);
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.addHours(831);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        java.lang.String str31 = property30.getName();
        org.joda.time.DurationField durationField32 = property30.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        boolean boolean34 = mutableDateTime17.isSupported(dateTimeFieldType33);
        java.lang.String str35 = dateTimeFieldType33.getName();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        int int46 = mutableDateTime38.get(dateTimeFieldType45);
        int int47 = mutableDateTime38.getCenturyOfEra();
        boolean boolean48 = mutableDateTime38.isAfterNow();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.minuteOfHour();
        int int56 = mutableDateTime50.getSecondOfDay();
        mutableDateTime50.addMinutes(59);
        int int59 = mutableDateTime50.getYear();
        mutableDateTime50.addMillis(97545);
        long long62 = mutableDateTime50.getMillis();
        int int63 = mutableDateTime50.getMinuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableDateTime50.add(readablePeriod64);
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.yearOfEra();
        java.lang.String str68 = property67.getAsText();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        org.joda.time.MutableDateTime mutableDateTime70 = property67.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property67.getFieldType();
        boolean boolean72 = mutableDateTime50.isSupported(dateTimeFieldType71);
        mutableDateTime38.set(dateTimeFieldType71, 225);
        org.joda.time.Chronology chronology77 = null;
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket(0L, chronology77, locale78, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone82 = dateTimeParserBucket81.getZone();
        org.joda.time.Chronology chronology83 = dateTimeParserBucket81.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.hourOfHalfday();
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.lang.String str86 = locale85.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology83, locale85, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField89 = chronology83.halfdays();
        org.joda.time.DurationField durationField90 = chronology83.weekyears();
        org.joda.time.DurationField durationField91 = chronology83.weekyears();
        org.joda.time.DurationField durationField92 = chronology83.minutes();
        boolean boolean93 = dateTimeFieldType71.isSupported(chronology83);
        boolean boolean94 = durationFieldType36.isSupported(chronology83);
        org.joda.time.DateTimeField dateTimeField95 = chronology83.era();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=417,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35359417 + "'", int20 == 35359417);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "dayOfWeek" + "'", str31, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "dayOfWeek" + "'", str35, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 74959 + "'", int56 == 74959);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1644788996962L + "'", long62 == 1644788996962L);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1309 + "'", int63 == 1309);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022" + "'", str68, "2022");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.days();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant12 = null;
        mutableDateTime11.setMillis(readableInstant12);
        boolean boolean14 = mutableDateTime11.isBeforeNow();
        mutableDateTime11.setYear(300);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekyear();
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.Chronology chronology24 = mutableDateTime18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology24.getDateTimeMillis(228, 35292781, 0, 74756);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35292781 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35359446 + "'", int21 == 35359446);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DurationField durationField12 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfHour();
        java.lang.String str14 = dateTimeField13.getName();
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField13.getMinimumValue(readablePartial15);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.275Z");
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.ReadablePartial readablePartial29 = null;
        int[] intArray35 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int36 = dateTimeField28.getMinimumValue(readablePartial29, intArray35);
        boolean boolean38 = dateTimeField28.isLeap((long) 74415);
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology41, locale42, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeParserBucket45.getZone();
        org.joda.time.Chronology chronology47 = dateTimeParserBucket45.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.days();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.millisOfSecond();
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale51.getScript();
        int int53 = dateTimeField50.getMaximumTextLength(locale51);
        java.lang.String str54 = dateTimeField28.getAsShortText((long) 34816672, locale51);
        java.util.Set<java.lang.Character> charSet55 = locale51.getExtensionKeys();
        java.lang.String str56 = locale18.getDisplayScript(locale51);
        java.lang.String str57 = locale18.getVariant();
        int int58 = dateTimeField13.getMaximumTextLength(locale18);
        java.lang.String str59 = locale18.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "minuteOfHour" + "'", str14, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(charSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        boolean boolean24 = mutableDateTime1.equals((java.lang.Object) "2022-02-11T09:40:59.760Z");
        mutableDateTime1.add(4000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.471Z" + "'", str22, "2022-02-11T00:01:37.471Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withDefaultYear(13);
        boolean boolean23 = dateTimeFormatter19.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter19.getParser();
        java.io.Writer writer25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.minuteOfHour();
        int int33 = mutableDateTime27.getSecondOfDay();
        int int34 = mutableDateTime27.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter19.printTo(writer25, (org.joda.time.ReadableInstant) mutableDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 74959 + "'", int33 == 74959);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.DurationField durationField19 = chronology17.days();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Tempo universale coordinato");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        long long16 = dateTimeParserBucket14.computeMillis(true);
        long long17 = dateTimeParserBucket14.computeMillis();
        int int18 = dateTimeParserBucket14.getOffset();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime22.set(dateTimeFieldType26, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        int int30 = mutableDateTime22.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = mutableDateTime22.toDateTime();
        java.util.Locale locale32 = null;
        java.util.Calendar calendar33 = mutableDateTime22.toCalendar(locale32);
        mutableDateTime22.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime22.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        mutableDateTime22.add(readablePeriod37, 730);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime22.add(readableDuration40, 842);
        mutableDateTime22.setSecondOfDay(320);
        boolean boolean45 = mutableDateTime22.isEqualNow();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime22.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        dateTimeParserBucket14.saveField(dateTimeField47, 14);
        boolean boolean50 = dateTimeField47.isLenient();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644537697509,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=509,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(1644572504889L, chronology11, locale12, (java.lang.Integer) 40, 152);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int27 = dateTimeField26.getMaximumValue();
        mutableDateTime18.setRounding(dateTimeField26);
        int int29 = mutableDateTime18.getMonthOfYear();
        mutableDateTime18.addWeekyears(11);
        mutableDateTime18.add((long) (short) -1);
        mutableDateTime18.addWeeks(829);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean37 = mutableDateTime18.isSupported(dateTimeFieldType36);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add(100);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.weekyear();
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology53, locale55, (java.lang.Integer) 2022);
        java.util.Locale locale59 = locale55.stripExtensions();
        java.lang.String str60 = property44.getAsText(locale59);
        java.lang.String str61 = locale39.getDisplayScript(locale59);
        dateTimeParserBucket16.saveField(dateTimeFieldType36, "", locale39);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType36.getDurationType();
        int int64 = mutableDateTime9.get(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2122" + "'", str60, "2122");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int7 = dateTimeField2.getMaximumValue();
        long long10 = dateTimeField2.add((long) 930, (int) (byte) 10);
        int int12 = dateTimeField2.getLeapAmount((long) 89);
        boolean boolean13 = dateTimeField2.isLenient();
        int int15 = dateTimeField2.getLeapAmount((long) 691);
        java.lang.String str16 = dateTimeField2.toString();
        int int17 = dateTimeField2.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10930L + "'", long10 == 10930L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str16, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillisOfSecond(822);
        int int59 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = null;
        java.lang.String str67 = mutableDateTime63.toString(dateTimeFormatter66);
        org.joda.time.Chronology chronology69 = null;
        java.util.Locale locale70 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(0L, chronology69, locale70, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone74 = dateTimeParserBucket73.getZone();
        java.lang.String str76 = dateTimeZone74.getNameKey((long) (byte) 0);
        mutableDateTime63.setZoneRetainFields(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime78 = null;
        boolean boolean79 = dateTimeZone74.isLocalDateTimeGap(localDateTime78);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime1.toMutableDateTime(dateTimeZone74);
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime1.toMutableDateTime();
        int int82 = mutableDateTime81.getHourOfDay();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime81.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-11T09:49:19.562Z" + "'", str67, "2022-02-11T09:49:19.562Z");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMinutes(728);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.monthOfYear();
        int int11 = mutableDateTime1.getMinuteOfDay();
        int int12 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.setYear(839);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1317 + "'", int11 == 1317);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        long long18 = chronology8.add(1835L, (long) 693, 12);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        long long31 = dateTimeField29.roundHalfEven(59L);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology41, locale43, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField47 = chronology41.halfdays();
        org.joda.time.DurationField durationField48 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.yearOfEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        int int58 = mutableDateTime51.getEra();
        int int59 = mutableDateTime51.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime51.yearOfEra();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime51.dayOfMonth();
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.lang.String str63 = property61.getAsText(locale62);
        int int64 = dateTimeField49.getMaximumTextLength(locale62);
        java.lang.String str65 = dateTimeField29.getAsText((int) ' ', locale62);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.DateTimeZone dateTimeZone73 = dateTimeParserBucket71.getZone();
        boolean boolean74 = dateTimeZone73.isFixed();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        boolean boolean79 = mutableDateTime77.isEqual(readableInstant78);
        int int80 = mutableDateTime77.getHourOfDay();
        mutableDateTime77.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        int int86 = dateTimeField85.getMaximumValue();
        mutableDateTime77.setRounding(dateTimeField85);
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.lang.String str90 = dateTimeField85.getAsShortText((int) (byte) 1, locale89);
        java.lang.String str91 = dateTimeZone73.getName(10930L, locale89);
        java.lang.String str92 = locale89.getVariant();
        java.lang.String str93 = locale62.getDisplayVariant(locale89);
        java.util.Set<java.lang.String> strSet94 = locale89.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket97 = new org.joda.time.format.DateTimeParserBucket(35237L, chronology8, locale89, (java.lang.Integer) 10650, 74626648);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10151L + "'", long18 == 10151L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 59L + "'", long31 == 59L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 599 + "'", int59 == 599);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "11" + "'", str63, "11");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "32" + "'", str65, "32");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 59 + "'", int86 == 59);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1" + "'", str90, "1");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00" + "'", str91, "+00:00");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strSet94);
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        java.lang.Integer int9 = dateTimeFormatter8.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withDefaultYear(993);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        mutableDateTime13.setMillis(5L);
        int int22 = mutableDateTime13.getWeekOfWeekyear();
        mutableDateTime13.addYears(34830);
        int int25 = mutableDateTime13.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology27, locale28, (java.lang.Integer) 9, 59);
        java.lang.Object obj32 = dateTimeParserBucket31.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket31.saveField(dateTimeFieldType33, 59);
        java.lang.String str36 = dateTimeFieldType33.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeFormatter39.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter39.getParser();
        boolean boolean42 = dateTimeFormatter39.isParser();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        long long55 = chronology50.add(readablePeriod52, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter39.withChronology(chronology50);
        org.joda.time.DurationField durationField57 = chronology50.seconds();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType33.getField(chronology50);
        boolean boolean59 = mutableDateTime13.isSupported(dateTimeFieldType33);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.DateTime dateTime62 = mutableDateTime61.toDateTime();
        boolean boolean63 = mutableDateTime13.isEqual((org.joda.time.ReadableInstant) mutableDateTime61);
        int int64 = mutableDateTime61.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = dateTimeFormatter8.print((org.joda.time.ReadableInstant) mutableDateTime61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
        org.junit.Assert.assertNull(dateTimeZone40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar18 = mutableDateTime15.toCalendar(locale17);
        mutableDateTime15.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime15.millisOfDay();
        int int22 = mutableDateTime15.getDayOfWeek();
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) mutableDateTime15);
        int int24 = mutableDateTime15.getRoundingMode();
        java.util.GregorianCalendar gregorianCalendar25 = mutableDateTime15.toGregorianCalendar();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone35 = mutableDateTime28.getZone();
        long long37 = dateTimeZone35.nextTransition((long) 59);
        java.lang.String str39 = dateTimeZone35.getName((long) (short) 0);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.addHours(59);
        org.joda.time.Chronology chronology46 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime41.toMutableDateTime();
        int int48 = mutableDateTime41.getYear();
        int int49 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addYears(362);
        boolean boolean52 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572959648,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=648,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 59L + "'", long37 == 59L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add(1641168000000L);
        org.joda.time.Chronology chronology21 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572959672,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=672,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant5 = null;
        mutableDateTime1.setDate(readableInstant5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.setWeekyear(349);
        java.util.Date date10 = mutableDateTime1.toDate();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(575, 965, 57492071, 868);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 575 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 10 09:49:19 UTC 349");
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean29 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        int int30 = mutableDateTime22.getCenturyOfEra();
        mutableDateTime22.addMonths(33);
        boolean boolean34 = mutableDateTime22.equals((java.lang.Object) "2022-02-11T09:40:47.947Z");
        java.lang.Object obj35 = mutableDateTime22.clone();
        int int36 = mutableDateTime22.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "2024-11-11T09:49:19.691Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "2024-11-11T09:49:19.691Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "2024-11-11T09:49:19.691Z");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(450);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear(34821173);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int15 = dateTimeField13.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        java.util.Locale locale20 = null;
        java.lang.String str21 = property19.getAsText(locale20);
        java.util.Locale locale22 = null;
        int int23 = property19.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType31.getField(chronology32);
        int int34 = dateTimeField33.getMaximumValue();
        mutableDateTime25.setRounding(dateTimeField33);
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = dateTimeField33.getAsShortText((int) (byte) 1, locale37);
        java.lang.String str39 = property19.getAsShortText(locale37);
        java.lang.String str40 = dateTimeField13.getAsShortText(1L, locale37);
        java.lang.String str41 = locale37.getISO3Country();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withLocale(locale37);
        java.lang.String str43 = locale37.getDisplayName();
        java.util.Locale locale44 = java.util.Locale.UK;
        java.lang.String str45 = locale37.getDisplayLanguage(locale44);
        java.lang.String str46 = locale37.getVariant();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "vendredi" + "'", str21, "vendredi");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 59 + "'", int34 == 59);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ven." + "'", str39, "ven.");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fran\347ais" + "'", str43, "fran\347ais");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French" + "'", str45, "French");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale34.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology32, locale34, (java.lang.Integer) 2022);
        java.util.Locale locale38 = locale34.stripExtensions();
        int int39 = property10.getMaximumTextLength(locale38);
        java.lang.String str40 = property10.getName();
        java.lang.String str41 = property10.getName();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "yearOfEra" + "'", str40, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "yearOfEra" + "'", str41, "yearOfEra");
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime();
        boolean boolean12 = mutableDateTime10.isAfter((long) 35651);
        int int13 = mutableDateTime10.getYearOfEra();
        mutableDateTime10.addWeekyears(34812148);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.era();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 760 + "'", int6 == 760);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        mutableDateTime18.setMillisOfDay(15);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setMinuteOfHour(74762195);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74762195 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:19.768Z" + "'", str5, "2022-02-11T09:49:19.768Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        int int26 = mutableDateTime18.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime18.dayOfYear();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:19.794Z" + "'", str5, "2022-02-11T09:49:19.794Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 49 + "'", int26 == 49);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        boolean boolean6 = mutableDateTime1.isEqual((long) 411);
        mutableDateTime1.addHours(34824000);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        java.util.Locale locale14 = null;
        java.util.Calendar calendar15 = mutableDateTime10.toCalendar(locale14);
        mutableDateTime10.setDayOfYear(7);
        java.lang.String str18 = mutableDateTime10.toString();
        int int19 = mutableDateTime10.getCenturyOfEra();
        mutableDateTime10.addSeconds(0);
        boolean boolean22 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        int int23 = mutableDateTime1.getMillisOfDay();
        int int24 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        org.joda.time.Chronology chronology31 = mutableDateTime26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime26.toMutableDateTime();
        int int33 = mutableDateTime32.getEra();
        mutableDateTime32.addMillis(35837);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.yearOfEra();
        org.joda.time.DateTimeField dateTimeField37 = mutableDateTime32.getRoundingField();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime32.dayOfWeek();
        org.joda.time.DateTime dateTime39 = mutableDateTime32.toDateTime();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572959804,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=804,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-01-07T09:49:19.804Z" + "'", str18, "2022-01-07T09:49:19.804Z");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35359804 + "'", int23 == 35359804);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 299 + "'", int24 == 299);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfDay(97670);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97670 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        int int13 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        mutableDateTime1.addSeconds(74421457);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfHour();
        int int24 = mutableDateTime18.getSecondOfDay();
        mutableDateTime18.addMinutes(59);
        int int27 = mutableDateTime18.getYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = mutableDateTime29.toString(dateTimeFormatter32);
        int int34 = mutableDateTime29.getMonthOfYear();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime29.add((long) 852);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = mutableDateTime39.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        java.lang.String str51 = dateTimeZone50.getID();
        java.lang.String str53 = dateTimeZone50.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime39.toMutableDateTime(dateTimeZone50);
        mutableDateTime29.setZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime56 = mutableDateTime1.toDateTime(dateTimeZone50);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.halfdays();
        mutableDateTime1.add(durationFieldType57, 244);
        java.lang.String str60 = durationFieldType57.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 74959 + "'", int24 == 74959);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T09:49:19.824Z" + "'", str33, "2022-02-11T09:49:19.824Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:49:19.824Z" + "'", str43, "2022-02-11T09:49:19.824Z");
        org.junit.Assert.assertNotNull(dateTimeZone50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "UTC" + "'", str51, "UTC");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "UTC" + "'", str53, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "halfdays" + "'", str60, "halfdays");
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        mutableDateTime1.setSecondOfDay(993);
        int int20 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.dayOfMonth();
        int int22 = mutableDateTime1.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 838 + "'", int6 == 838);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 993838 + "'", int22 == 993838);
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = mutableDateTime0.get(dateTimeFieldType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime0.setMillis(readableInstant8);
        java.lang.String str10 = mutableDateTime0.toString();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DurationField durationField21 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime0.toMutableDateTime(chronology18);
        org.joda.time.Instant instant24 = mutableDateTime0.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572959847,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=847,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:49:19.847Z" + "'", str10, "2022-02-11T09:49:19.847Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(34850849);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.roundHalfCeiling();
        int int38 = property34.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35359870 + "'", int28 == 35359870);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        mutableDateTime1.setMillis(5L);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addYears(34830);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime1.add(readablePeriod13);
        int int15 = mutableDateTime1.getMillisOfDay();
        int int16 = mutableDateTime1.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        int int20 = property19.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.secondOfDay();
        java.lang.String str24 = property23.getAsText();
        java.util.Locale locale28 = new java.util.Locale("34", "2022-02-11T00:01:37.253Z", "2022-02-11T09:40:19.936Z");
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = property23.getAsShortText(locale28);
        int int31 = property19.getMaximumTextLength(locale28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74959 + "'", int7 == 74959);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:49:19.892Z" + "'", str16, "2022-02-11T09:49:19.892Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals(locale28.toString(), "34_2022-02-11T00:01:37.253Z_2022-02-11T09:40:19.936Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "34 (2022-02-11T00:01:37.253Z,2022-02-11T09:40:19.936Z)" + "'", str29, "34 (2022-02-11T00:01:37.253Z,2022-02-11T09:40:19.936Z)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime1.add(readableDuration18, 74539);
        int int21 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.setSecondOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime1.getZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("35187");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        java.lang.String str4 = property1.getAsText();
        java.lang.String str5 = property1.getAsText();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfWeek();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property8.getAsText(locale9);
        java.util.Locale locale11 = null;
        int int12 = property8.getMaximumTextLength(locale11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        mutableDateTime14.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        int int23 = dateTimeField22.getMaximumValue();
        mutableDateTime14.setRounding(dateTimeField22);
        java.util.Locale locale26 = java.util.Locale.FRENCH;
        java.lang.String str27 = dateTimeField22.getAsShortText((int) (byte) 1, locale26);
        java.lang.String str28 = property8.getAsShortText(locale26);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale29.getScript();
        java.lang.String str31 = locale26.getDisplayScript(locale29);
        java.lang.String str32 = property1.getAsText(locale26);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.hourOfHalfday();
        java.util.Locale locale43 = java.util.Locale.FRENCH;
        java.lang.String str44 = locale43.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology41, locale43, (java.lang.Integer) 2022);
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = locale43.getDisplayScript();
        int int49 = property1.getMaximumShortTextLength(locale43);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2122" + "'", str4, "2122");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2122" + "'", str5, "2122");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "vendredi" + "'", str10, "vendredi");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ven." + "'", str28, "ven.");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2122" + "'", str32, "2122");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addDays(831);
        org.joda.time.DateTime dateTime11 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        int[] intArray24 = null;
        int int25 = dateTimeField22.getMinimumValue(readablePartial23, intArray24);
        int int27 = dateTimeField22.getMaximumValue((long) 109);
        mutableDateTime1.setRounding(dateTimeField22);
        org.joda.time.ReadablePartial readablePartial29 = null;
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial43 = null;
        int[] intArray45 = new int[] { (byte) -1 };
        int int46 = dateTimeField42.getMinimumValue(readablePartial43, intArray45);
        int int47 = dateTimeField22.getMinimumValue(readablePartial29, intArray45);
        int int49 = dateTimeField22.get((long) 796);
        long long52 = dateTimeField22.getDifferenceAsLong((long) 35320, (long) 35287000);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-587L) + "'", long52 == (-587L));
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial20 = null;
        int int21 = dateTimeField19.getMaximumValue(readablePartial20);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 24 + "'", int21 == 24);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        mutableDateTime27.setZoneRetainFields(dateTimeZone38);
        long long44 = dateTimeZone38.adjustOffset((long) 34816672, false);
        boolean boolean46 = dateTimeZone38.isStandardOffset((long) 34839691);
        dateTimeParserBucket25.setZone(dateTimeZone38);
        long long48 = dateTimeParserBucket25.computeMillis();
        java.util.Locale locale49 = dateTimeParserBucket25.getLocale();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:49:19.956Z" + "'", str31, "2022-02-11T09:49:19.956Z");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 34816672L + "'", long44 == 34816672L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L + "'", long48 == 100L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.weekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        mutableDateTime25.add(readablePeriod30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.dayOfWeek();
        int int33 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.addHours((int) (short) 0);
        mutableDateTime34.addWeekyears((int) 'a');
        java.lang.String str40 = mutableDateTime34.toString("0");
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        int int50 = mutableDateTime42.get(dateTimeFieldType49);
        mutableDateTime34.set(dateTimeFieldType49, 5);
        boolean boolean53 = mutableDateTime20.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        int int54 = mutableDateTime34.getSecondOfDay();
        int int55 = mutableDateTime34.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35359974 + "'", int28 == 35359974);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0" + "'", str40, "0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35359 + "'", int54 == 35359);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 589 + "'", int55 == 589);
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime1.add(readableDuration19, 842);
        mutableDateTime1.setSecondOfDay(320);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime25 = mutableDateTime24.toDateTime();
        int int26 = dateTime25.getHourOfDay();
        int int27 = dateTime25.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfEra();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar31 = mutableDateTime28.toCalendar(locale30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        mutableDateTime28.setDate(readableInstant32);
        int int34 = mutableDateTime28.getSecondOfDay();
        boolean boolean35 = dateTime25.isEqual((org.joda.time.ReadableInstant) mutableDateTime28);
        int int36 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=990,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 589 + "'", int27 == 589);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572959990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=19,MILLISECOND=990,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35359 + "'", int34 == 35359);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DurationField durationField19 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.lang.String str33 = locale32.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology30, locale32, (java.lang.Integer) 2022);
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getISO3Language();
        int int39 = dateTimeField21.getMaximumShortTextLength(locale36);
        int int40 = property9.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime42 = property9.add((long) 268);
        org.joda.time.DurationField durationField43 = property9.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "fra" + "'", str38, "fra");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.minuteOfDay();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.weekyear();
        org.joda.time.DurationField durationField33 = chronology30.halfdays();
        org.joda.time.DurationField durationField34 = chronology30.days();
        mutableDateTime9.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.clockhourOfHalfday();
        long long41 = chronology30.add((long) 1644788728, (long) 97824, 41189);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 5674061464L + "'", long41 == 5674061464L);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        java.lang.Object obj50 = mutableDateTime0.clone();
        mutableDateTime0.setMillisOfSecond(386);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572960031,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=31,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "2022-03-21T18:32:01.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "2022-03-21T18:32:01.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "2022-03-21T18:32:01.000Z");
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str7 = mutableDateTime1.toString();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime1.toGregorianCalendar();
        mutableDateTime1.setMillis((long) 186);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:20.047Z" + "'", str5, "2022-02-11T09:49:20.047Z");
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:49:20.047Z" + "'", str7, "2022-02-11T09:49:20.047Z");
        org.junit.Assert.assertNotNull(gregorianCalendar8);
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime5.getMinuteOfHour();
        mutableDateTime5.addDays(831);
        boolean boolean15 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        long long16 = mutableDateTime5.getMillis();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime5.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology27.days();
        boolean boolean30 = durationFieldType19.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        mutableDateTime32.addWeeks(74508);
        long long35 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        java.lang.Class<?> wildcardClass36 = mutableDateTime32.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1716583760057L + "'", long16 == 1716583760057L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-43346146918L) + "'", long35 == (-43346146918L));
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology6.add(readablePeriod10, 3715200454L, (int) (short) -1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3715200454L + "'", long13 == 3715200454L);
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        long long13 = dateTimeField11.roundCeiling((long) 34986001);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 36000000L + "'", long13 == 36000000L);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        boolean boolean21 = mutableDateTime16.isSupported(dateTimeFieldType20);
        int int22 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.setWeekyear(74419);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis(true);
        org.joda.time.Chronology chronology34 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology34.years();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime1.toMutableDateTime(chronology34);
        int int38 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.addWeeks(1241);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime1.add(readableDuration41, 538);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 19 + "'", int38 == 19);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = dateTimeField2.getAsText((long) (-1), locale7);
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        boolean boolean19 = dateTimeField13.isLenient();
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        int int32 = mutableDateTime23.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.yearOfEra();
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar36 = mutableDateTime33.toCalendar(locale35);
        java.util.Calendar calendar37 = mutableDateTime23.toCalendar(locale35);
        java.lang.String str38 = dateTimeField13.getAsShortText(readablePartial20, (int) ' ', locale35);
        java.lang.String str39 = locale35.getDisplayCountry();
        java.lang.String str40 = dateTimeField2.getAsShortText(readablePartial9, 34812148, locale35);
        org.joda.time.DurationField durationField41 = dateTimeField2.getDurationField();
        java.lang.String str42 = dateTimeField2.toString();
        long long45 = dateTimeField2.add((long) 74520248, 137);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "59" + "'", str8, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572960112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644537697112,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=112,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "32" + "'", str38, "32");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Taiwan" + "'", str39, "Taiwan");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "34812148" + "'", str40, "34812148");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str42, "DateTimeField[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 74657248L + "'", long45 == 74657248L);
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone16 = mutableDateTime9.getZone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime9.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.Chronology chronology25 = mutableDateTime20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology25.getZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfWeek();
        java.util.Locale locale30 = null;
        java.lang.String str31 = property29.getAsText(locale30);
        java.util.Locale locale32 = null;
        int int33 = property29.getMaximumTextLength(locale32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        mutableDateTime35.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int44 = dateTimeField43.getMaximumValue();
        mutableDateTime35.setRounding(dateTimeField43);
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.lang.String str48 = dateTimeField43.getAsShortText((int) (byte) 1, locale47);
        java.lang.String str49 = property29.getAsShortText(locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale47.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale47);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.yearOfEra();
        int int56 = mutableDateTime54.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime54.set(dateTimeFieldType57, 0);
        boolean boolean60 = dateTimeParserBucket53.restoreState((java.lang.Object) dateTimeFieldType57);
        java.lang.String str61 = dateTimeFieldType57.getName();
        mutableDateTime9.set(dateTimeFieldType57, 18);
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(0L, chronology65, locale66, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone70 = dateTimeParserBucket69.getZone();
        org.joda.time.Chronology chronology71 = dateTimeParserBucket69.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.days();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType57.getField(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.millisOfSecond();
        org.joda.time.DurationField durationField77 = chronology71.days();
        org.joda.time.MutableDateTime mutableDateTime78 = mutableDateTime6.toMutableDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField79 = chronology71.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long85 = chronology71.getDateTimeMillis((long) 65565165, 35145072, 35327, 12, 34958000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35145072 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Friday" + "'", str31, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 59 + "'", int44 == 59);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ven." + "'", str49, "ven.");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 11 + "'", int56 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "minuteOfDay" + "'", str61, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime8.getZone();
        int int16 = mutableDateTime8.getMonthOfYear();
        int int17 = mutableDateTime8.getYearOfEra();
        int int18 = property4.getDifference((org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572960147,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=147,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        mutableDateTime2.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology11 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        int int18 = dateTimeField14.getDifference((long) 10, (long) 'a');
        int int20 = dateTimeField14.getMaximumValue((long) (byte) 1);
        java.lang.String str22 = dateTimeField14.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.ReadablePartial readablePartial34 = null;
        int[] intArray40 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int41 = dateTimeField33.getMinimumValue(readablePartial34, intArray40);
        int int42 = dateTimeField14.getMaximumValue(readablePartial23, intArray40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType44.getField(chronology45);
        int int47 = dateTimeField46.getMaximumValue();
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = dateTimeField46.getAsShortText(0L, locale49);
        boolean boolean52 = dateTimeField46.isLenient();
        org.joda.time.ReadablePartial readablePartial53 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology55);
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = mutableDateTime56.isEqual(readableInstant57);
        int int59 = mutableDateTime56.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime56.set(dateTimeFieldType60, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        int int64 = mutableDateTime56.get(dateTimeFieldType63);
        int int65 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.yearOfEra();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar69 = mutableDateTime66.toCalendar(locale68);
        java.util.Calendar calendar70 = mutableDateTime56.toCalendar(locale68);
        java.lang.String str71 = dateTimeField46.getAsShortText(readablePartial53, (int) ' ', locale68);
        java.lang.String str72 = dateTimeField14.getAsShortText(1644788463784L, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology11, locale68);
        org.joda.time.DateTimeField dateTimeField74 = chronology11.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = dateTimeField74.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74960 + "'", int8 == 74960);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1644572960160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644537697160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "32" + "'", str71, "32");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "3" + "'", str72, "3");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        boolean boolean24 = mutableDateTime1.equals((java.lang.Object) "2022-02-11T09:40:59.760Z");
        mutableDateTime1.setMillis(1644785270372L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.181Z" + "'", str22, "2022-02-11T00:01:37.181Z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatter3.getParser();
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 809);
        org.joda.time.Chronology chronology15 = dateTimeFormatter14.getChronolgy();
        boolean boolean16 = dateTimeFormatter14.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withZoneUTC();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology26.add(readablePeriod28, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.Chronology chronology34 = dateTimeFormatter33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(418L, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            long long43 = chronology34.getDateTimeMillis(373, 74892, (-32786932), 853, 35291392, 269, 63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 853 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 6L + "'", long31 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.setDate((long) 91);
        int int21 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37 + "'", int21 == 37);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("928");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=928");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.hours();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology7.add(readablePeriod11, (long) 59, 302);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField17 = chronology7.hours();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 59L + "'", long14 == 59L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        long long17 = chronology9.add(910800209L, 1644572400000L, 361);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = chronology9.getDateTimeMillis(396, 99, 74495, 350, 97927, 398, 81900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 350 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 593691547200209L + "'", long17 == 593691547200209L);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = mutableDateTime8.toString(dateTimeFormatter11);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        java.lang.String str21 = dateTimeZone19.getNameKey((long) (byte) 0);
        mutableDateTime8.setZoneRetainFields(dateTimeZone19);
        mutableDateTime1.setZone(dateTimeZone19);
        java.util.TimeZone timeZone24 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        long long29 = dateTimeZone25.convertLocalToUTC((long) 10, false, (long) 598);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.dayOfWeek();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        int int39 = mutableDateTime34.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        java.util.Locale locale42 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology41, locale42, (java.lang.Integer) 9, 59);
        java.lang.Object obj46 = dateTimeParserBucket45.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket45.saveField(dateTimeFieldType47, 59);
        boolean boolean50 = mutableDateTime34.isSupported(dateTimeFieldType47);
        int int51 = mutableDateTime31.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        int int52 = mutableDateTime34.getMillisOfDay();
        int int53 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime54 = mutableDateTime34.toDateTime();
        int int55 = mutableDateTime34.getEra();
        int int56 = mutableDateTime34.getHourOfDay();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime34.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundFloor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 236 + "'", int6 == 236);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:49:20.236Z" + "'", str12, "2022-02-11T09:49:20.236Z");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 236 + "'", int39 == 236);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 74960236 + "'", int52 == 74960236);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        mutableDateTime0.addWeeks(74432048);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        mutableDateTime8.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        mutableDateTime8.setRounding(dateTimeField16);
        int int19 = mutableDateTime8.getMonthOfYear();
        boolean boolean20 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime8.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int27 = dateTimeField25.getMinimumValue((long) (short) 10);
        int int29 = dateTimeField25.getMaximumValue((long) 9);
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = dateTimeField25.getAsShortText(74409, locale31);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        mutableDateTime37.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        int int46 = dateTimeField45.getMaximumValue();
        mutableDateTime37.setRounding(dateTimeField45);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = dateTimeField45.getAsShortText((int) (byte) 1, locale49);
        java.lang.String str51 = locale49.getDisplayScript();
        java.lang.String str52 = locale49.getISO3Country();
        java.lang.String str53 = dateTimeField25.getAsText(readablePartial34, 34812612, locale49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime54 = property21.set("2022-02-11T09:48:35.563Z", locale49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:35.563Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "74409" + "'", str33, "74409");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "34812612" + "'", str53, "34812612");
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        long long15 = dateTimeZone11.convertLocalToUTC(28684800053L, true, 31795200000L);
        long long18 = dateTimeZone11.convertLocalToUTC(7218525L, false);
        long long20 = dateTimeZone11.previousTransition((-60274674000099L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 28684800053L + "'", long15 == 28684800053L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 7218525L + "'", long18 == 7218525L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60274674000099L) + "'", long20 == (-60274674000099L));
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getWeekyear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        mutableDateTime10.addHours(59);
        org.joda.time.Chronology chronology15 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        boolean boolean18 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.addWrapField(395);
        int int22 = mutableDateTime21.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 290 + "'", int6 == 290);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 290 + "'", int22 == 290);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        java.lang.String str6 = property5.getAsString();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.weekyear();
        mutableDateTime7.addHours(930);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField31 = chronology26.centuries();
        mutableDateTime7.setChronology(chronology26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        mutableDateTime34.addHours(59);
        org.joda.time.Chronology chronology39 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        mutableDateTime7.setZoneRetainFields(dateTimeZone40);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        java.lang.String str49 = dateTimeZone48.getID();
        long long53 = dateTimeZone48.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str54 = dateTimeZone48.getID();
        java.util.TimeZone timeZone55 = dateTimeZone48.toTimeZone();
        mutableDateTime7.setZone(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime7.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime57.toMutableDateTimeISO();
        int int59 = property5.getDifference((org.joda.time.ReadableInstant) mutableDateTime57);
        int int60 = property5.getMaximumValueOverall();
        org.joda.time.Chronology chronology62 = null;
        java.util.Locale locale63 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket(0L, chronology62, locale63, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone67 = dateTimeParserBucket66.getZone();
        long long68 = dateTimeParserBucket66.computeMillis();
        java.util.Locale locale69 = dateTimeParserBucket66.getLocale();
        int int70 = property5.getMaximumTextLength(locale69);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-11T09:45:50.704Z");
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = mutableDateTime74.isEqual(readableInstant75);
        mutableDateTime74.setMinuteOfHour((int) (short) 1);
        int int79 = mutableDateTime74.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime74.weekyear();
        int int81 = mutableDateTime74.getDayOfYear();
        java.util.TimeZone timeZone82 = null;
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forTimeZone(timeZone82);
        mutableDateTime74.setZone(dateTimeZone83);
        int int85 = mutableDateTime74.getYear();
        boolean boolean86 = mutableDateTime72.equals((java.lang.Object) int85);
        boolean boolean87 = locale69.equals((java.lang.Object) mutableDateTime72);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "20" + "'", str6, "20");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572960301,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=301,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "UTC" + "'", str49, "UTC");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 5L + "'", long53 == 5L);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2922789 + "'", int60 == 2922789);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 301 + "'", int79 == 301);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 42 + "'", int81 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.era();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime0.add(readableDuration8);
        mutableDateTime0.setMinuteOfDay(10);
        int int12 = mutableDateTime0.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.days();
        boolean boolean25 = durationFieldType14.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.minuteOfDay();
        int int28 = mutableDateTime0.get(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572960339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=339,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.hourOfDay();
        int int11 = property10.getMinimumValue();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = mutableDateTime23.toDateTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        mutableDateTime34.addYears(0);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime34);
        boolean boolean41 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) mutableDateTime34);
        int int42 = mutableDateTime34.getCenturyOfEra();
        int int43 = mutableDateTime34.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime34.weekyear();
        int int45 = property10.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.year();
        mutableDateTime34.setMillisOfDay(1248);
        mutableDateTime34.setYear(74416);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 9, 59);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket6.saveField(dateTimeFieldType8, 59);
        long long12 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket6.getChronology();
        java.util.Locale locale16 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology13, locale16, (java.lang.Integer) 617);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter21.getZone();
        boolean boolean23 = dateTimeFormatter21.isOffsetParsed();
        org.joda.time.Chronology chronology24 = dateTimeFormatter21.getChronology();
        boolean boolean25 = dateTimeParserBucket18.restoreState((java.lang.Object) dateTimeFormatter21);
        org.joda.time.Chronology chronology26 = dateTimeFormatter21.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter21.withDefaultYear(5054);
        org.joda.time.Chronology chronology29 = dateTimeFormatter21.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = dateTimeFormatter21.parseMillis("ISOChronology[+253:00]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60305299200000L) + "'", long12 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getCenturyOfEra();
        int int11 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setTime(1644572521484L);
        int int14 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime1.toMutableDateTimeISO();
        java.lang.String str16 = mutableDateTime1.toString();
        int int17 = mutableDateTime1.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:42:01.484Z" + "'", str16, "2022-02-11T09:42:01.484Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        int int10 = mutableDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekyear();
        int int14 = mutableDateTime0.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572960458,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=458,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime38 = mutableDateTime29.toDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        mutableDateTime40.addYears(0);
        mutableDateTime29.setDate((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime29.addMillis((int) (byte) 0);
        int int49 = mutableDateTime29.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime29.property(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getDurationType();
        mutableDateTime1.add(durationFieldType53, 84);
        int int56 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.469Z" + "'", str22, "2022-02-11T00:01:37.469Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = dateTimeFormatter15.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillisOfSecond(822);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property59.getFieldType();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        org.joda.time.Chronology chronology63 = null;
        java.util.Locale locale64 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(0L, chronology63, locale64, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone68 = dateTimeParserBucket67.getZone();
        org.joda.time.Chronology chronology69 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.hourOfHalfday();
        org.joda.time.DurationField durationField71 = chronology69.days();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = chronology69.add(readablePeriod72, (long) 34828152, 0);
        boolean boolean76 = durationFieldType61.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField77 = chronology69.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long83 = chronology69.getDateTimeMillis((long) 992, (-9), 41, (-32482), 35163);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Friday" + "'", str23, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 34828152L + "'", long75 == 34828152L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        java.lang.String str3 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "yearOfEra" + "'", str3, "yearOfEra");
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DurationField durationField13 = chronology8.centuries();
        java.lang.String str14 = chronology8.toString();
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        boolean boolean16 = dateTimeFieldType0.isSupported(chronology8);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.millisOfDay();
        java.lang.String str19 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime1.add(readableDuration6, 0);
        mutableDateTime1.addSeconds(0);
        int int11 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        long long5 = dateTimeField2.roundHalfCeiling((long) 1);
        long long7 = dateTimeField2.roundHalfFloor((long) 34808947);
        org.joda.time.ReadablePartial readablePartial8 = null;
        java.util.Locale locale12 = new java.util.Locale("2022-02-11T09:40:39.222Z", "2022-02-11T09:40:38.001Z");
        java.util.Locale locale13 = java.util.Locale.UK;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property16.getAsText(locale17);
        java.util.Locale locale19 = null;
        int int20 = property16.getMaximumTextLength(locale19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        mutableDateTime22.setRounding(dateTimeField30);
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = dateTimeField30.getAsShortText((int) (byte) 1, locale34);
        java.lang.String str36 = property16.getAsShortText(locale34);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale37.getScript();
        java.lang.String str39 = locale34.getDisplayScript(locale37);
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = locale34.getDisplayLanguage(locale40);
        java.lang.String str42 = locale13.getDisplayCountry(locale40);
        boolean boolean43 = locale40.hasExtensions();
        java.lang.String str44 = locale12.getDisplayScript(locale40);
        java.lang.String str45 = dateTimeField2.getAsShortText(readablePartial8, 34946334, locale12);
        boolean boolean46 = locale12.hasExtensions();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("2022-02-11T09:41:18.785Z");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleKeys();
        java.lang.String str50 = locale12.getDisplayName(locale48);
        java.lang.String str51 = locale48.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 34809000L + "'", long7 == 34809000L);
        org.junit.Assert.assertEquals(locale12.toString(), "2022-02-11t09:40:39.222z_2022-02-11T09:40:38.001Z");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Friday" + "'", str18, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ven." + "'", str36, "ven.");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "French" + "'", str41, "French");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "United Kingdom" + "'", str42, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "34946334" + "'", str45, "34946334");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11t09:40:39.222z (2022-02-11T09:40:38.001Z)" + "'", str50, "2022-02-11t09:40:39.222z (2022-02-11T09:40:38.001Z)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long9 = dateTimeParserBucket5.computeMillis(true, "237");
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 645);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime26.set(dateTimeFieldType30, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType30.getDurationType();
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology43, locale45, (java.lang.Integer) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        int int52 = dateTimeField51.getMaximumValue();
        int int55 = dateTimeField51.getDifference((long) 10, (long) 'a');
        int int57 = dateTimeField51.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial58 = null;
        int[] intArray65 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int66 = dateTimeField51.getMinimumValue(readablePartial58, intArray65);
        org.joda.time.DurationField durationField67 = dateTimeField51.getRangeDurationField();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket74.getZone();
        org.joda.time.Chronology chronology76 = dateTimeParserBucket74.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.hourOfHalfday();
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.lang.String str79 = locale78.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology76, locale78, (java.lang.Integer) 2022);
        java.util.Locale locale82 = locale78.stripExtensions();
        int int83 = dateTimeField51.getMaximumShortTextLength(locale78);
        java.lang.String str84 = locale45.getDisplayCountry(locale78);
        dateTimeParserBucket22.saveField(dateTimeFieldType30, "", locale78);
        java.lang.String str86 = locale78.getDisplayName();
        dateTimeParserBucket5.saveField(dateTimeFieldType13, "2023-02-11T09:40:20.286Z", locale78);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 97118);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 59 + "'", int52 == 59);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "French" + "'", str86, "French");
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumTextLength(locale23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        mutableDateTime26.setRounding(dateTimeField34);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = dateTimeField34.getAsShortText((int) (byte) 1, locale38);
        java.lang.String str40 = property20.getAsShortText(locale38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.getScript();
        java.lang.String str43 = locale38.getDisplayScript(locale41);
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = locale38.getDisplayLanguage(locale44);
        java.lang.String str46 = locale17.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology9, locale44);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        int int51 = dateTimeZone48.getOffsetFromLocal((long) 74422);
        java.util.Locale locale55 = new java.util.Locale("2022-02-11T09:43:16.109Z", "2022-02-11T09:43:17.131Z");
        java.lang.String str56 = dateTimeZone48.getShortName((-27592L), locale55);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Friday" + "'", str22, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ven." + "'", str40, "ven.");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French" + "'", str45, "French");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United Kingdom" + "'", str46, "United Kingdom");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals(locale55.toString(), "2022-02-11t09:43:16.109z_2022-02-11T09:43:17.131Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = mutableDateTime7.toString(dateTimeFormatter10);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        java.lang.String str20 = dateTimeZone18.getNameKey((long) (byte) 0);
        mutableDateTime7.setZoneRetainFields(dateTimeZone18);
        mutableDateTime0.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addDays(0);
        mutableDateTime26.setMonthOfYear(9);
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime26.add(readableDuration34, 40849);
        long long37 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime26);
        int int38 = property23.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572960647,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=647,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:49:20.647Z" + "'", str11, "2022-02-11T09:49:20.647Z");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-292275054) + "'", int38 == (-292275054));
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        int int4 = dateTimeFormatter2.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.Chronology chronology20 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime15.toMutableDateTime();
        int int22 = mutableDateTime15.getMinuteOfHour();
        mutableDateTime15.addDays(831);
        boolean boolean25 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Calendar calendar27 = mutableDateTime15.toCalendar(locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withLocale(locale26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(551);
        int int32 = dateTimeZone30.getStandardOffset(237000L);
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("zh-TW");
        java.lang.String str36 = dateTimeZone30.getName((long) 125, locale35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZone(dateTimeZone30);
        boolean boolean38 = dateTimeFormatter37.isOffsetParsed();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        mutableDateTime40.addHours(59);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.minuteOfHour();
        int int46 = mutableDateTime40.getSecondOfDay();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime40.add(readablePeriod47, 0);
        org.joda.time.Chronology chronology50 = mutableDateTime40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter37.withChronology(chronology50);
        java.lang.StringBuffer stringBuffer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter37.printTo(stringBuffer54, (long) 35320020);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 49 + "'", int22 == 49);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1716583760659,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2024,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=145,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=20,MILLISECOND=659,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1983600000 + "'", int32 == 1983600000);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+551:00" + "'", str36, "+551:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 74960 + "'", int46 == 74960);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        mutableDateTime9.addHours(59);
        org.joda.time.Chronology chronology14 = mutableDateTime9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology14.getZone();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology14, locale16);
        java.lang.String str18 = locale16.getLanguage();
        java.lang.String str19 = locale16.getLanguage();
        java.lang.String str20 = property6.getAsText(locale16);
        int int21 = property6.getLeapAmount();
        long long22 = property6.remainder();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology31.getZone();
        org.joda.time.DurationField durationField36 = chronology31.seconds();
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.toLanguageTag();
        java.lang.String str41 = locale38.getDisplayScript(locale39);
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.dayOfYear();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.millisOfSecond();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale53.getScript();
        int int55 = dateTimeField52.getMaximumTextLength(locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType56.getField(chronology57);
        int int59 = dateTimeField58.getMaximumValue();
        int int62 = dateTimeField58.getDifference((long) 10, (long) 'a');
        int int64 = dateTimeField58.getLeapAmount((-1L));
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = dateTimeField58.getAsText((long) 340, locale66);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.lang.String str70 = dateTimeField58.getAsShortText((int) '4', locale69);
        org.joda.time.ReadablePartial readablePartial71 = null;
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = dateTimeField58.getAsText(readablePartial71, 292278993, locale73);
        java.lang.String str75 = locale73.getISO3Country();
        java.lang.String str76 = locale73.getDisplayScript();
        java.lang.String str77 = locale53.getDisplayScript(locale73);
        java.lang.String str78 = locale39.getDisplayName(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale73);
        java.lang.String str80 = property6.getAsText(locale73);
        org.joda.time.MutableDateTime mutableDateTime81 = property6.roundHalfCeiling();
        int int82 = mutableDateTime81.getWeekyear();
        mutableDateTime81.setYear(51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fr" + "'", str18, "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fr" + "'", str19, "fr");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "44" + "'", str20, "44");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 74960712L + "'", long22 == 74960712L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "52" + "'", str70, "52");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "292278993" + "'", str74, "292278993");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "GBR" + "'", str75, "GBR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Chinese" + "'", str78, "Chinese");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "44" + "'", str80, "44");
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfHour();
        org.joda.time.DurationField durationField12 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(395);
        boolean boolean27 = dateTimeFormatter24.isOffsetParsed();
        boolean boolean28 = dateTimeFormatter24.isParser();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.hours();
        org.joda.time.DurationField durationField41 = durationFieldType29.getField(chronology37);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter24.withChronology(chronology37);
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter24.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTimeFormatter24.parseDateTime("2022-02-11T09:48:59.018Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(dateTimeParser45);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        mutableDateTime8.setMillisOfDay(7);
        org.joda.time.Chronology chronology13 = mutableDateTime8.getChronology();
        java.util.Locale locale15 = new java.util.Locale("\u4e2d\u56fd\u8a9e");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale15, (java.lang.Integer) 57493860, 754);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder0.setLocale(locale15);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals(locale15.toString(), "\u4e2d\u56fd\u8a9e");
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        mutableDateTime1.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.addHours((int) (short) 0);
        mutableDateTime12.addWeekyears((int) 'a');
        java.lang.String str18 = mutableDateTime12.toString("0");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        mutableDateTime12.set(dateTimeFieldType27, 5);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.property(dateTimeFieldType27);
        java.lang.String str32 = property31.getAsText();
        boolean boolean33 = property31.isLeap();
        int int34 = property31.getLeapAmount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74960 + "'", int7 == 74960);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T00:01:37.917+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t00:01:37.917+00:01:14.456");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        long long8 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        int int11 = mutableDateTime10.getSecondOfDay();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        long long19 = dateTimeParserBucket17.computeMillis();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket17.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = mutableDateTime23.toDateTime();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        mutableDateTime34.addYears(0);
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) mutableDateTime34);
        int int41 = mutableDateTime23.getEra();
        int int42 = mutableDateTime23.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = mutableDateTime23.toString(dateTimeFormatter43);
        int int45 = mutableDateTime23.getMinuteOfHour();
        mutableDateTime23.addWeeks(258);
        boolean boolean48 = mutableDateTime23.isEqualNow();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        java.lang.String str56 = dateTimeZone55.toString();
        boolean boolean58 = dateTimeZone55.isStandardOffset((long) 59);
        mutableDateTime23.setZone(dateTimeZone55);
        java.lang.String str60 = dateTimeZone55.toString();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(1644572630146L, dateTimeZone55);
        org.joda.time.Chronology chronology62 = chronology20.withZone(dateTimeZone55);
        mutableDateTime10.setZoneRetainFields(dateTimeZone55);
        mutableDateTime10.addYears(74460205);
        mutableDateTime10.addWeekyears(35326840);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74960 + "'", int7 == 74960);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644785360818L + "'", long8 == 1644785360818L);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T00:01:37.818Z" + "'", str44, "2022-02-11T00:01:37.818Z");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:48:03.134+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:48:03.134+00:01:14.456");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:49:19.847Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:49:19.847Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        java.util.Locale locale16 = new java.util.Locale("2022-02-11T09:43:00.321Z");
        java.util.Calendar calendar17 = mutableDateTime1.toCalendar(locale16);
        boolean boolean18 = mutableDateTime1.isEqualNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697849,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=849,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale16.toString(), "2022-02-11t09:43:00.321z");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644537697849,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=849,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addWeekyears((-2));
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addDays(0);
        int int18 = mutableDateTime12.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.weekyear();
        mutableDateTime12.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime12.getZone();
        mutableDateTime12.setMinuteOfDay((int) ' ');
        int int25 = mutableDateTime12.getEra();
        boolean boolean26 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        boolean boolean27 = mutableDateTime12.isEqualNow();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeParserBucket33.getZone();
        boolean boolean36 = dateTimeZone35.isFixed();
        long long39 = dateTimeZone35.adjustOffset((long) 34992084, true);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone35.getShortName((long) 35133622, locale41);
        mutableDateTime12.setZoneRetainFields(dateTimeZone35);
        mutableDateTime12.addDays(34884417);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 779L + "'", long8 == 779L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 862 + "'", int18 == 862);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 34992084L + "'", long39 == 34992084L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withDefaultYear(381);
        boolean boolean26 = dateTimeFormatter25.isOffsetParsed();
        int int27 = dateTimeFormatter25.getDefaultYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime29.toCalendar(locale33);
        int int35 = mutableDateTime29.getMinuteOfHour();
        mutableDateTime29.add(6L);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime39 = mutableDateTime38.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        mutableDateTime41.addHours(59);
        org.joda.time.Chronology chronology46 = mutableDateTime41.getChronology();
        mutableDateTime38.setChronology(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.days();
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime29.toMutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime29.dayOfWeek();
        mutableDateTime29.addMonths(627);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTimeFormatter25.print((org.joda.time.ReadableInstant) mutableDateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 381 + "'", int27 == 381);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572960886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=886,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 49 + "'", int35 == 49);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfEra();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar13 = mutableDateTime10.toCalendar(locale12);
        mutableDateTime10.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime10.weekyear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.Chronology chronology26 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime21.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
        int int29 = property19.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        int int34 = mutableDateTime31.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime31.set(dateTimeFieldType35, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        int int39 = mutableDateTime31.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime40 = mutableDateTime31.toDateTime();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = mutableDateTime31.toCalendar(locale41);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime31.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = mutableDateTime31.toDateTimeISO();
        int int47 = property19.getDifference((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology56, locale58, (java.lang.Integer) 2022);
        boolean boolean62 = property19.equals((java.lang.Object) chronology56);
        org.joda.time.DateTimeField dateTimeField63 = chronology56.halfdayOfDay();
        org.joda.time.DurationField durationField64 = chronology56.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter9.withChronology(chronology56);
        boolean boolean66 = dateTimeFormatter9.isParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572960917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=20,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644537697917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-27T15:58:09.789+390:13", (double) 74933);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=74933.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        java.lang.String str12 = dateTimeField10.getAsShortText((long) 11);
        int int14 = dateTimeField10.get((long) 437);
        boolean boolean15 = dateTimeField10.isSupported();
        long long17 = dateTimeField10.roundHalfCeiling(109L);
        long long19 = dateTimeField10.roundFloor((long) 91);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11" + "'", str12, "11");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 437 + "'", int14 == 437);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 109L + "'", long17 == 109L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 91L + "'", long19 == 91L);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = builder7.build();
        java.util.Locale.Builder builder10 = builder1.setLocale(locale9);
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("422");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder12.setExtension(' ', "2022-02-27T15:58:11.763+390:13");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime2.getZone();
        org.joda.time.Chronology chronology10 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 17, chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.halfdayOfDay();
        org.joda.time.ReadablePartial readablePartial28 = null;
        int int29 = dateTimeField27.getMaximumValue(readablePartial28);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.weekyear();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial42 = null;
        int[] intArray43 = null;
        int int44 = dateTimeField41.getMinimumValue(readablePartial42, intArray43);
        long long46 = dateTimeField41.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial47 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        int int54 = dateTimeField50.getDifference((long) 10, (long) 'a');
        int int56 = dateTimeField50.getMaximumValue((long) (byte) 1);
        java.lang.String str58 = dateTimeField50.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial59 = null;
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(0L, chronology61, locale62, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket65.getZone();
        org.joda.time.Chronology chronology67 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.days();
        org.joda.time.DateTimeField dateTimeField69 = chronology67.dayOfYear();
        org.joda.time.ReadablePartial readablePartial70 = null;
        int[] intArray76 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int77 = dateTimeField69.getMinimumValue(readablePartial70, intArray76);
        int int78 = dateTimeField50.getMaximumValue(readablePartial59, intArray76);
        int int79 = dateTimeField41.getMinimumValue(readablePartial47, intArray76);
        int int80 = dateTimeField27.getMinimumValue(readablePartial30, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField13.addWrapPartial(readablePartial15, 546, intArray76, 848);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 865L + "'", long46 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 59 + "'", int56 == 59);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 59 + "'", int78 == 59);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj11 = mutableDateTime1.clone();
        mutableDateTime1.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        boolean boolean16 = property15.isLeap();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.addWrapField(854);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime18.getRoundingField();
        long long20 = mutableDateTime18.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DurationField durationField24 = durationFieldType22.getField(chronology23);
        java.lang.String str25 = durationFieldType22.getName();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.add(durationFieldType22, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "2022-02-11T00:01:37.977Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "2022-02-11T00:01:37.977Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "2022-02-11T00:01:37.977Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 195703779628897977L + "'", long20 == 195703779628897977L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eras" + "'", str25, "eras");
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronology();
        boolean boolean11 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology12 = dateTimeFormatter2.getChronology();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(chronology12);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter11.getParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        long long4 = mutableDateTime3.getMillis();
        int int5 = mutableDateTime3.getSecondOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        mutableDateTime7.addHours(59);
        int int12 = mutableDateTime7.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean14 = mutableDateTime7.isSupported(dateTimeFieldType13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime7.dayOfMonth();
        org.joda.time.Chronology chronology16 = mutableDateTime7.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime3.toMutableDateTime(chronology16);
        org.joda.time.DurationField durationField19 = durationFieldType1.getField(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572961004L + "'", long4 == 1644572961004L);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 35361 + "'", int5 == 35361);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        mutableDateTime8.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        mutableDateTime8.setRounding(dateTimeField16);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.lang.String str21 = dateTimeField16.getAsShortText((int) (byte) 1, locale20);
        java.lang.String str22 = property2.getAsShortText(locale20);
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale23.getScript();
        java.lang.String str25 = locale20.getDisplayScript(locale23);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = locale20.getDisplayLanguage(locale26);
        java.util.Locale.setDefault(locale20);
        java.lang.String str29 = locale20.getVariant();
        java.util.Locale locale30 = locale20.stripExtensions();
        java.lang.Object obj31 = locale30.clone();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Friday" + "'", str4, "Friday");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ven." + "'", str22, "ven.");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "French" + "'", str27, "French");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "fr");
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.addWrapField(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.setMillisOfDay(7);
        long long12 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setMillisOfDay(10);
        org.joda.time.Chronology chronology15 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.monthOfYear();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 319, chronology15, locale17, (java.lang.Integer) 74419, 766);
        org.joda.time.DurationField durationField21 = chronology15.millis();
        org.joda.time.DurationField durationField22 = chronology15.minutes();
        org.joda.time.DurationField durationField23 = chronology15.weeks();
        java.util.Locale locale24 = java.util.Locale.UK;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfWeek();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property27.getAsText(locale28);
        java.util.Locale locale30 = null;
        int int31 = property27.getMaximumTextLength(locale30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = property27.getAsShortText(locale45);
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.lang.String str49 = locale48.getScript();
        java.lang.String str50 = locale45.getDisplayScript(locale48);
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale45.getDisplayLanguage(locale51);
        java.lang.String str53 = locale24.getDisplayCountry(locale51);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket((long) 74442, chronology15, locale24, (java.lang.Integer) 74468);
        org.joda.time.DateTimeField dateTimeField56 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField56.getType();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "vendredi" + "'", str29, "vendredi");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ven." + "'", str47, "ven.");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "French" + "'", str52, "French");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "United Kingdom" + "'", str53, "United Kingdom");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable5);
        java.io.IOException iOException7 = new java.io.IOException("hi!", (java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException9 = new java.io.IOException("2022-02-11T00:01:37.883Z", (java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("2022-02-11T09:40:17.716Z", (java.lang.Throwable) iOException9);
        java.lang.Throwable throwable13 = null;
        java.io.IOException iOException14 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable13);
        java.lang.Throwable throwable16 = null;
        java.io.IOException iOException17 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable16);
        iOException14.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException("French", (java.lang.Throwable) iOException14);
        iOException10.addSuppressed((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException("2022-02-27T15:58:21.678+390:13", (java.lang.Throwable) iOException19);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.DurationField durationField3 = dateTimeField2.getDurationField();
        boolean boolean5 = dateTimeField2.isLeap((long) (short) -1);
        java.lang.String str7 = dateTimeField2.getAsShortText(0L);
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket13.getZone();
        long long16 = dateTimeParserBucket13.computeMillis();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.monthOfYear();
        dateTimeParserBucket13.saveField(dateTimeField25, 993);
        java.lang.Object obj28 = dateTimeParserBucket13.saveState();
        java.util.Locale locale29 = dateTimeParserBucket13.getLocale();
        int int30 = dateTimeField2.getMaximumShortTextLength(locale29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.dayOfWeek();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property33.getAsText(locale34);
        java.util.Locale locale36 = null;
        int int37 = property33.getMaximumTextLength(locale36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        mutableDateTime39.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int48 = dateTimeField47.getMaximumValue();
        mutableDateTime39.setRounding(dateTimeField47);
        java.util.Locale locale51 = java.util.Locale.FRENCH;
        java.lang.String str52 = dateTimeField47.getAsShortText((int) (byte) 1, locale51);
        java.lang.String str53 = property33.getAsShortText(locale51);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale54.getScript();
        java.lang.String str56 = locale51.getDisplayScript(locale54);
        java.util.Locale locale57 = java.util.Locale.US;
        java.lang.String str58 = locale51.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(locale51);
        java.lang.String str60 = locale51.getVariant();
        java.util.Set<java.lang.String> strSet61 = locale51.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = locale51.stripExtensions();
        java.lang.String str63 = locale29.getDisplayScript(locale62);
        java.lang.String str64 = locale62.getVariant();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0" + "'", str7, "0");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "vendredi" + "'", str35, "vendredi");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 59 + "'", int48 == 59);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ven." + "'", str53, "ven.");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "French" + "'", str58, "French");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.minuteOfHour();
        int int10 = mutableDateTime4.getSecondOfDay();
        mutableDateTime4.setSecondOfDay((int) (byte) 0);
        mutableDateTime4.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.addHours((int) (short) 0);
        mutableDateTime15.addWeekyears((int) 'a');
        java.lang.String str21 = mutableDateTime15.toString("0");
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        mutableDateTime15.set(dateTimeFieldType30, 5);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime4.property(dateTimeFieldType30);
        int int35 = mutableDateTime1.get(dateTimeFieldType30);
        org.joda.time.Instant instant36 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 74534);
        int int39 = instant36.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean48 = mutableDateTime41.isSupported(dateTimeFieldType47);
        mutableDateTime41.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime53 = mutableDateTime41.toDateTime(dateTimeZone52);
        int int54 = mutableDateTime41.getWeekyear();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime41.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.addWrapField(34880240);
        boolean boolean58 = instant36.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        mutableDateTime57.addWeekyears((int) ' ');
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 74961 + "'", int10 == 74961);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 135 + "'", int54 == 135);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfCeiling();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology18);
        int int21 = mutableDateTime20.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        int int25 = dateTimeField24.getMaximumValue();
        java.util.Locale locale27 = java.util.Locale.FRENCH;
        java.lang.String str28 = locale27.getISO3Country();
        java.lang.String str29 = dateTimeField24.getAsShortText(0L, locale27);
        mutableDateTime20.setRounding(dateTimeField24);
        int int31 = property9.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        int int32 = mutableDateTime20.getDayOfYear();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        java.lang.String str41 = dateTimeZone40.toString();
        boolean boolean43 = dateTimeZone40.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone40.isLocalDateTimeGap(localDateTime45);
        boolean boolean47 = dateTimeZone40.isFixed();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        int int52 = mutableDateTime49.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime49.set(dateTimeFieldType53, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        int int57 = mutableDateTime49.get(dateTimeFieldType56);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        java.lang.String str65 = dateTimeZone64.toString();
        org.joda.time.DateTime dateTime66 = mutableDateTime49.toDateTime(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        long long69 = dateTimeZone40.getMillisKeepLocal(dateTimeZone64, (long) 34890855);
        java.lang.String str71 = dateTimeZone64.getShortName(1644785021948L);
        mutableDateTime20.setZoneRetainFields(dateTimeZone64);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572961096,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=96,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 42 + "'", int32 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 34890855L + "'", long69 == 34890855L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        boolean boolean12 = mutableDateTime1.isAfter((long) 74448);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = mutableDateTime14.toDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addYears(0);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime14.addMillis((int) (byte) 0);
        int int34 = mutableDateTime14.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime14.property(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType35.getRangeDurationType();
        mutableDateTime1.set(dateTimeFieldType35, 830);
        java.lang.String str40 = dateTimeFieldType35.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "millisOfDay" + "'", str40, "millisOfDay");
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfEra();
        java.util.Locale locale6 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar7 = mutableDateTime4.toCalendar(locale6);
        mutableDateTime4.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.weekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfCeiling();
        org.joda.time.DateTime dateTime15 = mutableDateTime14.toDateTime();
        int int16 = mutableDateTime14.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        int int24 = dateTimeField20.getDifference((long) 10, (long) 'a');
        int int26 = dateTimeField20.getLeapAmount((-1L));
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = dateTimeField20.getAsText((long) 340, locale28);
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField20.getAsShortText((int) '4', locale31);
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = dateTimeField20.getAsText(readablePartial33, 292278993, locale35);
        java.lang.String str37 = locale35.getISO3Country();
        java.lang.String str38 = locale35.getDisplayScript();
        int int39 = property17.getMaximumTextLength(locale35);
        java.util.Locale.Builder builder40 = builder3.setLocale(locale35);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        boolean boolean47 = mutableDateTime42.isSupported(dateTimeFieldType46);
        mutableDateTime42.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        int int54 = mutableDateTime51.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime51.set(dateTimeFieldType55, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        int int59 = mutableDateTime51.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = mutableDateTime51.toDateTime();
        java.util.Locale locale61 = null;
        java.util.Calendar calendar62 = mutableDateTime51.toCalendar(locale61);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime51.getZone();
        mutableDateTime42.setZoneRetainFields(dateTimeZone63);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder66.clearExtensions();
        java.util.Locale.Builder builder69 = builder67.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = dateTimeZone63.getShortName((long) 34818666, locale70);
        java.lang.String str72 = locale70.getDisplayScript();
        java.util.Locale.Builder builder73 = builder3.setLocale(locale70);
        java.lang.String str74 = locale70.toLanguageTag();
        java.lang.String str75 = locale70.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572961142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=142,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "292278993" + "'", str36, "292278993");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "GBR" + "'", str37, "GBR");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644537697142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=142,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "und" + "'", str74, "und");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime19.set(dateTimeFieldType23, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime19.getZone();
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        int int36 = mutableDateTime31.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int38 = mutableDateTime31.get(dateTimeFieldType37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime31.minuteOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.dayOfWeek();
        java.util.Locale locale43 = null;
        java.lang.String str44 = property42.getAsText(locale43);
        java.util.Locale locale45 = null;
        int int46 = property42.getMaximumTextLength(locale45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        mutableDateTime48.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType54.getField(chronology55);
        int int57 = dateTimeField56.getMaximumValue();
        mutableDateTime48.setRounding(dateTimeField56);
        java.util.Locale locale60 = java.util.Locale.FRENCH;
        java.lang.String str61 = dateTimeField56.getAsShortText((int) (byte) 1, locale60);
        java.lang.String str62 = property42.getAsShortText(locale60);
        java.util.Calendar calendar63 = mutableDateTime31.toCalendar(locale60);
        java.lang.String str64 = dateTimeField28.getAsShortText((long) 910, locale60);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = dateTimeField15.set(1644537599779L, "2022-02-11T09:40:20.481+00:00:00.100", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:40:20.481+00:00:00.100\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 165 + "'", int36 == 165);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "vendredi" + "'", str44, "vendredi");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 59 + "'", int57 == 59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ven." + "'", str62, "ven.");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1644785361165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=21,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("2022-02-11T09:40:35.905Z");
        java.util.Locale locale17 = new java.util.Locale("fr", "2022-02-11T09:40:08.213Z", "2022-02-11T09:40:08.213Z");
        java.lang.String str18 = locale13.getDisplayLanguage(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale13, (java.lang.Integer) 0);
        org.joda.time.DateTimeField dateTimeField21 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField22 = chronology8.centuries();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_2022-02-11T09:40:08.213Z_2022-02-11T09:40:08.213Z");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setSecondOfDay(74446);
        int int18 = mutableDateTime7.getDayOfMonth();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime20.getZone();
        int int28 = mutableDateTime20.getMonthOfYear();
        org.joda.time.Instant instant29 = mutableDateTime20.toInstant();
        int int30 = mutableDateTime20.getMillisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = mutableDateTime20.getRoundingField();
        boolean boolean32 = mutableDateTime7.equals((java.lang.Object) mutableDateTime20);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableDateTime20.add(readablePeriod33, 957);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572961192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=192,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(instant29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97192 + "'", int30 == 97192);
        org.junit.Assert.assertNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology9, locale14);
        org.joda.time.DurationField durationField16 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.minuteOfDay();
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((-1404779935L), chronology9, locale19, (java.lang.Integer) 35139);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("China");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        java.util.Locale locale10 = null;
        java.util.Calendar calendar11 = mutableDateTime6.toCalendar(locale10);
        int int12 = mutableDateTime6.getMinuteOfHour();
        org.joda.time.Chronology chronology13 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.era();
        boolean boolean15 = languageRange1.equals((java.lang.Object) dateTimeField14);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "china" + "'", str4, "china");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572961214,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=214,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setMillisOfDay(10);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9, 580);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.addHours((int) (short) 0);
        mutableDateTime12.addWeekyears((int) 'a');
        java.lang.String str18 = mutableDateTime12.toString("0");
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        mutableDateTime12.set(dateTimeFieldType27, 5);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime1.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime33.set(dateTimeFieldType37, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        int int41 = mutableDateTime33.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = mutableDateTime33.toDateTime();
        java.util.Locale locale43 = null;
        java.util.Calendar calendar44 = mutableDateTime33.toCalendar(locale43);
        mutableDateTime33.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime33.millisOfDay();
        mutableDateTime33.setMillisOfDay(457);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableDateTime33.add(readablePeriod50);
        int int52 = mutableDateTime33.getHourOfDay();
        long long53 = mutableDateTime33.getMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        boolean boolean56 = mutableDateTime33.isSupported(dateTimeFieldType54);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime1.property(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType54.getRangeDurationType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 223 + "'", int6 == 223);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644537697223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1644537600457L + "'", long53 == 1644537600457L);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(durationFieldType58);
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant5 = null;
        mutableDateTime1.setDate(readableInstant5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfHour();
        boolean boolean9 = mutableDateTime1.isBefore((long) 34918631);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(74432920521L);
        mutableDateTime1.setYear(97906);
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable3);
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable6);
        iOException4.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException("French", (java.lang.Throwable) iOException4);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException11 = new java.io.IOException("617", (java.lang.Throwable) iOException4);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        int int4 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setWeekOfWeekyear(9);
        mutableDateTime1.addMonths(301);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 49 + "'", int4 == 49);
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime7.getEra();
        mutableDateTime7.addSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime7.toMutableDateTime();
        int int12 = mutableDateTime7.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.dayOfYear();
        long long14 = mutableDateTime7.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644785361264L + "'", long14 == 1644785361264L);
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 59);
        java.lang.String str10 = dateTimeFieldType7.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser15 = dateTimeFormatter13.getParser();
        boolean boolean16 = dateTimeFormatter13.isParser();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        org.joda.time.Chronology chronology24 = dateTimeParserBucket22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology24.add(readablePeriod26, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter13.withChronology(chronology24);
        org.joda.time.DurationField durationField31 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType7.getField(chronology24);
        org.joda.time.DurationField durationField33 = chronology24.months();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology24.add(readablePeriod34, 34809000L, 97754);
        org.joda.time.DateTimeField dateTimeField38 = chronology24.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = chronology24.dayOfYear();
        org.joda.time.DurationField durationField40 = chronology24.halfdays();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfEra" + "'", str10, "yearOfEra");
        org.junit.Assert.assertNull(dateTimeZone14);
        org.junit.Assert.assertNull(dateTimeParser15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 34809000L + "'", long37 == 34809000L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyear();
        long long13 = dateTimeField10.set((long) 74581883, 267);
        org.joda.time.DurationField durationField14 = dateTimeField10.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-53741243818117L) + "'", long13 == (-53741243818117L));
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsText();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.getMutableDateTime();
        mutableDateTime3.setMillis((long) 1301);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfWeek();
        java.lang.String str9 = property8.getName();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        org.joda.time.Interval interval11 = property8.toInterval();
        java.lang.String str12 = property8.getAsShortText();
        org.joda.time.DurationField durationField13 = property8.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property8.getFieldType();
        int int15 = mutableDateTime3.get(dateTimeFieldType14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime3.dayOfMonth();
        int int17 = mutableDateTime3.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfWeek" + "'", str9, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ven." + "'", str12, "ven.");
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1301 + "'", int17 == 1301);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.minuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        int int18 = mutableDateTime16.getRoundingMode();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.millisOfDay();
        int int20 = mutableDateTime16.getSecondOfMinute();
        boolean boolean21 = mutableDateTime1.equals((java.lang.Object) mutableDateTime16);
        mutableDateTime1.setWeekyear(409);
        mutableDateTime1.setYear(795);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74961 + "'", int7 == 74961);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        org.joda.time.Chronology chronology17 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        org.joda.time.Chronology chronology33 = dateTimeParserBucket31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology33, locale35, (java.lang.Integer) 2022);
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale39.getISO3Language();
        java.lang.String str41 = dateTimeField22.getAsText(readablePartial23, 842, locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology8, locale39, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        int int48 = mutableDateTime45.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime45.set(dateTimeFieldType49, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime45.getZone();
        long long54 = dateTimeZone52.nextTransition((long) 59);
        java.lang.String str56 = dateTimeZone52.getName((long) (short) 0);
        dateTimeParserBucket43.setZone(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone52);
        long long62 = dateTimeZone52.convertLocalToUTC((long) 938, false, 1644572461105L);
        long long64 = dateTimeZone52.nextTransition(1644572516059L);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "fra" + "'", str40, "fra");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "842" + "'", str41, "842");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 59L + "'", long54 == 59L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 938L + "'", long62 == 938L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644572516059L + "'", long64 == 1644572516059L);
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.secondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(876, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        java.lang.String str12 = dateTimeField11.toString();
        java.lang.String str14 = dateTimeField11.getAsText(1644572461105L);
        org.joda.time.ReadablePartial readablePartial15 = null;
        int int16 = dateTimeField11.getMinimumValue(readablePartial15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfHour();
        int int24 = mutableDateTime18.getSecondOfDay();
        mutableDateTime18.setSecondOfDay((int) (byte) 0);
        mutableDateTime18.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.addHours((int) (short) 0);
        mutableDateTime29.addWeekyears((int) 'a');
        java.lang.String str35 = mutableDateTime29.toString("0");
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        mutableDateTime29.set(dateTimeFieldType44, 5);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime18.property(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType49.getField(chronology50);
        org.joda.time.DurationField durationField52 = dateTimeField51.getDurationField();
        boolean boolean54 = dateTimeField51.isLeap((long) (short) -1);
        java.util.Locale locale56 = java.util.Locale.US;
        java.lang.String str57 = dateTimeField51.getAsText((long) (-1), locale56);
        java.lang.String str58 = property48.getAsText(locale56);
        int int59 = dateTimeField11.getMaximumTextLength(locale56);
        java.lang.String str60 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[yearOfEra]" + "'", str12, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 74961 + "'", int24 == 74961);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "59" + "'", str57, "59");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "yearOfEra" + "'", str60, "yearOfEra");
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 2922789);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        org.joda.time.Instant instant22 = mutableDateTime13.toInstant();
        mutableDateTime13.addDays((int) ' ');
        java.util.Date date25 = mutableDateTime13.toDate();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = durationFieldType26.isSupported(chronology27);
        mutableDateTime13.add(durationFieldType26, 902);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(0L, chronology33, locale34, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket37.getZone();
        org.joda.time.Chronology chronology39 = dateTimeParserBucket37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        java.util.Locale locale41 = java.util.Locale.FRENCH;
        java.lang.String str42 = locale41.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology39, locale41, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField45 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.millisOfSecond();
        org.joda.time.DurationField durationField47 = chronology39.minutes();
        boolean boolean48 = durationFieldType26.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField49 = chronology39.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = chronology39.hourOfDay();
        java.lang.String str52 = dateTimeField50.getAsText((long) 2000);
        dateTimeParserBucket5.saveField(dateTimeField50, 993);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Tue Mar 15 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addYears(237);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.util.Calendar calendar41 = mutableDateTime1.toCalendar(locale39);
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.addHours(59);
        org.joda.time.Chronology chronology50 = mutableDateTime45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.dayOfWeek();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property54.getAsText(locale55);
        java.util.Locale locale57 = null;
        int int58 = property54.getMaximumTextLength(locale57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        mutableDateTime60.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int69 = dateTimeField68.getMaximumValue();
        mutableDateTime60.setRounding(dateTimeField68);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = dateTimeField68.getAsShortText((int) (byte) 1, locale72);
        java.lang.String str74 = property54.getAsShortText(locale72);
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.lang.String str76 = locale75.getScript();
        java.lang.String str77 = locale72.getDisplayScript(locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale72);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.yearOfEra();
        int int81 = mutableDateTime79.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime79.set(dateTimeFieldType82, 0);
        boolean boolean85 = dateTimeParserBucket78.restoreState((java.lang.Object) dateTimeFieldType82);
        int int86 = mutableDateTime1.get(dateTimeFieldType82);
        int int87 = mutableDateTime1.getDayOfYear();
        mutableDateTime1.add((long) 320083);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime1.weekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.422Z" + "'", str22, "2022-02-11T00:01:37.422Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=9123494497422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2259,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=422,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "vendredi" + "'", str56, "vendredi");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ven." + "'", str74, "ven.");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 11 + "'", int81 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 42 + "'", int87 == 42);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DurationField durationField12 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology22.add(readablePeriod24, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField29 = chronology22.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial43 = null;
        org.joda.time.Chronology chronology47 = null;
        java.util.Locale locale48 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(0L, chronology47, locale48, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket51.getZone();
        org.joda.time.Chronology chronology53 = dateTimeParserBucket51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        java.util.Locale locale55 = java.util.Locale.FRENCH;
        java.lang.String str56 = locale55.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology53, locale55, (java.lang.Integer) 2022);
        java.util.Locale locale59 = locale55.stripExtensions();
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = dateTimeField42.getAsText(readablePartial43, 842, locale59);
        java.lang.String str62 = locale59.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 340, chronology22, locale59, (java.lang.Integer) 74444144);
        java.lang.String str66 = locale59.getExtension('a');
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(49409109L, chronology8, locale59, (java.lang.Integer) 34848733);
        org.joda.time.DateTimeField dateTimeField69 = chronology8.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField71 = chronology8.minutes();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fra" + "'", str60, "fra");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "842" + "'", str61, "842");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        mutableDateTime1.setMillis((long) 232);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.secondOfDay();
        int int15 = mutableDateTime1.getSecondOfDay();
        boolean boolean16 = mutableDateTime1.isEqualNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale7 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale7, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.Chronology chronology12 = dateTimeParserBucket10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField13.getAsShortText(readablePartial14, (int) (short) -1, locale36);
        org.joda.time.ReadablePartial readablePartial40 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.ReadableInstant readableInstant44 = null;
        boolean boolean45 = mutableDateTime43.isEqual(readableInstant44);
        int int46 = mutableDateTime43.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime43.set(dateTimeFieldType47, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        int int51 = mutableDateTime43.get(dateTimeFieldType50);
        int int52 = mutableDateTime43.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.yearOfEra();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = mutableDateTime53.toCalendar(locale55);
        java.util.Calendar calendar57 = mutableDateTime43.toCalendar(locale55);
        java.lang.String str58 = dateTimeField13.getAsText(readablePartial40, 306, locale55);
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale59);
        java.lang.String str61 = locale55.getDisplayName(locale59);
        java.util.Locale.Builder builder62 = builder3.setLocale(locale55);
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale.Builder builder65 = builder63.addUnicodeLocaleAttribute("34968952");
        java.util.Locale locale66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder67 = builder65.setLocale(locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1644572961483,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644537697483,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "306" + "'", str58, "306");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "chinois (Taiwan)" + "'", str61, "chinois (Taiwan)");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        int int12 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        int int21 = mutableDateTime14.getEra();
        boolean boolean22 = mutableDateTime14.isEqualNow();
        int int23 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime mutableDateTime25 = property10.add(1);
        mutableDateTime25.setMillis((long) 74420121);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setHourOfDay(74462);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74462 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = mutableDateTime1.toCalendar(locale12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime1.add(readableDuration15, 34986526);
        java.lang.Object obj18 = mutableDateTime1.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644537697516,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=516,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2022-02-11T00:01:37.516Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2022-02-11T00:01:37.516Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2022-02-11T00:01:37.516Z");
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        java.lang.Integer int9 = dateTimeFormatter8.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 35045);
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(appendable12, (long) 34938403);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter2.getParser();
        java.util.Locale locale17 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 74581);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology27.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.Chronology chronology33 = dateTimeFormatter32.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = dateTimeFormatter32.parseLocalDateTime("2022-02-27T15:58:21.678+390:13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 202);
        int int2 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        long long10 = dateTimeParserBucket8.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket8.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone11);
        org.joda.time.Chronology chronology13 = mutableDateTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(146, 5995, 35332850);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5995 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) 100);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        int int8 = mutableDateTime5.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime5.set(dateTimeFieldType9, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        int int13 = mutableDateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = mutableDateTime5.toDateTime();
        java.util.Locale locale15 = null;
        java.util.Calendar calendar16 = mutableDateTime5.toCalendar(locale15);
        mutableDateTime5.addDays((int) (byte) 0);
        mutableDateTime5.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime5.centuryOfEra();
        int int22 = mutableDateTime5.getYearOfCentury();
        boolean boolean24 = mutableDateTime5.isEqual((long) 74411);
        org.joda.time.Chronology chronology25 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) property2, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644537697563,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=563,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology9.add(readablePeriod12, (long) 656, 912);
        org.joda.time.DurationField durationField16 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.yearOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 656L + "'", long15 == 656L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime11.toMutableDateTime();
        int int18 = mutableDateTime11.getYear();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean21 = dateTimeZone19.equals((java.lang.Object) 302);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime9.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType23.getField(chronology24);
        int int26 = dateTimeField25.getMaximumValue();
        int int29 = dateTimeField25.getDifference((long) 10, (long) 'a');
        int int31 = dateTimeField25.getLeapAmount((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField25.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField25.getType();
        int int34 = mutableDateTime9.get(dateTimeFieldType33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime9.dayOfWeek();
        java.lang.String str36 = property35.getAsString();
        java.lang.String str37 = property35.getAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 59 + "'", int26 == 59);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 21 + "'", int34 == 21);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "5" + "'", str36, "5");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "5" + "'", str37, "5");
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DurationField durationField15 = chronology8.weekyears();
        org.joda.time.DurationField durationField16 = chronology8.weekyears();
        java.lang.String str17 = chronology8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = mutableDateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone22);
        mutableDateTime4.setZone(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.lang.String str57 = dateTimeField30.getAsShortText(1L, locale54);
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.lang.String str59 = dateTimeZone22.getShortName((long) 6, locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        mutableDateTime0.setMillisOfDay(2000);
        int int63 = mutableDateTime0.getDayOfMonth();
        mutableDateTime0.add(1644784992513L);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime0.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 601 + "'", int9 == 601);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:49:21.601Z" + "'", str15, "2022-02-11T09:49:21.601Z");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "vendredi" + "'", str38, "vendredi");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ven." + "'", str56, "ven.");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022-02-11T09:48:34.006+00:01:14.456", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.getMutableDateTime();
        int int26 = property23.getLeapAmount();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        java.util.Locale locale32 = null;
        java.util.Calendar calendar33 = mutableDateTime28.toCalendar(locale32);
        int int34 = mutableDateTime28.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime28.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime28.add(readableDuration36);
        org.joda.time.Chronology chronology38 = mutableDateTime28.getChronology();
        int int39 = property23.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.setMillis((long) 528);
        mutableDateTime28.addWeekyears(35659);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572961628,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=628,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfDay();
        int int4 = mutableDateTime1.getYearOfEra();
        java.lang.String str5 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:21.643Z" + "'", str5, "2022-02-11T09:49:21.643Z");
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int7 = dateTimeField2.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int int9 = dateTimeField2.getMinimumValue(readablePartial8);
        long long11 = dateTimeField2.roundHalfEven((long) 928);
        long long14 = dateTimeField2.add((long) 930, 74416135);
        java.util.Locale locale18 = new java.util.Locale("anglais (Royaume-Uni)", "0237-02-11T09:40:32.406Z");
        java.lang.String str19 = dateTimeField2.getAsText(547L, locale18);
        java.util.Locale locale20 = locale18.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1000L + "'", long11 == 1000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 74416135930L + "'", long14 == 74416135930L);
        org.junit.Assert.assertEquals(locale18.toString(), "anglais (royaume-uni)_0237-02-11T09:40:32.406Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "anglais (royaume-uni)_0237-02-11T09:40:32.406Z");
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        java.lang.String str50 = mutableDateTime0.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572961664,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=664,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-03-21T18:32:01.000Z" + "'", str50, "2022-03-21T18:32:01.000Z");
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(98374L);
        mutableDateTime1.addMonths(74443);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 312 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        long long8 = dateTimeZone2.convertLocalToUTC((long) 74432964, false);
        long long10 = dateTimeZone2.previousTransition(10688688L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+390:13" + "'", str3, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1330347036L) + "'", long8 == (-1330347036L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10688688L + "'", long10 == 10688688L);
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.year();
        org.joda.time.DurationField durationField11 = chronology8.days();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        int int22 = mutableDateTime17.getMillisOfSecond();
        mutableDateTime17.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        int int29 = dateTimeField28.getMaximumValue();
        int int32 = dateTimeField28.getDifference((long) 10, (long) 'a');
        int int34 = dateTimeField28.getLeapAmount((-1L));
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = dateTimeField28.getAsText((long) 340, locale36);
        java.util.Locale locale39 = java.util.Locale.UK;
        java.lang.String str40 = dateTimeField28.getAsShortText((int) '4', locale39);
        org.joda.time.ReadablePartial readablePartial41 = null;
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = dateTimeField28.getAsText(readablePartial41, 292278993, locale43);
        java.lang.String str45 = mutableDateTime17.toString("237", locale43);
        java.util.Locale.Builder builder46 = builder15.setLocale(locale43);
        java.util.Set<java.lang.Character> charSet47 = locale43.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(1644572442071L, chronology8, locale43, (java.lang.Integer) 74417);
        org.joda.time.Chronology chronology50 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekyearOfCentury();
        org.joda.time.DurationField durationField52 = chronology50.years();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 694 + "'", int22 == 694);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "52" + "'", str40, "52");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "292278993" + "'", str44, "292278993");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "237" + "'", str45, "237");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        mutableDateTime1.addWeeks(79);
        long long13 = mutableDateTime1.getMillis();
        mutableDateTime1.setTime(0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-57855651038292L) + "'", long13 == (-57855651038292L));
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        int int8 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int14 = dateTimeField12.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.dayOfWeek();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property18.getAsText(locale19);
        java.util.Locale locale21 = null;
        int int22 = property18.getMaximumTextLength(locale21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        mutableDateTime24.setRounding(dateTimeField32);
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = dateTimeField32.getAsShortText((int) (byte) 1, locale36);
        java.lang.String str38 = property18.getAsShortText(locale36);
        java.lang.String str39 = dateTimeField12.getAsShortText(1L, locale36);
        java.lang.String str40 = locale36.getISO3Country();
        boolean boolean41 = locale36.hasExtensions();
        java.lang.String str42 = locale36.getDisplayLanguage();
        java.lang.String str43 = locale36.getDisplayScript();
        int int44 = property9.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime45 = property9.roundFloor();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.lang.String str48 = locale46.getDisplayLanguage(locale47);
        java.lang.String str49 = locale47.getDisplayCountry();
        java.lang.String str50 = locale47.getLanguage();
        java.lang.String str51 = property9.getAsShortText(locale47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 717 + "'", int8 == 717);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "vendredi" + "'", str20, "vendredi");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ven." + "'", str38, "ven.");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "0" + "'", str39, "0");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fran\347ais" + "'", str42, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str48, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Japon" + "'", str49, "Japon");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja" + "'", str50, "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "35361" + "'", str51, "35361");
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.hours();
        org.joda.time.DurationField durationField11 = chronology7.weekyears();
        org.joda.time.DurationField durationField12 = chronology7.weekyears();
        org.joda.time.DurationField durationField13 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(40870750);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.minuteOfHour();
        org.joda.time.Chronology chronology26 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.hourOfDay();
        org.joda.time.DurationField durationField28 = chronology20.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology20.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter10.withChronology(chronology20);
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter10.print(readablePartial32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.roundHalfEven();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.secondOfDay();
        java.util.Date date10 = mutableDateTime8.toDate();
        int int11 = mutableDateTime8.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("chinois");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap4);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-11T09:41:18.785Z");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap20);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar26 = mutableDateTime23.toCalendar(locale25);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getISO3Country();
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale22, locale25, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale.FilteringMode filteringMode34 = null;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter(languageRangeList21, (java.util.Collection<java.util.Locale>) localeList32, filteringMode34);
        java.util.Set<java.lang.String> strSet36 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags(languageRangeList21, (java.util.Collection<java.lang.String>) strSet36);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strSet36, filteringMode38);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet9, filteringMode38);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644572961828,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=21,MILLISECOND=828,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode38.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        int int3 = property2.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        int int13 = mutableDateTime7.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime7.weekyear();
        mutableDateTime7.add((long) 993);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.toMutableDateTimeISO();
        mutableDateTime7.setTime((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getYear();
        int int24 = property2.getDifference((org.joda.time.ReadableInstant) mutableDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property2.set(74939981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74939981 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 864 + "'", int13 == 864);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16, 730);
        mutableDateTime1.setMillisOfDay(69);
        int int21 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.addYears(2067);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697875,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=875,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = mutableDateTime1.toDateTime(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35360000 + "'", int18 == 35360000);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime23.setChronology(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = mutableDateTime27.toString(dateTimeFormatter30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = mutableDateTime27.getChronology();
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.addMinutes((int) 'u');
        org.joda.time.Chronology chronology37 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime39 = mutableDateTime1.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add(100);
        org.joda.time.MutableDateTime mutableDateTime46 = property42.addWrapField(10);
        mutableDateTime46.setMillis((long) 779);
        long long49 = mutableDateTime46.getMillis();
        mutableDateTime46.addWeekyears((-2));
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        mutableDateTime53.addDays(0);
        int int59 = mutableDateTime53.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime53.weekyear();
        mutableDateTime53.add((long) 993);
        org.joda.time.DateTimeZone dateTimeZone63 = mutableDateTime53.getZone();
        mutableDateTime53.setMinuteOfDay((int) ' ');
        int int66 = mutableDateTime53.getEra();
        boolean boolean67 = mutableDateTime46.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        boolean boolean68 = mutableDateTime53.isEqualNow();
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket74.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket74.getZone();
        boolean boolean77 = dateTimeZone76.isFixed();
        long long80 = dateTimeZone76.adjustOffset((long) 34992084, true);
        java.util.Locale locale82 = null;
        java.lang.String str83 = dateTimeZone76.getShortName((long) 35133622, locale82);
        mutableDateTime53.setZoneRetainFields(dateTimeZone76);
        org.joda.time.Chronology chronology85 = chronology37.withZone(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:49:21.897Z" + "'", str31, "2022-02-11T09:49:21.897Z");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 779L + "'", long49 == 779L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 897 + "'", int59 == 897);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 34992084L + "'", long80 == 34992084L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        int int55 = mutableDateTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale58, (java.lang.Integer) 9, 59);
        java.lang.Object obj62 = dateTimeParserBucket61.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket61.saveField(dateTimeFieldType63, 59);
        boolean boolean66 = mutableDateTime50.isSupported(dateTimeFieldType63);
        int int67 = mutableDateTime47.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        int int68 = mutableDateTime50.getDayOfMonth();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTime dateTime70 = mutableDateTime50.toDateTime();
        int int71 = mutableDateTime50.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setMinuteOfHour(74758);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74758 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 926 + "'", int29 == 926);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 926 + "'", int55 == 926);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 74961 + "'", int71 == 74961);
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField12 = chronology8.hours();
        org.joda.time.DurationField durationField13 = chronology8.millis();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType27.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        boolean boolean37 = dateTimeField34.isLeap((long) (short) -1);
        java.lang.String str38 = dateTimeField34.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType40.getField(chronology41);
        int int43 = dateTimeField42.getMaximumValue();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime46.yearOfCentury();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        int int50 = property48.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        int int54 = dateTimeField53.getMaximumValue();
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = locale56.getISO3Country();
        java.lang.String str58 = dateTimeField53.getAsShortText(0L, locale56);
        int int59 = property48.getMaximumTextLength(locale56);
        java.lang.String str60 = dateTimeField42.getAsShortText(0L, locale56);
        java.lang.String str61 = dateTimeField34.getAsText((-1L), locale56);
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "2022-02-11T09:40:25.676Z", locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 93, chronology8, locale56);
        org.joda.time.DateTimeField dateTimeField64 = chronology8.millisOfDay();
        long long67 = dateTimeField64.add((long) 287, (long) 691);
        int int69 = dateTimeField64.getMinimumValue(537000L);
        long long71 = dateTimeField64.roundHalfCeiling((-27592L));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondOfMinute" + "'", str38, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "59" + "'", str61, "59");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 978L + "'", long67 == 978L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-27592L) + "'", long71 == (-27592L));
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        java.lang.Object obj10 = mutableDateTime1.clone();
        mutableDateTime1.addHours(74418645);
        int int13 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(74432920521L);
        boolean boolean16 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 976 + "'", int6 == 976);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "2022-02-13T20:49:21.976Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "2022-02-13T20:49:21.976Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "2022-02-13T20:49:21.976Z");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime5.getMinuteOfHour();
        mutableDateTime5.addDays(831);
        boolean boolean15 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfDay();
        java.lang.String str18 = property17.getAsString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "589" + "'", str18, "589");
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(34808947);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.Chronology chronology23 = mutableDateTime15.getChronology();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        long long32 = dateTimeParserBucket29.computeMillis(true);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket29.getChronology();
        org.joda.time.Chronology chronology34 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.hourOfHalfday();
        boolean boolean37 = mutableDateTime15.equals((java.lang.Object) chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter12.withChronology(chronology33);
        org.joda.time.DurationField durationField39 = chronology33.hours();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(durationField39);
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 34828152);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(100);
        int int17 = mutableDateTime16.getSecondOfDay();
        int int18 = mutableDateTime16.getMonthOfYear();
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        java.lang.String str22 = property20.toString();
        int int23 = property20.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime24 = property20.roundHalfCeiling();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35362 + "'", int17 == 35362);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[minuteOfHour]" + "'", str22, "Property[minuteOfHour]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime1.addMillis((int) (byte) 0);
        int int21 = mutableDateTime1.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.property(dateTimeFieldType22);
        int int24 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(28);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = mutableDateTime28.toString(dateTimeFormatter31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        java.lang.String str34 = mutableDateTime28.toString();
        java.util.GregorianCalendar gregorianCalendar35 = mutableDateTime28.toGregorianCalendar();
        int int36 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:49:22.024Z" + "'", str32, "2022-02-11T09:49:22.024Z");
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:49:22.024Z" + "'", str34, "2022-02-11T09:49:22.024Z");
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime11.set(dateTimeFieldType15, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        int int19 = mutableDateTime11.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        boolean boolean29 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime22);
        int int30 = mutableDateTime22.getCenturyOfEra();
        org.joda.time.Instant instant31 = mutableDateTime22.toInstant();
        int int32 = mutableDateTime22.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(instant31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 41 + "'", int32 == 41);
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        java.io.IOException iOException1 = new java.io.IOException("java.io.IOException: 2022-02-11T09:40:30.403Z");
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        long long17 = chronology8.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((long) 588, chronology8, locale31, (java.lang.Integer) 0);
        long long35 = dateTimeParserBucket34.computeMillis();
        java.lang.Object obj36 = dateTimeParserBucket34.saveState();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7218525L + "'", long17 == 7218525L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 588L + "'", long35 == 588L);
        org.junit.Assert.assertNotNull(obj36);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T00:01:37.112Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        long long13 = dateTimeField11.roundHalfCeiling((long) 550);
        int int14 = dateTimeField11.getMaximumValue();
        java.lang.String str16 = dateTimeField11.getAsShortText((long) 972);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1000L + "'", long13 == 1000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfDay();
        long long8 = property7.remainder();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withPivotYear(436);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime19.set(dateTimeFieldType23, (int) 'a');
        org.joda.time.Instant instant26 = mutableDateTime19.toInstant();
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime19.getRoundingField();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        long long36 = dateTimeParserBucket33.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.yearOfEra();
        boolean boolean39 = dateTimeParserBucket33.restoreState((java.lang.Object) property38);
        int int40 = property38.getMinimumValueOverall();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime42.set(dateTimeFieldType46, (int) 'a');
        int int49 = mutableDateTime42.getEra();
        boolean boolean50 = mutableDateTime42.isEqualNow();
        int int51 = property38.getDifference((org.joda.time.ReadableInstant) mutableDateTime42);
        mutableDateTime42.addSeconds(11);
        boolean boolean54 = mutableDateTime19.equals((java.lang.Object) 11);
        int int55 = mutableDateTime19.getMillisOfSecond();
        java.util.GregorianCalendar gregorianCalendar56 = mutableDateTime19.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 91 + "'", int55 == 91);
        org.junit.Assert.assertNotNull(gregorianCalendar56);
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        int int10 = mutableDateTime0.getCenturyOfEra();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        int int15 = dateTimeZone12.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        int int18 = dateTimeZone12.getOffsetFromLocal((long) 161);
        long long21 = dateTimeZone12.adjustOffset((long) 2818, true);
        mutableDateTime0.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology25, locale26, (java.lang.Integer) 9, 59);
        java.lang.Object obj30 = dateTimeParserBucket29.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket29.saveField(dateTimeFieldType31, 59);
        long long35 = dateTimeParserBucket29.computeMillis(true);
        org.joda.time.Chronology chronology36 = dateTimeParserBucket29.getChronology();
        java.util.Locale locale39 = new java.util.Locale("2022-02-11T09:40:11.487Z", "ven.");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 74418645, chronology36, locale39, (java.lang.Integer) 617);
        org.joda.time.DurationField durationField42 = chronology36.years();
        mutableDateTime0.setChronology(chronology36);
        mutableDateTime0.addDays(74903);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572962107,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=107,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2818L + "'", long21 == 2818L);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-60305299200000L) + "'", long35 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals(locale39.toString(), "2022-02-11t09:40:11.487z_VEN.");
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int int11 = dateTimeField9.getMaximumValue(readablePartial10);
        long long14 = dateTimeField9.addWrapField((long) 137, 332);
        org.joda.time.DurationField durationField15 = dateTimeField9.getDurationField();
        boolean boolean16 = dateTimeField9.isSupported();
        boolean boolean18 = dateTimeField9.isLeap((long) 81869034);
        int int20 = dateTimeField9.getMaximumValue(1644572561162L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 125 + "'", int7 == 125);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10476950400137L + "'", long14 == 10476950400137L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        int int14 = mutableDateTime12.getDayOfMonth();
        long long15 = mutableDateTime12.getMillis();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime12.add(readablePeriod16, (int) 'a');
        int int19 = mutableDateTime12.getWeekOfWeekyear();
        boolean boolean20 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        int int25 = mutableDateTime22.getHourOfDay();
        mutableDateTime22.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        mutableDateTime22.setRounding(dateTimeField30);
        int int33 = mutableDateTime22.getMonthOfYear();
        mutableDateTime22.addWeekyears(11);
        mutableDateTime22.add((long) (short) -1);
        mutableDateTime22.addWeeks(829);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean41 = mutableDateTime22.isSupported(dateTimeFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.set(dateTimeFieldType40, 74591296);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74591296 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572962135L + "'", long15 == 1644572962135L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        java.lang.String str17 = dateTimeZone15.getNameKey((long) (byte) 0);
        mutableDateTime4.setZoneRetainFields(dateTimeZone15);
        org.joda.time.Chronology chronology19 = mutableDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType2.getField(chronology19);
        int int22 = mutableDateTime1.get(dateTimeFieldType2);
        int int23 = mutableDateTime1.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:49:22.145Z" + "'", str8, "2022-02-11T09:49:22.145Z");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial10 = null;
        int[] intArray16 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int17 = dateTimeField9.getMinimumValue(readablePartial10, intArray16);
        boolean boolean19 = dateTimeField9.isLeap((long) 74415);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getScript();
        int int34 = dateTimeField31.getMaximumTextLength(locale32);
        java.lang.String str35 = dateTimeField9.getAsShortText((long) 34816672, locale32);
        int int36 = dateTimeField9.getMinimumValue();
        long long39 = dateTimeField9.addWrapField((long) 287, 0);
        boolean boolean40 = dateTimeField9.isSupported();
        java.lang.String str41 = dateTimeField9.toString();
        int int43 = dateTimeField9.getMaximumValue(4000L);
        java.lang.String str45 = dateTimeField9.getAsShortText((long) 134);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 287L + "'", long39 == 287L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[dayOfYear]" + "'", str41, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 365 + "'", int43 == 365);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = mutableDateTime0.get(dateTimeFieldType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime0.setMillis(readableInstant8);
        java.lang.String str10 = mutableDateTime0.toString();
        int int11 = mutableDateTime0.getMonthOfYear();
        int int12 = mutableDateTime0.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572962170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:49:22.170Z" + "'", str10, "2022-02-11T09:49:22.170Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.clockhourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = chronology9.get(readablePeriod13, (long) 349626, (long) 35320000);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10, 0);
        long long13 = mutableDateTime1.getMillis();
        int int14 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setTime((long) 336);
        mutableDateTime1.setMillisOfDay(74920);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644537697188L + "'", long13 == 1644537697188L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime1 = mutableDateTime0.toDateTime();
        boolean boolean3 = mutableDateTime0.isEqual((long) 601);
        mutableDateTime0.addSeconds(0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.millisOfDay();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfCeiling();
        int int9 = mutableDateTime8.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = mutableDateTime8.toString("2022-02-16T09:41:02.692Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "35362196" + "'", str7, "35362196");
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        dateTimeParserBucket5.setOffset(34852);
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        long long11 = dateTimeField9.roundHalfEven(1644788526415L);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644789600000L + "'", long11 == 1644789600000L);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime6.set(dateTimeFieldType10, (int) 'a');
        int int13 = mutableDateTime6.getEra();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfEven();
        java.util.Locale locale17 = new java.util.Locale("");
        java.lang.String str18 = locale17.getVariant();
        int int19 = property14.getMaximumTextLength(locale17);
        java.util.Set<java.lang.Character> charSet20 = locale17.getExtensionKeys();
        boolean boolean21 = languageRange1.equals((java.lang.Object) locale17);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "twn" + "'", str4, "twn");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:40:28.872Z");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        int int12 = dateTimeField10.get((-60273763200000L));
        java.lang.String str14 = dateTimeField10.getAsShortText(1644572879390L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 60 + "'", int12 == 60);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime2.getZone();
        long long11 = dateTimeZone9.nextTransition((long) 59);
        java.lang.String str13 = dateTimeZone9.getName((long) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.Chronology chronology20 = mutableDateTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime15.toMutableDateTime();
        int int22 = mutableDateTime15.getYear();
        int int23 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = mutableDateTime25.toString(dateTimeFormatter28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.Chronology chronology31 = mutableDateTime25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime15.toMutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        int int41 = dateTimeField37.getDifference((long) 10, (long) 'a');
        int int43 = dateTimeField37.getLeapAmount((-1L));
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = dateTimeField37.getAsText((long) 340, locale45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTimeField37.getAsShortText((int) '4', locale48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField37.getAsText(readablePartial50, 292278993, locale52);
        java.lang.String str54 = locale52.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(74420L, chronology31, locale52, (java.lang.Integer) 74547, 562);
        org.joda.time.DurationField durationField58 = chronology31.weeks();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology31);
        mutableDateTime59.addDays(746);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 59L + "'", long11 == 59L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T09:49:22.308Z" + "'", str29, "2022-02-11T09:49:22.308Z");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52" + "'", str49, "52");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "292278993" + "'", str53, "292278993");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "GB" + "'", str54, "GB");
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        mutableDateTime1.add((long) 993);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int17 = dateTimeField15.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.lang.String str42 = dateTimeField15.getAsShortText(1L, locale39);
        java.lang.String str43 = locale39.getCountry();
        java.util.Locale.setDefault(locale39);
        java.lang.String str45 = property12.getAsText(locale39);
        org.joda.time.DurationField durationField46 = property12.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 358 + "'", int7 == 358);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "23" + "'", str45, "23");
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:47:58.277+00:01:14.456");
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        mutableDateTime0.set(dateTimeFieldType15, 5);
        boolean boolean19 = mutableDateTime0.isBeforeNow();
        int int20 = mutableDateTime0.getYearOfCentury();
        int int21 = mutableDateTime0.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime();
        mutableDateTime0.add((long) 75);
        java.lang.String str25 = mutableDateTime0.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0005-02-10T09:49:22.453Z" + "'", str25, "0005-02-10T09:49:22.453Z");
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        java.lang.Integer int7 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket5.getZone();
        int int9 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        int int10 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime13.set(dateTimeFieldType17, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        int int21 = mutableDateTime13.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = mutableDateTime13.toDateTime();
        java.util.Locale locale23 = null;
        java.util.Calendar calendar24 = mutableDateTime13.toCalendar(locale23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime27 = mutableDateTime13.toDateTime(dateTimeZone26);
        java.lang.String str28 = dateTimeZone26.getID();
        long long31 = dateTimeZone26.adjustOffset((long) 158, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(27320L, dateTimeZone26);
        org.joda.time.DateTime dateTime34 = mutableDateTime1.toDateTime(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(694);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 694 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 399 + "'", int6 == 399);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644537697399,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=399,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 158L + "'", long31 == 158L);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyear();
        java.lang.String str11 = dateTimeField10.toString();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        int int16 = dateTimeField15.getMaximumValue();
        int int19 = dateTimeField15.getDifference((long) 10, (long) 'a');
        int int21 = dateTimeField15.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial22 = null;
        int[] intArray29 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int30 = dateTimeField15.getMinimumValue(readablePartial22, intArray29);
        int int31 = dateTimeField10.getMaximumValue(readablePartial12, intArray29);
        long long33 = dateTimeField10.remainder(60000L);
        org.joda.time.DurationField durationField34 = dateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[weekyear]" + "'", str11, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 292278993 + "'", int31 == 292278993);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 259260000L + "'", long33 == 259260000L);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:41:27.270-00:00:00.001", "2022-02-11T00:01:37.203Z");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:41:27.270-00:00:00.001_2022-02-11T00:01:37.203Z");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644537697790L);
        int int2 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        int int5 = mutableDateTime4.getWeekyear();
        int int6 = mutableDateTime4.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(420);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear((java.lang.Integer) 739);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter17.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter17.withPivotYear(579);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        int int8 = dateTimeField2.getMaximumValue((long) (byte) 1);
        java.lang.String str10 = dateTimeField2.getAsShortText((long) 5);
        long long12 = dateTimeField2.roundHalfFloor(10L);
        java.lang.String str14 = dateTimeField2.getAsShortText((-2208988800000L));
        org.joda.time.DurationField durationField15 = dateTimeField2.getDurationField();
        long long18 = dateTimeField2.add((long) 726, 433);
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField33 = chronology28.clockhourOfDay();
        boolean boolean35 = dateTimeField33.isLeap((long) 670);
        org.joda.time.ReadablePartial readablePartial36 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType37.getField(chronology38);
        int int40 = dateTimeField39.getMaximumValue();
        int int43 = dateTimeField39.getDifference((long) 10, (long) 'a');
        int int45 = dateTimeField39.getMaximumValue((long) (byte) 1);
        org.joda.time.ReadablePartial readablePartial46 = null;
        int[] intArray53 = new int[] { 9, 59, (short) 10, ' ', 411, 74411 };
        int int54 = dateTimeField39.getMinimumValue(readablePartial46, intArray53);
        int int55 = dateTimeField33.getMaximumValue(readablePartial36, intArray53);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = dateTimeField2.set(readablePartial19, 735, intArray53, 74772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74772 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 433726L + "'", long18 == 433726L);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 59 + "'", int40 == 59);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 59 + "'", int45 == 59);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[9, 59, 10, 32, 411, 74411]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 24 + "'", int55 == 24);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        java.lang.String str16 = dateTimeField15.toString();
        boolean boolean18 = dateTimeField15.isLeap((long) 35292);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str16, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        java.lang.String str20 = chronology18.toString();
        org.joda.time.DurationField durationField21 = chronology18.millis();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket27.getZone();
        boolean boolean30 = dateTimeZone29.isFixed();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = dateTimeZone29.getName(10930L, locale45);
        org.joda.time.Chronology chronology48 = chronology18.withZone(dateTimeZone29);
        mutableDateTime9.setZoneRetainFields(dateTimeZone29);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        mutableDateTime51.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime51.add(readablePeriod56, (-292275054));
        long long59 = mutableDateTime51.getMillis();
        long long60 = mutableDateTime51.getMillis();
        mutableDateTime51.setTime(1644788463784L);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket68.getZone();
        org.joda.time.Chronology chronology70 = dateTimeParserBucket68.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.days();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.dayOfYear();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.minuteOfHour();
        long long79 = chronology70.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(chronology70);
        boolean boolean81 = mutableDateTime51.isBefore((org.joda.time.ReadableInstant) mutableDateTime80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        mutableDateTime51.add(readablePeriod82);
        mutableDateTime51.setDate((long) 966);
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.ReadableDuration readableDuration87 = null;
        mutableDateTime9.add(readableDuration87);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMonthOfYear(35332203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35332203 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1644785362518L + "'", long59 == 1644785362518L);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644785362518L + "'", long60 == 1644785362518L);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 7218525L + "'", long79 == 7218525L);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        int int6 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime0.toMutableDateTime(dateTimeZone13);
        int int17 = mutableDateTime16.getMinuteOfDay();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology25);
        int int28 = mutableDateTime27.getEra();
        org.joda.time.DateTime dateTime29 = mutableDateTime27.toDateTime();
        boolean boolean30 = mutableDateTime16.isEqual((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572962537,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=537,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 689 + "'", int17 == 689);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        mutableDateTime20.setTime((long) 381);
        long long23 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.yearOfEra();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        int int32 = property24.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setTime((long) 745);
        int int35 = mutableDateTime26.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 564 + "'", int31 == 564);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 653);
        org.joda.time.DateTimeField dateTimeField16 = null;
        mutableDateTime12.setRounding(dateTimeField16, 322);
        mutableDateTime12.addWeeks(97085);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 579 + "'", int7 == 579);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572962579L + "'", long10 == 1644572962579L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        int int6 = mutableDateTime3.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime3.set(dateTimeFieldType7, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone10 = mutableDateTime3.getZone();
        org.joda.time.Chronology chronology11 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 17, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfEra();
        org.joda.time.DurationField durationField15 = chronology11.years();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        mutableDateTime17.addHours(59);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.minuteOfHour();
        int int23 = mutableDateTime17.getSecondOfDay();
        mutableDateTime17.setSecondOfDay((int) (byte) 0);
        mutableDateTime17.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.addHours((int) (short) 0);
        mutableDateTime28.addWeekyears((int) 'a');
        java.lang.String str34 = mutableDateTime28.toString("0");
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime36.set(dateTimeFieldType40, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        int int44 = mutableDateTime36.get(dateTimeFieldType43);
        mutableDateTime28.set(dateTimeFieldType43, 5);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime17.property(dateTimeFieldType43);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        org.joda.time.DurationField durationField51 = dateTimeField50.getDurationField();
        boolean boolean53 = dateTimeField50.isLeap((long) (short) -1);
        java.util.Locale locale55 = java.util.Locale.US;
        java.lang.String str56 = dateTimeField50.getAsText((long) (-1), locale55);
        java.lang.String str57 = property47.getAsText(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(74419L, chronology11, locale55, (java.lang.Integer) 35147393, 115);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 74962 + "'", int23 == 74962);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "59" + "'", str56, "59");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj11 = mutableDateTime1.clone();
        mutableDateTime1.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        mutableDateTime1.addWeeks(612);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfDay();
        java.util.Date date18 = mutableDateTime1.toDate();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = mutableDateTime1.toString("2279-02-11T09:48:17.263+00:00:00.678");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "2022-02-11T00:01:37.618Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "2022-02-11T00:01:37.618Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "2022-02-11T00:01:37.618Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Tue Aug 04 00:01:37 UTC 6203587");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.roundHalfFloor();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        int int16 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int18 = mutableDateTime11.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime11.minuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        java.util.Locale locale23 = null;
        java.lang.String str24 = property22.getAsText(locale23);
        java.util.Locale locale25 = null;
        int int26 = property22.getMaximumTextLength(locale25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        mutableDateTime28.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        mutableDateTime28.setRounding(dateTimeField36);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = dateTimeField36.getAsShortText((int) (byte) 1, locale40);
        java.lang.String str42 = property22.getAsShortText(locale40);
        java.util.Calendar calendar43 = mutableDateTime11.toCalendar(locale40);
        java.lang.String str44 = mutableDateTime11.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeFormatter47.getZone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        org.joda.time.Chronology chronology55 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = chronology55.getZone();
        java.lang.String str57 = dateTimeZone56.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter47.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime60.set(dateTimeFieldType64, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime60.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter47.withZone(dateTimeZone67);
        boolean boolean70 = dateTimeZone67.isStandardOffset((long) 2922789);
        int int72 = dateTimeZone67.getOffset(74437L);
        org.joda.time.DateTime dateTime73 = mutableDateTime11.toDateTime(dateTimeZone67);
        int int74 = mutableDateTime11.getSecondOfDay();
        boolean boolean75 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str77 = mutableDateTime11.toString("1250");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 643 + "'", int16 == 643);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "vendredi" + "'", str24, "vendredi");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ven." + "'", str42, "ven.");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644785362643,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=22,MILLISECOND=643,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-13T20:49:22.643Z" + "'", str44, "2022-02-13T20:49:22.643Z");
        org.junit.Assert.assertNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "UTC" + "'", str57, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 74962 + "'", int74 == 74962);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1250" + "'", str77, "1250");
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekyear();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DurationField durationField7 = property4.getDurationField();
        java.lang.String str8 = property4.getAsString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2122" + "'", str8, "2122");
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        mutableDateTime1.addWeekyears(178);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = mutableDateTime1.isSupported(dateTimeFieldType9);
        mutableDateTime1.setDate((long) 805);
        mutableDateTime1.addHours(34811);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        mutableDateTime1.add(durationFieldType17, 237);
        java.lang.String str20 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(10675);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10675 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572962698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=698,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2210-12-21T20:49:22.698Z" + "'", str20, "2210-12-21T20:49:22.698Z");
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.add((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfEra();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar8 = mutableDateTime5.toCalendar(locale7);
        mutableDateTime5.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = mutableDateTime5.get(dateTimeFieldType11);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket20.getZone();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfMonth();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology22, locale27);
        mutableDateTime5.setChronology(chronology22);
        mutableDateTime5.addMinutes(680);
        mutableDateTime5.addHours(24779);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572962709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable5, 19063989121001L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket(0L, chronology16, locale17, (java.lang.Integer) 1, (int) '#');
        long long23 = dateTimeParserBucket20.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        mutableDateTime25.addDays(0);
        int int31 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.weekyear();
        int int33 = mutableDateTime25.getMonthOfYear();
        mutableDateTime25.addDays(5);
        boolean boolean37 = mutableDateTime25.isAfter((long) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = mutableDateTime39.toDateTime();
        java.util.Locale locale49 = null;
        java.util.Calendar calendar50 = mutableDateTime39.toCalendar(locale49);
        org.joda.time.DateTimeZone dateTimeZone51 = mutableDateTime39.getZone();
        mutableDateTime25.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        java.lang.String str60 = dateTimeZone59.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        mutableDateTime25.setZoneRetainFields(dateTimeZone59);
        dateTimeParserBucket20.setZone(dateTimeZone59);
        org.joda.time.Chronology chronology64 = chronology8.withZone(dateTimeZone59);
        long long66 = dateTimeZone59.nextTransition((long) 74428);
        java.lang.String str68 = dateTimeZone59.getNameKey((long) 34920);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 747 + "'", int31 == 747);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644537697747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 74428L + "'", long66 == 74428L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "UTC" + "'", str68, "UTC");
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        mutableDateTime1.setSecondOfDay(993);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        long long23 = dateTimeField21.roundHalfCeiling(1644785242402L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 766 + "'", int6 == 766);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644796800000L + "'", long23 == 1644796800000L);
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addWeekyears(11);
        mutableDateTime1.add((long) (short) -1);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getMillisOfDay();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        mutableDateTime20.addHours(59);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        int int26 = mutableDateTime20.getSecondOfDay();
        mutableDateTime20.setSecondOfDay((int) (byte) 0);
        mutableDateTime20.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.addHours((int) (short) 0);
        mutableDateTime31.addWeekyears((int) 'a');
        java.lang.String str37 = mutableDateTime31.toString("0");
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        int int42 = mutableDateTime39.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime39.set(dateTimeFieldType43, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        int int47 = mutableDateTime39.get(dateTimeFieldType46);
        mutableDateTime31.set(dateTimeFieldType46, 5);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime20.property(dateTimeFieldType46);
        mutableDateTime20.addYears(796);
        boolean boolean53 = mutableDateTime20.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime20.toMutableDateTime();
        int int55 = mutableDateTime20.getSecondOfMinute();
        boolean boolean56 = mutableDateTime1.equals((java.lang.Object) mutableDateTime20);
        int int57 = mutableDateTime20.getYearOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35361000 + "'", int18 == 35361000);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 74962 + "'", int26 == 74962);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2818 + "'", int57 == 2818);
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(0);
        boolean boolean13 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology21.getZone();
        org.joda.time.DurationField durationField25 = chronology21.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.year();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime1.toMutableDateTime(chronology21);
        mutableDateTime1.addHours(518);
        mutableDateTime1.setYear(97840);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(35161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35161 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        boolean boolean6 = languageRange1.equals((java.lang.Object) "2022-02-11T09:47:51.111+00:01:14.456");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        mutableDateTime1.setWeekyear(34812148);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        org.joda.time.DurationField durationField13 = dateTimeField12.getDurationField();
        boolean boolean15 = dateTimeField12.isLeap((long) (short) -1);
        java.lang.String str16 = dateTimeField12.getName();
        long long19 = dateTimeField12.getDifferenceAsLong((long) 74416, 0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField12.getType();
        int int21 = mutableDateTime1.get(dateTimeFieldType20);
        mutableDateTime1.addSeconds(249);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime1.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "secondOfMinute" + "'", str16, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 74L + "'", long19 == 74L);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = mutableDateTime24.toString(dateTimeFormatter27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime14.toMutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.weekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:49:22.827Z" + "'", str28, "2022-02-11T09:49:22.827Z");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = mutableDateTime5.toString(dateTimeFormatter8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = mutableDateTime5.getChronology();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addMinutes((int) 'u');
        org.joda.time.Chronology chronology15 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        java.lang.String str17 = dateTimeField16.getName();
        int int19 = dateTimeField16.get((long) 74444);
        boolean boolean21 = dateTimeField16.isLeap((long) 34937);
        java.lang.String str23 = dateTimeField16.getAsShortText((long) 35034);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter27.getParser();
        boolean boolean30 = dateTimeFormatter27.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.Chronology chronology32 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = dateTimeFormatter27.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter27.withDefaultYear(34808947);
        boolean boolean38 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getLeapAmount((-1L));
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = dateTimeField41.getAsText((long) 340, locale49);
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField41.getAsShortText((int) '4', locale52);
        java.util.Locale locale54 = java.util.Locale.ITALY;
        int int55 = dateTimeField41.getMaximumTextLength(locale54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter27.withLocale(locale54);
        java.lang.String str57 = locale54.getDisplayCountry();
        java.lang.String str58 = dateTimeField16.getAsText(35308266, locale54);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = dateTimeField16.set((long) 35293063, 34920);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34920 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:49:22.843Z" + "'", str9, "2022-02-11T09:49:22.843Z");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "clockhourOfHalfday" + "'", str17, "clockhourOfHalfday");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "12" + "'", str23, "12");
        org.junit.Assert.assertNull(dateTimeZone28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertNull(dateTimePrinter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "0" + "'", str50, "0");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "52" + "'", str53, "52");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italie" + "'", str57, "Italie");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35308266" + "'", str58, "35308266");
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getCenturyOfEra();
        int int11 = mutableDateTime1.getCenturyOfEra();
        int int12 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.add((long) 27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int10 = dateTimeField9.getMaximumValue();
        mutableDateTime1.setRounding(dateTimeField9);
        int int12 = mutableDateTime1.getMonthOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime1.add(readableDuration13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime1.add(readablePeriod16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.secondOfMinute();
        int int19 = property18.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(34808947);
        boolean boolean13 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        java.util.Locale locale29 = java.util.Locale.ITALY;
        int int30 = dateTimeField16.getMaximumTextLength(locale29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter2.withLocale(locale29);
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter2.print(readablePartial32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        mutableDateTime9.setRounding(dateTimeField13);
        mutableDateTime9.addDays(627);
        int int22 = mutableDateTime9.getMinuteOfDay();
        mutableDateTime9.addWeeks(74434287);
        int int25 = mutableDateTime9.getSecondOfMinute();
        int int26 = mutableDateTime9.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 589 + "'", int22 == 589);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime1.setTime((long) 969);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(74432920);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime21.add(readablePeriod26, (-292275054));
        long long29 = mutableDateTime21.getMillis();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.Chronology chronology31 = mutableDateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType19.getField(chronology31);
        boolean boolean34 = dateTimeField33.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setRounding(dateTimeField33, 74433);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 74433");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35362917 + "'", int4 == 35362917);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644785362917L + "'", long29 == 1644785362917L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644785362917L + "'", long30 == 1644785362917L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        mutableDateTime11.setMillisOfDay(369);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.centuryOfEra();
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime11.toGregorianCalendar();
        boolean boolean18 = mutableDateTime11.isAfter(1644572674291L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 950 + "'", int7 == 950);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572962950L + "'", long10 == 1644572962950L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withZone(dateTimeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withOffsetParsed();
        boolean boolean13 = dateTimeFormatter12.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.DurationField durationField20 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.secondOfMinute();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        int int16 = mutableDateTime7.getRoundingMode();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime7.toMutableDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        java.util.Locale locale24 = null;
        java.util.Calendar calendar25 = mutableDateTime20.toCalendar(locale24);
        mutableDateTime20.addMinutes(135);
        int int28 = mutableDateTime20.getYearOfEra();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime20.minuteOfHour();
        org.joda.time.DurationField durationField30 = property29.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime32 = property29.set("7");
        org.joda.time.DateTimeField dateTimeField33 = property29.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property29.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.set(dateTimeFieldType34, 98728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 98728 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572962993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572962993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=22,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getCountry();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        long long20 = mutableDateTime19.getMillis();
        int int21 = mutableDateTime19.getSecondOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        mutableDateTime23.addHours(59);
        int int28 = mutableDateTime23.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean30 = mutableDateTime23.isSupported(dateTimeFieldType29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime23.dayOfMonth();
        org.joda.time.Chronology chronology32 = mutableDateTime23.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime19.toMutableDateTime(chronology32);
        java.util.Locale locale36 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 350, chronology32, locale36, (java.lang.Integer) 810, 781);
        java.lang.String str41 = locale36.getDisplayLanguage();
        java.lang.String str42 = locale14.getDisplayVariant(locale36);
        java.lang.String str43 = locale36.toString();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572963008L + "'", long20 == 1644572963008L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35363 + "'", int21 == 35363);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertEquals(locale36.toString(), "yearofera");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "yearofera" + "'", str41, "yearofera");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearofera" + "'", str43, "yearofera");
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.secondOfDay();
        org.joda.time.Chronology chronology20 = mutableDateTime1.getChronology();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697025,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=25,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "secondOfDay" + "'", str1, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology9.days();
        boolean boolean12 = durationFieldType1.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        boolean boolean22 = dateTimeField19.isLeap((long) (short) -1);
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = dateTimeField19.getAsText((long) (-1), locale24);
        org.joda.time.ReadablePartial readablePartial26 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int31 = dateTimeField30.getMaximumValue();
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = dateTimeField30.getAsShortText(0L, locale33);
        boolean boolean36 = dateTimeField30.isLenient();
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        int int43 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime40.set(dateTimeFieldType44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        int int48 = mutableDateTime40.get(dateTimeFieldType47);
        int int49 = mutableDateTime40.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfEra();
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar53 = mutableDateTime50.toCalendar(locale52);
        java.util.Calendar calendar54 = mutableDateTime40.toCalendar(locale52);
        java.lang.String str55 = dateTimeField30.getAsShortText(readablePartial37, (int) ' ', locale52);
        java.lang.String str56 = locale52.getDisplayCountry();
        java.lang.String str57 = dateTimeField19.getAsShortText(readablePartial26, 34812148, locale52);
        java.lang.String str58 = locale52.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet59 = locale52.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale52.getDisplayCountry();
        java.lang.String str61 = dateTimeField15.getAsText(49, locale52);
        java.lang.String str62 = locale52.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = locale52.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "59" + "'", str25, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572963083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1644537697083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "32" + "'", str55, "32");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Taiwan" + "'", str56, "Taiwan");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "34812148" + "'", str57, "34812148");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "chinois" + "'", str58, "chinois");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Taiwan" + "'", str60, "Taiwan");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "49" + "'", str61, "49");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Taiwan" + "'", str62, "Taiwan");
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        dateTimeParserBucket5.setOffset((java.lang.Integer) 34857987);
        org.joda.time.Chronology chronology8 = dateTimeParserBucket5.getChronology();
        int int9 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 34857987 + "'", int9 == 34857987);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        int int7 = mutableDateTime1.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 125 + "'", int6 == 125);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = mutableDateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone22);
        mutableDateTime4.setZone(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.lang.String str57 = dateTimeField30.getAsShortText(1L, locale54);
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.lang.String str59 = dateTimeZone22.getShortName((long) 6, locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        mutableDateTime0.setMillisOfDay(2000);
        mutableDateTime0.setMillis(1644784985501L);
        org.joda.time.MutableDateTime mutableDateTime65 = mutableDateTime0.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 133 + "'", int9 == 133);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:49:23.133Z" + "'", str15, "2022-02-11T09:49:23.133Z");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "vendredi" + "'", str38, "vendredi");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ven." + "'", str56, "ven.");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale12, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket15.getZone();
        java.lang.String str17 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.yearOfEra();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property23.getFieldType();
        mutableDateTime21.set(dateTimeFieldType26, 1303);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime30.set(dateTimeFieldType34, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        int int38 = mutableDateTime30.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime39 = mutableDateTime30.toDateTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addYears(0);
        mutableDateTime30.setDate((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime30.addMillis((int) (byte) 0);
        int int50 = mutableDateTime30.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime30.property(dateTimeFieldType51);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.minuteOfHour();
        org.joda.time.Chronology chronology67 = chronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology61.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        long long73 = chronology61.add(readablePeriod70, (long) 166, 34824770);
        org.joda.time.DurationField durationField74 = durationFieldType53.getField(chronology61);
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType26.getField(chronology61);
        org.joda.time.ReadablePartial readablePartial76 = null;
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now();
        mutableDateTime78.addHours((int) (short) 0);
        mutableDateTime78.addWeekyears((int) 'a');
        mutableDateTime78.setWeekyear(74416135);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime78.copy();
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        mutableDateTime78.add(readablePeriod86, 34898664);
        java.util.Locale locale91 = new java.util.Locale("anglais (Royaume-Uni)", "0237-02-11T09:40:32.406Z");
        java.lang.String str92 = locale91.getScript();
        java.lang.String str93 = locale91.getDisplayVariant();
        java.util.Calendar calendar94 = mutableDateTime78.toCalendar(locale91);
        java.lang.String str95 = dateTimeField75.getAsText(readablePartial76, 74737210, locale91);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 166L + "'", long73 == 166L);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertEquals(locale91.toString(), "anglais (royaume-uni)_0237-02-11T09:40:32.406Z");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(calendar94);
// flaky:         org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=2348284236601763157,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=74416135,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=157,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "74737210" + "'", str95, "74737210");
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter2.getChronology();
        boolean boolean13 = dateTimeFormatter2.isOffsetParsed();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 74534);
        int int19 = mutableDateTime18.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.year();
        int int21 = mutableDateTime18.getSecondOfDay();
        long long22 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2818 + "'", int15 == 2818);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74 + "'", int21 == 74);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 848L + "'", long22 == 848L);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.centuryOfEra();
        int int21 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.yearOfEra();
        java.lang.String str24 = property23.getAsText();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        org.joda.time.MutableDateTime mutableDateTime27 = property23.add((long) 439);
        int int28 = mutableDateTime27.getDayOfWeek();
        mutableDateTime27.setMillis((long) 34883740);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.era();
        mutableDateTime27.addHours(389);
        boolean boolean34 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime36.set(dateTimeFieldType40, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        int int44 = mutableDateTime36.get(dateTimeFieldType43);
        int int45 = mutableDateTime36.getWeekOfWeekyear();
        org.joda.time.Instant instant46 = mutableDateTime36.toInstant();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime36.dayOfWeek();
        mutableDateTime36.addWeekyears(796);
        int int50 = mutableDateTime36.getYearOfEra();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime36.monthOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = mutableDateTime53.isEqual(readableInstant54);
        int int56 = mutableDateTime53.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime53.set(dateTimeFieldType57, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        int int61 = mutableDateTime53.get(dateTimeFieldType60);
        org.joda.time.Instant instant62 = mutableDateTime53.toInstant();
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) mutableDateTime53);
        boolean boolean64 = mutableDateTime27.isEqual((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74963 + "'", int7 == 74963);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:49:23.215Z" + "'", str16, "2022-02-11T09:49:23.215Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 215 + "'", int21 == 215);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2818 + "'", int50 == 2818);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology15, locale17, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField21 = chronology15.halfdays();
        org.joda.time.DurationField durationField22 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField25 = chronology15.minutes();
        org.joda.time.DurationField durationField26 = chronology15.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(640, 74469, 74701, 131, 35131966, 57501, 34837044, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 131 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('x', "634");
        java.util.Locale.Builder builder7 = builder2.clear();
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        java.lang.String str7 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.monthOfYear();
        int int9 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:23.291Z" + "'", str5, "2022-02-11T09:49:23.291Z");
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T09:49:23.291Z" + "'", str7, "2022-02-11T09:49:23.291Z");
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 49 + "'", int9 == 49);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 34898664);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter4.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter4.getParser();
        boolean boolean7 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter4.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withZoneUTC();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withLocale(locale12);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.lang.String str16 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = new java.util.Locale("");
        java.lang.String str19 = locale15.getDisplayScript(locale18);
        java.lang.String str20 = locale12.getDisplayLanguage(locale18);
        java.lang.String str21 = locale12.getISO3Country();
        boolean boolean22 = mutableDateTime1.equals((java.lang.Object) locale12);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.Chronology chronology31 = dateTimeParserBucket29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekyear();
        org.joda.time.DurationField durationField35 = chronology31.weeks();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) "34962680", chronology31);
        org.joda.time.DateTime dateTime37 = mutableDateTime1.toDateTime(chronology31);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.setMillisOfSecond(423);
        mutableDateTime1.setYear(0);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str16, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Chinese" + "'", str20, "Chinese");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CHN" + "'", str21, "CHN");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:49:22.145Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:49:22.145z");
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField18 = chronology16.months();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.yearOfCentury();
        long long21 = dateTimeField19.roundFloor((long) 483);
        int int22 = dateTimeField19.getMinimumValue();
        int int23 = dateTimeField19.getMinimumValue();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = locale27.getDisplayScript(locale28);
        java.lang.String str32 = locale28.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField19.set(66831L, "1970-01-01T00:00:00.791Z", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.791Z\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:23.334Z" + "'", str5, "2022-02-11T09:49:23.334Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = dateTimeField15.set(0L, 74963);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74963 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withZoneUTC();
        boolean boolean20 = dateTimeFormatter18.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter18.getPrinter();
        java.io.Writer writer22 = null;
        org.joda.time.ReadablePartial readablePartial23 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(writer22, readablePartial23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(dateTimePrinter21);
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter20.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(772);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withDefaultYear(460);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 74443);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = mutableDateTime34.toString(dateTimeFormatter37);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        java.lang.String str47 = dateTimeZone45.getNameKey((long) (byte) 0);
        mutableDateTime34.setZoneRetainFields(dateTimeZone45);
        org.joda.time.Chronology chronology49 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType32.getField(chronology49);
        int int52 = mutableDateTime31.get(dateTimeFieldType32);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime31.year();
        int int54 = mutableDateTime31.getMinuteOfHour();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        java.lang.String str59 = dateTimeZone56.getName((long) 2);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        mutableDateTime31.setZoneRetainFields(dateTimeZone56);
        int int63 = dateTimeZone56.getOffset(398488L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter29.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology65 = dateTimeFormatter64.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeFormatter64.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:49:23.371Z" + "'", str38, "2022-02-11T09:49:23.371Z");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 40 + "'", int54 == 40);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add(0L);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.roundHalfFloor();
        java.lang.String str27 = mutableDateTime26.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2023-01-01T00:00:00.000Z" + "'", str27, "2023-01-01T00:00:00.000Z");
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        mutableDateTime11.setMillisOfDay(369);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.toMutableDateTime();
        mutableDateTime14.addMillis(74570785);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 406 + "'", int7 == 406);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572963406L + "'", long10 == 1644572963406L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale9, (java.lang.Integer) 9, 59);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket12.saveField(dateTimeFieldType14, 59);
        boolean boolean17 = mutableDateTime1.isSupported(dateTimeFieldType14);
        int int18 = mutableDateTime1.getDayOfWeek();
        int int19 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        long long30 = mutableDateTime21.getMillis();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.centuryOfEra();
        org.joda.time.Instant instant32 = mutableDateTime21.toInstant();
        boolean boolean33 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.days();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.dayOfMonth();
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology42, locale47);
        java.lang.Integer int49 = dateTimeParserBucket48.getPivotYear();
        java.lang.Integer int50 = dateTimeParserBucket48.getPivotYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        int int55 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime52.set(dateTimeFieldType56, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        int int60 = mutableDateTime52.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = mutableDateTime52.toDateTime();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket68.getZone();
        org.joda.time.Chronology chronology70 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = locale72.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology70, locale72, (java.lang.Integer) 2022);
        java.util.Locale locale76 = locale72.stripExtensions();
        java.lang.String str77 = locale76.getScript();
        java.lang.String str78 = locale76.getISO3Language();
        java.util.Calendar calendar79 = dateTime61.toCalendar(locale76);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime61.getZone();
        long long83 = dateTimeZone80.convertLocalToUTC((long) 65, true);
        dateTimeParserBucket48.setZone(dateTimeZone80);
        mutableDateTime21.setZone(dateTimeZone80);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime21.year();
        org.joda.time.MutableDateTime mutableDateTime87 = property86.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 419 + "'", int6 == 419);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 419 + "'", int27 == 419);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572963419L + "'", long30 == 1644572963419L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNull(int49);
        org.junit.Assert.assertNull(int50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fra" + "'", str78, "fra");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1644537697419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 65L + "'", long83 == 65L);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology10.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        org.joda.time.DurationField durationField14 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.year();
        java.util.Locale locale18 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        int int19 = dateTimeField15.getMaximumTextLength(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        int int27 = dateTimeField23.getDifference((long) 10, (long) 'a');
        int int29 = dateTimeField23.getLeapAmount((-1L));
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = dateTimeField23.getAsText((long) 340, locale31);
        java.lang.String str33 = dateTimeField15.getAsShortText(6, locale31);
        java.util.Locale.Builder builder34 = builder0.setLocale(locale31);
        java.util.Locale.Builder builder36 = builder0.removeUnicodeLocaleAttribute("74583");
        java.util.Locale.Builder builder37 = builder36.clearExtensions();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "6" + "'", str33, "6");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str13 = dateTimeZone8.getID();
        long long15 = dateTimeZone8.nextTransition((long) (byte) 0);
        long long17 = dateTimeZone8.convertUTCToLocal(1644537697249L);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        int int30 = dateTimeField29.getMaximumValue();
        mutableDateTime21.setRounding(dateTimeField29);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = dateTimeField29.getAsShortText((int) (byte) 1, locale33);
        java.util.Locale locale35 = locale33.stripExtensions();
        java.util.Locale locale36 = locale33.stripExtensions();
        boolean boolean37 = locale33.hasExtensions();
        java.lang.String str38 = dateTimeZone8.getShortName((long) 226, locale33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644537697249L + "'", long17 == 1644537697249L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfEra();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar10 = mutableDateTime7.toCalendar(locale9);
        mutableDateTime7.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfDay();
        int int14 = mutableDateTime7.getDayOfWeek();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setMillisOfDay(0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean26 = mutableDateTime19.isSupported(dateTimeFieldType25);
        int int27 = mutableDateTime19.getCenturyOfEra();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        mutableDateTime19.setZone(dateTimeZone34);
        mutableDateTime7.setZoneRetainFields(dateTimeZone34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime38.toMutableDateTime();
        boolean boolean40 = mutableDateTime7.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        java.lang.Object obj41 = mutableDateTime38.clone();
        org.joda.time.Instant instant42 = mutableDateTime38.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setDayOfYear((-52));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -52 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572963484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=484,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "2022-02-11T09:49:23.484Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "2022-02-11T09:49:23.484Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "2022-02-11T09:49:23.484Z");
        org.junit.Assert.assertNotNull(instant42);
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        double double7 = languageRange1.getWeight();
        boolean boolean9 = languageRange1.equals((java.lang.Object) (-1404779169L));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "twn" + "'", str4, "twn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "twn" + "'", str5, "twn");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "twn" + "'", str6, "twn");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime2.getZone();
        org.joda.time.Chronology chronology10 = mutableDateTime2.getChronology();
        boolean boolean11 = durationFieldType0.isSupported(chronology10);
        java.lang.String str12 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "halfdays" + "'", str12, "halfdays");
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = mutableDateTime5.toString(dateTimeFormatter8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = mutableDateTime5.getChronology();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        mutableDateTime5.addMinutes((int) 'u');
        org.joda.time.Chronology chronology15 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.getMutableDateTime();
        mutableDateTime17.addMinutes(725);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:49:23.522Z" + "'", str9, "2022-02-11T09:49:23.522Z");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 74416135);
        mutableDateTime1.addHours(665);
        int int4 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.lang.String str5 = property2.getAsText();
        java.lang.String str6 = property2.toString();
        org.joda.time.MutableDateTime mutableDateTime7 = property2.roundCeiling();
        int int8 = property2.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = property2.roundHalfCeiling();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeFormatter12.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatter12.getParser();
        boolean boolean15 = dateTimeFormatter12.isParser();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology23.add(readablePeriod25, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter12.withChronology(chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withOffsetParsed();
        boolean boolean31 = dateTimeFormatter30.isOffsetParsed();
        org.joda.time.Chronology chronology32 = dateTimeFormatter30.getChronology();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        long long41 = dateTimeParserBucket38.computeMillis(true);
        org.joda.time.Chronology chronology42 = dateTimeParserBucket38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        java.util.TimeZone timeZone44 = null;
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        java.lang.String str48 = dateTimeZone45.getName((long) 2);
        java.util.TimeZone timeZone49 = dateTimeZone45.toTimeZone();
        org.joda.time.Chronology chronology50 = chronology42.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter30.withChronology(chronology50);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = dateTimeFormatter30.getPrinter();
        org.joda.time.Chronology chronology53 = dateTimeFormatter30.getChronolgy();
        mutableDateTime9.setChronology(chronology53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vendredi" + "'", str5, "vendredi");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[dayOfWeek]" + "'", str6, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNull(dateTimeZone13);
        org.junit.Assert.assertNull(dateTimeParser14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNull(dateTimePrinter52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(94);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) 74449, dateTimeZone2);
        int int4 = mutableDateTime3.getHourOfDay();
        int int5 = mutableDateTime3.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.weekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        java.util.Locale locale11 = new java.util.Locale("2022-02-11T09:40:39.222Z", "2022-02-11T09:40:38.001Z");
        java.util.Locale locale12 = java.util.Locale.UK;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfWeek();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = null;
        int int19 = property15.getMaximumTextLength(locale18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        int int30 = dateTimeField29.getMaximumValue();
        mutableDateTime21.setRounding(dateTimeField29);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = dateTimeField29.getAsShortText((int) (byte) 1, locale33);
        java.lang.String str35 = property15.getAsShortText(locale33);
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale33.getDisplayScript(locale36);
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale33.getDisplayLanguage(locale39);
        java.lang.String str41 = locale12.getDisplayCountry(locale39);
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str43 = locale11.getDisplayScript(locale39);
        java.lang.String str44 = property6.getAsText(locale11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 74 + "'", int5 == 74);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals(locale11.toString(), "2022-02-11t09:40:39.222z_2022-02-11T09:40:38.001Z");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "vendredi" + "'", str17, "vendredi");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ven." + "'", str35, "ven.");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "French" + "'", str40, "French");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "United Kingdom" + "'", str41, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        boolean boolean10 = durationFieldType0.isSupported(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        java.lang.String str18 = durationFieldType17.toString();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        long long27 = dateTimeParserBucket24.computeMillis(true);
        org.joda.time.Chronology chronology28 = dateTimeParserBucket24.getChronology();
        org.joda.time.Chronology chronology29 = chronology28.withUTC();
        boolean boolean30 = durationFieldType17.isSupported(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        int int33 = dateTimeField31.getMinimumValue((long) 97840);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        int int41 = dateTimeField37.getDifference((long) 10, (long) 'a');
        int int43 = dateTimeField37.getMaximumValue((long) (byte) 1);
        java.lang.String str45 = dateTimeField37.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial46 = null;
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale49, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        org.joda.time.Chronology chronology54 = dateTimeParserBucket52.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.days();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfYear();
        org.joda.time.ReadablePartial readablePartial57 = null;
        int[] intArray63 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int64 = dateTimeField56.getMinimumValue(readablePartial57, intArray63);
        int int65 = dateTimeField37.getMaximumValue(readablePartial46, intArray63);
        int int66 = dateTimeField31.getMinimumValue(readablePartial34, intArray63);
        int int67 = dateTimeField14.getMaximumValue(readablePartial15, intArray63);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "seconds" + "'", str18, "seconds");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 59 + "'", int65 == 59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.Instant instant22 = mutableDateTime1.toInstant();
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        org.joda.time.Chronology chronology30 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfHour();
        long long39 = chronology30.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.DurationField durationField40 = chronology30.weeks();
        org.joda.time.DateTime dateTime41 = mutableDateTime1.toDateTime(chronology30);
        int int42 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar46 = mutableDateTime43.toCalendar(locale45);
        mutableDateTime43.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        int int52 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        java.util.Date date63 = mutableDateTime54.toDate();
        org.joda.time.DateTimeZone dateTimeZone64 = mutableDateTime54.getZone();
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        int int67 = dateTimeZone64.getOffsetFromLocal((long) 34835);
        mutableDateTime1.setZoneRetainFields(dateTimeZone64);
        int int69 = mutableDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology70 = mutableDateTime1.getChronology();
        boolean boolean71 = mutableDateTime1.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        boolean boolean74 = mutableDateTime1.isSupported(dateTimeFieldType72);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime1.millisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 7218525L + "'", long39 == 7218525L);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572963595,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=595,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(date63);
        org.junit.Assert.assertEquals(date63.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology8.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyear();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.days();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.dayOfYear();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(0L, chronology42, locale43, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeParserBucket46.getZone();
        org.joda.time.Chronology chronology48 = dateTimeParserBucket46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology48, locale50, (java.lang.Integer) 2022);
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = locale54.getISO3Language();
        java.lang.String str56 = dateTimeField37.getAsText(readablePartial38, 842, locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology23, locale54, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime60.set(dateTimeFieldType64, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime60.getZone();
        long long69 = dateTimeZone67.nextTransition((long) 59);
        java.lang.String str71 = dateTimeZone67.getName((long) (short) 0);
        dateTimeParserBucket58.setZone(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 97018, dateTimeZone67);
        org.joda.time.DateTime dateTime75 = mutableDateTime74.toDateTime();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime74.yearOfEra();
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("Property[dayOfMonth]");
        java.lang.String str79 = property76.getAsText(locale78);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket(1647887446544L, chronology8, locale78);
        org.joda.time.Chronology chronology82 = null;
        java.util.Locale locale83 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket(0L, chronology82, locale83, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone87 = dateTimeParserBucket86.getZone();
        long long89 = dateTimeParserBucket86.computeMillis(true);
        org.joda.time.Chronology chronology90 = dateTimeParserBucket86.getChronology();
        org.joda.time.Chronology chronology91 = chronology90.withUTC();
        org.joda.time.DateTimeField dateTimeField92 = chronology90.yearOfEra();
        org.joda.time.DateTimeField dateTimeField93 = chronology90.hourOfHalfday();
        long long96 = dateTimeField93.getDifferenceAsLong((long) (byte) 10, 34813222L);
        dateTimeParserBucket80.saveField(dateTimeField93, 34916342);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fra" + "'", str55, "fra");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "842" + "'", str56, "842");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 59L + "'", long69 == 59L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1970" + "'", str79, "1970");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-9L) + "'", long96 == (-9L));
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.lang.String str24 = dateTimeField20.getAsText((long) 319, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 100, chronology9, locale23);
        org.joda.time.DateTimeField dateTimeField26 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = chronology9.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        int int10 = mutableDateTime9.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.minuteOfHour();
        int int18 = mutableDateTime12.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType19.getField(chronology20);
        int int22 = dateTimeField21.getMaximumValue();
        int int25 = dateTimeField21.getDifference((long) 10, (long) 'a');
        int int27 = dateTimeField21.getLeapAmount((-1L));
        java.util.Locale locale29 = java.util.Locale.ITALY;
        java.lang.String str30 = dateTimeField21.getAsText((long) 340, locale29);
        java.util.Locale locale32 = java.util.Locale.UK;
        java.lang.String str33 = dateTimeField21.getAsShortText((int) '4', locale32);
        org.joda.time.ReadablePartial readablePartial34 = null;
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = dateTimeField21.getAsText(readablePartial34, 292278993, locale36);
        java.util.Calendar calendar38 = mutableDateTime12.toCalendar(locale36);
        org.joda.time.DateTime dateTime39 = mutableDateTime12.toDateTimeISO();
        boolean boolean40 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setSecondOfMinute(76);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 74963 + "'", int18 == 74963);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 59 + "'", int22 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "52" + "'", str33, "52");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "292278993" + "'", str37, "292278993");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644785363667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=23,MILLISECOND=667,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addYears(0);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        boolean boolean30 = mutableDateTime25.isSupported(dateTimeFieldType29);
        int int31 = mutableDateTime10.get(dateTimeFieldType29);
        boolean boolean32 = mutableDateTime1.isSupported(dateTimeFieldType29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime1.add(durationFieldType33, 388);
        java.lang.String str36 = durationFieldType33.getName();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        org.joda.time.Chronology chronology43 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.halfdayOfDay();
        boolean boolean46 = durationFieldType33.isSupported(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.year();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "centuries" + "'", str36, "centuries");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        org.joda.time.DurationField durationField15 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfDay();
        long long18 = dateTimeField16.roundHalfEven((long) 545);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField16.getMaximumValue(readablePartial19);
        long long23 = dateTimeField16.add((long) 74465, 35182);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 545L + "'", long18 == 545L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 86399999 + "'", int20 == 86399999);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 109647L + "'", long23 == 109647L);
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        int int10 = mutableDateTime5.getMillisOfSecond();
        mutableDateTime5.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int17 = dateTimeField16.getMaximumValue();
        int int20 = dateTimeField16.getDifference((long) 10, (long) 'a');
        int int22 = dateTimeField16.getLeapAmount((-1L));
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.lang.String str25 = dateTimeField16.getAsText((long) 340, locale24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField16.getAsShortText((int) '4', locale27);
        org.joda.time.ReadablePartial readablePartial29 = null;
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField16.getAsText(readablePartial29, 292278993, locale31);
        java.lang.String str33 = mutableDateTime5.toString("237", locale31);
        java.util.Locale.Builder builder34 = builder3.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder3.clearExtensions();
        java.util.Locale.Builder builder36 = builder35.clear();
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale locale39 = builder38.build();
        java.util.Locale locale40 = builder38.build();
        java.util.Locale.Builder builder42 = builder38.setVariant("2022");
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale37.getDisplayScript(locale43);
        java.util.Locale.Builder builder45 = builder35.setLocale(locale37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        java.util.Locale locale49 = null;
        java.lang.String str50 = property48.getAsText(locale49);
        java.util.Locale locale51 = null;
        int int52 = property48.getMaximumTextLength(locale51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        mutableDateTime54.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        int int63 = dateTimeField62.getMaximumValue();
        mutableDateTime54.setRounding(dateTimeField62);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = dateTimeField62.getAsShortText((int) (byte) 1, locale66);
        java.lang.String str68 = property48.getAsShortText(locale66);
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = locale69.getScript();
        java.lang.String str71 = locale66.getDisplayScript(locale69);
        java.util.Locale locale72 = java.util.Locale.US;
        java.lang.String str73 = locale66.getDisplayLanguage(locale72);
        java.util.Locale.setDefault(locale66);
        java.util.Locale locale75 = locale66.stripExtensions();
        java.util.Locale.Builder builder76 = builder35.setLocale(locale66);
        java.util.Locale locale77 = builder35.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder79 = builder35.addUnicodeLocaleAttribute("2022-02-11T09:46:14.345Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:46:14.345Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 747 + "'", int10 == 747);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "292278993" + "'", str32, "292278993");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "237" + "'", str33, "237");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "vendredi" + "'", str50, "vendredi");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ven." + "'", str68, "ven.");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "French" + "'", str73, "French");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime5.toMutableDateTime();
        int int12 = mutableDateTime5.getMinuteOfHour();
        mutableDateTime5.addDays(831);
        boolean boolean15 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.Chronology chronology23 = mutableDateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.yearOfEra();
        mutableDateTime1.setRounding(dateTimeField28);
        mutableDateTime1.addDays(57478041);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        boolean boolean11 = dateTimeParserBucket5.restoreState((java.lang.Object) property10);
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        int int13 = property10.getMinimumValueOverall();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfWeek();
        java.util.Locale locale17 = null;
        java.lang.String str18 = property16.getAsText(locale17);
        org.joda.time.MutableDateTime mutableDateTime20 = property16.add(457);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfWeek();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        int int30 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology32, locale33, (java.lang.Integer) 9, 59);
        java.lang.Object obj37 = dateTimeParserBucket36.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket36.saveField(dateTimeFieldType38, 59);
        boolean boolean41 = mutableDateTime25.isSupported(dateTimeFieldType38);
        int int42 = mutableDateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        int int43 = mutableDateTime25.getMinuteOfDay();
        mutableDateTime25.addMinutes(34810005);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime25.copy();
        int int47 = mutableDateTime46.getEra();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime46.dayOfMonth();
        int int49 = mutableDateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime46);
        mutableDateTime46.setMillis((long) 751);
        int int52 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = mutableDateTime54.isEqual(readableInstant55);
        int int57 = mutableDateTime54.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime54.set(dateTimeFieldType58, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        int int62 = mutableDateTime54.get(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = mutableDateTime54.toDateTime();
        java.util.Locale locale64 = null;
        java.util.Calendar calendar65 = mutableDateTime54.toCalendar(locale64);
        mutableDateTime54.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime54.millisOfDay();
        mutableDateTime54.addMonths(281);
        mutableDateTime54.addSeconds(969);
        boolean boolean73 = mutableDateTime46.isEqual((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime46.minuteOfDay();
        int int75 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone76 = mutableDateTime46.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "vendredi" + "'", str18, "vendredi");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 785 + "'", int30 == 785);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1249 + "'", int43 == 1249);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644537697786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        int int16 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        int int21 = mutableDateTime18.getHourOfDay();
        mutableDateTime18.addDays(0);
        int int24 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(901);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 901 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=816,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 816 + "'", int16 == 816);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        org.joda.time.Instant instant30 = mutableDateTime21.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser36 = dateTimeFormatter34.getParser();
        boolean boolean37 = dateTimeFormatter34.isParser();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        org.joda.time.Chronology chronology45 = dateTimeParserBucket43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.days();
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = chronology45.add(readablePeriod47, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter34.withChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType31.getField(chronology45);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType31.getRangeDurationType();
        int int54 = instant30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime55 = instant30.toDateTimeISO();
        boolean boolean56 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572963831,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=831,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNull(dateTimeZone35);
        org.junit.Assert.assertNull(dateTimeParser36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        java.util.GregorianCalendar gregorianCalendar46 = mutableDateTime24.toGregorianCalendar();
        int int47 = mutableDateTime24.getEra();
        int int48 = mutableDateTime24.getCenturyOfEra();
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        java.lang.Object obj56 = dateTimeParserBucket54.saveState();
        long long57 = dateTimeParserBucket54.computeMillis();
        java.lang.Object obj58 = dateTimeParserBucket54.saveState();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket54.getZone();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone59);
        mutableDateTime24.setZone(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 879 + "'", int29 == 879);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 29248 + "'", int48 == 29248);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        int int10 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology19, locale24);
        org.joda.time.DateTimeField dateTimeField26 = chronology19.secondOfDay();
        int int28 = dateTimeField26.getMaximumValue((long) 377);
        mutableDateTime1.setRounding(dateTimeField26);
        int int30 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 905 + "'", int6 == 905);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 86399 + "'", int28 == 86399);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        java.lang.String str10 = locale7.getScript();
        int int11 = property1.getMaximumTextLength(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property1.getFieldType();
        java.lang.String str13 = property1.getAsShortText();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfHour();
        int int21 = mutableDateTime15.getSecondOfDay();
        mutableDateTime15.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology24 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.secondOfDay();
        long long27 = dateTimeField25.roundHalfCeiling(166L);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-11T09:40:47.275Z");
        int int30 = dateTimeField25.getMaximumTextLength(locale29);
        int int31 = property1.getMaximumShortTextLength(locale29);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 74963 + "'", int21 == 74963);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        mutableDateTime0.setYear(74418645);
        mutableDateTime0.addSeconds(215);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime0.isBefore(readableInstant39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime0.add(readablePeriod41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        int int52 = mutableDateTime44.get(dateTimeFieldType51);
        org.joda.time.DateTime dateTime53 = mutableDateTime44.toDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        mutableDateTime55.addYears(0);
        mutableDateTime44.setDate((org.joda.time.ReadableInstant) mutableDateTime55);
        mutableDateTime44.addMillis((int) (byte) 0);
        int int64 = mutableDateTime44.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime44.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getRangeDurationType();
        java.lang.String str68 = durationFieldType67.toString();
        mutableDateTime0.add(durationFieldType67, 35283869);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572963939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=23,MILLISECOND=939,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "days" + "'", str68, "days");
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        org.joda.time.Chronology chronology16 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.monthOfYear();
        dateTimeParserBucket5.saveField(dateTimeField17, 993);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        mutableDateTime21.addSeconds(839);
        mutableDateTime21.addWeekyears(0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        mutableDateTime29.addHours(59);
        int int34 = mutableDateTime29.getMillisOfSecond();
        mutableDateTime29.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        int int44 = dateTimeField40.getDifference((long) 10, (long) 'a');
        int int46 = dateTimeField40.getLeapAmount((-1L));
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.lang.String str49 = dateTimeField40.getAsText((long) 340, locale48);
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = dateTimeField40.getAsShortText((int) '4', locale51);
        org.joda.time.ReadablePartial readablePartial53 = null;
        java.util.Locale locale55 = java.util.Locale.UK;
        java.lang.String str56 = dateTimeField40.getAsText(readablePartial53, 292278993, locale55);
        java.lang.String str57 = mutableDateTime29.toString("237", locale55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        mutableDateTime59.addYears(0);
        org.joda.time.Chronology chronology66 = null;
        java.util.Locale locale67 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket(0L, chronology66, locale67, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeParserBucket70.getZone();
        mutableDateTime59.setZoneRetainFields(dateTimeZone71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = mutableDateTime74.isEqual(readableInstant75);
        int int77 = mutableDateTime74.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        boolean boolean79 = mutableDateTime74.isSupported(dateTimeFieldType78);
        int int80 = mutableDateTime59.get(dateTimeFieldType78);
        boolean boolean81 = mutableDateTime29.isSupported(dateTimeFieldType78);
        boolean boolean82 = mutableDateTime21.isSupported(dateTimeFieldType78);
        dateTimeParserBucket5.saveField(dateTimeFieldType78, 826);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = dateTimeParserBucket5.computeMillis(false);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 993 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 969 + "'", int34 == 969);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "52" + "'", str52, "52");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "292278993" + "'", str56, "292278993");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "237" + "'", str57, "237");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        java.lang.String str7 = dateTimeZone6.getID();
        long long11 = dateTimeZone6.convertLocalToUTC((long) 5, false, (long) 0);
        int int13 = dateTimeZone6.getOffset(0L);
        java.lang.String str14 = dateTimeZone6.getID();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 5L + "'", long11 == 5L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.add(6L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.minuteOfHour();
        int int17 = mutableDateTime11.getSecondOfDay();
        mutableDateTime11.setSecondOfDay((int) (byte) 0);
        mutableDateTime11.setHourOfDay(0);
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        int int23 = mutableDateTime11.getSecondOfDay();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        org.joda.time.DurationField durationField34 = chronology32.days();
        boolean boolean35 = durationFieldType24.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.centuryOfEra();
        long long39 = dateTimeField36.add((long) 74424, 381);
        mutableDateTime11.setRounding(dateTimeField36);
        int int41 = mutableDateTime11.getMillisOfDay();
        boolean boolean43 = mutableDateTime11.isAfter((long) 1117963);
        mutableDateTime11.add((long) 390);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572964001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 49 + "'", int7 == 49);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 74964 + "'", int17 == 74964);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1202319936074424L + "'", long39 == 1202319936074424L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime27 = property23.set(35065);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.copy();
        int int29 = mutableDateTime27.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale6 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket(0L, chronology5, locale6, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeParserBucket9.getZone();
        org.joda.time.Chronology chronology11 = dateTimeParserBucket9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.lang.String str14 = locale13.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology11, locale13, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = chronology11.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.minuteOfHour();
        org.joda.time.DurationField durationField21 = durationFieldType2.getField(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addDays(0);
        int int18 = mutableDateTime12.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.weekyear();
        mutableDateTime12.add((long) 993);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.toMutableDateTimeISO();
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime12.addYears(280);
        boolean boolean30 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        java.util.Date date31 = mutableDateTime1.toDate();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785364081L + "'", long9 == 1644785364081L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785364081L + "'", long10 == 1644785364081L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 81 + "'", int18 == 81);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Sun Feb 13 20:49:24 UTC 2022");
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable2);
        java.io.IOException iOException4 = new java.io.IOException("hi!", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException4);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 74415);
        mutableDateTime1.setTime((long) 609);
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(352);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 314);
        java.io.Writer writer18 = null;
        org.joda.time.ReadablePartial readablePartial19 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter17.printTo(writer18, readablePartial19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsShortText();
        int int3 = property1.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.ReadablePartial readablePartial5 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.year();
        org.joda.time.DurationField durationField17 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType6.getField(chronology14);
        org.joda.time.ReadablePartial readablePartial19 = null;
        int int20 = dateTimeField18.getMinimumValue(readablePartial19);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial33 = null;
        int[] intArray34 = null;
        int int35 = dateTimeField32.getMinimumValue(readablePartial33, intArray34);
        long long37 = dateTimeField32.remainder((long) 865);
        org.joda.time.ReadablePartial readablePartial38 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        int int45 = dateTimeField41.getDifference((long) 10, (long) 'a');
        int int47 = dateTimeField41.getMaximumValue((long) (byte) 1);
        java.lang.String str49 = dateTimeField41.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.Chronology chronology52 = null;
        java.util.Locale locale53 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(0L, chronology52, locale53, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.Chronology chronology58 = dateTimeParserBucket56.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.days();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfYear();
        org.joda.time.ReadablePartial readablePartial61 = null;
        int[] intArray67 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int68 = dateTimeField60.getMinimumValue(readablePartial61, intArray67);
        int int69 = dateTimeField41.getMaximumValue(readablePartial50, intArray67);
        int int70 = dateTimeField32.getMinimumValue(readablePartial38, intArray67);
        int int71 = dateTimeField18.getMaximumValue(readablePartial21, intArray67);
        int int72 = dateTimeField4.getMinimumValue(readablePartial5, intArray67);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField4.getType();
        boolean boolean75 = dateTimeField4.isLeap(3124800237L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022" + "'", str2, "2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292278993 + "'", int3 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 865L + "'", long37 == 865L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 999 + "'", int71 == 999);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.Interval interval10 = property9.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property9.getFieldType();
        int int12 = property9.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = property9.addWrapField(695);
        org.joda.time.DateTimeField dateTimeField15 = property9.getField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 135 + "'", int6 == 135);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        long long8 = dateTimeParserBucket5.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        mutableDateTime10.addDays(0);
        int int16 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.weekyear();
        int int18 = mutableDateTime10.getMonthOfYear();
        mutableDateTime10.addDays(5);
        boolean boolean22 = mutableDateTime10.isAfter((long) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = mutableDateTime24.toDateTime();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime24.toCalendar(locale34);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime24.getZone();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        mutableDateTime10.setZoneRetainFields(dateTimeZone44);
        dateTimeParserBucket5.setZone(dateTimeZone44);
        long long51 = dateTimeParserBucket5.computeMillis(false, "2022-02-11T09:41:29.160-00:00:00.001");
        long long53 = dateTimeParserBucket5.computeMillis(true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 145 + "'", int16 == 145);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1644537697145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.DurationField durationField18 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.minuteOfDay();
        org.joda.time.DurationField durationField21 = dateTimeField20.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:24.161Z" + "'", str5, "2022-02-11T09:49:24.161Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int8 = dateTimeField7.getMaximumValue();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = dateTimeField7.getAsShortText(0L, locale10);
        boolean boolean13 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        int int25 = mutableDateTime17.get(dateTimeFieldType24);
        int int26 = mutableDateTime17.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.yearOfEra();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar30 = mutableDateTime27.toCalendar(locale29);
        java.util.Calendar calendar31 = mutableDateTime17.toCalendar(locale29);
        java.lang.String str32 = dateTimeField7.getAsShortText(readablePartial14, (int) ' ', locale29);
        int int33 = property4.getMaximumShortTextLength(locale29);
        java.lang.String str34 = locale29.toLanguageTag();
        java.lang.String str35 = locale29.getDisplayCountry();
        int int36 = property1.getMaximumTextLength(locale29);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        int int43 = mutableDateTime38.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int45 = mutableDateTime38.get(dateTimeFieldType44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime38.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        int int48 = mutableDateTime38.get(dateTimeFieldType47);
        int int49 = mutableDateTime38.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.add((long) 779);
        org.joda.time.MutableDateTime mutableDateTime54 = property50.add((long) 853);
        org.joda.time.Chronology chronology55 = mutableDateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) property1, chronology55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572964172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644537697172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "32" + "'", str32, "32");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-TW" + "'", str34, "zh-TW");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Taiwan" + "'", str35, "Taiwan");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 172 + "'", int43 == 172);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 74964172 + "'", int49 == 74964172);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        java.lang.Integer int9 = dateTimeParserBucket6.getOffsetInteger();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.hours();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = null;
        java.lang.String str25 = mutableDateTime21.toString(dateTimeFormatter24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(0L, chronology27, locale28, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket31.getZone();
        java.lang.String str34 = dateTimeZone32.getNameKey((long) (byte) 0);
        mutableDateTime21.setZoneRetainFields(dateTimeZone32);
        mutableDateTime14.setZone(dateTimeZone32);
        long long38 = dateTimeZone32.previousTransition((long) 852);
        long long41 = dateTimeZone32.adjustOffset((long) 580, true);
        long long45 = dateTimeZone32.convertLocalToUTC((long) 879, false, (long) 852);
        org.joda.time.Chronology chronology46 = chronology10.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfDay();
        org.joda.time.DurationField durationField48 = chronology46.millis();
        org.joda.time.Chronology chronology51 = null;
        java.util.Locale locale52 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(0L, chronology51, locale52, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeParserBucket55.getZone();
        org.joda.time.Chronology chronology57 = dateTimeParserBucket55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.monthOfYear();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField61 = chronology57.hours();
        org.joda.time.DateTimeField dateTimeField62 = chronology57.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology57.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType64.getField(chronology65);
        int int68 = dateTimeField66.getMinimumValue((long) (short) 10);
        int int70 = dateTimeField66.getMaximumValue((long) 9);
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = locale72.getScript();
        java.lang.String str74 = dateTimeField66.getAsShortText(74409, locale72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 74634, chronology57, locale72, (java.lang.Integer) 558);
        java.lang.String str77 = locale72.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(929L, chronology46, locale72, (java.lang.Integer) 34932);
        org.joda.time.DateTimeField dateTimeField80 = chronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField81 = chronology46.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 203 + "'", int19 == 203);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:49:24.203Z" + "'", str25, "2022-02-11T09:49:24.203Z");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 852L + "'", long38 == 852L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 580L + "'", long41 == 580L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 879L + "'", long45 == 879L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 59 + "'", int70 == 59);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "74409" + "'", str74, "74409");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "TW" + "'", str77, "TW");
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension(' ', "2022-02-11T09:48:17.750+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        mutableDateTime0.addHours(930);
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        mutableDateTime0.setChronology(chronology19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        mutableDateTime27.addHours(59);
        org.joda.time.Chronology chronology32 = mutableDateTime27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology32.getZone();
        mutableDateTime0.setZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(0L, chronology36, locale37, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket40.getZone();
        java.lang.String str42 = dateTimeZone41.getID();
        long long46 = dateTimeZone41.convertLocalToUTC((long) 5, false, (long) 0);
        java.lang.String str47 = dateTimeZone41.getID();
        java.util.TimeZone timeZone48 = dateTimeZone41.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone41);
        mutableDateTime0.addWeekyears(0);
        mutableDateTime0.setYear(906);
        mutableDateTime0.setSecondOfDay(847);
        mutableDateTime0.addMillis(34884021);
        mutableDateTime0.addHours(1240);
        mutableDateTime0.addMinutes(34971);
        int int62 = mutableDateTime0.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setTime(74769, 35359804, 1983600000, 85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74769 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572964262,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=262,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 5L + "'", long46 == 5L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 156 + "'", int62 == 156);
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        dateTimeParserBucket12.setOffset(34852);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTimeParserBucket12.getZone();
        dateTimeParserBucket12.setOffset((java.lang.Integer) 655);
        org.joda.time.Chronology chronology19 = dateTimeParserBucket12.getChronology();
        dateTimeParserBucket12.setOffset(0);
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        java.lang.String str26 = dateTimeZone23.getName((long) 2);
        java.util.TimeZone timeZone27 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long30 = dateTimeZone28.previousTransition((long) 74446);
        dateTimeParserBucket12.setZone(dateTimeZone28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(1317, 35298511, 171, 331, 35269, 703, 10652697, dateTimeZone28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 331 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 74446L + "'", long30 == 74446L);
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T00:01:37.290Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(166);
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = null;
        java.lang.String str8 = mutableDateTime4.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        java.lang.String str16 = dateTimeZone15.getID();
        java.lang.String str18 = dateTimeZone15.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime4.toMutableDateTime(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(obj2, dateTimeZone15);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        java.lang.String str30 = dateTimeZone29.toString();
        boolean boolean32 = dateTimeZone29.isStandardOffset((long) 59);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 4, dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 1, dateTimeZone29);
        long long36 = dateTimeZone15.getMillisKeepLocal(dateTimeZone29, (long) 964);
        org.joda.time.LocalDateTime localDateTime37 = null;
        boolean boolean38 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        long long40 = dateTimeZone29.convertUTCToLocal((long) 569);
        long long42 = dateTimeZone1.getMillisKeepLocal(dateTimeZone29, 1644537720000L);
        java.util.TimeZone timeZone43 = dateTimeZone29.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:49:24.296Z" + "'", str8, "2022-02-11T09:49:24.296Z");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "UTC" + "'", str30, "UTC");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 964L + "'", long36 == 964L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 569L + "'", long40 == 569L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645135320000L + "'", long42 == 1645135320000L);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        java.util.Date date17 = mutableDateTime8.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTime dateTime20 = mutableDateTime8.toDateTime();
        boolean boolean21 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        int int31 = mutableDateTime23.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = mutableDateTime23.toDateTime();
        java.util.Locale locale33 = null;
        java.util.Calendar calendar34 = mutableDateTime23.toCalendar(locale33);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTime dateTime37 = mutableDateTime23.toDateTime(dateTimeZone36);
        java.lang.String str38 = mutableDateTime23.toString();
        org.joda.time.Chronology chronology39 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime20.toMutableDateTime(chronology39);
        int int42 = dateTime20.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644537697312,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=312,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T00:01:37.312Z" + "'", str38, "2022-02-11T00:01:37.312Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        boolean boolean11 = dateTimeFormatter10.isParser();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.days();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter10.withChronology(chronology19);
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter10.getParser();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeParser25);
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fran\347ais" + "'", str4, "fran\347ais");
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfDay();
        org.joda.time.ReadablePartial readablePartial25 = null;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfWeek();
        java.lang.String str36 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfMinute();
        java.lang.String str38 = dateTimeField37.getName();
        long long41 = dateTimeField37.addWrapField(74L, 895);
        org.joda.time.ReadablePartial readablePartial42 = null;
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology44, locale45, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone49 = dateTimeParserBucket48.getZone();
        org.joda.time.Chronology chronology50 = dateTimeParserBucket48.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.secondOfDay();
        org.joda.time.ReadablePartial readablePartial55 = null;
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.days();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfYear();
        org.joda.time.ReadablePartial readablePartial67 = null;
        int[] intArray73 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int74 = dateTimeField66.getMinimumValue(readablePartial67, intArray73);
        int[] intArray76 = dateTimeField54.addWrapPartial(readablePartial55, 6, intArray73, 0);
        int int77 = dateTimeField37.getMinimumValue(readablePartial42, intArray73);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField24.addWrapPartial(readablePartial25, 360, intArray73, 74545);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "secondOfMinute" + "'", str38, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 55074L + "'", long41 == 55074L);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int13 = dateTimeField12.getMaximumValue();
        int int16 = dateTimeField12.getDifference((long) 10, (long) 'a');
        int int18 = dateTimeField12.getLeapAmount((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField12.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        int int27 = dateTimeField23.getDifference((long) 10, (long) 'a');
        int int29 = dateTimeField23.getLeapAmount((-1L));
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = dateTimeField23.getAsText((long) 340, locale31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = dateTimeField23.getAsShortText((int) '4', locale34);
        org.joda.time.ReadablePartial readablePartial36 = null;
        java.util.Locale locale38 = java.util.Locale.UK;
        java.lang.String str39 = dateTimeField23.getAsText(readablePartial36, 292278993, locale38);
        java.util.Locale locale40 = locale38.stripExtensions();
        java.lang.String str41 = locale40.getDisplayScript();
        dateTimeParserBucket5.saveField(dateTimeFieldType19, "2022-02-11T09:40:51.989Z", locale40);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket5.getZone();
        org.joda.time.DateTimeField dateTimeField44 = null;
        dateTimeParserBucket5.saveField(dateTimeField44, 35284);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = dateTimeParserBucket5.computeMillis(true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "52" + "'", str35, "52");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "292278993" + "'", str39, "292278993");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        java.util.Locale locale5 = null;
        java.util.Calendar calendar6 = mutableDateTime1.toCalendar(locale5);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        java.lang.String str16 = dateTimeZone14.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone14);
        org.joda.time.Chronology chronology18 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.hourOfDay();
        mutableDateTime1.setTime((long) 624);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(35128682);
        int int25 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572964384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 330 + "'", int25 == 330);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekyear();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundHalfFloor();
        org.joda.time.ReadablePartial readablePartial8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = property4.compareTo(readablePartial8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 292278993 + "'", int5 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = java.util.Locale.JAPANESE;
        java.util.Locale.Builder builder3 = builder0.setLocale(locale2);
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale locale7 = builder6.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setUnicodeLocaleKeyword("", "2022-02-11T09:49:04.587+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ja");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar15 = mutableDateTime12.toCalendar(locale14);
        mutableDateTime12.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.millisOfDay();
        int int19 = mutableDateTime12.getDayOfWeek();
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int21 = mutableDateTime12.getRoundingMode();
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfDay();
        long long24 = mutableDateTime1.getMillis();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572964412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=412,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644572964412L + "'", long24 == 1644572964412L);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        java.util.Locale locale0 = java.util.Locale.UK;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfWeek();
        java.util.Locale locale4 = null;
        java.lang.String str5 = property3.getAsText(locale4);
        java.util.Locale locale6 = null;
        int int7 = property3.getMaximumTextLength(locale6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        mutableDateTime9.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int18 = dateTimeField17.getMaximumValue();
        mutableDateTime9.setRounding(dateTimeField17);
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = dateTimeField17.getAsShortText((int) (byte) 1, locale21);
        java.lang.String str23 = property3.getAsShortText(locale21);
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.lang.String str25 = locale24.getScript();
        java.lang.String str26 = locale21.getDisplayScript(locale24);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale21.getDisplayLanguage(locale27);
        java.lang.String str29 = locale0.getDisplayCountry(locale27);
        boolean boolean30 = locale27.hasExtensions();
        java.lang.String str31 = locale27.getDisplayName();
        java.util.Locale locale32 = locale27.stripExtensions();
        boolean boolean33 = locale32.hasExtensions();
        java.lang.String str34 = locale32.getDisplayVariant();
        java.lang.String str35 = locale32.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "vendredi" + "'", str5, "vendredi");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ven." + "'", str23, "ven.");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "French" + "'", str28, "French");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "United Kingdom" + "'", str29, "United Kingdom");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "anglais (Etats-Unis)" + "'", str31, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "USA" + "'", str35, "USA");
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        mutableDateTime1.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology10, locale11, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket14.getZone();
        long long17 = dateTimeParserBucket14.computeMillis(true);
        org.joda.time.Chronology chronology18 = dateTimeParserBucket14.getChronology();
        org.joda.time.Chronology chronology19 = chronology18.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.yearOfCentury();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        int int10 = property8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        int int14 = dateTimeField13.getMaximumValue();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        java.lang.String str18 = dateTimeField13.getAsShortText(0L, locale16);
        int int19 = property8.getMaximumTextLength(locale16);
        java.lang.String str20 = dateTimeField2.getAsShortText(0L, locale16);
        org.joda.time.DurationField durationField21 = dateTimeField2.getDurationField();
        long long24 = dateTimeField2.getDifferenceAsLong((long) 211, (long) 186);
        boolean boolean25 = dateTimeField2.isLenient();
        org.joda.time.DurationField durationField26 = dateTimeField2.getLeapDurationField();
        long long28 = dateTimeField2.roundFloor(57432036L);
        org.joda.time.ReadablePartial readablePartial29 = null;
        int int30 = dateTimeField2.getMinimumValue(readablePartial29);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 57432000L + "'", long28 == 57432000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (long) 89, 931);
        org.joda.time.DurationField durationField14 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        java.lang.String str20 = durationFieldType19.toString();
        java.lang.String str21 = durationFieldType19.toString();
        java.lang.String str22 = durationFieldType19.getName();
        mutableDateTime16.add(durationFieldType19, 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 89L + "'", long13 == 89L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "seconds" + "'", str20, "seconds");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "seconds" + "'", str21, "seconds");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785364497L + "'", long9 == 1644785364497L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785364497L + "'", long10 == 1644785364497L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        java.lang.String str22 = mutableDateTime1.toString();
        int int23 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:40.506Z" + "'", str22, "2022-02-11T00:01:40.506Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField14 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.monthOfYear();
        org.joda.time.ReadablePartial readablePartial18 = null;
        int int19 = dateTimeField17.getMinimumValue(readablePartial18);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfYear();
        org.joda.time.ReadablePartial readablePartial20 = null;
        int int21 = dateTimeField19.getMinimumValue(readablePartial20);
        mutableDateTime1.setRounding(dateTimeField19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        int int27 = dateTimeField26.getMaximumValue();
        int int30 = dateTimeField26.getDifference((long) 10, (long) 'a');
        int int32 = dateTimeField26.getMaximumValue((long) (byte) 1);
        java.lang.String str34 = dateTimeField26.getAsShortText((long) 5);
        long long36 = dateTimeField26.roundHalfFloor(10L);
        java.lang.String str38 = dateTimeField26.getAsShortText((-2208988800000L));
        org.joda.time.DurationField durationField39 = dateTimeField26.getDurationField();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder44 = builder42.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        mutableDateTime46.addHours(59);
        int int51 = mutableDateTime46.getMillisOfSecond();
        mutableDateTime46.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType55.getField(chronology56);
        int int58 = dateTimeField57.getMaximumValue();
        int int61 = dateTimeField57.getDifference((long) 10, (long) 'a');
        int int63 = dateTimeField57.getLeapAmount((-1L));
        java.util.Locale locale65 = java.util.Locale.ITALY;
        java.lang.String str66 = dateTimeField57.getAsText((long) 340, locale65);
        java.util.Locale locale68 = java.util.Locale.UK;
        java.lang.String str69 = dateTimeField57.getAsShortText((int) '4', locale68);
        org.joda.time.ReadablePartial readablePartial70 = null;
        java.util.Locale locale72 = java.util.Locale.UK;
        java.lang.String str73 = dateTimeField57.getAsText(readablePartial70, 292278993, locale72);
        java.lang.String str74 = mutableDateTime46.toString("237", locale72);
        java.util.Locale.Builder builder75 = builder44.setLocale(locale72);
        java.lang.String str76 = dateTimeField26.getAsText(74419, locale72);
        java.lang.String str77 = dateTimeField19.getAsText((long) 422, locale72);
        java.lang.String str78 = locale72.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet79 = locale72.getExtensionKeys();
        java.lang.String str80 = locale72.getISO3Language();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 529 + "'", int51 == 529);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "52" + "'", str69, "52");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "292278993" + "'", str73, "292278993");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "237" + "'", str74, "237");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "74419" + "'", str76, "74419");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Royaume-Uni" + "'", str78, "Royaume-Uni");
        org.junit.Assert.assertNotNull(charSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundFloor();
        java.util.GregorianCalendar gregorianCalendar20 = mutableDateTime19.toGregorianCalendar();
        org.joda.time.DateTime dateTime21 = mutableDateTime19.toDateTime();
        int int22 = mutableDateTime19.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setWeekOfWeekyear(74502);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74502 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=574,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2021 + "'", int22 == 2021);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.joda.time.Chronology chronology13 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfHalfday();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology7.add(readablePeriod16, (long) 166, 34824770);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime21.getZone();
        long long30 = dateTimeZone28.nextTransition((long) 59);
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0);
        java.lang.String str33 = dateTimeZone28.getID();
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone28.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.yearOfCentury();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime43 = property39.add(41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.addHours(59);
        int int50 = mutableDateTime45.getMillisOfSecond();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        boolean boolean54 = mutableDateTime52.isEqual(readableInstant53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = null;
        java.lang.String str56 = mutableDateTime52.toString(dateTimeFormatter55);
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        java.lang.String str65 = dateTimeZone63.getNameKey((long) (byte) 0);
        mutableDateTime52.setZoneRetainFields(dateTimeZone63);
        mutableDateTime45.setZone(dateTimeZone63);
        long long69 = dateTimeZone63.previousTransition((long) 852);
        mutableDateTime43.setZone(dateTimeZone63);
        mutableDateTime43.addDays(74411);
        int int73 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Chronology chronology74 = chronology7.withZone(dateTimeZone28);
        org.joda.time.ReadablePartial readablePartial75 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = chronology74.get(readablePartial75, (long) 74704);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 166L + "'", long19 == 166L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 59L + "'", long30 == 59L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 584 + "'", int50 == 584);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:49:24.584Z" + "'", str56, "2022-02-11T09:49:24.584Z");
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "UTC" + "'", str65, "UTC");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 852L + "'", long69 == 852L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(chronology74);
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfHour();
        org.joda.time.Chronology chronology14 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfDay();
        org.joda.time.DurationField durationField16 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DurationField durationField19 = chronology8.millis();
        org.joda.time.DurationField durationField20 = chronology8.seconds();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1645942477249L, chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(74629);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTime();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        int int28 = mutableDateTime25.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime25.set(dateTimeFieldType29, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        int int33 = mutableDateTime25.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = mutableDateTime25.toDateTime();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        mutableDateTime36.addYears(0);
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime25.addMillis((int) (byte) 0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.dayOfMonth();
        int int47 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.addYears(189);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableDateTime1.add(readablePeriod50, 57503488);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74964 + "'", int7 == 74964);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 20 + "'", int47 == 20);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime48.addMillis(286);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime48.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime79 = property77.set(1644572512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1644572512 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572964632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:49:24.633Z" + "'", str37, "2022-02-11T09:49:24.633Z");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology9.minutes();
        org.joda.time.DurationField durationField20 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        long long30 = dateTimeParserBucket27.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfEra();
        boolean boolean33 = dateTimeParserBucket27.restoreState((java.lang.Object) property32);
        org.joda.time.DurationField durationField34 = property32.getDurationField();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        mutableDateTime36.addHours(59);
        org.joda.time.Chronology chronology41 = mutableDateTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime36.toMutableDateTime();
        mutableDateTime42.setTime((long) 381);
        long long45 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int50 = dateTimeField48.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.dayOfWeek();
        java.util.Locale locale55 = null;
        java.lang.String str56 = property54.getAsText(locale55);
        java.util.Locale locale57 = null;
        int int58 = property54.getMaximumTextLength(locale57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        boolean boolean62 = mutableDateTime60.isEqual(readableInstant61);
        int int63 = mutableDateTime60.getHourOfDay();
        mutableDateTime60.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType66.getField(chronology67);
        int int69 = dateTimeField68.getMaximumValue();
        mutableDateTime60.setRounding(dateTimeField68);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.lang.String str73 = dateTimeField68.getAsShortText((int) (byte) 1, locale72);
        java.lang.String str74 = property54.getAsShortText(locale72);
        java.lang.String str75 = dateTimeField48.getAsShortText(1L, locale72);
        java.lang.String str76 = locale72.getISO3Country();
        boolean boolean77 = locale72.hasExtensions();
        java.lang.String str78 = locale72.getDisplayLanguage();
        java.lang.String str79 = locale72.getDisplayScript();
        java.lang.String str80 = property32.getAsShortText(locale72);
        java.lang.String str81 = locale72.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 427, chronology9, locale72, (java.lang.Integer) 365);
        java.lang.String str84 = locale72.getScript();
        java.lang.String str85 = locale72.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str87 = locale72.getUnicodeLocaleType("2022-04-01T00:01:37.187Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-04-01T00:01:37.187Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "vendredi" + "'", str56, "vendredi");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9 + "'", int63 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 59 + "'", int69 == 59);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ven." + "'", str74, "ven.");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "0" + "'", str75, "0");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "fran\347ais" + "'", str78, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022" + "'", str80, "2022");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fran\347ais" + "'", str85, "fran\347ais");
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        long long13 = dateTimeField11.roundHalfFloor(2185228800824L);
        int int15 = dateTimeField11.getMaximumValue(946684800687L);
        org.joda.time.DurationField durationField16 = dateTimeField11.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2185228801000L + "'", long13 == 2185228801000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86399 + "'", int15 == 86399);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        int int6 = dateTimeParserBucket5.getOffset();
        long long7 = dateTimeParserBucket5.computeMillis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfWeek();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property10.getAsText(locale11);
        java.util.Locale locale13 = null;
        int int14 = property10.getMaximumTextLength(locale13);
        int int15 = property10.getMaximumValueOverall();
        int int16 = property10.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property10.getFieldType();
        dateTimeParserBucket5.saveField(dateTimeFieldType17, 562);
        int int20 = dateTimeParserBucket5.getOffset();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket5.getChronology();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 415);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "vendredi" + "'", str12, "vendredi");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime1.set(dateTimeFieldType8, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        int int16 = mutableDateTime1.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74964 + "'", int7 == 74964);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear(395);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(949);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear(9);
        int int31 = dateTimeFormatter30.getDefaultYear();
        org.joda.time.ReadablePartial readablePartial32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = dateTimeFormatter30.print(readablePartial32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.getMutableDateTime();
        java.lang.String str26 = property23.getName();
        java.lang.String str27 = property23.getName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "centuryOfEra" + "'", str26, "centuryOfEra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "centuryOfEra" + "'", str27, "centuryOfEra");
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        boolean boolean15 = mutableDateTime10.isSupported(dateTimeFieldType14);
        mutableDateTime10.setSecondOfDay((int) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime10.isEqual(readableInstant18);
        mutableDateTime10.addMillis(100);
        boolean boolean22 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime1.setYear(119);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.millisOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.dayOfWeek();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime27.yearOfCentury();
        org.joda.time.DurationField durationField30 = property29.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime33 = property29.add(41);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        int int40 = mutableDateTime35.getMillisOfSecond();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = mutableDateTime42.toString(dateTimeFormatter45);
        org.joda.time.Chronology chronology48 = null;
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(0L, chronology48, locale49, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket52.getZone();
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (byte) 0);
        mutableDateTime42.setZoneRetainFields(dateTimeZone53);
        mutableDateTime35.setZone(dateTimeZone53);
        long long59 = dateTimeZone53.previousTransition((long) 852);
        mutableDateTime33.setZone(dateTimeZone53);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale locale63 = builder62.build();
        java.util.Locale.Builder builder64 = builder62.clear();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder66 = builder62.setLocale(locale65);
        java.util.Locale locale67 = locale65.stripExtensions();
        java.lang.String str68 = locale65.getLanguage();
        java.lang.String str69 = dateTimeZone53.getName((long) 34987747, locale65);
        java.lang.String str70 = property25.getAsText(locale65);
        java.lang.String str71 = locale65.getScript();
        java.lang.Object obj72 = locale65.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 741 + "'", int40 == 741);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:49:24.741Z" + "'", str46, "2022-02-11T09:49:24.741Z");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 852L + "'", long59 == 852L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "it" + "'", str68, "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "35364741" + "'", str70, "35364741");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "it");
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:48:15.815+00:01:14.456");
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:40:07.731Z");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withPivotYear(411);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear(352);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 314);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter13.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter13.withPivotYear((java.lang.Integer) 0);
        java.lang.Object obj21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = mutableDateTime23.toString(dateTimeFormatter26);
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        java.lang.String str35 = dateTimeZone34.getID();
        java.lang.String str37 = dateTimeZone34.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime23.toMutableDateTime(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(obj21, dateTimeZone34);
        java.lang.String str40 = mutableDateTime39.toString();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.addWrapField(0);
        int int45 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime47 = property42.add(74457592);
        int int48 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = dateTimeFormatter20.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "2022-02-11T09:48:18.078+00:01:14.456", 35289);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11T09:49:24.769Z" + "'", str27, "2022-02-11T09:49:24.769Z");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:49:24.769Z" + "'", str40, "2022-02-11T09:49:24.769Z");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 292278993 + "'", int45 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        java.util.Locale locale13 = dateTimeFormatter9.getLocale();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter9.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(dateTimeZone14);
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj11 = mutableDateTime1.clone();
        mutableDateTime1.addMonths(74418645);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime1.getZone();
        mutableDateTime1.addWeeks(612);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int22 = dateTimeField20.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfWeek();
        java.util.Locale locale27 = null;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Locale locale29 = null;
        int int30 = property26.getMaximumTextLength(locale29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        int int35 = mutableDateTime32.getHourOfDay();
        mutableDateTime32.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType38.getField(chronology39);
        int int41 = dateTimeField40.getMaximumValue();
        mutableDateTime32.setRounding(dateTimeField40);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.lang.String str45 = dateTimeField40.getAsShortText((int) (byte) 1, locale44);
        java.lang.String str46 = property26.getAsShortText(locale44);
        java.lang.String str47 = dateTimeField20.getAsShortText(1L, locale44);
        java.lang.String str48 = locale44.getISO3Country();
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleAttributes();
        int int50 = property17.getMaximumTextLength(locale44);
        boolean boolean51 = property17.isLeap();
        int int52 = property17.getMinimumValueOverall();
        int int53 = property17.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "2022-02-11T00:01:37.798Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "2022-02-11T00:01:37.798Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "2022-02-11T00:01:37.798Z");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "vendredi" + "'", str28, "vendredi");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 59 + "'", int41 == 59);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ven." + "'", str46, "ven.");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1439 + "'", int53 == 1439);
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.String str2 = durationFieldType1.toString();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        long long11 = dateTimeParserBucket8.computeMillis(true);
        org.joda.time.Chronology chronology12 = dateTimeParserBucket8.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        boolean boolean14 = durationFieldType1.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology13.weeks();
        org.joda.time.DurationField durationField17 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "seconds" + "'", str2, "seconds");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        java.lang.String str12 = dateTimeField11.getName();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        int int5 = mutableDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime2.set(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        int int10 = mutableDateTime2.get(dateTimeFieldType9);
        int int11 = mutableDateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant12 = mutableDateTime2.toInstant();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.dayOfWeek();
        mutableDateTime2.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime2.add(readablePeriod16, (int) (short) 0);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(0L, chronology20, locale21, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket24.getZone();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.halfdayOfDay();
        mutableDateTime2.setChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = chronology26.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField35 = chronology26.years();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) 34928861, chronology26);
        org.joda.time.DurationField durationField37 = chronology26.seconds();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology9.days();
        boolean boolean12 = durationFieldType1.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        int int15 = mutableDateTime14.getMinuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDate((int) ' ', 34950, 35185669);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34950 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 551 + "'", int15 == 551);
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getDayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTimeISO();
        mutableDateTime10.setMillis((long) 160);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setMinuteOfDay(74628907);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74628907 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 856 + "'", int6 == 856);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        mutableDateTime0.setDate(readableInstant4);
        org.joda.time.DateTimeZone dateTimeZone6 = mutableDateTime0.getZone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDate(559, 34857657, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34857657 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572964866,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=24,MILLISECOND=866,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone6);
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.add(100);
        org.joda.time.MutableDateTime mutableDateTime5 = property1.addWrapField(10);
        mutableDateTime5.setMillis((long) 779);
        long long8 = mutableDateTime5.getMillis();
        mutableDateTime5.addDays(35651);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology18);
        int int21 = mutableDateTime20.getYear();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale24 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(0L, chronology23, locale24, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeParserBucket27.getZone();
        org.joda.time.Chronology chronology29 = dateTimeParserBucket27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfWeek();
        java.lang.String str31 = chronology29.toString();
        org.joda.time.DurationField durationField32 = chronology29.millis();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(0L, chronology34, locale35, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket38.getZone();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket38.getZone();
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        mutableDateTime44.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        int int53 = dateTimeField52.getMaximumValue();
        mutableDateTime44.setRounding(dateTimeField52);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.lang.String str57 = dateTimeField52.getAsShortText((int) (byte) 1, locale56);
        java.lang.String str58 = dateTimeZone40.getName(10930L, locale56);
        org.joda.time.Chronology chronology59 = chronology29.withZone(dateTimeZone40);
        mutableDateTime20.setZoneRetainFields(dateTimeZone40);
        mutableDateTime5.setZoneRetainFields(dateTimeZone40);
        int int62 = mutableDateTime5.getYearOfEra();
        mutableDateTime5.add(547L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 779L + "'", long8 == 779L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 59 + "'", int53 == 59);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00" + "'", str58, "+00:00");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2067 + "'", int62 == 2067);
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long7 = dateTimeParserBucket5.computeMillis();
        dateTimeParserBucket5.setOffset(360);
        dateTimeParserBucket5.setOffset((java.lang.Integer) 74462);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 74600);
        boolean boolean15 = dateTimeParserBucket5.restoreState((java.lang.Object) "2022-02-11T09:48:04.945+00:01:14.456");
        int int16 = dateTimeParserBucket5.getOffset();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 74462 + "'", int16 == 74462);
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str13 = dateTimeZone8.getID();
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone8.isLocalDateTimeGap(localDateTime14);
        long long17 = dateTimeZone8.nextTransition(89L);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        boolean boolean20 = mutableDateTime18.isBefore((long) 267);
        boolean boolean22 = mutableDateTime18.isBefore(0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 89L + "'", long17 == 89L);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket(0L, chronology14, locale15, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket18.getZone();
        org.joda.time.Chronology chronology20 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology20, locale22, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.secondOfDay();
        boolean boolean30 = dateTimeZone11.equals((java.lang.Object) dateTimeField29);
        long long32 = dateTimeField29.roundFloor((long) 34818666);
        int int35 = dateTimeField29.getDifference(1644572648248L, 1644537697835L);
        // The following exception was thrown during execution in test generation
        try {
            long long38 = dateTimeField29.set(34867128L, "2022-02-11T09:42:18.575Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:42:18.575Z\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 34818000L + "'", long32 == 34818000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 34950 + "'", int35 == 34950);
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("2022-02-11T09:41:33.424-00:00:00.001");
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:41:01.049Z");
        int int2 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.addDays(2302);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("weekyear");
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology15.add(readablePeriod17, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.secondOfMinute();
        int int23 = dateTimeField22.getMaximumValue();
        org.joda.time.ReadablePartial readablePartial24 = null;
        int int25 = dateTimeField22.getMaximumValue(readablePartial24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        org.joda.time.DurationField durationField30 = dateTimeField29.getDurationField();
        boolean boolean32 = dateTimeField29.isLeap((long) (short) -1);
        java.lang.String str34 = dateTimeField29.getAsShortText((long) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        int int41 = dateTimeField37.getDifference((long) 10, (long) 'a');
        int int43 = dateTimeField37.getLeapAmount((-1L));
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = dateTimeField37.getAsText((long) 340, locale45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTimeField37.getAsShortText((int) '4', locale48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField37.getAsText(readablePartial50, 292278993, locale52);
        int int54 = dateTimeField29.getMaximumTextLength(locale52);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        boolean boolean56 = locale55.hasExtensions();
        java.lang.String str57 = locale52.getDisplayVariant(locale55);
        java.lang.String str59 = locale55.getExtension('a');
        java.lang.String str60 = dateTimeField22.getAsShortText((long) 34929396, locale55);
        java.lang.String str61 = locale55.getVariant();
        java.util.Locale.Builder builder62 = builder7.setLocale(locale55);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 6L + "'", long20 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 59 + "'", int25 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52" + "'", str49, "52");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "292278993" + "'", str53, "292278993");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "9" + "'", str60, "9");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.centuryOfEra();
        int int18 = mutableDateTime1.getYearOfCentury();
        boolean boolean20 = mutableDateTime1.isEqual((long) 74411);
        org.joda.time.Chronology chronology21 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697028,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=28,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str14 = dateTimeZone12.getNameKey((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone12.getShortName(778L, locale17);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone12);
        int int20 = mutableDateTime19.getMillisOfSecond();
        int int21 = mutableDateTime19.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:25.042Z" + "'", str5, "2022-02-11T09:49:25.042Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(97715, 74414, 74963, 35166680, 74584, 893, 345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35166680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        boolean boolean5 = mutableDateTime3.isEqual(readableInstant4);
        mutableDateTime3.addHours(59);
        org.joda.time.Chronology chronology8 = mutableDateTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime3.toMutableDateTime();
        int int10 = mutableDateTime9.getEra();
        mutableDateTime9.addSeconds(0);
        boolean boolean13 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        boolean boolean20 = mutableDateTime15.isSupported(dateTimeFieldType19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime15.add(readableDuration21, 5);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        boolean boolean27 = mutableDateTime25.isEqual(readableInstant26);
        mutableDateTime25.addHours(59);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.minuteOfHour();
        int int31 = mutableDateTime25.getSecondOfDay();
        mutableDateTime25.addSeconds((-292275054));
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology37, locale38, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone42 = dateTimeParserBucket41.getZone();
        org.joda.time.Chronology chronology43 = dateTimeParserBucket41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = locale45.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology43, locale45, (java.lang.Integer) 2022);
        java.util.Locale locale49 = locale45.stripExtensions();
        java.lang.String str50 = locale49.getISO3Language();
        java.lang.String str51 = mutableDateTime25.toString("842", locale49);
        boolean boolean52 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        boolean boolean53 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        mutableDateTime9.setDate((long) 1310);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime9.year();
        java.lang.String str57 = property56.getAsText();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 74965 + "'", int31 == 74965);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fra" + "'", str50, "fra");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "842" + "'", str51, "842");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970" + "'", str57, "1970");
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        mutableDateTime1.setMillis(5L);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        mutableDateTime1.addYears(34830);
        int int13 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime();
        int int15 = dateTime14.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfYear();
        org.joda.time.ReadablePartial readablePartial20 = null;
        int int21 = dateTimeField19.getMinimumValue(readablePartial20);
        mutableDateTime1.setRounding(dateTimeField19);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.weekyear();
        mutableDateTime1.setYear(322);
        int int27 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("34889726");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        int int17 = dateTimeZone14.getOffset((long) 13);
        long long19 = dateTimeZone14.convertUTCToLocal((long) 777);
        int int21 = dateTimeZone14.getOffsetFromLocal((-512L));
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("9");
        java.lang.String str25 = locale24.getISO3Language();
        java.lang.String str26 = locale24.getLanguage();
        java.lang.String str27 = dateTimeZone14.getName((long) 74557, locale24);
        int int29 = dateTimeZone14.getOffset(228736L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 777L + "'", long19 == 777L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        long long11 = property10.remainder();
        int int12 = property10.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3790165171L + "'", long11 == 3790165171L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 292278993 + "'", int12 == 292278993);
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        mutableDateTime1.addWeeks(34808947);
        mutableDateTime1.addSeconds(166);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.hourOfDay();
        int int12 = property11.getLeapAmount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTimeISO();
        int int24 = mutableDateTime22.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime22.add(readableDuration25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1249 + "'", int24 == 1249);
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = mutableDateTime5.isEqual(readableInstant6);
        mutableDateTime5.addHours(59);
        org.joda.time.Chronology chronology10 = mutableDateTime5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone11);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology16 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 35105);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:40:11.930Z");
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.addSeconds(74508);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology13.centuries();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology13.getZone();
        org.joda.time.DurationField durationField17 = chronology13.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.year();
        java.util.Locale locale19 = java.util.Locale.US;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 906, chronology13, locale19);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.addHours((int) (short) 0);
        mutableDateTime21.addWeekyears((int) 'a');
        java.lang.String str27 = mutableDateTime21.toString("0");
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        boolean boolean31 = mutableDateTime29.isEqual(readableInstant30);
        int int32 = mutableDateTime29.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime29.set(dateTimeFieldType33, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        int int37 = mutableDateTime29.get(dateTimeFieldType36);
        mutableDateTime21.set(dateTimeFieldType36, 5);
        dateTimeParserBucket20.saveField(dateTimeFieldType36, 86399);
        org.joda.time.Chronology chronology42 = null;
        boolean boolean43 = dateTimeFieldType36.isSupported(chronology42);
        mutableDateTime1.set(dateTimeFieldType36, 34862029);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType36.getDurationType();
        java.lang.String str47 = dateTimeFieldType36.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-11T09:40:11.930Z" + "'", str2, "2022-02-11T09:40:11.930Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0" + "'", str27, "0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "year" + "'", str47, "year");
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        boolean boolean53 = mutableDateTime51.isEqual(readableInstant52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.addHours((int) (short) 0);
        mutableDateTime54.addWeekyears((int) 'a');
        java.lang.String str60 = mutableDateTime54.toString("0");
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = mutableDateTime62.isEqual(readableInstant63);
        int int65 = mutableDateTime62.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime62.set(dateTimeFieldType66, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        int int70 = mutableDateTime62.get(dateTimeFieldType69);
        mutableDateTime54.set(dateTimeFieldType69, 5);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime51.property(dateTimeFieldType69);
        boolean boolean74 = mutableDateTime48.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime48.setWeekyear(377);
        boolean boolean77 = mutableDateTime48.isBeforeNow();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime48.era();
        org.joda.time.Chronology chronology80 = null;
        java.util.Locale locale81 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket(0L, chronology80, locale81, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone85 = dateTimeParserBucket84.getZone();
        org.joda.time.Chronology chronology86 = dateTimeParserBucket84.getChronology();
        java.lang.Integer int87 = dateTimeParserBucket84.getOffsetInteger();
        org.joda.time.Chronology chronology88 = dateTimeParserBucket84.getChronology();
        org.joda.time.DurationField durationField89 = chronology88.hours();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime91 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime48, chronology88);
        java.lang.Class<?> wildcardClass92 = chronology88.getClass();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572965255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=255,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:49:25.255Z" + "'", str37, "2022-02-11T09:49:25.255Z");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNull(int87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        int int15 = mutableDateTime1.getYearOfEra();
        int int16 = mutableDateTime1.getDayOfWeek();
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket(0L, chronology18, locale19, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket22.getZone();
        long long25 = dateTimeParserBucket22.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfEra();
        boolean boolean28 = dateTimeParserBucket22.restoreState((java.lang.Object) property27);
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = mutableDateTime31.isEqual(readableInstant32);
        mutableDateTime31.addHours(59);
        org.joda.time.Chronology chronology36 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime31.toMutableDateTime();
        mutableDateTime37.setTime((long) 381);
        long long40 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.String str41 = property27.toString();
        java.util.Locale locale42 = null;
        java.lang.String str43 = property27.getAsText(locale42);
        org.joda.time.MutableDateTime mutableDateTime44 = property27.roundHalfFloor();
        int int45 = mutableDateTime44.getDayOfMonth();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2818 + "'", int15 == 2818);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[yearOfEra]" + "'", str41, "Property[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime1.add(readableDuration8);
        mutableDateTime1.addWeekyears(712);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfDay(74919928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74919928 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35365306 + "'", int4 == 35365306);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.millisOfSecond();
        mutableDateTime1.addHours(369);
        mutableDateTime1.addDays(34957);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime1.add(readablePeriod17, 35019285);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime13 = mutableDateTime12.toDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        mutableDateTime16.addHours(59);
        int int21 = mutableDateTime16.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int23 = mutableDateTime16.get(dateTimeFieldType22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.minuteOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.dayOfWeek();
        java.util.Locale locale28 = null;
        java.lang.String str29 = property27.getAsText(locale28);
        java.util.Locale locale30 = null;
        int int31 = property27.getMaximumTextLength(locale30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = property27.getAsShortText(locale45);
        java.util.Calendar calendar48 = mutableDateTime16.toCalendar(locale45);
        int int49 = property14.getMaximumShortTextLength(locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 34824000, chronology8, locale45, (java.lang.Integer) 664);
        java.util.Locale locale52 = dateTimeParserBucket51.getLocale();
        java.lang.String str53 = locale52.getVariant();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale65.getScript();
        int int67 = dateTimeField64.getMaximumTextLength(locale65);
        int int70 = dateTimeField64.getDifference((long) 2022, (long) 286);
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale locale73 = builder72.build();
        java.util.Locale locale74 = builder72.build();
        java.util.Locale.Builder builder76 = builder72.setVariant("2022");
        java.util.Locale locale77 = builder76.build();
        java.lang.String str78 = dateTimeField64.getAsText(866, locale77);
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale82 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(0L, chronology81, locale82, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone86 = dateTimeParserBucket85.getZone();
        org.joda.time.Chronology chronology87 = dateTimeParserBucket85.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.hourOfHalfday();
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.lang.String str90 = locale89.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket92 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology87, locale89, (java.lang.Integer) 2022);
        java.lang.String str93 = locale77.getDisplayScript(locale89);
        java.lang.String str94 = locale52.getDisplayName(locale77);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 332 + "'", int21 == 332);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "vendredi" + "'", str29, "vendredi");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ven." + "'", str47, "ven.");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644785365332,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=25,MILLISECOND=332,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1736 + "'", int70 == 1736);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "866" + "'", str78, "866");
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "French" + "'", str94, "French");
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.Chronology chronology7 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology7, locale9);
        org.joda.time.Chronology chronology11 = dateTimeParserBucket10.getChronology();
        int int12 = dateTimeParserBucket10.getOffset();
        java.util.Locale locale13 = dateTimeParserBucket10.getLocale();
        java.lang.String str14 = locale13.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fr" + "'", str14, "fr");
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology7.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        int int5 = dateTimeField4.getMaximumValue();
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = dateTimeField4.getAsShortText(0L, locale7);
        boolean boolean10 = dateTimeField4.isLenient();
        org.joda.time.ReadablePartial readablePartial11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime14.set(dateTimeFieldType18, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = mutableDateTime14.get(dateTimeFieldType21);
        int int23 = mutableDateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.yearOfEra();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar27 = mutableDateTime24.toCalendar(locale26);
        java.util.Calendar calendar28 = mutableDateTime14.toCalendar(locale26);
        java.lang.String str29 = dateTimeField4.getAsShortText(readablePartial11, (int) ' ', locale26);
        int int30 = property1.getMaximumShortTextLength(locale26);
        org.joda.time.MutableDateTime mutableDateTime31 = property1.roundCeiling();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime33.toString(dateTimeFormatter36);
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(0L, chronology39, locale40, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket43.getZone();
        java.lang.String str45 = dateTimeZone44.getID();
        java.lang.String str47 = dateTimeZone44.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime33.toMutableDateTime(dateTimeZone44);
        boolean boolean49 = mutableDateTime31.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        mutableDateTime31.setYear(79);
        int int52 = mutableDateTime31.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572965383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644537697383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "32" + "'", str29, "32");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:49:25.383Z" + "'", str37, "2022-02-11T09:49:25.383Z");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "UTC" + "'", str45, "UTC");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTC" + "'", str47, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        dateTimeParserBucket19.setOffset(34852);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        long long39 = dateTimeParserBucket36.computeMillis(true, "ven.");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        boolean boolean43 = mutableDateTime41.isEqual(readableInstant42);
        int int44 = mutableDateTime41.getHourOfDay();
        mutableDateTime41.addDays(0);
        int int47 = mutableDateTime41.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime41.weekyear();
        int int49 = mutableDateTime41.getMonthOfYear();
        mutableDateTime41.addDays(5);
        boolean boolean53 = mutableDateTime41.isAfter((long) '#');
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        boolean boolean57 = mutableDateTime55.isEqual(readableInstant56);
        int int58 = mutableDateTime55.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime55.set(dateTimeFieldType59, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        int int63 = mutableDateTime55.get(dateTimeFieldType62);
        org.joda.time.DateTime dateTime64 = mutableDateTime55.toDateTime();
        java.util.Locale locale65 = null;
        java.util.Calendar calendar66 = mutableDateTime55.toCalendar(locale65);
        org.joda.time.DateTimeZone dateTimeZone67 = mutableDateTime55.getZone();
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale71 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket(0L, chronology70, locale71, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeParserBucket74.getZone();
        java.lang.String str76 = dateTimeZone75.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        mutableDateTime41.setZoneRetainFields(dateTimeZone75);
        dateTimeParserBucket36.setZone(dateTimeZone75);
        mutableDateTime24.setZoneRetainFields(dateTimeZone75);
        long long82 = dateTimeZone75.nextTransition((long) 44);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(678);
        java.lang.String str86 = dateTimeZone84.getShortName((long) 6);
        java.lang.Object obj87 = null;
        boolean boolean88 = dateTimeZone84.equals(obj87);
        long long90 = dateTimeZone75.getMillisKeepLocal(dateTimeZone84, (long) 887);
        dateTimeParserBucket19.setZone(dateTimeZone75);
        long long94 = dateTimeZone75.adjustOffset((long) 1311, true);
        java.lang.String str95 = dateTimeZone75.getID();
        org.joda.time.Chronology chronology96 = chronology13.withZone(dateTimeZone75);
        org.joda.time.Chronology chronology97 = chronology13.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 404 + "'", int47 == 404);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644537697404,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=404,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "UTC" + "'", str76, "UTC");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 44L + "'", long82 == 44L);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.678" + "'", str86, "+00:00:00.678");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 209L + "'", long90 == 209L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1311L + "'", long94 == 1311L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "UTC" + "'", str95, "UTC");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(chronology97);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        int int11 = dateTimeField9.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.dayOfWeek();
        java.util.Locale locale16 = null;
        java.lang.String str17 = property15.getAsText(locale16);
        java.util.Locale locale18 = null;
        int int19 = property15.getMaximumTextLength(locale18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        int int30 = dateTimeField29.getMaximumValue();
        mutableDateTime21.setRounding(dateTimeField29);
        java.util.Locale locale33 = java.util.Locale.FRENCH;
        java.lang.String str34 = dateTimeField29.getAsShortText((int) (byte) 1, locale33);
        java.lang.String str35 = property15.getAsShortText(locale33);
        java.lang.String str36 = dateTimeField9.getAsShortText(1L, locale33);
        java.lang.String str37 = locale33.getISO3Country();
        boolean boolean38 = locale33.hasExtensions();
        java.lang.String str39 = locale33.getDisplayLanguage();
        java.lang.String str40 = locale33.getDisplayScript();
        java.lang.String str41 = property3.getAsText(locale33);
        org.joda.time.MutableDateTime mutableDateTime43 = property3.add((int) '#');
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime43.add(readablePeriod44, 0);
        mutableDateTime43.addMinutes(217);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setMonthOfYear(34841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34841 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "vendredi" + "'", str17, "vendredi");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ven." + "'", str35, "ven.");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fran\347ais" + "'", str39, "fran\347ais");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "23" + "'", str41, "23");
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = locale35.getDisplayScript(locale38);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale35.getDisplayLanguage(locale41);
        java.util.Locale.setDefault(locale35);
        java.util.Locale locale44 = locale35.stripExtensions();
        int int45 = dateTimeField14.getMaximumShortTextLength(locale35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "French" + "'", str42, "French");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        int int12 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setDayOfYear(40);
        int int15 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        java.lang.String str26 = chronology23.toString();
        mutableDateTime1.setChronology(chronology23);
        int int28 = mutableDateTime1.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 454 + "'", int12 == 454);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        int int11 = mutableDateTime1.getSecondOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        int int16 = mutableDateTime13.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant17 = null;
        mutableDateTime13.setDate(readableInstant17);
        long long19 = mutableDateTime13.getMillis();
        int int20 = mutableDateTime13.getYearOfCentury();
        boolean boolean21 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime13);
        int int22 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime13.yearOfEra();
        int int24 = property23.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 465 + "'", int7 == 465);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572965465L + "'", long10 == 1644572965465L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35365 + "'", int11 == 35365);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572965465L + "'", long19 == 1644572965465L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 292278993 + "'", int24 == 292278993);
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfDay();
        int int10 = mutableDateTime1.getEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(172);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 475 + "'", int6 == 475);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        long long14 = dateTimeField11.getDifferenceAsLong(1644788704485L, (long) 74913);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 27413143L + "'", long14 == 27413143L);
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        java.lang.Throwable throwable6 = null;
        java.io.IOException iOException7 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable6);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("2022-02-11T09:40:07.731Z", throwable9);
        iOException7.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("French", (java.lang.Throwable) iOException7);
        java.io.IOException iOException13 = new java.io.IOException("2022-02-11T09:40:30.647Z", (java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray14 = iOException13.getSuppressed();
        java.io.IOException iOException15 = new java.io.IOException("2022-02-11T09:40:39.549Z", (java.lang.Throwable) iOException13);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException("2022-02-11T09:42:17.031Z", (java.lang.Throwable) iOException13);
        java.io.IOException iOException18 = new java.io.IOException("21", (java.lang.Throwable) iOException13);
        java.lang.String str19 = iOException18.toString();
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.io.IOException: 21" + "'", str19, "java.io.IOException: 21");
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        mutableDateTime1.setSecondOfDay((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundFloor();
        int int20 = property18.get();
        int int21 = property18.getMinimumValueOverall();
        java.lang.String str22 = property18.getAsText();
        org.joda.time.MutableDateTime mutableDateTime23 = property18.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property18.getMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697498,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=498,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22" + "'", str22, "22");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = dateTimeField14.getAsShortText(0L, locale17);
        boolean boolean20 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar37 = mutableDateTime34.toCalendar(locale36);
        java.util.Calendar calendar38 = mutableDateTime24.toCalendar(locale36);
        java.lang.String str39 = dateTimeField14.getAsShortText(readablePartial21, (int) ' ', locale36);
        int int40 = property11.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime41 = property11.roundCeiling();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        int int43 = mutableDateTime1.getYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime1.minuteOfHour();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.util.Locale locale47 = java.util.Locale.getDefault(category45);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology56, locale58, (java.lang.Integer) 2022);
        java.util.Locale locale62 = locale58.stripExtensions();
        java.lang.String str63 = locale62.getISO3Language();
        java.lang.String str64 = locale47.getDisplayLanguage(locale62);
        java.lang.String str65 = property44.getAsShortText(locale62);
        org.joda.time.MutableDateTime mutableDateTime67 = property44.add((long) 74786);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572965510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644537697510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=510,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "fra" + "'", str63, "fra");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fran\347ais" + "'", str64, "fran\347ais");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "49" + "'", str65, "49");
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.setMillisOfDay(781);
        org.joda.time.Instant instant15 = mutableDateTime1.toInstant();
        java.lang.Object obj16 = mutableDateTime1.clone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "2022-02-11T00:00:00.781Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-11T00:00:00.781Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-11T00:00:00.781Z");
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime1.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(74612);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74612 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697548,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        mutableDateTime1.setTime(1644788463784L);
        boolean boolean14 = mutableDateTime1.isAfter((long) 34888740);
        mutableDateTime1.addMillis(717);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785365557L + "'", long9 == 1644785365557L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785365557L + "'", long10 == 1644785365557L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        java.lang.String str12 = chronology9.toString();
        org.joda.time.Chronology chronology13 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillisOfSecond(822);
        int int59 = mutableDateTime1.getHourOfDay();
        int int60 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime61 = mutableDateTime1.toDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeFormatter64.getZone();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        boolean boolean69 = mutableDateTime67.isEqual(readableInstant68);
        mutableDateTime67.addHours(59);
        org.joda.time.Chronology chronology72 = mutableDateTime67.getChronology();
        org.joda.time.DateTimeZone dateTimeZone73 = chronology72.getZone();
        java.lang.String str74 = dateTimeZone73.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter64.withZone(dateTimeZone73);
        java.lang.String str77 = dateTimeZone73.getName((long) 521);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(chronology78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        boolean boolean81 = mutableDateTime79.isEqual(readableInstant80);
        int int82 = mutableDateTime79.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime79.set(dateTimeFieldType83, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.year();
        int int87 = mutableDateTime79.get(dateTimeFieldType86);
        java.util.Date date88 = mutableDateTime79.toDate();
        org.joda.time.DateTimeZone dateTimeZone89 = mutableDateTime79.getZone();
        long long91 = dateTimeZone73.getMillisKeepLocal(dateTimeZone89, (long) 310);
        int int93 = dateTimeZone73.getStandardOffset((long) 974);
        mutableDateTime1.setZone(dateTimeZone73);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(2934);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2934 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "UTC" + "'", str74, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00" + "'", str77, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2022 + "'", int87 == 2022);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 310L + "'", long91 == 310L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology11.getZone();
        java.lang.String str15 = chronology11.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785365606L + "'", long9 == 1644785365606L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785365606L + "'", long10 == 1644785365606L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        long long11 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime8);
        mutableDateTime8.setSecondOfMinute(13);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.era();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:25.615Z" + "'", str5, "2022-02-11T09:49:25.615Z");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.joda.time.DurationField durationField12 = chronology7.hours();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        org.joda.time.DurationField durationField17 = dateTimeField16.getDurationField();
        boolean boolean19 = dateTimeField16.isLeap((long) (short) -1);
        java.util.Locale locale21 = java.util.Locale.US;
        java.lang.String str22 = dateTimeField16.getAsText((long) (-1), locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getISO3Country();
        java.lang.String str32 = dateTimeField27.getAsShortText(0L, locale30);
        boolean boolean33 = dateTimeField27.isLenient();
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        int int45 = mutableDateTime37.get(dateTimeFieldType44);
        int int46 = mutableDateTime37.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfEra();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar50 = mutableDateTime47.toCalendar(locale49);
        java.util.Calendar calendar51 = mutableDateTime37.toCalendar(locale49);
        java.lang.String str52 = dateTimeField27.getAsShortText(readablePartial34, (int) ' ', locale49);
        java.lang.String str53 = locale49.getDisplayCountry();
        java.lang.String str54 = dateTimeField16.getAsShortText(readablePartial23, 34812148, locale49);
        long long57 = dateTimeField16.add((long) 6, (long) 74415);
        long long59 = dateTimeField16.roundHalfFloor((long) 421);
        int int62 = dateTimeField16.getDifference(1644572477588L, (long) 216);
        java.util.Locale locale64 = new java.util.Locale("2022-02-11T09:41:13.460Z");
        int int65 = dateTimeField16.getMaximumTextLength(locale64);
        java.util.Calendar calendar66 = mutableDateTime13.toCalendar(locale64);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "59" + "'", str22, "59");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572965627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1644537697627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "32" + "'", str52, "32");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Taiwan" + "'", str53, "Taiwan");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "34812148" + "'", str54, "34812148");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 74415006L + "'", long57 == 74415006L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1644572477 + "'", int62 == 1644572477);
        org.junit.Assert.assertEquals(locale64.toString(), "2022-02-11t09:41:13.460z");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572965627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology2, locale3, (java.lang.Integer) 9, 59);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket6.saveField(dateTimeFieldType8, 59);
        long long12 = dateTimeParserBucket6.computeMillis(true);
        org.joda.time.Chronology chronology13 = dateTimeParserBucket6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology13.add(readablePeriod14, (long) 74425676, 747);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        boolean boolean24 = mutableDateTime19.isSupported(dateTimeFieldType23);
        mutableDateTime19.setSecondOfDay((int) '#');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        int int31 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime28.set(dateTimeFieldType32, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        int int36 = mutableDateTime28.get(dateTimeFieldType35);
        org.joda.time.DateTime dateTime37 = mutableDateTime28.toDateTime();
        java.util.Locale locale38 = null;
        java.util.Calendar calendar39 = mutableDateTime28.toCalendar(locale38);
        org.joda.time.DateTimeZone dateTimeZone40 = mutableDateTime28.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = dateTimeZone40.getShortName((long) 34818666, locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket(1404780419L, chronology13, locale47, (java.lang.Integer) 181, 34830);
        org.joda.time.DateTimeField dateTimeField52 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField53 = chronology13.centuries();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-60305299200000L) + "'", long12 == (-60305299200000L));
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 74425676L + "'", long17 == 74425676L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644537697660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=660,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setMillisOfDay(74422);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.year();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.dayOfWeek();
        org.joda.time.DurationField durationField13 = chronology10.halfdays();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology10.minutes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.TAIWAN;
        java.lang.String str2 = locale1.getScript();
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTimeField dateTimeField7 = dateTimeFieldType5.getField(chronology6);
        int int8 = dateTimeField7.getMaximumValue();
        int int11 = dateTimeField7.getDifference((long) 10, (long) 'a');
        int int13 = dateTimeField7.getLeapAmount((-1L));
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.lang.String str16 = dateTimeField7.getAsText((long) 340, locale15);
        java.util.Locale locale18 = java.util.Locale.UK;
        java.lang.String str19 = dateTimeField7.getAsShortText((int) '4', locale18);
        org.joda.time.ReadablePartial readablePartial20 = null;
        java.util.Locale locale22 = java.util.Locale.UK;
        java.lang.String str23 = dateTimeField7.getAsText(readablePartial20, 292278993, locale22);
        java.lang.String str24 = locale22.getISO3Country();
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket30.getZone();
        long long33 = dateTimeParserBucket30.computeMillis();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.monthOfYear();
        dateTimeParserBucket30.saveField(dateTimeField42, 993);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        int int54 = mutableDateTime46.get(dateTimeFieldType53);
        org.joda.time.DateTime dateTime55 = mutableDateTime46.toDateTime();
        org.joda.time.Chronology chronology58 = null;
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket(0L, chronology58, locale59, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone63 = dateTimeParserBucket62.getZone();
        org.joda.time.Chronology chronology64 = dateTimeParserBucket62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.lang.String str67 = locale66.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology64, locale66, (java.lang.Integer) 2022);
        java.util.Locale locale70 = locale66.stripExtensions();
        java.lang.String str71 = locale70.getScript();
        java.lang.String str72 = locale70.getISO3Language();
        java.util.Calendar calendar73 = dateTime55.toCalendar(locale70);
        int int74 = dateTimeField42.getMaximumTextLength(locale70);
        java.lang.String str75 = locale22.getDisplayVariant(locale70);
        java.lang.String str76 = locale70.getISO3Country();
        java.util.Locale.setDefault(category0, locale70);
        java.util.Locale locale79 = java.util.Locale.forLanguageTag("2022-02-11T09:41:56.877-00:00:00.001");
        java.util.Locale.setDefault(category0, locale79);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "52" + "'", str19, "52");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "292278993" + "'", str23, "292278993");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GBR" + "'", str24, "GBR");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644537697690,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=690,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        java.util.Locale locale3 = null;
        java.lang.String str4 = property2.getAsText(locale3);
        java.util.Locale locale5 = null;
        int int6 = property2.getMaximumTextLength(locale5);
        int int7 = property2.get();
        org.joda.time.MutableDateTime mutableDateTime8 = property2.roundHalfEven();
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime11 = property2.addWrapField(175);
        org.joda.time.MutableDateTime mutableDateTime12 = property2.roundCeiling();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "vendredi" + "'", str4, "vendredi");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        long long8 = dateTimeParserBucket5.computeMillis(true);
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.lang.String str15 = dateTimeZone12.getName((long) 2);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology17 = chronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        int int23 = mutableDateTime20.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime20.set(dateTimeFieldType24, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        int int28 = mutableDateTime20.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime29 = mutableDateTime20.toDateTime();
        java.util.Locale locale30 = null;
        java.util.Calendar calendar31 = mutableDateTime20.toCalendar(locale30);
        mutableDateTime20.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime20.millisOfDay();
        java.util.Locale locale38 = new java.util.Locale("32", "74409");
        org.joda.time.MutableDateTime mutableDateTime39 = property34.set("59", locale38);
        int int40 = dateTimeField18.getMaximumShortTextLength(locale38);
        org.joda.time.ReadablePartial readablePartial41 = null;
        int int42 = dateTimeField18.getMaximumValue(readablePartial41);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644537697726,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=726,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals(locale38.toString(), "32_74409");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Locale locale6 = new java.util.Locale("2022-02-11T00:01:37.468Z", "2022-02-11T00:01:37.854Z", "2022-02-11T09:40:33.450Z");
        java.lang.String str7 = locale0.getDisplayScript(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = locale6.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 2022-02-11t00:01:37.468z");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertEquals(locale6.toString(), "2022-02-11t00:01:37.468z_2022-02-11T00:01:37.854Z_2022-02-11T09:40:33.450Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology8, locale13);
        java.lang.Integer int15 = dateTimeParserBucket14.getPivotYear();
        java.lang.Integer int16 = dateTimeParserBucket14.getPivotYear();
        dateTimeParserBucket14.setOffset((java.lang.Integer) 74534912);
        long long19 = dateTimeParserBucket14.computeMillis();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-74534913L) + "'", long19 == (-74534913L));
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        mutableDateTime24.addHours(59);
        int int29 = mutableDateTime24.getMillisOfSecond();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology31, locale32, (java.lang.Integer) 9, 59);
        java.lang.Object obj36 = dateTimeParserBucket35.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket35.saveField(dateTimeFieldType37, 59);
        boolean boolean40 = mutableDateTime24.isSupported(dateTimeFieldType37);
        int int41 = mutableDateTime21.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int42 = mutableDateTime24.getDayOfMonth();
        mutableDateTime24.addYears(2922789);
        boolean boolean45 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.dayOfWeek();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = mutableDateTime50.isEqual(readableInstant51);
        mutableDateTime50.addHours(59);
        int int55 = mutableDateTime50.getMillisOfSecond();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology57, locale58, (java.lang.Integer) 9, 59);
        java.lang.Object obj62 = dateTimeParserBucket61.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        dateTimeParserBucket61.saveField(dateTimeFieldType63, 59);
        boolean boolean66 = mutableDateTime50.isSupported(dateTimeFieldType63);
        int int67 = mutableDateTime47.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        int int68 = mutableDateTime50.getDayOfMonth();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime71.copy();
        int int73 = mutableDateTime72.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.era();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime72.add(readableDuration75, 721);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime72);
        mutableDateTime72.setWeekyear(98);
        mutableDateTime72.addMonths(74785);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 767 + "'", int29 == 767);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 13 + "'", int42 == 13);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 767 + "'", int55 == 767);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5 + "'", int73 == 5);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.add((long) 94);
        int int25 = mutableDateTime14.getMillisOfSecond();
        int int26 = mutableDateTime14.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime14.yearOfEra();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 883 + "'", int25 == 883);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        boolean boolean10 = durationFieldType0.isSupported(chronology8);
        java.lang.String str11 = durationFieldType0.toString();
        java.lang.String str12 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "years" + "'", str11, "years");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "years" + "'", str12, "years");
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:40:11.487Z", throwable2);
        java.io.IOException iOException4 = new java.io.IOException("2022-02-11T09:42:16.069Z", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime1.toDateTime(dateTimeZone14);
        java.lang.String str16 = dateTimeZone14.getID();
        long long19 = dateTimeZone14.adjustOffset((long) 158, true);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        mutableDateTime21.addDays(0);
        int int27 = mutableDateTime21.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.weekyear();
        int int29 = mutableDateTime21.getMonthOfYear();
        mutableDateTime21.addDays(5);
        boolean boolean33 = mutableDateTime21.isAfter((long) '#');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        int int38 = mutableDateTime35.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime35.set(dateTimeFieldType39, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = mutableDateTime35.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime44 = mutableDateTime35.toDateTime();
        java.util.Locale locale45 = null;
        java.util.Calendar calendar46 = mutableDateTime35.toCalendar(locale45);
        org.joda.time.DateTimeZone dateTimeZone47 = mutableDateTime35.getZone();
        mutableDateTime21.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        mutableDateTime21.addMillis(145);
        mutableDateTime21.addMonths((int) '4');
        int int53 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology55, locale56, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket59.getZone();
        org.joda.time.Chronology chronology61 = dateTimeParserBucket59.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.days();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial67 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.dayOfWeek();
        java.util.Locale locale72 = null;
        java.lang.String str73 = property71.getAsText(locale72);
        java.util.Locale locale74 = null;
        int int75 = property71.getMaximumTextLength(locale74);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        boolean boolean79 = mutableDateTime77.isEqual(readableInstant78);
        int int80 = mutableDateTime77.getHourOfDay();
        mutableDateTime77.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTimeField dateTimeField85 = dateTimeFieldType83.getField(chronology84);
        int int86 = dateTimeField85.getMaximumValue();
        mutableDateTime77.setRounding(dateTimeField85);
        java.util.Locale locale89 = java.util.Locale.FRENCH;
        java.lang.String str90 = dateTimeField85.getAsShortText((int) (byte) 1, locale89);
        java.lang.String str91 = property71.getAsShortText(locale89);
        java.lang.String str92 = dateTimeField66.getAsText(readablePartial67, 237, locale89);
        int int93 = mutableDateTime21.get(dateTimeField66);
        mutableDateTime21.addMillis(74464784);
        int int96 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        long long98 = dateTimeZone14.previousTransition((long) 74533);
        java.lang.String str99 = dateTimeZone14.getID();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697822,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=822,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 158L + "'", long19 == 158L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 822 + "'", int27 == 822);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644537697822,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=822,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "vendredi" + "'", str73, "vendredi");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 59 + "'", int86 == 59);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "1" + "'", str90, "1");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ven." + "'", str91, "ven.");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "237" + "'", str92, "237");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 74533L + "'", long98 == 74533L);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "UTC" + "'", str99, "UTC");
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale7 = builder6.build();
        java.lang.String str8 = locale7.toLanguageTag();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType9.getField(chronology10);
        org.joda.time.DurationField durationField12 = dateTimeField11.getDurationField();
        boolean boolean14 = dateTimeField11.isLeap((long) (short) -1);
        java.lang.String str16 = dateTimeField11.getAsShortText((long) 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        int int20 = dateTimeField19.getMaximumValue();
        int int23 = dateTimeField19.getDifference((long) 10, (long) 'a');
        int int25 = dateTimeField19.getLeapAmount((-1L));
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = dateTimeField19.getAsText((long) 340, locale27);
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = dateTimeField19.getAsShortText((int) '4', locale30);
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = dateTimeField19.getAsText(readablePartial32, 292278993, locale34);
        int int36 = dateTimeField11.getMaximumTextLength(locale34);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale34.getDisplayVariant(locale37);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale7.getDisplayCountry(locale37);
        java.lang.String str42 = locale37.getISO3Country();
        java.util.Locale.setDefault(category0, locale37);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        mutableDateTime46.addHours(59);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.yearOfEra();
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar55 = mutableDateTime52.toCalendar(locale54);
        mutableDateTime52.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime52.millisOfDay();
        int int59 = mutableDateTime52.getDayOfWeek();
        mutableDateTime46.setDate((org.joda.time.ReadableInstant) mutableDateTime52);
        int int61 = mutableDateTime52.getRoundingMode();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket68.getZone();
        org.joda.time.Chronology chronology70 = dateTimeParserBucket68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.hourOfHalfday();
        org.joda.time.DurationField durationField72 = chronology70.days();
        boolean boolean73 = durationFieldType62.isSupported(chronology70);
        mutableDateTime52.setChronology(chronology70);
        java.util.Locale locale76 = new java.util.Locale("yearOfEra");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 57463972, chronology70, locale76);
        java.util.Locale locale78 = dateTimeParserBucket77.getLocale();
        java.util.Locale.setDefault(category0, locale78);
        java.util.Locale locale80 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder82 = builder81.clearExtensions();
        java.util.Locale.Builder builder84 = builder82.removeUnicodeLocaleAttribute("millis");
        java.util.Locale locale85 = builder84.build();
        java.lang.String str86 = locale85.toLanguageTag();
        java.lang.String str87 = locale85.getScript();
        java.util.Locale.setDefault(category0, locale85);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "52" + "'", str31, "52");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "292278993" + "'", str35, "292278993");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "TWN" + "'", str42, "TWN");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1644572965850,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=850,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals(locale76.toString(), "yearofera");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "yearofera");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "yearofera");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "und" + "'", str86, "und");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMillis(361);
        int int13 = mutableDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        mutableDateTime15.addYears(0);
        org.joda.time.Chronology chronology22 = null;
        java.util.Locale locale23 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(0L, chronology22, locale23, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeParserBucket26.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        int int33 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        boolean boolean35 = mutableDateTime30.isSupported(dateTimeFieldType34);
        int int36 = mutableDateTime15.get(dateTimeFieldType34);
        mutableDateTime15.setWeekyear(74419);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime15.secondOfDay();
        boolean boolean40 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        mutableDateTime44.addHours(59);
        org.joda.time.Chronology chronology49 = mutableDateTime44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology49.getZone();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.dayOfWeek();
        java.util.Locale locale54 = null;
        java.lang.String str55 = property53.getAsText(locale54);
        java.util.Locale locale56 = null;
        int int57 = property53.getMaximumTextLength(locale56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        mutableDateTime59.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int68 = dateTimeField67.getMaximumValue();
        mutableDateTime59.setRounding(dateTimeField67);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = dateTimeField67.getAsShortText((int) (byte) 1, locale71);
        java.lang.String str73 = property53.getAsShortText(locale71);
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.lang.String str75 = locale74.getScript();
        java.lang.String str76 = locale71.getDisplayScript(locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale71);
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) 74444144, chronology49);
        org.joda.time.DurationField durationField79 = chronology49.years();
        org.joda.time.DateTimeField dateTimeField80 = chronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField81 = chronology49.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime82 = mutableDateTime15.toMutableDateTime(chronology49);
        java.lang.Object obj83 = mutableDateTime82.clone();
        java.lang.String str84 = mutableDateTime82.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "vendredi" + "'", str55, "vendredi");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 59 + "'", int68 == 59);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ven." + "'", str73, "ven.");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(obj83);
// flaky:         org.junit.Assert.assertEquals(obj83.toString(), "74419-02-08T09:49:25.880Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "74419-02-08T09:49:25.880Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "74419-02-08T09:49:25.880Z");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "74419-02-08T09:49:25.880Z" + "'", str84, "74419-02-08T09:49:25.880Z");
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.DurationField durationField20 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.clockhourOfHalfday();
        java.lang.String str23 = dateTimeField21.getAsText(28874418L);
        long long25 = dateTimeField21.roundHalfFloor(865939858L);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "8" + "'", str23, "8");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 867600000L + "'", long25 == 867600000L);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMonthOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        boolean boolean8 = mutableDateTime6.isEqual(readableInstant7);
        mutableDateTime6.addHours(59);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfEra();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar15 = mutableDateTime12.toCalendar(locale14);
        mutableDateTime12.addMinutes((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.millisOfDay();
        int int19 = mutableDateTime12.getDayOfWeek();
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int21 = mutableDateTime12.getRoundingMode();
        boolean boolean22 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.millisOfDay();
        long long27 = property26.remainder();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572965919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=919,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        int int12 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        java.lang.Object obj21 = dateTimeParserBucket19.saveState();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        boolean boolean28 = mutableDateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale40.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology38, locale40, (java.lang.Integer) 2022);
        java.util.Locale locale44 = locale40.stripExtensions();
        dateTimeParserBucket19.saveField(dateTimeFieldType27, "", locale40);
        java.lang.String str46 = mutableDateTime1.toString("32", locale40);
        mutableDateTime1.add((long) 765);
        mutableDateTime1.setYear(34817966);
        int int51 = mutableDateTime1.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime1.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "32" + "'", str46, "32");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 38 + "'", int51 == 38);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.addMinutes(59);
        int int10 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = mutableDateTime12.toString(dateTimeFormatter15);
        int int17 = mutableDateTime12.getMonthOfYear();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = mutableDateTime20.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        java.lang.String str32 = dateTimeZone31.getID();
        java.lang.String str34 = dateTimeZone31.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime20.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone31.isLocalDateTimeGap(localDateTime36);
        mutableDateTime1.setZone(dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(358);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 358 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74965 + "'", int7 == 74965);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:49:25.953Z" + "'", str16, "2022-02-11T09:49:25.953Z");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:49:25.953Z" + "'", str24, "2022-02-11T09:49:25.953Z");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "UTC" + "'", str32, "UTC");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTC" + "'", str34, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:43:01.457Z", "2022-02-21T22:44:16.181+253:00");
        java.lang.String str3 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:43:01.457z_2022-02-21T22:44:16.181+253:00");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21T22:44:16.181+253:00" + "'", str3, "2022-02-21T22:44:16.181+253:00");
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket(0L, chronology4, locale5, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeParserBucket8.getZone();
        org.joda.time.Chronology chronology10 = dateTimeParserBucket8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology10.centuries();
        org.joda.time.DateTimeZone dateTimeZone13 = chronology10.getZone();
        org.joda.time.DurationField durationField14 = chronology10.weeks();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.year();
        java.util.Locale locale18 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        int int19 = dateTimeField15.getMaximumTextLength(locale18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        int int24 = dateTimeField23.getMaximumValue();
        int int27 = dateTimeField23.getDifference((long) 10, (long) 'a');
        int int29 = dateTimeField23.getLeapAmount((-1L));
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.lang.String str32 = dateTimeField23.getAsText((long) 340, locale31);
        java.lang.String str33 = dateTimeField15.getAsShortText(6, locale31);
        java.util.Locale.Builder builder34 = builder0.setLocale(locale31);
        java.util.Locale.Builder builder36 = builder34.setRegion("");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 59 + "'", int24 == 59);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "6" + "'", str33, "6");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField19 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology9);
        mutableDateTime21.addMillis(74922);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        mutableDateTime11.addHours(59);
        org.joda.time.Chronology chronology16 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime11.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar18 = mutableDateTime17.toGregorianCalendar();
        int int19 = property9.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = mutableDateTime21.isEqual(readableInstant22);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime21.set(dateTimeFieldType25, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        int int29 = mutableDateTime21.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime30 = mutableDateTime21.toDateTime();
        java.util.Locale locale31 = null;
        java.util.Calendar calendar32 = mutableDateTime21.toCalendar(locale31);
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime21.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = mutableDateTime21.toDateTimeISO();
        int int37 = property9.getDifference((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Chronology chronology40 = null;
        java.util.Locale locale41 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(0L, chronology40, locale41, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket44.getZone();
        org.joda.time.Chronology chronology46 = dateTimeParserBucket44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.hourOfHalfday();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.lang.String str49 = locale48.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology46, locale48, (java.lang.Integer) 2022);
        boolean boolean52 = property9.equals((java.lang.Object) chronology46);
        org.joda.time.DurationField durationField53 = chronology46.centuries();
        org.joda.time.Chronology chronology54 = chronology46.withUTC();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572965997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=25,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644537697997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        java.lang.Integer int8 = dateTimeParserBucket5.getOffsetInteger();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime13.isEqual(readableInstant14);
        mutableDateTime13.addHours(59);
        int int18 = mutableDateTime13.getMillisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        boolean boolean22 = mutableDateTime20.isEqual(readableInstant21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = mutableDateTime20.toString(dateTimeFormatter23);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        java.lang.String str33 = dateTimeZone31.getNameKey((long) (byte) 0);
        mutableDateTime20.setZoneRetainFields(dateTimeZone31);
        mutableDateTime13.setZone(dateTimeZone31);
        long long37 = dateTimeZone31.previousTransition((long) 852);
        long long40 = dateTimeZone31.adjustOffset((long) 580, true);
        long long44 = dateTimeZone31.convertLocalToUTC((long) 879, false, (long) 852);
        org.joda.time.Chronology chronology45 = chronology9.withZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime48.set(dateTimeFieldType52, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        int int56 = mutableDateTime48.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = mutableDateTime48.toDateTime();
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket(0L, chronology60, locale61, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket64.getZone();
        org.joda.time.Chronology chronology66 = dateTimeParserBucket64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfHalfday();
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.lang.String str69 = locale68.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology66, locale68, (java.lang.Integer) 2022);
        java.util.Locale locale72 = locale68.stripExtensions();
        java.lang.String str73 = locale72.getScript();
        java.lang.String str74 = locale72.getISO3Language();
        java.util.Calendar calendar75 = dateTime57.toCalendar(locale72);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime57.getZone();
        org.joda.time.Chronology chronology77 = chronology9.withZone(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25 + "'", int18 == 25);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:49:26.025Z" + "'", str24, "2022-02-11T09:49:26.025Z");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "UTC" + "'", str33, "UTC");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 852L + "'", long37 == 852L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 580L + "'", long40 == 580L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 879L + "'", long44 == 879L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "fra" + "'", str74, "fra");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644537697025,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=25,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.year();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setMillisOfSecond((int) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType12.getField(chronology13);
        int int15 = dateTimeField14.getMaximumValue();
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = dateTimeField14.getAsShortText(0L, locale17);
        boolean boolean20 = dateTimeField14.isLenient();
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        int int32 = mutableDateTime24.get(dateTimeFieldType31);
        int int33 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfEra();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar37 = mutableDateTime34.toCalendar(locale36);
        java.util.Calendar calendar38 = mutableDateTime24.toCalendar(locale36);
        java.lang.String str39 = dateTimeField14.getAsShortText(readablePartial21, (int) ' ', locale36);
        int int40 = property11.getMaximumShortTextLength(locale36);
        org.joda.time.MutableDateTime mutableDateTime41 = property11.roundCeiling();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        boolean boolean46 = mutableDateTime44.isEqual(readableInstant45);
        int int47 = mutableDateTime44.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime44.set(dateTimeFieldType48, (int) 'a');
        int int51 = mutableDateTime41.get(dateTimeFieldType48);
        java.lang.String str52 = mutableDateTime41.toString();
        int int53 = mutableDateTime41.getHourOfDay();
        boolean boolean55 = mutableDateTime41.isBefore(2678400000L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572966046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=26,MILLISECOND=46,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644537697046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=46,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "32" + "'", str39, "32");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35367 + "'", int51 == 35367);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:49:27.000Z" + "'", str52, "2022-02-11T09:49:27.000Z");
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        int int6 = mutableDateTime1.getDayOfYear();
        int int7 = mutableDateTime1.getEra();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(725);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:26.072Z" + "'", str5, "2022-02-11T09:49:26.072Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = null;
        java.lang.String str5 = mutableDateTime1.toString(dateTimeFormatter4);
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        java.lang.String str13 = dateTimeZone12.getID();
        java.lang.String str15 = dateTimeZone12.getNameKey((long) 74414);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime1.toMutableDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfYear();
        mutableDateTime18.addWeeks(678);
        boolean boolean22 = mutableDateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        int int23 = mutableDateTime18.getCenturyOfEra();
        mutableDateTime18.setYear(672);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime18.toMutableDateTime();
        int int27 = mutableDateTime18.getMonthOfYear();
        org.joda.time.Chronology chronology29 = null;
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(0L, chronology29, locale30, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket33.getZone();
        org.joda.time.Chronology chronology35 = dateTimeParserBucket33.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.minuteOfHour();
        org.joda.time.Chronology chronology41 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology35.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime18.toMutableDateTime(chronology35);
        mutableDateTime43.setWeekyear(19);
        mutableDateTime43.addMinutes(35030332);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:49:26.082Z" + "'", str5, "2022-02-11T09:49:26.082Z");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.ReadablePartial readablePartial9 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        java.util.Locale locale14 = null;
        java.lang.String str15 = property13.getAsText(locale14);
        java.util.Locale locale16 = null;
        int int17 = property13.getMaximumTextLength(locale16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        boolean boolean21 = mutableDateTime19.isEqual(readableInstant20);
        int int22 = mutableDateTime19.getHourOfDay();
        mutableDateTime19.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType25.getField(chronology26);
        int int28 = dateTimeField27.getMaximumValue();
        mutableDateTime19.setRounding(dateTimeField27);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.lang.String str32 = dateTimeField27.getAsShortText((int) (byte) 1, locale31);
        java.lang.String str33 = property13.getAsShortText(locale31);
        java.lang.String str34 = dateTimeField8.getAsShortText(readablePartial9, (int) (short) -1, locale31);
        int int36 = dateTimeField8.get((long) 74417);
        long long39 = dateTimeField8.add((long) '4', 34837044);
        int int40 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "vendredi" + "'", str15, "vendredi");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ven." + "'", str33, "ven.");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3009920601600052L + "'", long39 == 3009920601600052L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) 214);
        int int6 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 784 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        mutableDateTime1.setMillisOfDay(411);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        int int13 = mutableDateTime1.get(dateTimeFieldType11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.yearOfCentury();
        int int15 = mutableDateTime1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 411 + "'", int15 == 411);
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        java.util.Locale locale11 = null;
        java.util.Calendar calendar12 = mutableDateTime1.toCalendar(locale11);
        mutableDateTime1.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644537697131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=131,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        java.io.IOException iOException2 = new java.io.IOException("2022-02-11T09:40:37.821Z");
        java.io.IOException iOException3 = new java.io.IOException("2022-02-11T09:42:11.995Z", (java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException("\u82f1\u6587\u52a0\u62ff\u5927)");
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.io.IOException iOException8 = new java.io.IOException("2022-02-11T09:42:31.213Z", (java.lang.Throwable) iOException6);
        iOException2.addSuppressed((java.lang.Throwable) iOException8);
        java.lang.Throwable[] throwableArray10 = iOException2.getSuppressed();
        java.lang.String str11 = iOException2.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException: 2022-02-11T09:40:37.821Z" + "'", str11, "java.io.IOException: 2022-02-11T09:40:37.821Z");
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.DateTime dateTime18 = mutableDateTime1.toDateTimeISO();
        mutableDateTime1.setWeekyear(74512631);
        boolean boolean22 = mutableDateTime1.isBefore(31535999322L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str5 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "China" + "'", str3, "China");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        int int19 = mutableDateTime1.getEra();
        int int20 = mutableDateTime1.getMonthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = mutableDateTime1.toString(dateTimeFormatter21);
        int int23 = mutableDateTime1.getMinuteOfHour();
        mutableDateTime1.addWeeks(258);
        boolean boolean26 = mutableDateTime1.isEqualNow();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        boolean boolean30 = mutableDateTime28.isEqual(readableInstant29);
        mutableDateTime28.addHours(59);
        org.joda.time.Chronology chronology33 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime28.toMutableDateTime();
        mutableDateTime34.setTime((long) 381);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        int int41 = mutableDateTime38.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime38.set(dateTimeFieldType42, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone45 = mutableDateTime38.getZone();
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone45.isLocalDateTimeGap(localDateTime46);
        mutableDateTime34.setZone(dateTimeZone45);
        java.lang.String str50 = dateTimeZone45.getNameKey((long) 218);
        java.lang.String str52 = dateTimeZone45.getShortName((long) 34848733);
        mutableDateTime1.setZoneRetainFields(dateTimeZone45);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(35145958);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35145958 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T00:01:37.181Z" + "'", str22, "2022-02-11T00:01:37.181Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "UTC" + "'", str50, "UTC");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        int int10 = mutableDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.weekyear();
        mutableDateTime0.setMinuteOfDay(386);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDateTime(999, 205, 74869, 1244, (-32477), 34983280, 530);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1244 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572966193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=26,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.setMinuteOfHour((int) (short) 1);
        int int6 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.weekyear();
        int int8 = mutableDateTime1.getDayOfYear();
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.minuteOfDay();
        mutableDateTime10.addWeekyears(388);
        mutableDateTime10.addHours(973);
        boolean boolean16 = mutableDateTime10.isBeforeNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 202 + "'", int6 == 202);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 42 + "'", int8 == 42);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        java.lang.String str13 = dateTimeZone8.getID();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime15.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology21 = null;
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(0L, chronology21, locale22, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket25.getZone();
        java.lang.String str28 = dateTimeZone26.getNameKey((long) (byte) 0);
        mutableDateTime15.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime30 = null;
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        long long33 = dateTimeZone26.previousTransition((long) 518);
        long long35 = dateTimeZone8.getMillisKeepLocal(dateTimeZone26, (long) 441);
        int int37 = dateTimeZone8.getStandardOffset((long) 54);
        java.lang.String str38 = dateTimeZone8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:49:26.212Z" + "'", str19, "2022-02-11T09:49:26.212Z");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 518L + "'", long33 == 518L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 441L + "'", long35 == 441L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = mutableDateTime7.isEqual(readableInstant8);
        int int10 = mutableDateTime7.getHourOfDay();
        mutableDateTime7.addDays(0);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket19.getZone();
        boolean boolean22 = dateTimeZone21.isFixed();
        java.lang.String str24 = dateTimeZone21.getName((long) 'u');
        mutableDateTime1.setZone(dateTimeZone21);
        java.lang.String str27 = dateTimeZone21.getName((long) 86399);
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter30.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter30.getParser();
        boolean boolean33 = dateTimeFormatter30.isParser();
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(0L, chronology35, locale36, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket39.getZone();
        org.joda.time.Chronology chronology41 = dateTimeParserBucket39.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.days();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology41.add(readablePeriod43, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter30.withChronology(chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter47.withOffsetParsed();
        boolean boolean49 = dateTimeFormatter48.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter48.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter48.withDefaultYear(772);
        boolean boolean53 = dateTimeFormatter52.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withZoneUTC();
        boolean boolean55 = dateTimeZone21.equals((java.lang.Object) dateTimeFormatter52);
        long long57 = dateTimeZone21.convertUTCToLocal((long) 74902404);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35366235 + "'", int4 == 35366235);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNull(dateTimeZone31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 74902404L + "'", long57 == 74902404L);
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        long long10 = dateTimeZone8.nextTransition((long) 59);
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.addHours(59);
        org.joda.time.Chronology chronology19 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.toMutableDateTime();
        int int21 = mutableDateTime14.getYear();
        int int22 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.add((long) 94);
        org.joda.time.Chronology chronology26 = null;
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(0L, chronology26, locale27, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        org.joda.time.Chronology chronology32 = dateTimeParserBucket30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology32.add(readablePeriod34, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField39 = chronology32.secondOfMinute();
        org.joda.time.DateTime dateTime40 = mutableDateTime14.toDateTime(chronology32);
        org.joda.time.DurationField durationField41 = chronology32.weeks();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 6L + "'", long37 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addWeekyears(796);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, 40);
        mutableDateTime1.addMillis(34873735);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add(100);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.addWrapField(10);
        mutableDateTime25.setMillis((long) 779);
        long long28 = mutableDateTime25.getMillis();
        mutableDateTime25.addDays(35651);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(0L, chronology32, locale33, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeParserBucket36.getZone();
        org.joda.time.Chronology chronology38 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology38);
        int int41 = mutableDateTime40.getYear();
        org.joda.time.Chronology chronology43 = null;
        java.util.Locale locale44 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(0L, chronology43, locale44, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeParserBucket47.getZone();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.dayOfWeek();
        java.lang.String str51 = chronology49.toString();
        org.joda.time.DurationField durationField52 = chronology49.millis();
        org.joda.time.Chronology chronology54 = null;
        java.util.Locale locale55 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(0L, chronology54, locale55, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone59 = dateTimeParserBucket58.getZone();
        org.joda.time.DateTimeZone dateTimeZone60 = dateTimeParserBucket58.getZone();
        boolean boolean61 = dateTimeZone60.isFixed();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType70.getField(chronology71);
        int int73 = dateTimeField72.getMaximumValue();
        mutableDateTime64.setRounding(dateTimeField72);
        java.util.Locale locale76 = java.util.Locale.FRENCH;
        java.lang.String str77 = dateTimeField72.getAsShortText((int) (byte) 1, locale76);
        java.lang.String str78 = dateTimeZone60.getName(10930L, locale76);
        org.joda.time.Chronology chronology79 = chronology49.withZone(dateTimeZone60);
        mutableDateTime40.setZoneRetainFields(dateTimeZone60);
        mutableDateTime25.setZoneRetainFields(dateTimeZone60);
        boolean boolean82 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone84 = mutableDateTime1.getZone();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 779L + "'", long28 == 779L);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 59 + "'", int73 == 59);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(340);
        java.lang.String str3 = dateTimeZone1.getName((-512L));
        long long5 = dateTimeZone1.nextTransition(1644572502560L);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter8.getParser();
        boolean boolean11 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 280);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        mutableDateTime15.addHours(59);
        int int20 = mutableDateTime15.getMillisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = mutableDateTime22.isEqual(readableInstant23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = mutableDateTime22.toString(dateTimeFormatter25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        java.lang.String str35 = dateTimeZone33.getNameKey((long) (byte) 0);
        mutableDateTime22.setZoneRetainFields(dateTimeZone33);
        mutableDateTime15.setZone(dateTimeZone33);
        long long39 = dateTimeZone33.previousTransition((long) 852);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter8.withZone(dateTimeZone33);
        boolean boolean41 = dateTimeZone1.equals((java.lang.Object) dateTimeFormatter40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter40.withDefaultYear(34907);
        org.joda.time.ReadablePartial readablePartial45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTimeFormatter40.print(readablePartial45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+340:00" + "'", str3, "+340:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572502560L + "'", long5 == 1644572502560L);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 309 + "'", int20 == 309);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:49:26.309Z" + "'", str26, "2022-02-11T09:49:26.309Z");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 852L + "'", long39 == 852L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTime();
        int int8 = mutableDateTime1.getMinuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        mutableDateTime1.addMonths((int) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(0L, chronology15, locale16, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone20 = dateTimeParserBucket19.getZone();
        long long22 = dateTimeParserBucket19.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        boolean boolean25 = dateTimeParserBucket19.restoreState((java.lang.Object) property24);
        int int26 = property24.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundFloor();
        java.util.Locale locale30 = new java.util.Locale("2022-02-11T09:40:08.213Z", "2022-02-11T09:40:32.831Z");
        int int31 = property24.getMaximumShortTextLength(locale30);
        java.util.Calendar calendar32 = mutableDateTime1.toCalendar(locale30);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.copy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = mutableDateTime33.toString(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals(locale30.toString(), "2022-02-11t09:40:08.213z_2022-02-11T09:40:32.831Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1899665366322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2030,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=72,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=26,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2030-03-13T20:49:26.322Z" + "'", str35, "2030-03-13T20:49:26.322Z");
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.hourOfDay();
        boolean boolean20 = property19.isLeap();
        boolean boolean21 = property19.isLeap();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        java.io.IOException iOException1 = new java.io.IOException("");
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        boolean boolean12 = dateTimeFormatter10.isParser();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        boolean boolean16 = mutableDateTime14.isEqual(readableInstant15);
        mutableDateTime14.setMinuteOfHour((int) (short) 1);
        int int19 = mutableDateTime14.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.weekyear();
        int int21 = mutableDateTime14.getDayOfYear();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime14.setZone(dateTimeZone23);
        java.lang.String str26 = dateTimeZone23.getShortName((long) 2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter10.withZone(dateTimeZone23);
        boolean boolean28 = dateTimeFormatter27.isParser();
        java.lang.Appendable appendable29 = null;
        org.joda.time.ReadablePartial readablePartial30 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(appendable29, readablePartial30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 364 + "'", int19 == 364);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.copy();
        int int8 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfHour();
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11, 74438);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeFormatter20.getZone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime24.set(dateTimeFieldType28, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime24.getZone();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime24.secondOfMinute();
        mutableDateTime24.addWeeks(665);
        int int35 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime24.weekOfWeekyear();
        mutableDateTime24.setMillisOfDay(785);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeFormatter20.print((org.joda.time.ReadableInstant) mutableDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 45 + "'", int35 == 45);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        mutableDateTime1.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology10 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        int int12 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.setDayOfYear(40);
        int int15 = mutableDateTime1.getYear();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        org.joda.time.Chronology chronology23 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.dayOfYear();
        java.lang.String str26 = chronology23.toString();
        mutableDateTime1.setChronology(chronology23);
        int int28 = mutableDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        boolean boolean32 = mutableDateTime30.isEqual(readableInstant31);
        mutableDateTime30.addHours(59);
        org.joda.time.Chronology chronology35 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology35.getZone();
        java.lang.String str37 = dateTimeZone36.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        boolean boolean42 = mutableDateTime40.isEqual(readableInstant41);
        mutableDateTime40.addHours(59);
        org.joda.time.Chronology chronology45 = mutableDateTime40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime40.toMutableDateTime();
        int int47 = mutableDateTime40.getYear();
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime40.getZone();
        boolean boolean50 = dateTimeZone48.equals((java.lang.Object) 302);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime38.toMutableDateTime(dateTimeZone48);
        int int52 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74966 + "'", int7 == 74966);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 410 + "'", int12 == 410);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T00:01:37.241Z", "2022-02-11T09:40:41.810Z", "2022-02-11T09:42:59.396Z");
        java.lang.Object obj4 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t00:01:37.241z_2022-02-11T09:40:41.810Z_2022-02-11T09:42:59.396Z");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "2022-02-11t00:01:37.241z_2022-02-11T09:40:41.810Z_2022-02-11T09:42:59.396Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "2022-02-11t00:01:37.241z_2022-02-11T09:40:41.810Z_2022-02-11T09:42:59.396Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "2022-02-11t00:01:37.241z_2022-02-11T09:40:41.810Z_2022-02-11T09:42:59.396Z");
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.lang.String str12 = locale11.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology9, locale11, (java.lang.Integer) 2022);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.UK;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        java.util.Locale locale21 = null;
        java.lang.String str22 = property20.getAsText(locale21);
        java.util.Locale locale23 = null;
        int int24 = property20.getMaximumTextLength(locale23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        int int29 = mutableDateTime26.getHourOfDay();
        mutableDateTime26.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType32.getField(chronology33);
        int int35 = dateTimeField34.getMaximumValue();
        mutableDateTime26.setRounding(dateTimeField34);
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = dateTimeField34.getAsShortText((int) (byte) 1, locale38);
        java.lang.String str40 = property20.getAsShortText(locale38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.getScript();
        java.lang.String str43 = locale38.getDisplayScript(locale41);
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = locale38.getDisplayLanguage(locale44);
        java.lang.String str46 = locale17.getDisplayCountry(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 232, chronology9, locale44);
        org.joda.time.DurationField durationField48 = chronology9.millis();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology9.getZone();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray53 = chronology9.get(readablePeriod50, (long) 35359804, (long) 35187545);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "vendredi" + "'", str22, "vendredi");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 59 + "'", int35 == 59);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ven." + "'", str40, "ven.");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "French" + "'", str45, "French");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "United Kingdom" + "'", str46, "United Kingdom");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:43:56.121Z");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 74480);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 935);
        org.joda.time.Chronology chronology14 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withDefaultYear(15465);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale9, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket12.getZone();
        org.joda.time.Chronology chronology14 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.lang.String str17 = locale16.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology14, locale16, (java.lang.Integer) 2022);
        java.util.Locale locale20 = locale16.stripExtensions();
        java.lang.String str21 = locale20.getISO3Language();
        java.lang.String str22 = locale20.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withLocale(locale20);
        int int24 = dateTimeFormatter2.getDefaultYear();
        java.io.Writer writer25 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer25, (long) 35345023);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fra" + "'", str22, "fra");
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2000 + "'", int24 == 2000);
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        mutableDateTime8.addHours(59);
        org.joda.time.Chronology chronology13 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology13.getZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.dayOfWeek();
        java.util.Locale locale18 = null;
        java.lang.String str19 = property17.getAsText(locale18);
        java.util.Locale locale20 = null;
        int int21 = property17.getMaximumTextLength(locale20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        mutableDateTime23.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType29.getField(chronology30);
        int int32 = dateTimeField31.getMaximumValue();
        mutableDateTime23.setRounding(dateTimeField31);
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = dateTimeField31.getAsShortText((int) (byte) 1, locale35);
        java.lang.String str37 = property17.getAsShortText(locale35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = locale35.getDisplayScript(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale35);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.yearOfEra();
        int int44 = mutableDateTime42.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime42.set(dateTimeFieldType45, 0);
        boolean boolean48 = dateTimeParserBucket41.restoreState((java.lang.Object) dateTimeFieldType45);
        org.joda.time.Chronology chronology50 = null;
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(0L, chronology50, locale51, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket54.getZone();
        org.joda.time.Chronology chronology56 = dateTimeParserBucket54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.weekyear();
        dateTimeParserBucket41.saveField(dateTimeField58, 642);
        org.joda.time.Chronology chronology64 = null;
        java.util.Locale locale65 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket(0L, chronology64, locale65, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket68.getZone();
        long long71 = dateTimeParserBucket68.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.yearOfEra();
        boolean boolean74 = dateTimeParserBucket68.restoreState((java.lang.Object) property73);
        org.joda.time.DurationField durationField75 = property73.getDurationField();
        java.util.Locale.Category category76 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale77 = java.util.Locale.getDefault(category76);
        java.lang.String str79 = locale77.getExtension('u');
        int int80 = property73.getMaximumTextLength(locale77);
        long long81 = dateTimeField58.set(0L, "31", locale77);
        java.util.Locale.Builder builder82 = builder5.setLocale(locale77);
        java.util.Locale.Builder builder83 = builder82.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "vendredi" + "'", str19, "vendredi");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ven." + "'", str37, "ven.");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + category76 + "' != '" + java.util.Locale.Category.FORMAT + "'", category76.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 9 + "'", int80 == 9);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-61188825600000L) + "'", long81 == (-61188825600000L));
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.Chronology chronology14 = chronology7.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology7);
        mutableDateTime15.addWeekyears(419);
        boolean boolean19 = mutableDateTime15.isEqual((long) 74494);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.yearOfEra();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime15.add(readableDuration21, 983);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology1, locale2, (java.lang.Integer) 9, 59);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfWeek();
        int int9 = property8.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.yearOfCentury();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        int int17 = property15.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType18.getField(chronology19);
        int int21 = dateTimeField20.getMaximumValue();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = dateTimeField20.getAsShortText(0L, locale23);
        int int26 = property15.getMaximumTextLength(locale23);
        dateTimeParserBucket5.saveField(dateTimeFieldType10, "2022-02-11T00:01:37.078Z", locale23);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType10.getDurationType();
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale32 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(0L, chronology31, locale32, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeParserBucket35.getZone();
        org.joda.time.Chronology chronology37 = dateTimeParserBucket35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        long long42 = chronology37.add(readablePeriod39, (long) 6, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = chronology37.getZone();
        org.joda.time.DurationField durationField44 = chronology37.seconds();
        org.joda.time.DurationField durationField45 = chronology37.weeks();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType10.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField47 = chronology37.minuteOfDay();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6L + "'", long42 == 6L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.centuries();
        org.joda.time.DurationField durationField10 = chronology7.years();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(390, 13);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime4 = null;
        boolean boolean5 = dateTimeZone2.isLocalDateTimeGap(localDateTime4);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+390:13' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+390:13" + "'", str3, "+390:13");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+W0:13");
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        java.lang.String str8 = dateTimeZone7.getID();
        boolean boolean10 = dateTimeZone7.isStandardOffset((long) 930);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.addHours((int) (short) 0);
        mutableDateTime11.addWeekyears((int) 'a');
        mutableDateTime11.setWeekyear(74416135);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        int int22 = dateTimeZone19.getOffsetFromLocal((long) 865);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        boolean boolean24 = mutableDateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        int int25 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime11);
        int int26 = mutableDateTime11.getDayOfYear();
        java.lang.String str27 = mutableDateTime11.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 42 + "'", int26 == 42);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "74416135-02-11T09:49:26.583Z" + "'", str27, "74416135-02-11T09:49:26.583Z");
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        long long16 = chronology7.add((long) 852, (long) 74409, (int) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField19 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.yearOfEra();
        long long23 = dateTimeField20.add((long) 636, (long) 10701);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 7218525L + "'", long16 == 7218525L);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 337690944000636L + "'", long23 == 337690944000636L);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear((int) 'x');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withOffsetParsed();
        java.lang.StringBuffer stringBuffer10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        boolean boolean17 = mutableDateTime12.isSupported(dateTimeFieldType16);
        java.lang.Object obj18 = mutableDateTime12.clone();
        mutableDateTime12.setMillis((long) 5);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime12.add(readablePeriod21);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(0L, chronology24, locale25, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeParserBucket28.getZone();
        long long31 = dateTimeParserBucket28.computeMillis(false);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfEra();
        boolean boolean34 = dateTimeParserBucket28.restoreState((java.lang.Object) property33);
        int int35 = property33.getMinimumValueOverall();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = mutableDateTime37.isEqual(readableInstant38);
        int int40 = mutableDateTime37.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime37.set(dateTimeFieldType41, (int) 'a');
        int int44 = mutableDateTime37.getEra();
        boolean boolean45 = mutableDateTime37.isEqualNow();
        int int46 = property33.getDifference((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.addMinutes(40);
        boolean boolean49 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer10, (org.joda.time.ReadableInstant) mutableDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2022-02-11T09:49:26.606Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2022-02-11T09:49:26.606Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2022-02-11T09:49:26.606Z");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        boolean boolean11 = mutableDateTime9.isEqual(readableInstant10);
        int int12 = mutableDateTime9.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime9.set(dateTimeFieldType13, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        int int17 = mutableDateTime9.get(dateTimeFieldType16);
        int int18 = mutableDateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant19 = mutableDateTime9.toInstant();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime9.weekyear();
        int int21 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.getMutableDateTime();
        int int26 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime25.add(readablePeriod27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        int int2 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        boolean boolean6 = mutableDateTime4.isEqual(readableInstant5);
        mutableDateTime4.addHours(59);
        int int9 = mutableDateTime4.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime11.isEqual(readableInstant12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = mutableDateTime11.toString(dateTimeFormatter14);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale18, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone22 = dateTimeParserBucket21.getZone();
        java.lang.String str24 = dateTimeZone22.getNameKey((long) (byte) 0);
        mutableDateTime11.setZoneRetainFields(dateTimeZone22);
        mutableDateTime4.setZone(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        int int32 = dateTimeField30.getMinimumValue((long) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.dayOfWeek();
        java.util.Locale locale37 = null;
        java.lang.String str38 = property36.getAsText(locale37);
        java.util.Locale locale39 = null;
        int int40 = property36.getMaximumTextLength(locale39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        boolean boolean44 = mutableDateTime42.isEqual(readableInstant43);
        int int45 = mutableDateTime42.getHourOfDay();
        mutableDateTime42.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType48.getField(chronology49);
        int int51 = dateTimeField50.getMaximumValue();
        mutableDateTime42.setRounding(dateTimeField50);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.lang.String str55 = dateTimeField50.getAsShortText((int) (byte) 1, locale54);
        java.lang.String str56 = property36.getAsShortText(locale54);
        java.lang.String str57 = dateTimeField30.getAsShortText(1L, locale54);
        java.util.Set<java.lang.Character> charSet58 = locale54.getExtensionKeys();
        java.lang.String str59 = dateTimeZone22.getShortName((long) 6, locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        mutableDateTime60.addDays(324);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        boolean boolean66 = mutableDateTime64.isEqual(readableInstant65);
        int int67 = mutableDateTime64.getHourOfDay();
        mutableDateTime64.addYears(0);
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(0L, chronology71, locale72, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket75.getZone();
        mutableDateTime64.setZoneRetainFields(dateTimeZone76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(chronology78);
        org.joda.time.ReadableInstant readableInstant80 = null;
        boolean boolean81 = mutableDateTime79.isEqual(readableInstant80);
        int int82 = mutableDateTime79.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.year();
        boolean boolean84 = mutableDateTime79.isSupported(dateTimeFieldType83);
        int int85 = mutableDateTime64.get(dateTimeFieldType83);
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime(chronology86);
        org.joda.time.ReadableInstant readableInstant88 = null;
        boolean boolean89 = mutableDateTime87.isEqual(readableInstant88);
        mutableDateTime87.addHours(59);
        org.joda.time.Chronology chronology92 = mutableDateTime87.getChronology();
        org.joda.time.DateTimeZone dateTimeZone93 = chronology92.getZone();
        boolean boolean94 = dateTimeFieldType83.isSupported(chronology92);
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime60.property(dateTimeFieldType83);
        int int96 = mutableDateTime60.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 632 + "'", int9 == 632);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:49:26.632Z" + "'", str15, "2022-02-11T09:49:26.632Z");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "vendredi" + "'", str38, "vendredi");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 59 + "'", int51 == 59);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ven." + "'", str56, "ven.");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
        org.junit.Assert.assertNotNull(charSet58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00" + "'", str59, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfEra();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.set(625);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        org.joda.time.Instant instant17 = mutableDateTime8.toInstant();
        mutableDateTime8.addDays((int) ' ');
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime8);
        int int21 = mutableDateTime8.getHourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        int int10 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.Instant instant11 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.dayOfWeek();
        mutableDateTime1.addMonths(411);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime1.add(readablePeriod15, (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(0L, chronology19, locale20, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeParserBucket23.getZone();
        org.joda.time.Chronology chronology25 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.halfdayOfDay();
        mutableDateTime1.setChronology(chronology25);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableDateTime34.isEqual(readableInstant35);
        int int37 = mutableDateTime34.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime34.set(dateTimeFieldType38, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        int int42 = mutableDateTime34.get(dateTimeFieldType41);
        org.joda.time.Instant instant43 = mutableDateTime34.toInstant();
        mutableDateTime34.addDays((int) ' ');
        int int46 = mutableDateTime34.getSecondOfMinute();
        boolean boolean47 = mutableDateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        int int48 = mutableDateTime32.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37 + "'", int46 == 37);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 668 + "'", int48 == 668);
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        boolean boolean7 = locale6.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withLocale(locale6);
        java.lang.Integer int9 = dateTimeFormatter8.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter8.withPivotYear(552);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronology();
        int int13 = dateTimeFormatter11.getDefaultYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        boolean boolean18 = mutableDateTime16.isEqual(readableInstant17);
        int int19 = mutableDateTime16.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime16.set(dateTimeFieldType20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        int int24 = mutableDateTime16.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = mutableDateTime16.toDateTime();
        java.util.Locale locale26 = null;
        java.util.Calendar calendar27 = mutableDateTime16.toCalendar(locale26);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTime dateTime30 = mutableDateTime16.toDateTime(dateTimeZone29);
        java.lang.String str31 = dateTimeZone29.getID();
        long long34 = dateTimeZone29.adjustOffset((long) 158, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(27320L, dateTimeZone29);
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.dayOfWeek();
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DurationField durationField47 = chronology44.millis();
        org.joda.time.Chronology chronology49 = null;
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(0L, chronology49, locale50, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket53.getZone();
        org.joda.time.DateTimeZone dateTimeZone55 = dateTimeParserBucket53.getZone();
        boolean boolean56 = dateTimeZone55.isFixed();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        boolean boolean61 = mutableDateTime59.isEqual(readableInstant60);
        int int62 = mutableDateTime59.getHourOfDay();
        mutableDateTime59.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType65.getField(chronology66);
        int int68 = dateTimeField67.getMaximumValue();
        mutableDateTime59.setRounding(dateTimeField67);
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = dateTimeField67.getAsShortText((int) (byte) 1, locale71);
        java.lang.String str73 = dateTimeZone55.getName(10930L, locale71);
        org.joda.time.Chronology chronology74 = chronology44.withZone(dateTimeZone55);
        long long76 = dateTimeZone29.getMillisKeepLocal(dateTimeZone55, 1100565903271269863L);
        boolean boolean78 = dateTimeZone55.equals((java.lang.Object) 601L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter11.withZone(dateTimeZone55);
        long long81 = dateTimeZone55.nextTransition((long) 74514);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644537697684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTC" + "'", str31, "UTC");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 158L + "'", long34 == 158L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 59 + "'", int68 == 59);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1100565903271269863L + "'", long76 == 1100565903271269863L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 74514L + "'", long81 == 74514L);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 627);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withDefaultYear(34808947);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime15.getZone();
        org.joda.time.Chronology chronology23 = mutableDateTime15.getChronology();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale26, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        long long32 = dateTimeParserBucket29.computeMillis(true);
        org.joda.time.Chronology chronology33 = dateTimeParserBucket29.getChronology();
        org.joda.time.Chronology chronology34 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.hourOfHalfday();
        boolean boolean37 = mutableDateTime15.equals((java.lang.Object) chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter12.withChronology(chronology33);
        org.joda.time.Chronology chronology39 = dateTimeFormatter12.getChronology();
        java.io.Writer writer40 = null;
        org.joda.time.ReadablePartial readablePartial41 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter12.printTo(writer40, readablePartial41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(chronology39);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(74621);
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        org.joda.time.Chronology chronology12 = dateTimeFormatter10.getChronolgy();
        org.joda.time.Chronology chronology13 = dateTimeFormatter10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter10.withDefaultYear(192);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        boolean boolean6 = languageRange1.equals((java.lang.Object) "2022-02-11T09:48:34.053Z");
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "twn" + "'", str4, "twn");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.addHours((int) (short) 0);
        mutableDateTime0.addWeekyears((int) 'a');
        java.lang.String str6 = mutableDateTime0.toString("0");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        mutableDateTime0.set(dateTimeFieldType15, 5);
        boolean boolean19 = mutableDateTime0.isBeforeNow();
        int int20 = mutableDateTime0.getYearOfCentury();
        int int21 = mutableDateTime0.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = mutableDateTime24.isEqual(readableInstant25);
        int int27 = mutableDateTime24.getHourOfDay();
        mutableDateTime24.addDays(0);
        int int30 = mutableDateTime24.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime24.add(readableDuration31, 693);
        org.joda.time.Chronology chronology34 = mutableDateTime24.getChronology();
        int int35 = mutableDateTime24.getMinuteOfDay();
        boolean boolean36 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime0.setYear(97302);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime0.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(chronology34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 589 + "'", int35 == 589);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter2.getParser();
        java.lang.Appendable appendable9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.addHours((int) (short) 0);
        mutableDateTime10.addWeekyears((int) 'a');
        mutableDateTime10.addWeeks(74432048);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        boolean boolean20 = mutableDateTime18.isEqual(readableInstant19);
        mutableDateTime18.addHours(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.minuteOfHour();
        int int24 = mutableDateTime18.getSecondOfDay();
        mutableDateTime18.setSecondOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology27 = mutableDateTime18.getChronology();
        int int28 = mutableDateTime18.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime18.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime18.toMutableDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        boolean boolean34 = mutableDateTime32.isEqual(readableInstant33);
        mutableDateTime32.addHours(59);
        int int37 = mutableDateTime32.getMillisOfSecond();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = mutableDateTime39.isEqual(readableInstant40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = mutableDateTime39.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(0L, chronology45, locale46, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket49.getZone();
        java.lang.String str52 = dateTimeZone50.getNameKey((long) (byte) 0);
        mutableDateTime39.setZoneRetainFields(dateTimeZone50);
        mutableDateTime32.setZone(dateTimeZone50);
        java.lang.String str55 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime56 = mutableDateTime18.toDateTime(dateTimeZone50);
        int int57 = mutableDateTime10.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = null;
        org.joda.time.format.DateTimeParser dateTimeParser59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter58, dateTimeParser59);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTimeFormatter60.getZone();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = mutableDateTime63.isEqual(readableInstant64);
        mutableDateTime63.addHours(59);
        org.joda.time.Chronology chronology68 = mutableDateTime63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology68.getZone();
        java.lang.String str70 = dateTimeZone69.getID();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter60.withZone(dateTimeZone69);
        java.lang.String str73 = dateTimeZone69.getName((long) 521);
        mutableDateTime10.setZoneRetainFields(dateTimeZone69);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable9, (org.joda.time.ReadableInstant) mutableDateTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 74966 + "'", int24 == 74966);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 771 + "'", int37 == 771);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:49:26.771Z" + "'", str43, "2022-02-11T09:49:26.771Z");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "UTC" + "'", str52, "UTC");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "UTC" + "'", str70, "UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00" + "'", str73, "+00:00");
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        boolean boolean10 = mutableDateTime8.isEqual(readableInstant9);
        int int11 = mutableDateTime8.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime8.set(dateTimeFieldType12, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        int int16 = mutableDateTime8.get(dateTimeFieldType15);
        java.util.Date date17 = mutableDateTime8.toDate();
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTime dateTime20 = mutableDateTime8.toDateTime();
        boolean boolean21 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = mutableDateTime23.isEqual(readableInstant24);
        int int26 = mutableDateTime23.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime23.set(dateTimeFieldType27, (int) 'a');
        mutableDateTime23.setMillis(5L);
        int int32 = mutableDateTime23.getWeekOfWeekyear();
        mutableDateTime23.addYears(34830);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        boolean boolean38 = mutableDateTime36.isEqual(readableInstant37);
        int int39 = mutableDateTime36.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime36.set(dateTimeFieldType40, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime36.getZone();
        long long45 = dateTimeZone43.nextTransition((long) 59);
        java.lang.String str47 = dateTimeZone43.getName((long) (short) 0);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        boolean boolean51 = mutableDateTime49.isEqual(readableInstant50);
        mutableDateTime49.addHours(59);
        org.joda.time.Chronology chronology54 = mutableDateTime49.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime49.toMutableDateTime();
        int int56 = mutableDateTime49.getYear();
        int int57 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        long long66 = dateTimeParserBucket63.computeMillis(true);
        org.joda.time.Chronology chronology67 = dateTimeParserBucket63.getChronology();
        org.joda.time.MutableDateTime mutableDateTime68 = mutableDateTime49.toMutableDateTime(chronology67);
        mutableDateTime23.setMillis((org.joda.time.ReadableInstant) mutableDateTime68);
        boolean boolean70 = dateTime20.isBefore((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.Instant instant71 = dateTime20.toInstant();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 00:01:37 UTC 2022");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 59L + "'", long45 == 59L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(instant71);
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket(0L, chronology2, locale3, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeParserBucket6.getZone();
        org.joda.time.Chronology chronology8 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        java.util.Locale locale10 = java.util.Locale.FRENCH;
        java.lang.String str11 = locale10.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology8, locale10, (java.lang.Integer) 2022);
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getISO3Language();
        java.lang.String str17 = locale14.getScript();
        java.lang.String str18 = locale14.getScript();
        java.lang.String str19 = locale14.getDisplayScript();
        java.lang.String str20 = locale14.getLanguage();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("millis");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        boolean boolean28 = mutableDateTime26.isEqual(readableInstant27);
        mutableDateTime26.addHours(59);
        int int31 = mutableDateTime26.getMillisOfSecond();
        mutableDateTime26.setMillisOfDay(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType35.getField(chronology36);
        int int38 = dateTimeField37.getMaximumValue();
        int int41 = dateTimeField37.getDifference((long) 10, (long) 'a');
        int int43 = dateTimeField37.getLeapAmount((-1L));
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = dateTimeField37.getAsText((long) 340, locale45);
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = dateTimeField37.getAsShortText((int) '4', locale48);
        org.joda.time.ReadablePartial readablePartial50 = null;
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField37.getAsText(readablePartial50, 292278993, locale52);
        java.lang.String str54 = mutableDateTime26.toString("237", locale52);
        java.util.Locale.Builder builder55 = builder24.setLocale(locale52);
        java.util.Locale.Builder builder56 = builder24.clear();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType59.getField(chronology60);
        int int62 = dateTimeField61.getMaximumValue();
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.lang.String str65 = locale64.getISO3Country();
        java.lang.String str66 = dateTimeField61.getAsShortText(0L, locale64);
        boolean boolean67 = dateTimeField61.isLenient();
        org.joda.time.ReadablePartial readablePartial68 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        boolean boolean73 = mutableDateTime71.isEqual(readableInstant72);
        int int74 = mutableDateTime71.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime71.set(dateTimeFieldType75, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        int int79 = mutableDateTime71.get(dateTimeFieldType78);
        int int80 = mutableDateTime71.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.yearOfEra();
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar84 = mutableDateTime81.toCalendar(locale83);
        java.util.Calendar calendar85 = mutableDateTime71.toCalendar(locale83);
        java.lang.String str86 = dateTimeField61.getAsShortText(readablePartial68, (int) ' ', locale83);
        int int87 = property58.getMaximumShortTextLength(locale83);
        java.lang.String str88 = locale83.toLanguageTag();
        java.util.Locale.Builder builder89 = builder56.setLocale(locale83);
        java.util.Locale.Builder builder90 = builder56.clearExtensions();
        java.util.Locale.Builder builder91 = builder56.clear();
        java.util.Locale.Builder builder92 = builder56.clear();
        java.util.Locale.Builder builder93 = builder56.clear();
        boolean boolean94 = locale14.equals((java.lang.Object) builder56);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fra" + "'", str16, "fra");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fr" + "'", str20, "fr");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 835 + "'", int31 == 835);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 59 + "'", int38 == 59);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0" + "'", str46, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "52" + "'", str49, "52");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "292278993" + "'", str53, "292278993");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "237" + "'", str54, "237");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 59 + "'", int62 == 59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 9 + "'", int74 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644572966835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=26,MILLISECOND=835,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=1644537697835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=835,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "32" + "'", str86, "32");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "zh-TW" + "'", str88, "zh-TW");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.minuteOfHour();
        int int7 = mutableDateTime1.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        int int11 = dateTimeField10.getMaximumValue();
        int int14 = dateTimeField10.getDifference((long) 10, (long) 'a');
        int int16 = dateTimeField10.getLeapAmount((-1L));
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = dateTimeField10.getAsText((long) 340, locale18);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = dateTimeField10.getAsShortText((int) '4', locale21);
        org.joda.time.ReadablePartial readablePartial23 = null;
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = dateTimeField10.getAsText(readablePartial23, 292278993, locale25);
        java.util.Calendar calendar27 = mutableDateTime1.toCalendar(locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean29 = mutableDateTime1.isSupported(dateTimeFieldType28);
        java.lang.String str30 = mutableDateTime1.toString();
        int int31 = mutableDateTime1.getMinuteOfDay();
        boolean boolean32 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 74966 + "'", int7 == 74966);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 59 + "'", int11 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "292278993" + "'", str26, "292278993");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644785366862,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=49,SECOND=26,MILLISECOND=862,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-13T20:49:26.862Z" + "'", str30, "2022-02-13T20:49:26.862Z");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1249 + "'", int31 == 1249);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.DateTime dateTime8 = mutableDateTime1.toDateTime();
        int int9 = mutableDateTime1.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        int int13 = dateTimeField12.getMaximumValue();
        int int16 = dateTimeField12.getDifference((long) 10, (long) 'a');
        int int18 = dateTimeField12.getLeapAmount((-1L));
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.lang.String str21 = dateTimeField12.getAsText((long) 340, locale20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = dateTimeField12.getAsShortText((int) '4', locale23);
        org.joda.time.ReadablePartial readablePartial25 = null;
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = dateTimeField12.getAsText(readablePartial25, 292278993, locale27);
        int int29 = dateTimeField12.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add(100);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.weekyear();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(0L, chronology38, locale39, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket42.getZone();
        org.joda.time.Chronology chronology44 = dateTimeParserBucket42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.lang.String str47 = locale46.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology44, locale46, (java.lang.Integer) 2022);
        java.util.Locale locale50 = locale46.stripExtensions();
        java.lang.String str51 = property35.getAsText(locale50);
        java.util.Set<java.lang.Character> charSet52 = locale50.getExtensionKeys();
        java.lang.String str53 = dateTimeField12.getAsText(40, locale50);
        org.joda.time.ReadablePartial readablePartial54 = null;
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.util.Locale locale58 = java.util.Locale.getDefault(category56);
        java.lang.String str59 = dateTimeField12.getAsShortText(readablePartial54, 565, locale58);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((java.lang.Object) readablePartial54);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.millis();
        java.lang.String str62 = durationFieldType61.toString();
        java.lang.String str63 = durationFieldType61.getName();
        java.lang.String str64 = durationFieldType61.toString();
        java.lang.String str65 = durationFieldType61.getName();
        mutableDateTime60.add(durationFieldType61, 2056);
        mutableDateTime1.add(durationFieldType61, 46);
        int int70 = mutableDateTime1.getDayOfYear();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime1.year();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        boolean boolean76 = mutableDateTime74.isEqual(readableInstant75);
        int int77 = mutableDateTime74.getHourOfDay();
        mutableDateTime74.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType80.getField(chronology81);
        int int83 = dateTimeField82.getMaximumValue();
        mutableDateTime74.setRounding(dateTimeField82);
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        java.lang.String str87 = dateTimeField82.getAsShortText((int) (byte) 1, locale86);
        java.lang.String str88 = locale86.getDisplayScript();
        java.lang.String str89 = locale86.getISO3Country();
        java.util.Locale locale92 = new java.util.Locale("2022-02-11T09:40:18.848Z", "dayOfMonth");
        java.lang.String str93 = locale86.getDisplayVariant(locale92);
        boolean boolean94 = property72.equals((java.lang.Object) str93);
        org.joda.time.Interval interval95 = property72.toInterval();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "52" + "'", str24, "52");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "292278993" + "'", str28, "292278993");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2122" + "'", str51, "2122");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "40" + "'", str53, "40");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "565" + "'", str59, "565");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "millis" + "'", str62, "millis");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millis" + "'", str63, "millis");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "millis" + "'", str64, "millis");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "millis" + "'", str65, "millis");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 42 + "'", int70 == 42);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 59 + "'", int83 == 59);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals(locale92.toString(), "2022-02-11t09:40:18.848z_DAYOFMONTH");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6, (-292275054));
        long long9 = mutableDateTime1.getMillis();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.Chronology chronology11 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology11.millis();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.yearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644785366919L + "'", long9 == 1644785366919L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644785366919L + "'", long10 == 1644785366919L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        mutableDateTime1.addHours(59);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology6.getZone();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = mutableDateTime15.isEqual(readableInstant16);
        int int18 = mutableDateTime15.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime15.set(dateTimeFieldType19, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        int int23 = mutableDateTime15.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = mutableDateTime15.toDateTime();
        java.util.Locale locale25 = null;
        java.util.Calendar calendar26 = mutableDateTime15.toCalendar(locale25);
        mutableDateTime15.addDays((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        java.lang.String str32 = dateTimeField31.getName();
        org.joda.time.ReadablePartial readablePartial33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        boolean boolean37 = mutableDateTime35.isEqual(readableInstant36);
        mutableDateTime35.addHours(59);
        int int40 = mutableDateTime35.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int42 = mutableDateTime35.get(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime35.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.ReadablePartial readablePartial45 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        int int49 = dateTimeField48.getMaximumValue();
        int int52 = dateTimeField48.getDifference((long) 10, (long) 'a');
        int int54 = dateTimeField48.getMaximumValue((long) (byte) 1);
        java.lang.String str56 = dateTimeField48.getAsShortText((long) 5);
        org.joda.time.ReadablePartial readablePartial57 = null;
        org.joda.time.Chronology chronology59 = null;
        java.util.Locale locale60 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket(0L, chronology59, locale60, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone64 = dateTimeParserBucket63.getZone();
        org.joda.time.Chronology chronology65 = dateTimeParserBucket63.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.days();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.dayOfYear();
        org.joda.time.ReadablePartial readablePartial68 = null;
        int[] intArray74 = new int[] { (byte) 1, 237, 0, (short) 1, (short) -1 };
        int int75 = dateTimeField67.getMinimumValue(readablePartial68, intArray74);
        int int76 = dateTimeField48.getMaximumValue(readablePartial57, intArray74);
        int int77 = dateTimeField44.getMinimumValue(readablePartial45, intArray74);
        int int78 = dateTimeField31.getMaximumValue(readablePartial33, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField11.add(readablePartial12, 74546, intArray74, 10695);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 74546");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1644537697928,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=928,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfDay" + "'", str32, "millisOfDay");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 928 + "'", int40 == 928);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 59 + "'", int54 == 59);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1, 237, 0, 1, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 59 + "'", int76 == 59);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 86399999 + "'", int78 == 86399999);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        int int6 = dateTimeField2.getDifference((long) 10, (long) 'a');
        boolean boolean8 = dateTimeField2.isLeap((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar12 = mutableDateTime9.toCalendar(locale11);
        int int13 = dateTimeField2.getMaximumTextLength(locale11);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572966946,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=26,MILLISECOND=946,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean8 = mutableDateTime1.isSupported(dateTimeFieldType7);
        mutableDateTime1.setWeekyear(135);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime13 = mutableDateTime1.toDateTime(dateTimeZone12);
        int int14 = mutableDateTime1.getWeekyear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(34880240);
        mutableDateTime17.setMinuteOfDay(876);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDate(510, 274, 35331853);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 274 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 135 + "'", int14 == 135);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfCeiling();
        int int7 = property5.getLeapAmount();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology19, locale21, (java.lang.Integer) 2022);
        java.util.Locale locale25 = locale21.stripExtensions();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale locale28 = builder26.build();
        java.util.Locale.Builder builder30 = builder26.setVariant("2022");
        java.util.Locale locale31 = builder30.build();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = locale45.getDisplayScript();
        java.lang.String str48 = locale45.getISO3Country();
        java.lang.String str49 = locale31.getDisplayVariant(locale45);
        java.lang.String str51 = locale45.getExtension('a');
        java.lang.String str52 = locale25.getDisplayLanguage(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withLocale(locale25);
        org.joda.time.Chronology chronology54 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology55 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter2.withZoneUTC();
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) 6, (int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.hourOfDay();
        org.joda.time.Chronology chronology17 = chronology7.withUTC();
        org.joda.time.DurationField durationField18 = chronology17.halfdays();
        java.lang.String str19 = chronology17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 6L + "'", long12 == 6L);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime1.getZone();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        mutableDateTime12.addHours(59);
        org.joda.time.Chronology chronology17 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        java.util.Locale locale22 = null;
        java.lang.String str23 = property21.getAsText(locale22);
        java.util.Locale locale24 = null;
        int int25 = property21.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        mutableDateTime27.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = dateTimeField35.getMaximumValue();
        mutableDateTime27.setRounding(dateTimeField35);
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = dateTimeField35.getAsShortText((int) (byte) 1, locale39);
        java.lang.String str41 = property21.getAsShortText(locale39);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.lang.String str43 = locale42.getScript();
        java.lang.String str44 = locale39.getDisplayScript(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(0L, chronology17, locale39);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        int int48 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        mutableDateTime46.set(dateTimeFieldType49, 0);
        boolean boolean52 = dateTimeParserBucket45.restoreState((java.lang.Object) dateTimeFieldType49);
        java.lang.String str53 = dateTimeFieldType49.getName();
        mutableDateTime1.set(dateTimeFieldType49, 18);
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology57, locale58, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeParserBucket61.getZone();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket61.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.days();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType49.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField68 = chronology63.millisOfSecond();
        org.joda.time.DurationField durationField69 = chronology63.days();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology63);
        mutableDateTime70.addWeeks(0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "vendredi" + "'", str23, "vendredi");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 59 + "'", int36 == 59);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ven." + "'", str41, "ven.");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 11 + "'", int48 == 11);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "minuteOfDay" + "'", str53, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13, 34902);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType21.getField(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.yearOfEra();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar30 = mutableDateTime27.toCalendar(locale29);
        mutableDateTime27.setTime(0, (int) ' ', (int) (short) 1, (int) (short) 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime27.weekyear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        boolean boolean40 = mutableDateTime38.isEqual(readableInstant39);
        mutableDateTime38.addHours(59);
        org.joda.time.Chronology chronology43 = mutableDateTime38.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime38.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar45 = mutableDateTime44.toGregorianCalendar();
        int int46 = property36.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        boolean boolean50 = mutableDateTime48.isEqual(readableInstant49);
        int int51 = mutableDateTime48.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime48.set(dateTimeFieldType52, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        int int56 = mutableDateTime48.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = mutableDateTime48.toDateTime();
        java.util.Locale locale58 = null;
        java.util.Calendar calendar59 = mutableDateTime48.toCalendar(locale58);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime48.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = mutableDateTime48.toDateTimeISO();
        int int64 = property36.getDifference((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology67 = null;
        java.util.Locale locale68 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(0L, chronology67, locale68, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeParserBucket71.getZone();
        org.joda.time.Chronology chronology73 = dateTimeParserBucket71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.hourOfHalfday();
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.lang.String str76 = locale75.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology73, locale75, (java.lang.Integer) 2022);
        boolean boolean79 = property36.equals((java.lang.Object) chronology73);
        boolean boolean80 = dateTimeFieldType21.isSupported(chronology73);
        mutableDateTime11.set(dateTimeFieldType21, 35792);
        java.lang.String str83 = dateTimeFieldType21.getName();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572967021,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=27,MILLISECOND=21,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572967022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=27,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(gregorianCalendar45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644537697022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=37,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "secondOfDay" + "'", str83, "secondOfDay");
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket(0L, chronology1, locale2, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeParserBucket5.getZone();
        org.joda.time.Chronology chronology7 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.joda.time.DurationField durationField12 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.weekyear();
        int int17 = dateTimeField14.getDifference((long) 679, (long) (-72464));
        java.lang.String str19 = dateTimeField14.getAsText(1644572460000L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withPivotYear(362);
        int int10 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket(0L, chronology13, locale14, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone18 = dateTimeParserBucket17.getZone();
        org.joda.time.Chronology chronology19 = dateTimeParserBucket17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        java.util.Locale locale21 = java.util.Locale.FRENCH;
        java.lang.String str22 = locale21.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology19, locale21, (java.lang.Integer) 2022);
        java.util.Locale locale25 = locale21.stripExtensions();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale locale27 = builder26.build();
        java.util.Locale locale28 = builder26.build();
        java.util.Locale.Builder builder30 = builder26.setVariant("2022");
        java.util.Locale locale31 = builder30.build();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        boolean boolean35 = mutableDateTime33.isEqual(readableInstant34);
        int int36 = mutableDateTime33.getHourOfDay();
        mutableDateTime33.addYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        int int42 = dateTimeField41.getMaximumValue();
        mutableDateTime33.setRounding(dateTimeField41);
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = dateTimeField41.getAsShortText((int) (byte) 1, locale45);
        java.lang.String str47 = locale45.getDisplayScript();
        java.lang.String str48 = locale45.getISO3Country();
        java.lang.String str49 = locale31.getDisplayVariant(locale45);
        java.lang.String str51 = locale45.getExtension('a');
        java.lang.String str52 = locale25.getDisplayLanguage(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withLocale(locale25);
        org.joda.time.Chronology chronology54 = dateTimeFormatter2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = dateTimeFormatter2.parseLocalDateTime("2022-02-11T09:48:26.379+00:01:14.456");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 9 + "'", int36 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fran\347ais" + "'", str52, "fran\347ais");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(chronology54);
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addDays(22);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        mutableDateTime1.addSeconds(74415232);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(465);
        boolean boolean14 = mutableDateTime12.isAfter((-41907196800000L));
        mutableDateTime12.addMillis(35289);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35367088 + "'", int4 == 35367088);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        int int8 = mutableDateTime1.getEra();
        int int9 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfMonth();
        java.lang.String str12 = property11.getAsShortText();
        java.lang.String str13 = property11.getAsShortText();
        java.lang.String str14 = property11.getAsText();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 113 + "'", int9 == 113);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "11" + "'", str12, "11");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11" + "'", str13, "11");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "11" + "'", str14, "11");
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.lang.String str8 = languageRange1.getRange();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime10.set(dateTimeFieldType14, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        int int18 = mutableDateTime10.get(dateTimeFieldType17);
        int int19 = mutableDateTime10.getWeekOfWeekyear();
        org.joda.time.Instant instant20 = mutableDateTime10.toInstant();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime10.dayOfWeek();
        mutableDateTime10.addWeekyears(796);
        int int24 = mutableDateTime10.getYearOfEra();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime10.monthOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        boolean boolean29 = mutableDateTime27.isEqual(readableInstant28);
        int int30 = mutableDateTime27.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime27.set(dateTimeFieldType31, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        int int35 = mutableDateTime27.get(dateTimeFieldType34);
        org.joda.time.Instant instant36 = mutableDateTime27.toInstant();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeFormatter40.getZone();
        java.util.Locale locale42 = dateTimeFormatter40.getLocale();
        org.joda.time.Chronology chronology43 = dateTimeFormatter40.getChronolgy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        boolean boolean47 = mutableDateTime45.isEqual(readableInstant46);
        mutableDateTime45.setMinuteOfHour((int) (short) 1);
        int int50 = mutableDateTime45.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime45.weekyear();
        int int52 = mutableDateTime45.getDayOfYear();
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        mutableDateTime45.setZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter40.withZone(dateTimeZone54);
        mutableDateTime10.setZone(dateTimeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        boolean boolean59 = languageRange1.equals((java.lang.Object) dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "twn" + "'", str2, "twn");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "twn" + "'", str4, "twn");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "twn" + "'", str5, "twn");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "twn" + "'", str7, "twn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "twn" + "'", str8, "twn");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2818 + "'", int24 == 2818);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNull(dateTimeZone41);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 150 + "'", int50 == 150);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 42 + "'", int52 == 42);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.yearOfEra();
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar3 = mutableDateTime0.toCalendar(locale2);
        mutableDateTime0.addMinutes((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = mutableDateTime0.get(dateTimeFieldType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime0.setMillis(readableInstant8);
        java.lang.String str10 = mutableDateTime0.toString();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime0.add(readablePeriod11, 738);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.dayOfYear();
        java.lang.String str15 = mutableDateTime0.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(74423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 74423 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644572967178,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=49,SECOND=27,MILLISECOND=178,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:49:27.178Z" + "'", str10, "2022-02-11T09:49:27.178Z");
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:49:27.178Z" + "'", str15, "2022-02-11T09:49:27.178Z");
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addDays(0);
        int int7 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.weekyear();
        int int9 = mutableDateTime1.getMonthOfYear();
        long long10 = mutableDateTime1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.toMutableDateTime();
        int int12 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.add(1644612030747L);
        int int15 = mutableDateTime1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 191 + "'", int7 == 191);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572967191L + "'", long10 == 1644572967191L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 938 + "'", int15 == 938);
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        boolean boolean4 = mutableDateTime2.isEqual(readableInstant3);
        mutableDateTime2.addHours(59);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.minuteOfHour();
        int int8 = mutableDateTime2.getSecondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        mutableDateTime2.set(dateTimeFieldType9, (int) 'a');
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) (short) -1, chronology13, locale14, (java.lang.Integer) 9, 59);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.dayOfWeek();
        int int21 = property20.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property20.getFieldType();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.yearOfCentury();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        int int29 = property27.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType30.getField(chronology31);
        int int33 = dateTimeField32.getMaximumValue();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = dateTimeField32.getAsShortText(0L, locale35);
        int int38 = property27.getMaximumTextLength(locale35);
        dateTimeParserBucket17.saveField(dateTimeFieldType22, "2022-02-11T00:01:37.078Z", locale35);
        int int40 = mutableDateTime2.get(dateTimeFieldType22);
        mutableDateTime2.setMonthOfYear(12);
        org.joda.time.DateTimeZone dateTimeZone43 = mutableDateTime2.getZone();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 35133965, dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74967 + "'", int8 == 74967);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 7 + "'", int40 == 7);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket11 = new org.joda.time.format.DateTimeParserBucket(0L, chronology7, locale8, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeParserBucket11.getZone();
        org.joda.time.Chronology chronology13 = dateTimeParserBucket11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.days();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        long long18 = chronology13.add(readablePeriod15, 0L, 166);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withChronology(chronology13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter19.withOffsetParsed();
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = dateTimeFormatter20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter20.withDefaultYear(0);
        boolean boolean25 = dateTimeFormatter20.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = dateTimeFormatter26.print(readablePartial27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(552, 2067, 1309, 481, 378, 74946, 74502);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 481 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.lang.String str3 = locale2.getVariant();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale4 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket7 = new org.joda.time.format.DateTimeParserBucket(0L, chronology3, locale4, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket7.getZone();
        org.joda.time.Chronology chronology9 = dateTimeParserBucket7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale13, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeParserBucket16.getZone();
        org.joda.time.Chronology chronology18 = dateTimeParserBucket16.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology18.clockhourOfDay();
        org.joda.time.ReadablePartial readablePartial24 = null;
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology28, locale29, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone33 = dateTimeParserBucket32.getZone();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.lang.String str37 = locale36.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'u', chronology34, locale36, (java.lang.Integer) 2022);
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = locale40.getISO3Language();
        java.lang.String str42 = dateTimeField23.getAsText(readablePartial24, 842, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 2, chronology9, locale40, (java.lang.Integer) 237);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(chronology45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        boolean boolean48 = mutableDateTime46.isEqual(readableInstant47);
        int int49 = mutableDateTime46.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime46.set(dateTimeFieldType50, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime46.getZone();
        long long55 = dateTimeZone53.nextTransition((long) 59);
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0);
        dateTimeParserBucket44.setZone(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone53);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 97018, dateTimeZone53);
        org.joda.time.DateTime dateTime61 = mutableDateTime60.toDateTime();
        boolean boolean62 = mutableDateTime60.isAfterNow();
        int int63 = mutableDateTime60.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "842" + "'", str42, "842");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 59L + "'", long55 == 59L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("und");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = mutableDateTime10.isEqual(readableInstant11);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        boolean boolean15 = mutableDateTime10.isSupported(dateTimeFieldType14);
        java.lang.Object obj16 = mutableDateTime10.clone();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfEra();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.add((long) 439);
        int int23 = mutableDateTime22.getDayOfWeek();
        mutableDateTime22.setMillis((long) 34883740);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.era();
        boolean boolean27 = mutableDateTime10.equals((java.lang.Object) mutableDateTime22);
        mutableDateTime10.addWeekyears(981);
        boolean boolean30 = languageRange1.equals((java.lang.Object) 981);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "2022-02-11T09:49:27.263Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-11T09:49:27.263Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-11T09:49:27.263Z");
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int3 = dateTimeField2.getMaximumValue();
        long long5 = dateTimeField2.roundHalfCeiling((long) 1);
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.Chronology chronology9 = null;
        java.util.Locale locale10 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale10, (java.lang.Integer) 1, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeParserBucket13.getZone();
        org.joda.time.Chronology chronology15 = dateTimeParserBucket13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = mutableDateTime17.isEqual(readableInstant18);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime17.set(dateTimeFieldType21, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        boolean boolean31 = dateTimeField28.isLeap((long) (short) -1);
        java.lang.String str32 = dateTimeField28.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType34.getField(chronology35);
        int int37 = dateTimeField36.getMaximumValue();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.yearOfCentury();
        org.joda.time.DurationField durationField43 = property42.getDurationField();
        int int44 = property42.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        int int48 = dateTimeField47.getMaximumValue();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale50.getISO3Country();
        java.lang.String str52 = dateTimeField47.getAsShortText(0L, locale50);
        int int53 = property42.getMaximumTextLength(locale50);
        java.lang.String str54 = dateTimeField36.getAsShortText(0L, locale50);
        java.lang.String str55 = dateTimeField28.getAsText((-1L), locale50);
        dateTimeParserBucket13.saveField(dateTimeFieldType21, "2022-02-11T09:40:25.676Z", locale50);
        java.lang.String str57 = locale50.getLanguage();
        java.lang.String str58 = dateTimeField2.getAsShortText(readablePartial6, 34896966, locale50);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "secondOfMinute" + "'", str32, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 59 + "'", int37 == 59);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 59 + "'", int48 == 59);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "59" + "'", str55, "59");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fr" + "'", str57, "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "34896966" + "'", str58, "34896966");
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('x', "634");
        java.util.Locale.Builder builder7 = builder2.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        int int4 = mutableDateTime1.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        mutableDateTime1.set(dateTimeFieldType5, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        int int9 = mutableDateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = mutableDateTime1.toDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = mutableDateTime12.isEqual(readableInstant13);
        int int15 = mutableDateTime12.getHourOfDay();
        mutableDateTime12.addYears(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.hourOfDay();
        boolean boolean20 = property19.isLeap();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.getMutableDateTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }
}
